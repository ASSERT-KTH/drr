/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 18:55:33 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import org.apache.commons.math.linear.BigMatrix;
import org.apache.commons.math.linear.BigMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;


public class BigMatrixImpl_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][1];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray1[1] = bigDecimal0;
      bigDecimalArray1[2] = bigDecimal0;
      bigDecimalArray1[3] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal((double) 0L);
      MathContext mathContext0 = MathContext.DECIMAL64;
      bigDecimalArray1[4] = bigDecimal1;
      BigDecimal bigDecimal2 = BigMatrixImpl.ZERO;
      BigDecimal bigDecimal3 = BigMatrixImpl.ONE;
      bigDecimalArray1[5] = bigDecimal2;
      bigDecimalArray1[6] = bigDecimal0;
      bigDecimalArray1[7] = bigDecimal3;
      bigDecimalArray1[8] = bigDecimal0;
      mathContext0.getRoundingMode();
      bigDecimal2.precision();
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarMultiply(bigDecimal0);
      bigMatrixImpl0.getDataAsDoubleArray();
      BigMatrixImpl bigMatrixImpl2 = bigMatrixImpl0.add(bigMatrixImpl1);
      bigMatrixImpl1.add((BigMatrix) bigMatrixImpl2);
      bigMatrixImpl0.getDataAsDoubleArray();
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3400, 3400);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      Object object0 = new Object();
      bigMatrixImpl0.equals(object0);
      bigDecimalArray0[0] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.transpose();
      bigMatrixImpl2.hashCode();
      try { 
        bigMatrixImpl0.getRowMatrix(3400);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][8];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.toString();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getNorm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = new BigDecimal(1414);
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.isSingular();
      bigMatrixImpl0.solve(bigDecimalArray0);
      bigMatrixImpl0.setRoundingMode(1414);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      bigMatrix0.scalarMultiply(bigDecimal0);
      bigMatrixImpl0.luDecompose();
      assertEquals(1414, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.getDeterminant();
      try { 
        bigMatrixImpl0.getRow((-62));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getColumnMatrix(3369);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      int int0 = 0;
      bigMatrixImpl0.getRowAsDoubleArray(0);
      Random.setNextRandom(0);
      try { 
        bigMatrixImpl0.getSubMatrix(2110, 0, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getColumn((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 3390;
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getColumnAsDoubleArray(3390);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.multiply((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[][] stringArray0 = new String[1][2];
      String[] stringArray1 = new String[1];
      stringArray0[0] = stringArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl0);
      double[] doubleArray2 = new double[1];
      bigMatrixImpl1.operate(doubleArray2);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      bigMatrixImpl0.setRoundingMode(0);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getDataAsDoubleArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = new BigDecimal(1.0E-11);
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      BigMatrixImpl bigMatrixImpl2 = bigMatrixImpl0.add(bigMatrixImpl1);
      assertTrue(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertEquals(64, bigMatrixImpl1.getScale());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][2];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((BigDecimal[][]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][0];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[8];
      bigDecimalArray2[0] = bigDecimal0;
      bigDecimalArray2[1] = bigDecimal0;
      bigDecimalArray2[2] = bigDecimal0;
      bigDecimalArray2[3] = bigDecimal0;
      bigDecimalArray2[4] = bigDecimal0;
      bigDecimalArray2[5] = bigDecimal0;
      bigDecimalArray2[6] = bigDecimal0;
      bigDecimalArray2[7] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[1];
      bigDecimalArray3[0] = bigDecimal0;
      bigDecimalArray0[2] = bigDecimalArray3;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((-491), (-491));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][7];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[8];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(15.8287);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.TEN;
      bigDecimalArray1[4] = bigDecimal4;
      BigDecimal bigDecimal5 = new BigDecimal(15.8287);
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = new BigDecimal((-1));
      bigDecimalArray1[6] = bigDecimal6;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal7 = new BigDecimal(bigInteger0);
      bigDecimalArray1[7] = bigDecimal7;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[8];
      bigDecimalArray2[0] = bigDecimal4;
      bigDecimalArray2[1] = bigDecimal5;
      bigDecimalArray2[2] = bigDecimal2;
      bigDecimalArray2[3] = bigDecimal2;
      bigDecimalArray2[4] = bigDecimal4;
      bigDecimalArray2[5] = bigDecimal0;
      bigDecimalArray2[6] = bigDecimal3;
      bigDecimalArray2[7] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      boolean boolean0 = bigMatrixImpl0.isSingular();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(boolean0);
      
      try { 
        bigMatrixImpl0.getColumnAsDoubleArray((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-470.4579605044);
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 470.91193;
      doubleArray2[1] = 2235.5;
      doubleArray2[2] = (-1352.1752827055361);
      doubleArray2[3] = (-523.7);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 470.91193;
      doubleArray3[2] = (-523.7);
      doubleArray3[3] = 2235.5;
      doubleArray0[2] = doubleArray3;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      int int0 = (-3955);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[7][5];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      bigDecimalArray1[4] = bigDecimalArray0;
      bigDecimalArray1[5] = bigDecimalArray0;
      bigDecimalArray1[6] = bigDecimalArray0;
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, (-3955), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][1];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray1[1] = bigDecimal1;
      bigDecimalArray0[0] = bigDecimalArray1;
      int int0 = 424;
      bigDecimal1.setScale(424);
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      bigMatrixImpl0.lu = bigDecimalArray0;
      bigMatrixImpl0.isSquare();
      try { 
        bigMatrixImpl0.getRowMatrix((-2370));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[][] stringArray0 = new String[1][2];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[][] stringArray0 = new String[1][3];
      String[] stringArray1 = new String[6];
      stringArray1[0] = "w\"sa-|Es|N,a?!&8";
      stringArray1[1] = "org.apache.commons.math.linear.InvalidMatrixException";
      stringArray1[2] = "b;|qtn0g";
      stringArray1[3] = "";
      stringArray1[4] = "Incorrect row dimension";
      stringArray1[5] = "eE$7^DDL3l&G|epL";
      stringArray0[0] = stringArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[][] stringArray0 = new String[2][8];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "sh0%xf2Z=w^2K#\",";
      stringArray1[1] = "";
      stringArray1[2] = "[)Z8s86w*.D.MGUTr4-";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[5];
      stringArray2[0] = "sh0%xf2Z=w^2K#\",";
      stringArray2[1] = "";
      stringArray2[2] = "";
      stringArray2[3] = "";
      stringArray2[4] = "[)Z8s86w*.D.MGUTr4-";
      stringArray0[1] = stringArray2;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(17, 1);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      try { 
        bigMatrixImpl0.solve(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-2410.338458918744);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 224.5057;
      doubleArray0[1] = doubleArray2;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-971.442457571439);
      doubleArray1[3] = 338.4306992;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertFalse(bigMatrixImpl0.isSquare());
      
      bigMatrixImpl0.hashCode();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal(0L);
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = new BigDecimal(0L);
      bigDecimalArray0[3] = bigDecimal3;
      BigDecimal bigDecimal4 = new BigDecimal(0L);
      bigDecimalArray0[4] = bigDecimal4;
      BigDecimal bigDecimal5 = new BigDecimal((-1.0));
      bigDecimalArray0[5] = bigDecimal5;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][8];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray1[0] = bigDecimal0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal(689);
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = new BigDecimal(0);
      bigDecimalArray1[3] = bigDecimal3;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[3];
      bigDecimalArray2[0] = bigDecimal1;
      bigDecimalArray2[1] = bigDecimal3;
      bigDecimalArray2[2] = bigDecimal2;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[0];
      bigDecimalArray0[2] = bigDecimalArray3;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal(2112);
      bigDecimalArray1[2] = bigDecimal2;
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal3 = new BigDecimal((double) 2112, mathContext0);
      bigDecimalArray1[3] = bigDecimal3;
      MathContext mathContext1 = new MathContext(0);
      BigDecimal bigDecimal4 = new BigDecimal(2067L, mathContext1);
      bigDecimalArray1[4] = bigDecimal4;
      BigDecimal bigDecimal5 = BigMatrixImpl.ONE;
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = BigMatrixImpl.ZERO;
      bigDecimalArray1[6] = bigDecimal6;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.transpose();
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 2083;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(2083, (-682));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getEntry((-369), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(1.0);
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = new BigDecimal(0L);
      bigDecimalArray0[3] = bigDecimal3;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getSubMatrix(0, (-693), (-798), (-798));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.getRowDimension();
      bigMatrixImpl0.getRoundingMode();
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.scalarMultiply(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      Object object0 = new Object();
      bigMatrixImpl0.equals(object0);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      int int0 = (-951);
      BigDecimal bigDecimal0 = new BigDecimal((-951));
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigMatrixImpl.ONE;
      bigDecimalArray0[2] = bigDecimal2;
      bigDecimal1.movePointRight((-951));
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      bigDecimalArray0[3] = bigDecimal3;
      bigDecimal2.ulp();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.operate(bigDecimalArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-72.231202);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 458.39071;
      doubleArray0[4] = 444.049925199;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 2378;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2378, 2378);
      int int1 = 31;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1502.155976879);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2227.9);
      doubleArray1[3] = (-4310.27201);
      doubleArray1[4] = (-1818.84295);
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      bigMatrixImpl0.setScale((-2730));
      assertEquals((-2730), bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 3202;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 3202);
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][6];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is singular
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      int int0 = (-1);
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ZERO;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigMatrixImpl.ONE;
      BigDecimal bigDecimal4 = BigDecimal.ONE;
      bigDecimal2.add(bigDecimal4);
      bigDecimalArray0[3] = bigDecimal3;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.scalarMultiply(bigDecimal2);
      bigDecimal3.remainder(bigDecimal0);
      try { 
        bigMatrixImpl0.getEntry(1297, 1297);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix entry does not exist
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[][] stringArray0 = new String[7][8];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "Yhtqktb[&,";
      stringArray1[1] = "\"Uj~e_.mz2gi40y";
      stringArray1[2] = "";
      stringArray1[3] = "0x-Nezd.";
      stringArray1[4] = "";
      stringArray1[5] = "uK5OAkk<37m{n1CBBY";
      stringArray1[6] = "vector has wrong length";
      stringArray1[7] = "3;=~cOvvX^";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[8];
      stringArray2[0] = "\"Uj~e_.mz2gi40y";
      stringArray2[1] = "";
      stringArray2[2] = "Yhtqktb[&,";
      stringArray2[3] = "";
      stringArray2[4] = "";
      stringArray2[5] = "vector has wrong length";
      stringArray2[6] = "Yhtqktb[&,";
      stringArray2[7] = "0x-Nezd.";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[0];
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[3];
      stringArray4[0] = "\"Uj~e_.mz2gi40y";
      stringArray4[1] = "0x-Nezd.";
      stringArray4[2] = "vector has wrong length";
      stringArray0[3] = stringArray4;
      stringArray0[4] = stringArray4;
      String[] stringArray5 = new String[9];
      stringArray5[0] = "";
      stringArray5[1] = "uK5OAkk<37m{n1CBBY";
      stringArray5[2] = "Yhtqktb[&,";
      stringArray5[3] = "";
      stringArray5[4] = "";
      stringArray5[5] = "Yhtqktb[&,";
      stringArray5[6] = "";
      stringArray5[7] = "";
      stringArray5[8] = "3;=~cOvvX^";
      stringArray0[5] = stringArray5;
      String[] stringArray6 = new String[2];
      stringArray6[0] = "";
      stringArray6[1] = "";
      stringArray0[6] = stringArray6;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((BigDecimal[][]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal((-146L));
      bigDecimal1.subtract(bigDecimal0);
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigMatrixImpl.ONE;
      bigDecimalArray0[3] = bigDecimal3;
      bigDecimal3.longValue();
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.getDataRef();
      // Undeclared exception!
      try { 
        bigDecimal0.setScale((-35), (-35));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ZERO;
      bigDecimalArray0[1] = bigDecimal1;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ZERO;
      bigDecimalArray0[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.TEN;
      bigDecimalArray0[4] = bigDecimal4;
      BigDecimal bigDecimal5 = BigDecimal.ZERO;
      bigDecimalArray0[5] = bigDecimal5;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      int int0 = bigMatrixImpl0.getScale();
      assertEquals(64, int0);
      assertEquals(6, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3770, 1172);
      try { 
        bigMatrixImpl0.getEntryAsDouble((-546), 1172);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix entry does not exist
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][8];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(0.0);
      bigDecimalArray1[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getNorm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigMatrixImpl0.toString();
      BigDecimal bigDecimal1 = BigDecimal.valueOf(1150L, 0);
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[7][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[0];
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[5];
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      bigDecimalArray2[0] = bigDecimal2;
      bigDecimalArray2[1] = bigDecimal0;
      bigDecimalArray2[2] = bigDecimal1;
      bigDecimalArray2[3] = bigDecimal1;
      bigDecimalArray2[4] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[9];
      BigDecimal bigDecimal3 = new BigDecimal(bigInteger0);
      bigDecimalArray3[0] = bigDecimal3;
      bigDecimalArray3[1] = bigDecimal1;
      bigDecimalArray3[2] = bigDecimal1;
      bigDecimalArray3[3] = bigDecimal1;
      bigDecimalArray3[4] = bigDecimal2;
      bigDecimalArray3[5] = bigDecimal2;
      bigDecimalArray3[6] = bigDecimal1;
      bigDecimalArray3[7] = bigDecimal1;
      bigDecimalArray3[8] = bigDecimal2;
      bigDecimalArray0[2] = bigDecimalArray3;
      BigDecimal[] bigDecimalArray4 = new BigDecimal[0];
      bigDecimalArray0[3] = bigDecimalArray4;
      BigDecimal[] bigDecimalArray5 = new BigDecimal[0];
      bigDecimalArray0[4] = bigDecimalArray5;
      BigDecimal[] bigDecimalArray6 = new BigDecimal[0];
      bigDecimalArray0[5] = bigDecimalArray6;
      BigDecimal[] bigDecimalArray7 = new BigDecimal[1];
      bigDecimalArray7[0] = bigDecimal1;
      bigDecimalArray0[6] = bigDecimalArray7;
      bigMatrixImpl0.data = bigDecimalArray0;
      bigDecimal0.plus();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.scalarAdd(bigDecimal0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][1];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(0L);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((double) 0L);
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = new BigDecimal((double) 0L);
      MathContext mathContext0 = MathContext.DECIMAL64;
      bigDecimal1.abs(mathContext0);
      bigDecimalArray1[4] = bigDecimal4;
      BigDecimal bigDecimal5 = BigMatrixImpl.ZERO;
      bigDecimal5.plus(mathContext0);
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = BigDecimal.ONE;
      bigDecimalArray1[6] = bigDecimal6;
      BigDecimal bigDecimal7 = BigMatrixImpl.ONE;
      bigDecimalArray1[7] = bigDecimal7;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigDecimal6.toBigIntegerExact();
      BigDecimal bigDecimal8 = new BigDecimal(bigInteger0);
      bigDecimalArray1[8] = bigDecimal8;
      bigDecimal5.precision();
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.scalarMultiply(bigDecimal1);
      bigMatrixImpl0.isSquare();
      bigInteger0.max(bigInteger1);
      bigMatrixImpl0.getDataAsDoubleArray();
      bigMatrixImpl0.getDataAsDoubleArray();
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3390, 3390);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(3390);
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl1.getColumnAsDoubleArray(0);
      try { 
        bigMatrixImpl0.subtract(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[6][6];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[0];
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[8];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray2[0] = bigDecimal0;
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal1 = new BigDecimal(0.0, mathContext0);
      bigDecimalArray2[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((-1442.86));
      bigDecimalArray2[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigMatrixImpl.ZERO;
      bigDecimalArray2[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.ONE;
      bigDecimalArray2[4] = bigDecimal4;
      BigDecimal bigDecimal5 = new BigDecimal((-1L));
      bigDecimalArray2[5] = bigDecimal5;
      BigDecimal bigDecimal6 = BigDecimal.ZERO;
      bigDecimalArray2[6] = bigDecimal6;
      BigDecimal bigDecimal7 = BigMatrixImpl.ZERO;
      bigDecimalArray2[7] = bigDecimal7;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[0];
      bigDecimalArray0[2] = bigDecimalArray3;
      BigDecimal[] bigDecimalArray4 = new BigDecimal[9];
      bigDecimalArray4[0] = bigDecimal3;
      bigDecimalArray4[1] = bigDecimal1;
      bigDecimalArray4[2] = bigDecimal5;
      bigDecimalArray4[3] = bigDecimal1;
      bigDecimalArray4[4] = bigDecimal2;
      bigDecimalArray4[5] = bigDecimal3;
      bigDecimalArray4[6] = bigDecimal3;
      bigDecimalArray4[7] = bigDecimal5;
      bigDecimalArray4[8] = bigDecimal4;
      bigDecimalArray0[3] = bigDecimalArray4;
      BigDecimal[] bigDecimalArray5 = new BigDecimal[9];
      bigDecimalArray5[0] = bigDecimal5;
      bigDecimalArray5[1] = bigDecimal3;
      bigDecimalArray5[2] = bigDecimal1;
      bigDecimalArray5[3] = bigDecimal6;
      bigDecimalArray5[4] = bigDecimal7;
      bigDecimalArray5[5] = bigDecimal4;
      bigDecimalArray5[6] = bigDecimal7;
      bigDecimalArray5[7] = bigDecimal2;
      bigDecimalArray5[8] = bigDecimal2;
      bigDecimalArray0[4] = bigDecimalArray5;
      BigDecimal[] bigDecimalArray6 = new BigDecimal[8];
      bigDecimalArray6[0] = bigDecimal7;
      bigDecimalArray6[1] = bigDecimal4;
      bigDecimalArray6[2] = bigDecimal7;
      bigDecimalArray6[3] = bigDecimal4;
      bigDecimalArray6[4] = bigDecimal0;
      bigDecimalArray6[5] = bigDecimal2;
      bigDecimalArray6[6] = bigDecimal4;
      bigDecimalArray6[7] = bigDecimal1;
      bigDecimalArray0[5] = bigDecimalArray6;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.preMultiply((BigMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimal0.scaleByPowerOfTen(7);
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[8];
      bigDecimalArray2[0] = bigDecimal0;
      bigDecimalArray2[1] = bigDecimal0;
      bigDecimalArray2[2] = bigDecimal0;
      bigDecimalArray2[3] = bigDecimal0;
      bigDecimalArray2[4] = bigDecimal0;
      bigDecimalArray2[5] = bigDecimal0;
      bigDecimalArray2[6] = bigDecimal0;
      bigDecimalArray2[7] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[1];
      bigDecimalArray3[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray3);
      try { 
        bigMatrixImpl0.getRow(7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[][] stringArray0 = new String[0][2];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      double double0 = 1.0;
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      bigDecimalArray0[0] = bigDecimal0;
      int int0 = 3003;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3003, 1230);
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      int[] intArray0 = new int[8];
      intArray0[0] = 2711;
      intArray0[1] = 2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2711;
      doubleArray0[1] = (double) 2711;
      doubleArray0[2] = (double) 2711;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][3];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[][] stringArray0 = new String[1][2];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      try { 
        bigMatrixImpl0.getSubMatrix((-491), (-491), 64, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal1;
      BigDecimal bigDecimal2 = BigMatrixImpl.ZERO;
      bigDecimalArray0[1] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      bigDecimalArray0[2] = bigDecimal3;
      BigDecimal bigDecimal4 = BigMatrixImpl.ZERO;
      bigDecimalArray0[3] = bigDecimal4;
      BigDecimal bigDecimal5 = new BigDecimal((-1.0));
      bigDecimalArray0[4] = bigDecimal5;
      BigDecimal bigDecimal6 = BigDecimal.ONE;
      bigDecimal4.longValue();
      bigDecimalArray0[5] = bigDecimal6;
      BigDecimal bigDecimal7 = new BigDecimal(0L);
      bigDecimalArray0[6] = bigDecimal7;
      try { 
        bigMatrixImpl0.operate(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.solve(bigDecimalArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray0[2] = bigDecimal2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal bigDecimal3 = bigMatrixImpl0.getNorm();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals((byte)3, bigDecimal3.byteValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][1];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[4];
      BigDecimal bigDecimal0 = new BigDecimal((-3494L));
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal((-3494L));
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((-3619));
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = new BigDecimal((-427L));
      bigDecimalArray1[3] = bigDecimal3;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-3619);
      intArray0[1] = (-3619);
      intArray0[2] = (-3619);
      intArray0[3] = (-3619);
      intArray0[4] = (-3619);
      try { 
        bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][0];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[7];
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      bigDecimalArray1[0] = bigDecimal0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigMatrixImpl.ZERO;
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ZERO;
      bigDecimalArray1[3] = bigDecimal3;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigDecimal bigDecimal4 = new BigDecimal(bigInteger1);
      bigDecimalArray1[4] = bigDecimal4;
      BigDecimal bigDecimal5 = BigMatrixImpl.ONE;
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = BigDecimal.ONE;
      bigDecimalArray1[6] = bigDecimal6;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[0];
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[0];
      bigDecimalArray0[2] = bigDecimalArray3;
      bigDecimal6.shortValueExact();
      bigMatrixImpl0.data = bigDecimalArray0;
      bigMatrixImpl0.setRoundingMode(270);
      bigMatrixImpl0.getRowDimension();
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1;
      intArray0[1] = 270;
      try { 
        bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
      BigDecimal bigDecimal2 = BigMatrixImpl.ZERO;
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      BigDecimal bigDecimal4 = BigMatrixImpl.ZERO;
      BigDecimal bigDecimal5 = new BigDecimal((-1.0));
      BigDecimal bigDecimal6 = BigDecimal.ONE;
      bigDecimal4.longValue();
      BigDecimal bigDecimal7 = new BigDecimal(0L);
      try { 
        bigMatrixImpl0.getColumnAsDoubleArray(679);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][7];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[8];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(13.377640974646292);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.TEN;
      bigDecimalArray1[6] = bigDecimal4;
      BigDecimal bigDecimal5 = new BigDecimal(13.377640974646292);
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = new BigDecimal((-1));
      bigDecimalArray1[6] = bigDecimal6;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal7 = new BigDecimal(bigInteger0);
      bigDecimalArray1[7] = bigDecimal7;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[8];
      bigDecimalArray2[0] = bigDecimal4;
      bigDecimalArray2[1] = bigDecimal5;
      bigDecimalArray2[2] = bigDecimal2;
      bigDecimalArray2[3] = bigDecimal2;
      bigDecimalArray2[4] = bigDecimal4;
      bigDecimalArray2[5] = bigDecimal0;
      bigDecimalArray2[6] = bigDecimal3;
      bigDecimalArray2[7] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.isSingular();
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      // Undeclared exception!
      try { 
        bigMatrixImpl1.subtract(bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = new BigDecimal(1414);
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.isSingular();
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[5][6];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigMatrixImpl0.setRoundingMode(2005);
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      bigDecimalArray2[0] = bigDecimal0;
      bigDecimalArray1[3] = bigDecimalArray2;
      bigDecimalArray1[4] = bigDecimalArray0;
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 1414, 1414);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(1);
      bigDecimalArray0[1] = bigDecimal1;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = new BigDecimal((-2632.598));
      bigDecimalArray0[3] = bigDecimal3;
      BigDecimal bigDecimal4 = new BigDecimal(bigInteger0);
      bigDecimalArray0[4] = bigDecimal4;
      BigDecimal bigDecimal5 = new BigDecimal(1627);
      bigDecimalArray0[5] = bigDecimal5;
      BigDecimal bigDecimal6 = new BigDecimal((long) 1627);
      bigDecimalArray0[6] = bigDecimal6;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.toString();
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[8][6];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      bigDecimalArray1[4] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[5];
      bigDecimalArray2[0] = bigDecimal5;
      bigDecimalArray2[1] = bigDecimal2;
      BigDecimal bigDecimal7 = BigDecimal.TEN;
      bigDecimalArray2[2] = bigDecimal7;
      bigDecimalArray2[3] = bigDecimal6;
      bigDecimalArray2[4] = bigDecimal2;
      bigDecimalArray1[5] = bigDecimalArray2;
      bigDecimalArray1[6] = bigDecimalArray0;
      bigDecimalArray1[7] = bigDecimalArray0;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3390, 3390);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      bigDecimal0.floatValue();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      int int0 = 0;
      try { 
        bigMatrixImpl1.multiply(bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][7];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[8];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(15.8287);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.TEN;
      bigDecimalArray1[4] = bigDecimal4;
      BigDecimal bigDecimal5 = new BigDecimal(15.8287);
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = new BigDecimal((-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal7 = new BigDecimal(bigInteger0);
      bigDecimalArray1[7] = bigDecimal7;
      bigDecimalArray0[0] = bigDecimalArray1;
      bigDecimalArray0[1] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.isSingular();
      try { 
        bigMatrixImpl0.getColumn((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = new BigDecimal((long) 798);
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getPermutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3390, 3390);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(3390);
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      double[] doubleArray0 = bigMatrixImpl1.getRowAsDoubleArray(0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(2, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      
      BigMatrixImpl bigMatrixImpl2 = new BigMatrixImpl(3390, 3390);
      int int0 = bigMatrixImpl0.getScale();
      assertEquals(64, int0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      
      boolean boolean0 = bigMatrixImpl2.equals(bigMatrixImpl1);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(boolean0);
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      int int0 = 11;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(11, 11);
      try { 
        bigMatrixImpl1.getColumnMatrix(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3390, 3390);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimal0.toPlainString();
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(3390);
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl1.getColumnAsDoubleArray(0);
      try { 
        bigMatrixImpl1.add(bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2110, 2110);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][1];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(0L);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((double) 0L);
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = new BigDecimal((double) 0L);
      MathContext mathContext0 = MathContext.DECIMAL64;
      bigDecimal1.abs(mathContext0);
      bigDecimalArray1[4] = bigDecimal4;
      bigDecimal3.plus();
      BigDecimal bigDecimal5 = BigMatrixImpl.ZERO;
      bigDecimal5.plus(mathContext0);
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = BigDecimal.ONE;
      bigDecimalArray1[6] = bigDecimal6;
      BigDecimal bigDecimal7 = BigMatrixImpl.ONE;
      bigDecimalArray1[7] = bigDecimal7;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigDecimal6.toBigIntegerExact();
      BigDecimal bigDecimal8 = new BigDecimal(bigInteger0);
      bigDecimalArray1[8] = bigDecimal8;
      bigDecimal5.precision();
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarMultiply(bigDecimal1);
      bigMatrixImpl0.isSquare();
      bigInteger0.max(bigInteger1);
      bigMatrixImpl0.getDataAsDoubleArray();
      bigMatrixImpl0.getDataAsDoubleArray();
      bigMatrix0.getColumn(1);
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 2086;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1223, 2086);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.equals(bigMatrixImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(0.0);
      bigDecimalArray0[1] = bigDecimal1;
      bigDecimal0.movePointLeft((-352));
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2086, 2086);
      try { 
        bigMatrixImpl0.getRowAsDoubleArray(2086);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][7];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(15.8287);
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      BigDecimal bigDecimal3 = BigMatrixImpl.ONE;
      BigDecimal bigDecimal4 = BigDecimal.TEN;
      BigDecimal bigDecimal5 = new BigDecimal(15.8287);
      BigDecimal bigDecimal6 = new BigDecimal(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)11;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.add(bigInteger1);
      BigDecimal bigDecimal7 = new BigDecimal(bigInteger0);
      bigDecimalArray0[1] = bigDecimalArray0[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      boolean boolean0 = bigMatrixImpl0.isSingular();
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][7];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[8];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(13.377640974646292);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.TEN;
      bigDecimalArray1[6] = bigDecimal4;
      BigDecimal bigDecimal5 = new BigDecimal(13.377640974646292);
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = new BigDecimal((-1));
      bigDecimalArray1[6] = bigDecimal6;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal7 = new BigDecimal(bigInteger0);
      bigDecimalArray1[7] = bigDecimal7;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[8];
      bigDecimalArray2[0] = bigDecimal4;
      bigDecimalArray2[1] = bigDecimal5;
      bigDecimalArray2[2] = bigDecimal2;
      bigDecimalArray2[3] = bigDecimal2;
      bigDecimalArray2[4] = bigDecimal4;
      bigDecimalArray2[5] = bigDecimal0;
      bigDecimalArray2[6] = bigDecimal3;
      bigDecimalArray2[7] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.isSingular();
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray3 = new BigDecimal[9][7];
      bigDecimalArray3[0] = bigDecimalArray2;
      bigDecimalArray3[1] = bigDecimalArray2;
      bigDecimalArray3[2] = bigDecimalArray1;
      bigDecimalArray3[3] = bigDecimalArray1;
      bigDecimalArray3[4] = bigDecimalArray1;
      bigDecimalArray3[5] = bigDecimalArray1;
      bigDecimalArray3[6] = bigDecimalArray1;
      bigDecimalArray3[7] = bigDecimalArray2;
      bigDecimalArray3[8] = bigDecimalArray1;
      bigMatrixImpl0.data = bigDecimalArray3;
      try { 
        bigMatrixImpl1.subtract(bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][7];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[8];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(13.377640974646292);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray1[2] = bigDecimal2;
      bigDecimal1.toPlainString();
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.TEN;
      bigDecimalArray1[6] = bigDecimal4;
      BigDecimal bigDecimal5 = new BigDecimal(13.377640974646292);
      bigDecimalArray1[5] = bigDecimal5;
      int int0 = (-1);
      BigDecimal bigDecimal6 = new BigDecimal((-1));
      bigDecimalArray1[6] = bigDecimal6;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal7 = new BigDecimal(bigInteger0);
      bigDecimalArray1[7] = bigDecimal7;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[8];
      bigDecimalArray2[0] = bigDecimal4;
      bigDecimalArray2[1] = bigDecimal5;
      bigDecimalArray2[2] = bigDecimal2;
      bigDecimalArray2[3] = bigDecimal2;
      bigDecimalArray2[4] = bigDecimal4;
      bigDecimalArray2[5] = bigDecimal0;
      bigDecimalArray2[6] = bigDecimal3;
      bigDecimalArray2[7] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.isSingular();
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      // Undeclared exception!
      try { 
        bigMatrixImpl1.operate(bigDecimalArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 3390;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(3390);
      MathContext mathContext0 = new MathContext(3390);
      bigDecimal0.divide(bigDecimal1, mathContext0);
      bigMatrixImpl0.getScale();
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getSubMatrix(23, 1414, (-521), 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      int int0 = 1414;
      BigDecimal bigDecimal0 = new BigDecimal(1414);
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.isSingular();
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[5][6];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigMatrixImpl0.setRoundingMode(2005);
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(1414, roundingMode0);
      bigDecimal0.round(mathContext0);
      bigDecimalArray2[0] = bigDecimal0;
      bigMatrixImpl0.operate(bigDecimalArray0);
      bigDecimalArray1[3] = bigDecimalArray2;
      bigDecimalArray1[4] = bigDecimalArray0;
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 1414, 1414);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 3390;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3390, 3390);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[20];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(3390);
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(3390, 3390);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(3390, roundingMode0);
      bigDecimal0.divide(bigDecimal1, mathContext0);
      // Undeclared exception!
      try { 
        bigMatrixImpl1.multiply((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 2110;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2110, 2110);
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[8];
      // Undeclared exception!
      try { 
        bigMatrixImpl0.inverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3390, 3390);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(3390);
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl1.getRowAsDoubleArray(0);
      BigMatrixImpl bigMatrixImpl2 = new BigMatrixImpl(3390, 3390);
      bigMatrixImpl0.getScale();
      // Undeclared exception!
      bigMatrixImpl0.toString();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      int int0 = 1414;
      BigDecimal bigDecimal0 = new BigDecimal(1414);
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.isSingular();
      bigDecimal0.toString();
      bigMatrixImpl0.setRoundingMode(2005);
      BigDecimal[] bigDecimalArray1 = new BigDecimal[2];
      bigDecimal0.toBigIntegerExact();
      bigDecimalArray1[0] = bigDecimal0;
      bigMatrixImpl0.getLUMatrix();
      Random.setNextRandom(1414);
      bigMatrixImpl0.luDecompose();
      bigMatrixImpl0.getPermutation();
      BigMatrixImpl bigMatrixImpl1 = null;
      try {
        bigMatrixImpl1 = new BigMatrixImpl((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 3390;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3390, 3390);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(3390);
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl1.solve((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal(3206);
      bigDecimalArray0[2] = bigDecimal2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[8][5];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      bigDecimalArray1[4] = bigDecimalArray0;
      bigDecimalArray1[5] = bigDecimalArray0;
      bigDecimalArray1[6] = bigDecimalArray0;
      bigDecimalArray1[7] = bigDecimalArray0;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      BigMatrix bigMatrix0 = bigMatrixImpl0.preMultiply((BigMatrix) bigMatrixImpl1);
      try { 
        bigMatrixImpl0.solve(bigMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][1];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(0L);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((double) 0L);
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = new BigDecimal((double) 0L);
      MathContext mathContext0 = MathContext.DECIMAL64;
      bigDecimal1.abs(mathContext0);
      bigDecimalArray1[4] = bigDecimal4;
      BigDecimal bigDecimal5 = BigMatrixImpl.ZERO;
      bigDecimal5.plus(mathContext0);
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = BigDecimal.ONE;
      bigDecimalArray1[6] = bigDecimal6;
      BigDecimal bigDecimal7 = BigMatrixImpl.ONE;
      bigDecimalArray1[7] = bigDecimal7;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigDecimal6.toBigIntegerExact();
      BigDecimal bigDecimal8 = new BigDecimal(bigInteger0);
      bigDecimalArray1[8] = bigDecimal6;
      bigDecimal5.precision();
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarMultiply(bigDecimal1);
      bigMatrixImpl1.setRoundingMode(11);
      assertFalse(bigMatrixImpl1.isSquare());
      
      bigMatrixImpl0.isSquare();
      bigInteger0.max(bigInteger1);
      bigMatrixImpl0.getDataAsDoubleArray();
      BigMatrixImpl bigMatrixImpl2 = bigMatrixImpl0.add(bigMatrixImpl1);
      assertEquals(64, bigMatrixImpl1.getScale());
      
      double[][] doubleArray0 = bigMatrixImpl0.getDataAsDoubleArray();
      assertEquals(9, doubleArray0.length);
      
      bigMatrixImpl0.preMultiply(bigDecimalArray1);
      bigMatrixImpl0.getColumnDimension();
      assertTrue(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      int int0 = 1414;
      BigDecimal bigDecimal0 = new BigDecimal(1414);
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.isSingular();
      BigDecimal bigDecimal1 = bigDecimal0.stripTrailingZeros();
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[5][6];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigMatrixImpl0.setRoundingMode(1989);
      bigDecimalArray1[1] = bigDecimalArray0;
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal1);
      bigDecimal0.max(bigDecimal0);
      bigDecimalArray1[2] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      bigDecimalArray2[0] = bigDecimal0;
      bigDecimalArray1[3] = bigDecimalArray2;
      bigDecimalArray1[4] = bigDecimalArray0;
      bigMatrix0.subtract((BigMatrix) bigMatrixImpl0);
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 1414, 1414);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      int int0 = 1414;
      BigDecimal bigDecimal0 = new BigDecimal(1414);
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.isSingular();
      bigMatrixImpl0.solve(bigDecimalArray0);
      BigDecimal bigDecimal1 = bigDecimal0.stripTrailingZeros();
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[5][6];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigMatrixImpl0.setRoundingMode(1989);
      bigDecimalArray1[1] = bigDecimalArray0;
      bigMatrixImpl0.scalarAdd(bigDecimal1);
      bigDecimalArray1[2] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      bigDecimalArray2[0] = bigDecimal0;
      bigDecimalArray1[3] = bigDecimalArray2;
      bigDecimalArray1[4] = bigDecimalArray0;
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 1414, 1414);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      int int0 = (-14);
      bigDecimal0.scaleByPowerOfTen((-14));
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[8];
      bigDecimalArray2[0] = bigDecimal0;
      bigDecimalArray2[1] = bigDecimal0;
      bigDecimalArray2[3] = bigDecimal0;
      bigDecimalArray2[4] = bigDecimal0;
      bigDecimalArray2[5] = bigDecimal0;
      bigDecimalArray2[6] = bigDecimal0;
      bigDecimalArray2[7] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[1];
      bigDecimalArray3[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray3);
      bigMatrixImpl0.getDeterminant();
      bigMatrixImpl0.data = bigDecimalArray0;
      Random.setNextRandom(0);
      try { 
        bigMatrixImpl0.getRow((-14));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 3390;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3390, 3390);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      Object object0 = new Object();
      bigMatrixImpl0.equals(object0);
      try { 
        bigMatrixImpl0.getSubMatrix(3390, 3390, 3390, 2775);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      int int0 = (-14);
      bigDecimal0.scaleByPowerOfTen((-14));
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[8];
      bigDecimalArray2[0] = bigDecimal0;
      bigDecimalArray2[1] = bigDecimal0;
      bigDecimalArray2[3] = bigDecimal0;
      bigDecimalArray2[4] = bigDecimal0;
      bigDecimalArray2[5] = bigDecimal0;
      bigDecimalArray2[6] = bigDecimal0;
      bigDecimalArray2[7] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[1];
      bigDecimalArray3[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray3);
      bigMatrixImpl0.getTrace();
      bigMatrixImpl0.data = bigDecimalArray0;
      try { 
        bigMatrixImpl0.getRow((-14));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      int int0 = 1414;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.isSingular();
      try { 
        bigMatrixImpl0.solve(bigDecimalArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Matrix is singular.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1575.78422);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1645.305623317865;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1864.627564961718;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[6][7];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[7];
      BigDecimal bigDecimal0 = new BigDecimal(2066L);
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(1864.627564961718);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigMatrixImpl.ZERO;
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.ONE;
      bigDecimalArray1[4] = bigDecimal4;
      BigDecimal bigDecimal5 = BigMatrixImpl.ONE;
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = BigDecimal.valueOf(318L);
      bigDecimalArray1[6] = bigDecimal6;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[0];
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[2];
      bigDecimalArray3[0] = bigDecimal6;
      bigDecimalArray3[1] = bigDecimal3;
      bigDecimalArray0[2] = bigDecimalArray3;
      BigDecimal[] bigDecimalArray4 = new BigDecimal[0];
      bigDecimalArray0[3] = bigDecimalArray4;
      BigDecimal[] bigDecimalArray5 = new BigDecimal[6];
      bigDecimalArray5[0] = bigDecimal0;
      bigDecimalArray5[1] = bigDecimal4;
      bigDecimalArray5[2] = bigDecimal5;
      bigDecimalArray5[3] = bigDecimal5;
      bigDecimalArray5[4] = bigDecimal3;
      bigDecimalArray5[5] = bigDecimal2;
      bigDecimalArray0[4] = bigDecimalArray5;
      BigDecimal[] bigDecimalArray6 = new BigDecimal[4];
      bigDecimalArray6[0] = bigDecimal1;
      bigDecimalArray6[1] = bigDecimal1;
      bigDecimalArray6[2] = bigDecimal2;
      bigDecimalArray6[3] = bigDecimal6;
      bigDecimalArray0[5] = bigDecimalArray6;
      bigMatrixImpl0.data = bigDecimalArray0;
      bigMatrixImpl0.equals(doubleArray1);
      try { 
        bigMatrixImpl0.getSubMatrix(714, 714, 0, 714);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2110, 2110);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(180L);
      bigDecimalArray0[1] = bigDecimal1;
      bigMatrixImpl0.getRowMatrix(6);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl1.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[9][8];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(0.0);
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.copy();
      BigDecimal[] bigDecimalArray1 = new BigDecimal[2];
      bigDecimalArray1[0] = bigDecimal1;
      bigMatrixImpl0.getRow(2);
      bigDecimalArray1[1] = bigDecimal0;
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2110, 2110);
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[7][6];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[0];
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[6];
      bigDecimalArray2[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal((-709.33011359766));
      bigDecimalArray2[1] = bigDecimal1;
      bigDecimalArray2[2] = bigDecimal0;
      bigDecimalArray2[3] = bigDecimal0;
      bigDecimalArray2[4] = bigDecimal0;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      bigDecimalArray2[5] = bigDecimal2;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[5];
      BigDecimal bigDecimal3 = BigMatrixImpl.ONE;
      bigDecimalArray3[0] = bigDecimal3;
      bigDecimalArray3[1] = bigDecimal0;
      bigDecimalArray3[2] = bigDecimal0;
      bigDecimalArray3[3] = bigDecimal0;
      BigDecimal bigDecimal4 = BigMatrixImpl.ONE;
      bigDecimalArray3[4] = bigDecimal4;
      bigDecimalArray0[2] = bigDecimalArray3;
      BigDecimal[] bigDecimalArray4 = new BigDecimal[2];
      bigDecimalArray4[0] = bigDecimal2;
      bigDecimalArray4[1] = bigDecimal4;
      bigDecimalArray0[3] = bigDecimalArray4;
      BigDecimal[] bigDecimalArray5 = new BigDecimal[1];
      bigDecimalArray5[0] = bigDecimal2;
      bigDecimalArray0[4] = bigDecimalArray5;
      BigDecimal[] bigDecimalArray6 = new BigDecimal[2];
      bigDecimalArray6[0] = bigDecimal2;
      BigDecimal bigDecimal5 = BigMatrixImpl.ONE;
      bigDecimalArray6[1] = bigDecimal5;
      bigDecimalArray0[5] = bigDecimalArray6;
      BigDecimal[] bigDecimalArray7 = new BigDecimal[5];
      bigDecimalArray7[0] = bigDecimal2;
      bigDecimalArray7[1] = bigDecimal3;
      bigDecimalArray7[2] = bigDecimal3;
      bigDecimalArray7[3] = bigDecimal1;
      bigDecimalArray7[4] = bigDecimal5;
      bigDecimalArray0[6] = bigDecimalArray7;
      bigMatrixImpl0.lu = bigDecimalArray0;
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getColumnMatrix(866);
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(2110, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3390, 3390);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(3390);
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl1.getRowAsDoubleArray(0);
      BigMatrixImpl bigMatrixImpl2 = new BigMatrixImpl(3390, 3390);
      bigMatrixImpl0.getScale();
      bigMatrixImpl0.getSubMatrix(64, 746, 64, 2007);
      bigMatrixImpl1.getRow(0);
      try { 
        bigMatrixImpl1.getSubMatrix(746, (-1331), 11, (-561));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][7];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[8];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(13.377640974646292);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.TEN;
      bigDecimalArray1[6] = bigDecimal4;
      BigDecimal bigDecimal5 = new BigDecimal(13.377640974646292);
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = new BigDecimal((-1));
      bigDecimalArray1[6] = bigDecimal6;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal7 = new BigDecimal(bigInteger0);
      bigDecimalArray1[7] = bigDecimal7;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[8];
      bigDecimal3.movePointRight(4);
      bigDecimalArray2[0] = bigDecimal4;
      bigDecimalArray2[1] = bigDecimal5;
      bigDecimalArray2[2] = bigDecimal2;
      bigDecimalArray2[3] = bigDecimal2;
      bigDecimalArray2[4] = bigDecimal4;
      bigDecimalArray2[5] = bigDecimal0;
      bigDecimalArray2[6] = bigDecimal3;
      bigDecimalArray2[7] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.isSingular();
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 531, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Random.setNextRandom(2094);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 2094;
      doubleArray1[1] = (double) 2094;
      doubleArray1[0] = (double) 2094;
      doubleArray1[3] = (double) 2094;
      doubleArray1[4] = (double) 2094;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(doubleArray0);
      bigMatrixImpl1.setScale((-460));
      int[] intArray0 = new int[0];
      try { 
        bigMatrixImpl1.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // selected row and column index arrays must be non-empty
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[7];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      int int0 = (-43);
      bigDecimal0.scaleByPowerOfTen((-43));
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[8];
      bigDecimalArray2[0] = bigDecimal0;
      bigDecimalArray2[1] = bigDecimal0;
      bigDecimalArray2[3] = bigDecimal0;
      bigDecimal0.longValue();
      bigDecimalArray2[4] = bigDecimal0;
      bigDecimalArray2[5] = bigDecimal0;
      bigDecimalArray2[6] = bigDecimal0;
      bigDecimalArray2[7] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[1];
      bigDecimalArray3[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray3);
      bigMatrixImpl0.getDeterminant();
      bigMatrixImpl0.data = bigDecimalArray0;
      try { 
        bigMatrixImpl0.getRow((-43));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3390, 3390);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(3390);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      MathContext mathContext0 = new MathContext(2103, roundingMode0);
      bigDecimal1.negate(mathContext0);
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(3390, 3390);
      bigMatrixImpl0.getScale();
      // Undeclared exception!
      try { 
        bigMatrixImpl1.equals(bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[7];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      int int0 = (-43);
      bigDecimal0.scaleByPowerOfTen((-43));
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[8];
      bigDecimalArray2[0] = bigDecimal0;
      bigDecimalArray2[1] = bigDecimal0;
      bigDecimalArray2[3] = bigDecimal0;
      bigDecimal0.longValue();
      bigDecimalArray2[4] = bigDecimal0;
      bigDecimalArray2[5] = bigDecimal0;
      bigDecimalArray2[6] = bigDecimal0;
      bigDecimalArray2[7] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[1];
      bigDecimalArray3[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray3);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray2);
      try { 
        bigMatrixImpl0.add((BigMatrix) bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][7];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[8];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(15.8287);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.TEN;
      bigDecimalArray1[4] = bigDecimal4;
      BigDecimal bigDecimal5 = new BigDecimal(15.8287);
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = new BigDecimal((-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal7 = new BigDecimal(bigInteger0);
      bigDecimalArray1[7] = bigDecimal7;
      bigDecimalArray0[0] = bigDecimalArray1;
      bigDecimalArray0[1] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray2 = new BigDecimal[8][3];
      bigDecimalArray2[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[4];
      bigDecimalArray3[0] = bigDecimal2;
      bigDecimalArray3[1] = bigDecimal5;
      bigDecimalArray3[2] = bigDecimal4;
      bigDecimalArray3[3] = bigDecimal6;
      bigDecimalArray2[1] = bigDecimalArray3;
      bigDecimalArray2[2] = bigDecimalArray1;
      bigDecimalArray2[3] = bigDecimalArray1;
      bigDecimalArray2[4] = bigDecimalArray1;
      bigDecimalArray2[5] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray4 = new BigDecimal[5];
      bigDecimalArray4[0] = bigDecimal7;
      bigDecimalArray4[1] = bigDecimal2;
      bigDecimalArray4[2] = bigDecimal5;
      BigDecimal bigDecimal8 = BigDecimal.ZERO;
      bigDecimalArray4[3] = bigDecimal8;
      bigDecimalArray4[4] = bigDecimal4;
      bigDecimalArray2[6] = bigDecimalArray4;
      bigDecimalArray2[7] = bigDecimalArray1;
      bigMatrixImpl0.data = bigDecimalArray2;
      bigMatrixImpl0.isSingular();
      try { 
        bigMatrixImpl0.getColumn((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1195.0532395866057;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1195.0532395866057;
      doubleArray0[1] = doubleArray2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.copy();
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl1);
      BigDecimal bigDecimal0 = new BigDecimal(2418);
      bigMatrixImpl1.scalarMultiply(bigDecimal0);
      double[] doubleArray3 = new double[1];
      bigMatrixImpl1.equals(bigMatrixImpl0);
      doubleArray3[0] = 1195.0532395866057;
      bigMatrixImpl2.operate(doubleArray3);
      try { 
        bigMatrixImpl0.solve((BigMatrix) bigMatrixImpl2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3390, 3390);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(3390);
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      int int0 = 0;
      bigMatrixImpl0.getScale();
      int int1 = 746;
      bigMatrixImpl0.getSubMatrix(64, 746, 64, 2110);
      Random.setNextRandom(64);
      Random.setNextRandom(748);
      try { 
        bigMatrixImpl1.getSubMatrix(0, 0, 0, 4735);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][4];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[6];
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(1971.0);
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigMatrixImpl.ONE;
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.ONE;
      bigDecimalArray1[4] = bigDecimal4;
      BigDecimal bigDecimal5 = BigDecimal.ZERO;
      bigDecimalArray1[5] = bigDecimal5;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[6];
      bigDecimalArray2[0] = bigDecimal3;
      bigDecimalArray2[1] = bigDecimal2;
      bigDecimalArray2[2] = bigDecimal0;
      bigDecimalArray2[3] = bigDecimal1;
      bigDecimalArray2[4] = bigDecimal4;
      bigDecimalArray2[5] = bigDecimal3;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray3 = new BigDecimal[4][5];
      bigDecimalArray3[0] = bigDecimalArray2;
      bigDecimalArray3[1] = bigDecimalArray2;
      bigDecimalArray3[2] = bigDecimalArray2;
      bigDecimalArray3[3] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray3, true);
      boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][1];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[3];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigMatrixImpl.ONE;
      bigDecimalArray1[2] = bigDecimal2;
      bigDecimal1.min(bigDecimal0);
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(doubleArray0);
      bigMatrixImpl1.equals(bigMatrixImpl0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.add((BigMatrix) bigMatrixImpl1);
      BigMatrixImpl bigMatrixImpl2 = bigMatrixImpl1.add(bigMatrixImpl0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      bigMatrixImpl1.permutation = intArray0;
      bigMatrixImpl2.isSingular();
      try { 
        bigMatrixImpl0.multiply(bigMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      int int0 = (-801);
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int1 = 12;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(12, 12);
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[9];
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray1[1] = bigDecimal0;
      bigDecimalArray1[2] = bigDecimal0;
      bigDecimalArray1[3] = bigDecimal0;
      bigDecimalArray1[4] = bigDecimal0;
      bigDecimalArray1[5] = bigDecimal0;
      bigDecimalArray1[6] = bigDecimal0;
      bigDecimalArray1[7] = bigDecimal0;
      bigDecimalArray1[8] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[3];
      bigDecimalArray2[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ZERO;
      try { 
        bigMatrixImpl0.getSubMatrix(11, 11, (-801), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Random.setNextRandom(2028);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      BigDecimal bigDecimal2 = new BigDecimal(charArray0);
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = new BigDecimal(charArray0);
      bigDecimalArray0[3] = bigDecimal3;
      BigDecimal bigDecimal4 = new BigDecimal(1636L);
      bigDecimalArray0[4] = bigDecimal4;
      BigDecimal bigDecimal5 = new BigDecimal(charArray0);
      bigDecimalArray0[5] = bigDecimal5;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[1][2];
      BigDecimal[] bigDecimalArray2 = new BigDecimal[5];
      bigDecimalArray2[0] = bigDecimal2;
      bigDecimalArray2[1] = bigDecimal2;
      bigDecimalArray2[2] = bigDecimal1;
      bigDecimalArray2[3] = bigDecimal5;
      bigDecimalArray2[4] = bigDecimal2;
      bigDecimalArray1[0] = bigDecimalArray2;
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][8];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      bigMatrixImpl0.equals((Object) null);
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 143, 143);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must be initialized to perfom this method
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }
}
