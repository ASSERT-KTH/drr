/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 19:48:15 GMT 2019
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class Complex_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.acos();
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.asin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.add(1.5707963267948966);
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.tan();
      assertEquals(36.071404402473284, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.ONE.exp();
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.atan();
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.subtract((-397.0094577182585));
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex0);
      assertTrue(boolean0);
      
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.tanh();
      complex2.hashCode();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.sinh();
      assertSame(complex4, complex2);
      assertSame(complex3, complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.divide(6.686758417135634E116);
      Complex complex2 = Complex.valueOf(6.686758417135634E116);
      Complex.valueOf(6.686758417135634E116, 6.686758417135634E116);
      Complex complex3 = complex1.multiply(56);
      List<Complex> list0 = complex3.nthRoot(56);
      assertEquals(56, list0.size());
      assertFalse(list0.contains(complex0));
      
      Complex complex4 = complex3.cosh();
      assertEquals(8.374760460388873E-116, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex2.multiply(6.686758417135634E116);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      assertEquals(0.8813735870195428, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.pow((-173.414));
      assertEquals((-0.6054329073809608), complex2.getReal(), 0.01);
      assertEquals((-0.7958963466810468), complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.sinh();
      assertEquals(1.1752011936438014, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-2274.804));
      Complex complex1 = complex0.sqrt1z();
      assertEquals(2274.803780200833, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.acos();
      assertEquals((-0.8813735870195429), complex2.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      
      Complex complex3 = (Complex)complex0.readResolve();
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt1z();
      assertEquals(1.4142135623730951, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      complex0.add(complex0);
      complex0.isNaN();
      complex0.multiply((-0.1861394044781192));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.1719443712336026E278);
      Complex complex1 = complex0.asin();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(4.1719443712336026E278, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.divide((-477.0));
      complex2.I.hashCode();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.add(1212.64449);
      assertEquals(1213.4298881633974, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(3791.186976254, 0.0);
      Complex complex2 = complex0.pow(complex1);
      assertSame(complex2, complex0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(3791.186976254, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-2245.954003994537));
      Complex complex1 = complex0.acos();
      assertEquals(3.141592653589793, complex1.getReal(), 0.01);
      assertEquals((-8.410032787011492), complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.cosh();
      double double0 = complex2.getReal();
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt();
      assertTrue(complex1.isNaN());
      
      Complex complex2 = complex0.multiply(1389);
      Complex complex3 = complex2.subtract((-20.0));
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.getArgument();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.I.createComplex(0.0, 0.0);
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.pow(108.598217);
      assertEquals(0.590048782058067, complex4.getReal(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals((-0.8073675958271993), complex4.getImaginary(), 0.01);
      
      complex0.getArgument();
      Complex complex5 = complex2.ZERO.add(108.598217);
      assertEquals(108.598217, complex5.getReal(), 0.01);
      
      Complex complex6 = complex2.I.tanh();
      assertEquals(1.557407724654902, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex2.multiply(1);
      Complex complex8 = complex1.multiply(complex2);
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertTrue(complex8.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      double double0 = complex1.I.abs();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.divide(complex2);
      assertSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.NaN.tanh();
      complex0.NaN.sin();
      Complex complex3 = complex0.cos();
      complex3.abs();
      Complex complex4 = complex1.pow(complex3);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex.valueOf((-1978.3));
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      complex2.createComplex(0.0, (-1978.3));
      assertNotSame(complex2, complex4);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.add(0.21922963857650757);
      Complex complex3 = complex1.ONE.divide(complex0);
      assertSame(complex1, complex2);
      assertEquals((-1.0), complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex4 = (Complex)complex0.readResolve();
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.divide(152.69);
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.ONE.atan();
      Complex complex5 = complex4.NaN.divide(152.69);
      Complex complex6 = complex1.I.exp();
      Complex complex7 = complex1.NaN.negate();
      Complex complex8 = complex0.tan();
      assertEquals(1.557407724654902, complex8.getReal(), 0.01);
      
      complex1.tan();
      boolean boolean0 = complex6.equals(complex5);
      assertTrue(complex0.equals((Object)complex2));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex4.getReal(), 0.01);
      assertSame(complex5, complex7);
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1457.39868, 1457.39868);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.divide(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      
      Complex complex3 = complex0.subtract(complex1);
      double double0 = complex3.getReal();
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      Complex complex4 = complex1.reciprocal();
      assertEquals(0.0, complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(1868.768, 2.144047260284424);
      String string0 = complex0.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.pow(complex1);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.INF.multiply(0.0);
      double double0 = complex0.abs();
      assertEquals(1868.7692299378903, double0, 0.01);
      
      Complex complex4 = complex3.I.cosh();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.reciprocal();
      assertEquals((-6.139358649714422E-7), complex5.getImaginary(), 0.01);
      assertEquals(5.351111982292563E-4, complex5.getReal(), 0.01);
      
      Complex complex6 = complex3.conjugate();
      assertTrue(complex6.isInfinite());
      
      double double1 = complex0.getReal();
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.ONE.createComplex(1909.26296434151, 1909.26296434151);
      assertEquals(1909.26296434151, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.reciprocal();
      assertSame(complex4, complex2);
      
      Complex complex5 = complex0.sqrt1z();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.0, complex5.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-4321.79676));
      try { 
        complex0.nthRoot((-1190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,190
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1722.6);
      complex0.ZERO.multiply(complex1);
      Complex complex2 = complex0.add((-701.7741327513089));
      complex2.ZERO.conjugate();
      Complex complex3 = complex0.multiply((-2695));
      try { 
        complex3.nthRoot((-2695));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,695
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.786663982218041E-8));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.cosh();
      assertEquals(1.5960680219775756, complex3.getReal(), 0.01);
      
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.cosh();
      List<Complex> list0 = complex6.ZERO.nthRoot(1);
      assertTrue(list0.contains(complex4));
      
      complex5.hashCode();
      Complex complex7 = complex2.add(complex1);
      Complex complex8 = complex2.cos();
      assertEquals(8.659560562354932E-17, complex8.getReal(), 0.01);
      assertEquals(0.9999999999999999, complex8.getImaginary(), 0.01);
      
      List<Complex> list1 = complex4.nthRoot(3183);
      assertEquals(3183, list1.size());
      
      Complex complex9 = complex6.multiply(complex1);
      assertSame(complex9, complex7);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      complex4.getArgument();
      assertFalse(complex4.isInfinite());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      boolean boolean0 = complex1.isInfinite();
      assertFalse(boolean0);
      
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.pow(2079.57727716432);
      Complex complex5 = complex3.tan();
      complex5.getArgument();
      complex5.hashCode();
      complex5.readResolve();
      assertSame(complex5, complex4);
      
      complex0.isInfinite();
      Complex complex6 = Complex.valueOf(2079.57727716432);
      assertEquals(2079.57727716432, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(3264.01912);
      Complex complex1 = complex0.NaN.pow((-1748.859787));
      Complex complex2 = complex1.INF.subtract(304.83);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex1.INF.createComplex(2.0, 2040.47363776);
      List<Complex> list0 = complex4.ZERO.nthRoot(336);
      assertFalse(list0.contains(complex1));
      assertEquals(336, list0.size());
      
      complex2.NaN.multiply(complex3);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex0.add((-20.0));
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex7.I.cosh();
      assertTrue(complex2.isInfinite());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex0.add(complex5);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(3264.559422305868, complex9.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertSame(complex1, complex7);
      assertFalse(complex9.isInfinite());
      assertTrue(complex5.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.INF.exp();
      assertTrue(complex2.isNaN());
      assertTrue(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.NaN.subtract((-6.971366338144781E56));
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex1.ONE.sinh();
      assertEquals(1.1752011936438014, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      complex0.getReal();
      Complex complex5 = complex0.cos();
      complex2.toString();
      Complex complex6 = complex5.subtract(complex1);
      complex6.NaN.multiply(complex1);
      complex0.getReal();
      Complex complex7 = complex1.tan();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = Complex.valueOf((-1884.21951));
      assertEquals((-1884.21951), complex8.getReal(), 0.01);
      
      Complex complex9 = complex2.multiply(1);
      assertFalse(complex1.isInfinite());
      assertSame(complex9, complex6);
      assertSame(complex9, complex3);
      assertNotSame(complex9, complex5);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = Complex.I;
      complex2.ONE.cos();
      Complex.valueOf(6.283185307179586);
      Complex complex3 = complex0.divide(complex2);
      complex3.NaN.add(complex1);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ONE.sqrt();
      complex0.getImaginary();
      complex2.sinh();
      complex4.getField();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add((-1249.77));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.add((-1249.77));
      complex4.getField();
      assertSame(complex4, complex3);
      
      Complex complex5 = complex1.acos();
      assertSame(complex5, complex2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1347.28195917), 3328.158156);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex1.ZERO.conjugate();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Object object0 = complex0.ONE.readResolve();
      assertFalse(object0.equals((Object)complex3));
      
      complex2.ZERO.getField();
      double double0 = complex0.I.abs();
      assertEquals(1.0, double0, 0.01);
      
      complex0.getReal();
      complex2.getReal();
      Complex complex4 = (Complex)complex0.readResolve();
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.equals((Object)complex0));
      
      Complex complex5 = complex1.conjugate();
      assertSame(complex5, complex2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.subtract(2129.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.INF.subtract(complex2);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex3.sqrt();
      assertSame(complex5, complex4);
      
      Complex complex6 = complex1.ONE.pow(complex2);
      complex6.NaN.createComplex(8.082792416221215E-30, 8.082792416221215E-30);
      complex0.hashCode();
      Complex complex7 = complex1.cos();
      assertEquals(0.5404544906222458, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      complex3.getField();
      assertFalse(complex1.isInfinite());
      assertSame(complex3, complex6);
      
      Complex complex8 = Complex.INF;
      Complex complex9 = complex0.divide(complex8);
      assertEquals(0.0, complex9.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.log();
      double double0 = complex2.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex4.I.createComplex(857.58247937822, (-3903.637));
      assertEquals((-3903.637), complex5.getImaginary(), 0.01);
      assertEquals(857.58247937822, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertSame(complex3, complex1);
      
      Complex complex6 = complex2.sin();
      assertSame(complex6, complex4);
      
      Complex complex7 = complex0.sin();
      assertSame(complex0, complex2);
      assertFalse(complex7.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex0.ONE.pow(complex3);
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex3.NaN.pow(4479.74);
      Complex complex7 = complex4.ZERO.atan();
      Complex complex8 = complex7.ONE.subtract(complex6);
      complex3.INF.nthRoot(29);
      Complex complex9 = Complex.valueOf(0.0);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex5.I.sin();
      assertEquals(1.1752011936438014, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex11 = complex0.ONE.acos();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex0.reciprocal();
      Complex complex13 = complex1.multiply(complex2);
      complex8.multiply(636);
      assertSame(complex6, complex12);
      assertTrue(complex7.equals((Object)complex11));
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex14 = Complex.valueOf((double) 29, 0.0);
      Complex complex15 = complex13.cosh();
      assertFalse(complex13.equals((Object)complex5));
      assertSame(complex15, complex8);
      assertNotSame(complex13, complex14);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-761.7468894));
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.I.add((-761.7468894));
      Complex complex3 = (Complex)complex1.INF.readResolve();
      assertTrue(complex3.isInfinite());
      
      Complex complex4 = complex0.I.sinh();
      assertEquals(0.8414709848078965, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.cos();
      complex6.INF.createComplex(1.7875271881514469E-115, 0.0);
      complex2.hashCode();
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertEquals((-761.7468894), complex2.getReal(), 0.01);
      
      List<Complex> list0 = complex6.nthRoot(2728);
      assertSame(complex6, complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      assertTrue(list0.contains(complex1));
      
      Complex complex7 = complex0.sin();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals((-0.9960128087828098), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.ZERO.sin();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.ZERO.add(complex2);
      Complex complex6 = complex0.multiply(583);
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = complex7.ONE.conjugate();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex7.I.log();
      String string0 = complex9.toString();
      assertEquals("(0.0, 1.5707963267948966)", string0);
      
      complex0.getImaginary();
      Complex complex10 = complex3.atan();
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex5.divide((double) 583);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.002425752251068774, complex11.getReal(), 0.01);
      
      Complex complex12 = complex2.negate();
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex1.cos();
      assertEquals(1.5430806348152437, complex13.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertSame(complex0, complex6);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(boolean0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.exp();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = (Complex)complex0.readResolve();
      boolean boolean0 = complex2.equals(complex4);
      assertTrue(complex4.equals((Object)complex0));
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertFalse(complex4.equals((Object)complex2));
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.equals((Object)complex3));
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex2.ONE.tanh();
      complex0.INF.asin();
      complex0.ONE.atan();
      Complex complex3 = complex0.reciprocal();
      complex3.INF.cosh();
      Complex complex4 = complex0.divide(complex2);
      try { 
        complex4.I.nthRoot((-1327));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,327
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3478.642);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf(3478.642);
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex2.ZERO.add(complex1);
      Complex complex5 = complex1.I.sinh();
      String string0 = complex5.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex6.divide(complex2);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertTrue(complex7.equals((Object)complex6));
      
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex2.ONE.divide((-1348.12198713));
      complex10.hashCode();
      complex0.add((-1488.2998653765));
      complex4.createComplex(45.4692490732, 3478.642);
      Complex complex11 = complex3.divide(3478.642);
      Complex complex12 = complex11.I.asin();
      assertEquals(0.8813735870195428, complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      complex4.createComplex(3478.642, 3478.642);
      Complex complex13 = complex4.createComplex((-1348.12198713), (-1348.12198713));
      Complex complex14 = complex13.divide(complex9);
      Complex complex15 = complex10.log();
      assertEquals((-3.141592653589793), complex15.getImaginary(), 0.01);
      
      boolean boolean0 = complex14.isNaN();
      assertEquals((-533.3482090906874), complex14.getReal(), 0.01);
      assertEquals(533.3482090906874, complex14.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.NaN.add(complex0);
      complex1.I.cos();
      Complex complex3 = complex0.ZERO.exp();
      complex0.getField();
      Complex complex4 = complex3.exp();
      complex4.ONE.exp();
      Complex complex5 = complex0.NaN.createComplex(0.0, (-1.6958057665854177E-49));
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex4.divide(complex3);
      complex7.ZERO.conjugate();
      Complex complex8 = complex6.reciprocal();
      complex8.createComplex((-1742.3), (-1742.3));
      assertEquals((-0.3956231069460753), complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex7.I.negate();
      Complex complex10 = complex9.NaN.exp();
      complex7.NaN.toString();
      Object object0 = complex7.ONE.readResolve();
      complex6.NaN.exp();
      List<Complex> list0 = complex6.nthRoot(335);
      assertFalse(list0.contains(complex1));
      assertEquals(335, list0.size());
      
      Complex complex11 = complex4.NaN.sqrt();
      Complex complex12 = complex11.ONE.pow((-1.6958057665854177E-49));
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      
      Complex complex13 = Complex.valueOf(Double.NaN);
      Complex complex14 = complex0.subtract(complex13);
      Complex complex15 = complex14.ZERO.conjugate();
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
      assertSame(complex14, complex2);
      
      complex6.exp();
      assertTrue(complex3.equals((Object)object0));
      assertTrue(complex4.equals((Object)complex7));
      
      complex1.isNaN();
      assertSame(complex1, complex10);
      
      Complex complex16 = Complex.INF;
      Complex complex17 = complex5.divide(complex16);
      assertNotSame(complex17, complex11);
      assertTrue(complex17.equals((Object)complex15));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.INF.getField();
      Complex complex2 = complex0.I.multiply((-1125));
      complex0.ZERO.acos();
      Complex complex3 = complex0.ONE.log();
      complex0.abs();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex2.add((double) (-1125));
      assertEquals((-1125.0), complex5.getReal(), 0.01);
      assertEquals((-1125.0), complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex3.acos();
      Object object0 = complex2.readResolve();
      complex0.equals(object0);
      Complex complex7 = complex2.exp();
      assertEquals(0.9523854115634964, complex7.getReal(), 0.01);
      
      Complex complex8 = complex2.add(complex6);
      Complex complex9 = complex8.ZERO.conjugate();
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex2.tan();
      Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex11.ZERO.divide(0.0);
      assertEquals(0.7615941559557649, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      complex2.isInfinite();
      Complex complex13 = complex10.asin();
      assertEquals((-0.8813735870195429), complex13.getImaginary(), 0.01);
      
      complex0.exp();
      double double0 = complex2.abs();
      assertEquals(1125.0, double0, 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.equals((Object)complex5));
      
      complex6.abs();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      Complex complex14 = complex4.sqrt();
      assertSame(complex14, complex12);
      assertTrue(complex3.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.atan();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      Object object0 = new Object();
      complex0.equals(object0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      
      Complex complex2 = Complex.valueOf((double) (-1542), (-1.0));
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.subtract((-3459.56763938783));
      Complex complex2 = (Complex)complex1.ZERO.readResolve();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.divide(Double.NaN);
      Complex complex4 = complex3.ONE.subtract(1008.0539668815517);
      Complex complex5 = complex3.NaN.log();
      complex3.readResolve();
      ComplexField complexField0 = complex3.I.getField();
      complex0.abs();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.NaN.pow(949.6524);
      String string0 = complex6.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex8 = complex7.createComplex(1008.0539668815517, 949.6524);
      double double0 = complex3.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex9 = complex8.NaN.sin();
      Complex complex10 = complex6.sqrt();
      complex4.getField();
      boolean boolean0 = complex5.equals(complexField0);
      assertSame(complex3, complex9);
      assertFalse(boolean0);
      
      complex0.sinh();
      double double1 = complex7.abs();
      assertEquals(Double.NaN, double1, 0.01);
      
      Complex complex11 = complex0.reciprocal();
      Complex complex12 = complex1.multiply(0);
      assertTrue(complex12.equals((Object)complex1));
      
      Complex complex13 = complex8.multiply(0.0);
      assertTrue(complex13.equals((Object)complex11));
      
      boolean boolean1 = complex10.isNaN();
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertSame(complex10, complex7);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt1z();
      String string0 = complex0.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex2 = complex1.NaN.createComplex(0.0, 0.0);
      Complex complex3 = complex2.INF.pow(complex0);
      complex2.I.abs();
      complex1.NaN.getArgument();
      List<Complex> list0 = complex1.I.nthRoot(17);
      assertEquals(17, list0.size());
      
      complex0.hashCode();
      Complex complex4 = complex0.NaN.exp();
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
      
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex2.equals(object0);
      assertFalse(boolean0);
      
      complex1.NaN.hashCode();
      complex0.getArgument();
      complex1.isNaN();
      complex2.conjugate();
      Complex complex5 = complex2.negate();
      assertEquals(-0.0, complex5.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      
      Complex complex6 = complex4.asin();
      double double1 = complex6.abs();
      assertTrue(complex0.equals((Object)object0));
      assertNotSame(complex4, complex3);
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = Complex.valueOf(Double.NaN, 3742.498769785);
      double double0 = complex1.I.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex2.createComplex(0.0, 382.570022782);
      Complex complex5 = complex3.ZERO.sqrt1z();
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Object object0 = complex0.readResolve();
      double double1 = complex2.getReal();
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean0 = complex3.equals(object0);
      assertFalse(complex3.equals((Object)complex5));
      assertTrue(boolean0);
      
      complex4.equals("s<n%F\"1{");
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = (Complex)complex0.I.readResolve();
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      complex0.ZERO.negate();
      Complex complex3 = Complex.INF;
      String string0 = complex3.INF.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.ZERO.asin();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex6 = complex4.sinh();
      complex6.INF.hashCode();
      assertTrue(complex6.equals((Object)complex1));
      
      Complex complex7 = complex4.subtract(0.0);
      assertTrue(complex7.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.getField();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex0.atan();
      assertEquals(0.7853981633974483, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.ONE.subtract((-4918.27));
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex2.subtract(Double.NaN);
      Complex complex7 = complex6.NaN.divide(89.95938115664799);
      complex7.ZERO.readResolve();
      Complex complex8 = complex6.ONE.pow(complex5);
      assertTrue(complex8.equals((Object)complex1));
      assertEquals(4919.27, complex4.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex9 = Complex.valueOf(2239.099);
      Complex complex10 = complex7.acos();
      Complex complex11 = complex10.asin();
      assertSame(complex11, complex6);
      
      Complex complex12 = complex9.add(complex2);
      assertTrue(complex2.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2975.3874, 2975.3874);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.exp();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      double double0 = complex0.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex6.tanh();
      complex7.I.readResolve();
      complex7.NaN.sin();
      Complex complex8 = (Complex)complex7.readResolve();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex7.multiply(complex0);
      Complex complex10 = complex9.exp();
      Complex complex11 = complex10.I.tanh();
      complex9.getImaginary();
      complex7.isNaN();
      Complex complex12 = complex9.subtract(complex6);
      Complex complex13 = complex5.tanh();
      complex5.abs();
      Complex complex14 = complex4.subtract(complex13);
      assertEquals(0.35798500798800026, complex14.getReal(), 0.01);
      
      complex12.tanh();
      complex3.ONE.negate();
      Complex complex15 = complex9.subtract(2975.3874);
      assertFalse(complex15.isNaN());
      
      Complex complex16 = complex3.subtract(complex11);
      Complex complex17 = complex1.divide(complex16);
      assertEquals(-0.0, complex10.getReal(), 0.01);
      assertEquals(5.35807225440497, complex17.getImaginary(), 0.01);
      assertEquals((-0.5042983612858866), complex17.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex0.tanh();
      complex1.NaN.sqrt();
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex5.ONE.multiply((-4571.360154488957));
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals((-4571.360154488957), complex6.getReal(), 0.01);
      
      Complex complex7 = complex5.NaN.sqrt();
      double double0 = complex1.getArgument();
      assertEquals(-0.0, double0, 0.01);
      
      Complex complex8 = complex4.negate();
      Complex complex9 = complex7.sqrt();
      assertSame(complex9, complex5);
      
      String string0 = complex8.toString();
      assertEquals("(-0.7615941559557649, -0.0)", string0);
      
      Complex complex10 = Complex.valueOf(5339.0682934);
      complex10.hashCode();
      Complex complex11 = complex10.NaN.exp();
      assertSame(complex11, complex3);
      
      Complex complex12 = complex4.divide(Double.POSITIVE_INFINITY);
      assertTrue(complex0.equals((Object)complex1));
      assertNotSame(complex12, complex3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.add(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.ZERO.cosh();
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      
      complex0.isInfinite();
      assertNotSame(complex0, complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      List<Complex> list0 = complex0.ZERO.nthRoot(240);
      assertTrue(list0.contains(complex0));
      assertEquals(240, list0.size());
      
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.ZERO.conjugate();
      complex0.isInfinite();
      Complex complex4 = complex1.ONE.reciprocal();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex3.I.subtract(complex6);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      double double0 = complex5.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex8 = complex5.divide(0.0);
      Complex complex9 = complex8.ONE.sqrt();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex0.exp();
      Complex complex11 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex12 = complex0.multiply((double) 240);
      Complex complex13 = complex12.add((double) 240);
      assertEquals(240.0, complex13.getReal(), 0.01);
      
      complex11.pow(0.0);
      Complex complex14 = complex1.tanh();
      Complex complex15 = complex14.I.tanh();
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertEquals(1.557407724654902, complex15.getImaginary(), 0.01);
      
      Complex complex16 = complex1.cosh();
      complex3.multiply(0.0);
      complex16.getReal();
      assertTrue(complex16.equals((Object)complex8));
      
      Complex complex17 = complex3.divide(complex10);
      assertTrue(complex2.equals((Object)complex4));
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertTrue(complex10.equals((Object)complex9));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3447.4427691338), (-3447.4427691338));
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf((-1636.37), 2.0);
      Complex complex3 = complex0.ZERO.divide(complex2);
      assertEquals(-0.0, complex3.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(4875.420319614079, double0, 0.01);
      
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.NaN.subtract(complex0);
      Complex complex6 = Complex.valueOf(0.0, 0.2);
      Complex complex7 = complex6.ZERO.divide(complex5);
      assertSame(complex7, complex5);
      
      Complex complex8 = complex2.multiply(2.0);
      Complex complex9 = complex0.multiply(complex8);
      Complex complex10 = complex6.tan();
      Complex complex11 = complex2.tan();
      complex8.multiply(1873);
      Complex complex12 = complex10.multiply(complex11);
      assertEquals(0.005053542844514497, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex8.multiply(complex4);
      Complex complex14 = complex13.I.add(complex4);
      complex9.tan();
      assertEquals(1.1296373619331488E7, complex9.getReal(), 0.01);
      
      complex2.tan();
      Complex.valueOf((double) 1873);
      complex0.tan();
      complex1.tan();
      Complex complex15 = complex14.tan();
      assertEquals(4.0, complex13.getReal(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(3272.74, complex13.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(1.7482123374938965, (-1121.7375428));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow((-1.564440844355254E-7));
      Complex complex3 = complex1.ZERO.pow((-3447.4427691338));
      complex3.ZERO.nthRoot(37);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.I.divide(complex3);
      complex1.abs();
      Complex complex6 = complex4.multiply(complex2);
      complex2.ZERO.add((-20.0));
      complex6.ONE.subtract(15.8532611081);
      Complex complex7 = Complex.valueOf(0.5791969661703247, Double.NaN);
      Complex complex8 = complex7.NaN.add(complex1);
      Complex complex9 = complex7.ONE.exp();
      Complex complex10 = Complex.valueOf((-1.564440844355254E-7), 6.3890560989306495);
      Complex complex11 = complex2.multiply(complex7);
      complex4.abs();
      complex2.atan();
      Complex complex12 = complex9.add(complex5);
      complex5.abs();
      complex9.multiply((-684.2370951274783));
      complex3.abs();
      Complex complex13 = complex11.multiply(complex8);
      Complex.valueOf(Double.NaN, (double) 37);
      complex12.multiply((-2166.6));
      complex10.multiply(complex13);
      complex11.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1347.28195917), (-1347.28195917));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex1.ZERO.conjugate();
      Object object0 = complex0.ONE.readResolve();
      ((Complex) object0).INF.hashCode();
      complex0.I.abs();
      complex0.getReal();
      complex2.getReal();
      Complex complex3 = (Complex)complex0.readResolve();
      complex1.conjugate();
      complex3.multiply(Double.NaN);
      complex1.multiply((-0.7023967071298747));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.ZERO.subtract(2132.853160592625);
      Complex complex2 = Complex.NaN;
      Complex complex3 = new Complex(2132.853160592625, 2132.853160592625);
      Complex complex4 = Complex.valueOf(2132.853160592625);
      complex4.NaN.toString();
      complex3.sqrt();
      Complex complex5 = complex1.ONE.pow(complex2);
      complex5.NaN.createComplex((-1.304007721458533), (-1.304007721458533));
      complex0.hashCode();
      complex1.cos();
      complex3.getField();
      Complex complex6 = Complex.INF;
      complex0.divide(complex6);
      Complex complex7 = new Complex((-1.304007721458533), Double.POSITIVE_INFINITY);
      complex0.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      Complex complex1 = complex0.tan();
      complex1.nthRoot(2330);
      Complex complex2 = complex0.multiply(complex1);
      complex1.nthRoot(2330);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.divide(complex2);
      complex3.getArgument();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex4.NaN.acos();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex6.I.multiply((double) 2330);
      complex8.ONE.toString();
      complex5.INF.divide(complex2);
      complex2.multiply((-0.4204893646335883));
      complex1.I.readResolve();
      complex1.abs();
      complex4.reciprocal();
      Complex complex9 = complex4.asin();
      complex6.INF.subtract((-0.4204893646335883));
      complex9.INF.pow(4.501188264957416E-99);
      Complex complex10 = complex6.multiply(2330);
      complex10.I.reciprocal();
      complex10.subtract(complex9);
      complex4.getField();
      complex1.exp();
      complex0.sinh();
      complex7.add((-0.4204893646335883));
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.readResolve();
      Complex complex1 = complex0.INF.createComplex(2956.3480807192486, Double.POSITIVE_INFINITY);
      complex1.INF.readResolve();
      Complex complex2 = complex1.NaN.sinh();
      complex2.NaN.abs();
      Complex complex3 = complex0.multiply((-69));
      Complex complex4 = complex1.multiply((-69));
      complex4.NaN.createComplex((-1563.5), 2956.3480807192486);
      Complex complex5 = complex0.multiply(complex1);
      complex5.add(2956.3480807192486);
      complex5.INF.getArgument();
      Complex complex6 = complex4.multiply(complex3);
      complex4.multiply(complex6);
      complex6.abs();
      Complex complex7 = new Complex(2956.3480807192486, 20.0);
      complex7.I.readResolve();
      Complex.valueOf(2956.3480807192486, 1134.59774717697);
      complex2.multiply(complex7);
      complex2.multiply((-69));
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex6.multiply(complex8);
      Complex complex9 = complex1.multiply((-69));
      complex8.multiply(complex2);
      complex9.multiply((-862));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = complex0.createComplex((-100.4), Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.subtract(complex2);
      complex2.NaN.multiply(complex0);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex1.I.atan();
      complex5.I.log();
      Complex complex7 = complex3.multiply((-100.4));
      complex7.ONE.add(complex2);
      complex1.abs();
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex3.NaN.nthRoot(19);
      complex4.multiply(complex8);
      complex7.abs();
      complex6.multiply(Double.POSITIVE_INFINITY);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.getField();
      Complex complex1 = new Complex((-598.1), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex0.I.pow(0.5080875158309937);
      complex0.abs();
      Complex complex3 = complex2.multiply(complex0);
      complex1.multiply(complex0);
      Complex complex4 = complex0.multiply(complex2);
      complex3.multiply(complex4);
  }
}
