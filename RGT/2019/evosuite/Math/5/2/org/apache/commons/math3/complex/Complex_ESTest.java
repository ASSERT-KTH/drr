/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 18:58:59 GMT 2019
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class Complex_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      assertEquals("(Infinity, Infinity)", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-766.3753056332608), (-766.3753056332608));
      boolean boolean0 = complex0.isNaN();
      assertEquals((-766.3753056332608), complex0.getReal(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals((-766.3753056332608), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-220.104741007));
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.sinh();
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-220.104741007), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1993.072005126248), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-1142));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-1993.072005126248), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      Complex complex1 = complex0.INF.pow(Double.NaN);
      double double0 = complex1.abs();
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-766.3753056332608), (-766.3753056332608));
      Complex complex1 = complex0.ZERO.pow((double) 1);
      assertEquals((-766.3753056332608), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-766.3753056332608), complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.add(complex0);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.ONE.add(complex1);
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-220.104741007));
      Complex complex1 = complex0.INF.add(Double.NaN);
      assertFalse(complex0.isInfinite());
      assertEquals((-220.104741007), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(3255.6677013226, 3255.6677013226);
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.isInfinite());
      assertEquals(3255.6677013226, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(3255.6677013226, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      Complex complex1 = complex0.INF.pow(Double.NaN);
      Complex complex2 = complex1.conjugate();
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertSame(complex2, complex1);
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.divide(complex0);
      assertNotSame(complex2, complex1);
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isNaN());
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex0.I.divide(complex1);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(3255.6677013226, 3255.6677013226);
      Complex complex1 = complex0.ZERO.multiply(complex0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(3796.209520588);
      Complex complex1 = complex0.ZERO.atan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4302.0595583));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      assertEquals((-4302.0595583), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3297532796859741);
      Complex complex1 = complex0.INF.atan();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.3297532796859741, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      Complex complex1 = complex0.NaN.divide((double) 1396);
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 4347.222377423795);
      Complex complex1 = complex0.divide(Double.NaN);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(4347.222377423795, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(302.7622, 1.127629041671753);
      Complex complex1 = complex0.INF.divide(Double.POSITIVE_INFINITY);
      assertEquals(1.127629041671753, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(302.7622, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(589.34271972);
      Complex complex1 = complex0.ONE.divide(Double.POSITIVE_INFINITY);
      assertEquals(589.34271972, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      Complex complex1 = complex0.ONE.reciprocal();
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-220.104741007));
      Complex complex1 = complex0.ZERO.reciprocal();
      assertEquals((-220.104741007), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.reciprocal();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertSame(complex2, complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      boolean boolean0 = complex0.equals("(Infinity, Infinity)");
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-1.0));
      Complex complex1 = complex0.NaN.reciprocal();
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = (Complex)complex0.readResolve();
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(boolean0);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-1486.15966139553));
      Complex complex1 = Complex.valueOf((-1486.15966139553));
      boolean boolean0 = complex0.equals(complex1);
      assertEquals((-1486.15966139553), complex1.getReal(), 0.01);
      assertTrue(boolean0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 2.655313014984131);
      complex0.hashCode();
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(302.7622, 1.127629041671753);
      Complex complex1 = complex0.INF.asin();
      assertEquals(302.7622, complex0.getReal(), 0.01);
      assertEquals(1.127629041671753, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(0.7853981633974483);
      Complex complex2 = complex1.pow((-1500.7));
      Complex complex3 = complex2.acos();
      assertEquals(2.745459450975167E157, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(302.7622, 1.127629041671753);
      Complex complex1 = complex0.multiply(882);
      assertEquals(267036.2604, complex1.getReal(), 0.01);
      assertEquals(302.7622, complex0.getReal(), 0.01);
      assertEquals(994.5688147544861, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.127629041671753, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      Complex complex1 = complex0.INF.pow(Double.NaN);
      Complex complex2 = complex1.multiply(1396);
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1224));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4302.0595583));
      Complex complex1 = complex0.NaN.pow((-3330.4166423));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4302.0595583), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.NaN.createComplex(3097118.4200000004, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(8.885765876316732);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(3097118.4200000004, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-766.3753056332608), (-766.3753056332608));
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertFalse(complex0.isInfinite());
      assertEquals((-766.3753056332608), complex0.getImaginary(), 0.01);
      assertEquals((-766.3753056332608), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-766.3753056332608), (-766.3753056332608));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.negate();
      assertFalse(complex0.isInfinite());
      assertEquals((-766.3753056332608), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotSame(complex3, complex2);
      assertTrue(complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.subtract(complex0);
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
      assertNotSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.I.subtract(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 2.655313014984131);
      Complex complex1 = complex0.NaN.subtract(Double.NaN);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      Complex complex1 = complex0.ONE.subtract(1.3861841053630075E-123);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-220.104741007));
      Complex complex1 = complex0.I.subtract(Double.NaN);
      assertEquals((-220.104741007), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4302.0595583));
      Complex complex1 = complex0.NaN.acos();
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals((-4302.0595583), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.asin();
      assertFalse(complex0.isNaN());
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotSame(complex2, complex1);
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(3255.6677013226, 3255.6677013226);
      Complex complex1 = complex0.NaN.cos();
      assertEquals(3255.6677013226, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(3255.6677013226, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4302.0595583));
      Complex complex1 = complex0.cosh();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4302.0595583), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.cosh();
      assertTrue(complex2.isNaN());
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(302.7622, 1.127629041671753);
      Complex complex1 = complex0.NaN.add(1.127629041671753);
      Complex complex2 = complex1.sin();
      assertEquals(1.127629041671753, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(302.7622, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(302.7622, 1.127629041671753);
      Complex complex1 = complex0.sinh();
      assertEquals(302.7622, complex0.getReal(), 0.01);
      assertEquals(1.127629041671753, complex0.getImaginary(), 0.01);
      assertEquals(1.3893189029824566E131, complex1.getImaginary(), 0.01);
      assertEquals(6.594479731387549E130, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(589.34271972);
      Complex complex1 = complex0.NaN.sqrt();
      assertFalse(complex0.isInfinite());
      assertEquals(589.34271972, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(3255.6677013226, 3255.6677013226);
      Complex complex1 = complex0.ONE.asin();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-766.3753056332608), (-766.3753056332608));
      Complex complex1 = complex0.NaN.tan();
      assertFalse(complex0.isNaN());
      assertEquals((-766.3753056332608), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-766.3753056332608), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(302.7622, 1.127629041671753);
      Complex complex1 = complex0.tan();
      assertEquals(0.1743340381078742, complex1.getReal(), 0.01);
      assertEquals(302.7622, complex0.getReal(), 0.01);
      assertEquals(1.127629041671753, complex0.getImaginary(), 0.01);
      assertEquals(1.1429017639876833, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.219508285637377E-115, 2.219508285637377E-115);
      Complex complex1 = complex0.INF.divide(2.219508285637377E-115);
      Complex complex2 = complex1.tan();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(2.219508285637377E-115, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.219508285637377E-115, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(3255.6677013226, 3255.6677013226);
      Complex complex1 = complex0.tan();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(3255.6677013226, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2069.0, (-2270.01345));
      Complex complex1 = complex0.tan();
      assertEquals((-2270.01345), complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(2069.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.tanh();
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
      assertNotSame(complex2, complex1);
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(3255.6677013226, 3255.6677013226);
      Complex complex1 = complex0.I.tanh();
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.557407724654902, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-427.5542866293), 0.0);
      Complex complex1 = complex0.tanh();
      assertEquals((-427.5542866293), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.1771494), (-545.1771494));
      List<Complex> list0 = complex0.ONE.nthRoot(1396);
      assertEquals((-545.1771494), complex0.getReal(), 0.01);
      assertEquals((-545.1771494), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1396, list0.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3297532796859741);
      try { 
        complex0.nthRoot((-3007));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,007
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(2115);
      assertTrue(list0.contains(complex0));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(3255.6677013226, 3255.6677013226);
      complex0.INF.nthRoot(1);
      assertEquals(3255.6677013226, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(3255.6677013226, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(602.450354, Double.NaN);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }
}
