/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 14:50:32 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.TreeSet;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

 
public class StringUtils_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", (-2098));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\"\"-                                                                                              ", "\"\"-", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 3802);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("v3^MZ%}YlU");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(":yg(}SIr08t>tEYA");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.strip("K)&n/", "K)&n/");
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.join((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 1383);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.leftPad("(4|$Z4S5f86@", (-3686));
      assertNotNull(string0);
      assertEquals("(4|$Z4S5f86@", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("/", "/");
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, ", Length: ", 227);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("", "v3^MZ%}YlU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.substringBetween("The Array must not be null", " ]tkuo|xCJw{");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Minimum abbreviation width is 4", 'M');
      assertEquals("inimum abbreviation width is 4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, (String) null, "Sfi[%,<I");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" is not in the range '0' - '9'", "");
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("6@k", ")W8z:fuWC8gGbf");
      assertEquals("6@k", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("W_\".d-TS~g!?~eQOW", "V8^");
      assertEquals("W_\".d-TS~g!?~eQOW", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("V8^");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.trimToNull("'c1gj)C\"Aix >");
      assertEquals("'c1gj)C\"Aix >", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("hG'ae^Fq");
      assertEquals("hG'ae^Fq", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.stripToNull("-{6TxpOV=");
      assertNotNull(string0);
      assertEquals("-{6TxpOV=", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("\"W'$!I%Rx(o)S%");
      assertEquals("\"W'$!I%Rx(o)S%", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.strip("   ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.stripStart("ALwg\"3d(A4lJXI", "");
      assertEquals("ALwg\"3d(A4lJXI", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.strip(":):%+", "Arguments cannot both be null");
      assertEquals(":):%+", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.stripEnd("   ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.stripEnd("$HWg+=]^>k5", "");
      assertEquals("$HWg+=]^>k5", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.stripEnd("/zc", "/zc");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.substringBetween("$lH4.[/B-^FFU=tR?>J", "$lH4.[/B-^FFU=tR?>J", "$lH4.[/B-^FFU=tR?>J");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("]{1=i-- ICxb");
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.stripAccents(".\"m.-;Fn1w2%U2");
      assertEquals(".\"m.-;Fn1w2%U2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "The Character must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "9%`WTc=~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("i", "x86C+=2ax<q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("Index: ", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "FifZue3/B|gmTcE65~ ", (-540));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 2450);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "\"W'$!I%Rx(o)S%", (int) 'B', (int) 'B');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "tbxk>n8", (CharSequence) "wtbxk>n8");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) ", Length: ", 227);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "', has a length less than 2", (CharSequence) "72\"Y", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "IllegalAccessException occurred", (CharSequence) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 253);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("SecurityException occurredp{InCombiningDiacriticalMarks}+", 1229);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("%%;Bh&d)1_Dh;f-(T", "", 1909);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", 57);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "Q_Uo*?,]4O8uNC");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ".b_%<^#Blacz]Y1 mz", (CharSequence) ".b_%<^#Blacz]Y1 mz", (-3431));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "SecurityException occurred
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "i", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) " ]tkuo|xCJw{";
      charSequenceArray0[3] = (CharSequence) "6@k";
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], charSequenceArray0[3], 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "P#", 1364);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 10);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "FifZue3/B|gmTcE65~ ", 0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 1771, (-3244));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = StringUtils.upperCase("FifZue3/B|gmTcE65~ ");
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "e,.ls", (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, ')', 'Z');
      int int0 = StringUtils.lastIndexOf((CharSequence) "e,.ls", (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "%{_", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "Index: ", (CharSequence) "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhIndex: ", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "', has a length less than 2", (CharSequence) null, (-328));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("6@k", ")W8z:fuWC8gGbf");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) "");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[8] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[8], charSequenceArray0[1]);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "42>fZN8E?Fd,z+{9", 1895);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, (-3826));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "TimeToLive of ", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "FIFZUE3/B|GMTCE65~ ", (CharSequence) "FIFZUE3/B|GMTCE65~ ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Ren%o-...", (CharSequence) "+", 4967);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "40o+h%x__8lxa8hA{g", (CharSequence) "g{Ah8axl8__x%h+o04");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "Q_Uo*?,]4O8uNC", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("Q_Uo*?,]4O8uNC", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("Array and element cannot both be null", "yO?Ion7bXd:o[eq;tcj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("O3CQ*>", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("O3CQ*>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace(", Length: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, ')', 'Z');
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAny((CharSequence) string0, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "FIFZUE3/B|GMTCE65~ ", "FIFZUE3/B|GMTCE65~ ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "b{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toa", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = StringUtils.indexOfAny((CharSequence) "/", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '&';
      int int0 = StringUtils.indexOfAny((CharSequence) "E8{~?rTI4Gc07E,Bn^)mr*b:Pgk)&", charArray0);
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      int int0 = StringUtils.indexOfAny((CharSequence) "<V?cQs9u'uCq-K}=Gw", charArray0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "java.lang.String@0000000001", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "/zc", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '~';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "v;0M~*", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "JPH", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "T T?(^", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = StringUtils.lowerCase(")HJ*x&7TfEdTf5Q", locale0);
      char[] charArray0 = new char[9];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string0, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[6] = '?';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "? U=", charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "SSSSSSSSSQOc:\"H", (CharSequence) " in an array of ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " in an array of ", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.center("", 1784, 'k');
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "T T?(^", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ">@@O#/{ZAwvtBR                                                   ", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "E", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, ".6cp/UTj>n8O^f@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ")n4lW.09", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.strip("K)&n/", "K)&n/");
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "TY-(VSWaW+p{InCombiningDiacriticalMarks}+", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.center("K)&n/", 2019, "K)&n/");
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Cannot clone Cloneable type ", "HTs&Sk2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "LXW[LXW[LXW[", "LXW[LXW[LXW[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "Juvt`b{HLI`g{d1-^");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "O[ u%c@$*./PjPT", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "wtbxk>n8", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[3] = ">)LC6#^.R+mI";
      int int0 = StringUtils.indexOfAny((CharSequence) "2<.", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "2<.";
      stringArray0[1] = "2<.";
      int int0 = StringUtils.indexOfAny((CharSequence) "2<.", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("ALwg\"3d(A4lJXI", 'I');
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NFD", 'k');
      int int0 = StringUtils.lastIndexOfAny("minimum abbreviation width with offset is 7", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("VUK/0`@%5?0nwgWE", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("\"\"-", charSequenceArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substring(")QC$b\"seIUBZMQl_", (-1992));
      assertEquals(")QC$b\"seIUBZMQl_", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substring("p0Z`tH}o_$z,n[4`O-", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 0, 122);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substring(".", 128, 128);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.left("M>", 21);
      assertEquals("M>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.left(" vs ", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.left("`NTRr", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.right("", 2019);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 204);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.right("...", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.right("v;0M~*", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.mid("i", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, (-1917), (-1917));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.mid(" ", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.mid("", 253, 253);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.mid(">q?(N[Sv$", (-1), 2445);
      assertNotNull(string0);
      assertEquals(">q?(N[Sv$", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, "-Hs%dLJoFJ=oP_+k8");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.rightPad("org.apache.commons.lang3.CharUtilsorg.apache.commons.lang3.CharUtils", 1143, '7');
      String string1 = StringUtils.substringBefore("java.text.Normalizer", string0);
      assertEquals("java.text.Normalizer", string1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" ", (String) null);
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" is not in the range '0' - '9'", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringBefore("P2`6@X*F", "P2`6@X*F");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringAfter("E8{~?rTI4Gc07E,Bn^)mr*b:Pgk)&", "n_V*('lCCoPHu2!r/,i");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, " in an array of ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-280), "Sfi[%,<I");
      String string1 = StringUtils.substringAfter("S*mJeLy", string0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.repeat("q7<r\"u(y@pIt6*iD+LA", "q7<r\"u(y@pIt6*iD+LA", (int) 'h');
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefghijklmnopqrstuvwxyz{|}~", "");
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefghijklmnopqrstuvwxyz{|}~", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("dWU<B54@\"T;a#", "dWU<B54@\"T;a#");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.rightPad("org.apache.commons.lang3.CharUtilsorg.apache.commons.lang3.CharUtils", 1143, '7');
      String string1 = StringUtils.substringAfterLast(string0, "org.apache.commons.lang3.CharUtilsorg.apache.commons.lang3.CharUtils");
      boolean boolean0 = StringUtils.isNumeric(string1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", ":):%+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("vLI=5vxC;8]N~", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.repeat("$lH4.[/B-^FFU=tR?>J", "]{1=i-- ICxb", 128);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast(",Ig}1mx", string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Array element ", "Array element ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "T;.J5@k{k zP", "Index: ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.substringBetween("W,>'1cBv|%#:JN'Wj", (String) null, "Arguments cannot both be null");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" is not in the range '0' - '9'", "n N>JS:h2?", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "17", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Index: ", "Index: ", "VT?IIYStrings must not be null");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "The character ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("6I_", "8p]qe(Lk\"KT%RF`", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", " has no clone method", "ALwg\"3d(A4lJXI`Cfv-F>{3pbM]Ay|R");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("]i$`oQ&E2In&}azj~U/", " has no clone method", "Gc07E,Bn^)");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("E8{~?rTI4Gc07E,Bn^)mr*b:Pgk)&", "E8{~?rTI4Gc07E,Bn^)", "`Cfv-F>{3pbM]Ay|R");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "', has a length less than 2");
      String string0 = StringUtils.join((Object[]) stringArray0, "', has a length less than 2");
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("v3^MZ%}YlU", (String) null, (-2149));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'v');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", 'h');
      String string0 = StringUtils.join((Object[]) stringArray0, 'h');
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) string0, 2836);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" is not in the range '0' - '9'");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("b", "b");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Cannot store ", "Threshold must not be negative", 1178);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("(4|$Z4S5f86@", "(4|$Z4S5f86@");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is 4", "e(ibg", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("RMzrp}x3oegb");
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '(');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'Z', 0, 786);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = StringUtils.join(objectArray0, 'y');
      assertEquals("yy", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "&%JkB(#4-^I])A4+I-", 3166, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      String string0 = StringUtils.join(integerArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "E8{~?rTI4Gc07E,Bn^)";
      String string0 = StringUtils.join(objectArray0, ", Length: ");
      assertNotNull(string0);
      assertEquals("E8{~?rTI4Gc07E,Bn^), Length: ", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '<');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Iterator<CharBuffer> iterator0 = (Iterator<CharBuffer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      char char0 = 'U';
      StringUtils.join(iterator0, 'U');
      CharSequence charSequence0 = null;
      String string0 = "-";
      String string1 = StringUtils.upperCase(string0);
      StringUtils.equalsIgnoreCase(charSequence0, string1);
      String string2 = "0^RH]W@l+ ";
      String string3 = StringUtils.difference(string0, string2);
      int int0 = 16;
      HashSet<Object> hashSet0 = new HashSet<Object>(int0);
      hashSet0.add(string3);
      hashSet0.add(string1);
      String string4 = StringUtils.join((Iterable<?>) hashSet0, char0);
      String string5 = "VT?IIYStrings musG not be null";
      int int1 = 8;
      StringUtils.abbreviate(string5, int0, int1);
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      Iterator<Locale.FilteringMode> iterator1 = linkedHashSet0.iterator();
      StringUtils.join(iterator1, char0);
      String string6 = StringUtils.join(iterator1, char0);
      String string7 = "tfZ>qwtfZ>qw";
      StringUtils.rightPad(string7, int1, string6);
      StringUtils.isBlank(string1);
      boolean boolean0 = StringUtils.isNumeric(string4);
      assertEquals(2, hashSet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("g_");
      linkedHashSet0.add("2#pZcFGD");
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, 'z');
      assertNotNull(string0);
      assertEquals("g_z2#pZcFGD", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "fnEw Y]L{z,f9Ur`");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "|68cj");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode1;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, "Array element ");
      assertEquals("AUTOSELECT_FILTERINGArray element REJECT_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((SortedSet<?>) treeSet0);
      priorityQueue0.add("C@1j6% nr(");
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      char char0 = 'L';
      String string0 = StringUtils.replaceChars("aD?~Om&YSs40,ltcy ", 'L', 'L');
      assertEquals("aD?~Om&YSs40,ltcy ", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "aD?~Om&YSs40,ltcy ", "aD?~Om&YSs40,ltcy ");
      boolean boolean1 = StringUtils.isAlphaSpace("aD?~Om&YSs40,ltcy ");
      assertFalse(boolean1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      boolean boolean2 = StringUtils.containsAny((CharSequence) "aD?~Om&YSs40,ltcy ", (CharSequence) "aD?~Om&YSs40,ltcy ");
      assertTrue(boolean2 == boolean0);
      
      Iterator<CharBuffer> iterator0 = (Iterator<CharBuffer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string1 = StringUtils.join(iterator0, "aD?~Om&YSs40,ltcy ");
      String string2 = "!yb)\"+T9mh0";
      String string3 = StringUtils.capitalize(string2);
      StringUtils.countMatches(string2, string2);
      String string4 = StringUtils.center(string3, int0, char0);
      String string5 = "?$M00%`Ayc^2>oT0{";
      StringUtils.remove(string5, string1);
      int int1 = 331;
      StringUtils.contains((CharSequence) string4, int1);
      int int2 = StringUtils.countMatches(string2, string0);
      assertEquals(0, int2);
      
      String string6 = "Minimum abbreviation width is 4";
      String[] stringArray0 = StringUtils.splitByCharacterType(string6);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, '_');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "Aq\"lev3|/");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(",Ig}1mx");
      assertEquals(",Ig}1mx", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM");
      assertEquals("ThestripAccents(CharSequence)methodrequiresatleastJava1.6oraSunJVM", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.removeStart("`5", "`5");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.removeStart("@", "");
      assertEquals("@", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.removeStart("p{InCombiningDiacriticalMarks}+", "BfMpTvskUn,");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "The character ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("h", "=Se}HM.I");
      assertEquals("h", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("sun.text.Normalizer is not available", "");
      assertEquals("sun.text.Normalizer is not available", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("*PYg*$2bf(LiKWMR", "*PYg*$2bf(LiKWMR");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.repeat(")QC$b\"seIUBZMQl_", ")QC$b\"seIUBZMQl_", 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.removeEnd("T)KCPx9q=NRGqZvp", "_3|T.TSel{!oHxL");
      assertEquals("T)KCPx9q=NRGqZvp", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("wW_j<?iR", "wW_j<?iR");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("9%`WTc=~", (String) null);
      assertEquals("9%`WTc=~", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Minimum abbreviation width is 4", ")U;^=Ba[5F");
      assertEquals("Minimum abbreviation width is 4", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, "m)");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.remove("Cannot store ", "Cannot store ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.remove("?$M00%`Ayc^2>oT0{", "");
      assertEquals("?$M00%`Ayc^2>oT0{", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.remove(" is not in the range '0' - '9'", '+');
      assertEquals(" is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.remove("Array and element cannot both be null", 'm');
      assertEquals("Array and eleent cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.replace("L5HLLRN3\"|IU%_L6", "", "", (-429));
      assertEquals("L5HLLRN3\"|IU%_L6", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Array and element cannot both be null", "_wA3z1tOdy.[|>", (String) null);
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.replace(")W8z:fuWC8gGbf", "6@k", ")W8z:fuWC8gGbf", 0);
      assertEquals(")W8z:fuWC8gGbf", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.replace(")hj*x&7tfedtf5q", "Gc07E,Bn^)", "Gc07E,Bn^)", 1075);
      assertEquals(")hj*x&7tfedtf5q", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("wtbxk>n8", "wtbxk>n8", "wtbxk>n8");
      assertEquals("wtbxk>n8", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.replace("w4%e*)+bpI1u", "w4%e*)+bpI1u", "w4%e*)+bpI1u", 3712);
      assertEquals("w4%e*)+bpI1u", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("w9GM", stringArray0, stringArray0);
      assertEquals("w9GM", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("Minimum abbreviation width with offset is 7", (String[]) null, (String[]) null);
      assertEquals("Minimum abbreviation width with offset is 7", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("42>fZN8E?Fd,z+{9");
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("q]VjE#Ah8>j", "*>||", 186);
      String string0 = StringUtils.replaceEach("org.apache.commons.lang3.CharUtils", stringArray0, (String[]) null);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("@", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: @
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[5];
      // Undeclared exception!
      try { 
        StringUtils.replaceEach(")7~4D", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 3 vs 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"W'$!I%Rx(o)S%";
      String string0 = StringUtils.replaceEach("...", stringArray0, stringArray0);
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "The character must not be null";
      stringArray0[4] = "The character must not be null";
      String string0 = StringUtils.replaceEach("The character must not be null", stringArray0, stringArray0);
      assertEquals("The character must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "?V[[]'F";
      stringArray0[1] = " ?V[[]'F";
      String string0 = StringUtils.replaceEach(" ?V[[]'F", stringArray0, stringArray0);
      assertEquals(" ?V[[]'F", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Sfi[%,<I";
      stringArray0[1] = "Sfi[%,<ISfi[%,<I";
      String string0 = StringUtils.replaceEach("Sfi[%,<I", stringArray0, stringArray0);
      assertEquals("Sfi[%,<I", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = " ?V[[]'F";
      String string0 = StringUtils.replaceEach(" ?V[[]'F", stringArray0, stringArray0);
      assertEquals(" ?V[[]'F", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "q7<r\"u(y@pIt6*iD+LA", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.replaceChars("#K", "", "Minimum abbreviation width is 4");
      assertEquals("#K", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.replaceChars("CNiJo}[EcH6j^b.V.", "|#M-GC", (String) null);
      assertEquals("NiJo}[EcH6j^b.V.", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.replaceChars("No7c<]_,%<'owx-@", " ", "3O#9fo>TiD-[$E");
      assertEquals("No7c<]_,%<'owx-@", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.overlay("Sfi[%,<I", "Sfi[%,<I", (-280), (-280));
      assertNotNull(string0);
      assertEquals("Sfi[%,<ISfi[%,<I", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-280), "Sfi[%,<I");
      String string1 = StringUtils.overlay(string0, string0, 0, 1451);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.overlay("Sfi[%,<ISfi[%,<I", stringArray0[2], 0, 1451);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.overlay("tbxk>n8", "p{InCombiningDiacriticalMarks}+", 2909, (-1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.chomp("...");
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.chomp("-");
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "\"W'$!I%Rx(o)S%");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.chomp(" is less than 0: ", "TZ[{a+4l3c");
      assertEquals(" is less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.chomp("`=E9,\"J[+u.", (String) null);
      assertEquals("`=E9,\"J[+u.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.chomp(" is not in the range '0' - '9'", " is not in the range '0' - '9'");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.chop("\"W'$!I%Rx(o)S%");
      assertNotNull(string0);
      assertEquals("\"W'$!I%Rx(o)S", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.repeat(",lENGTH: ", 1);
      assertEquals(",lENGTH: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.repeat("", 128);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.repeat("h", "", 10);
      assertEquals("hhhhhhhhhh", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.repeat("s+", 22);
      assertNotNull(string0);
      assertEquals("s+s+s+s+s+s+s+s+s+s+s+s+s+s+s+s+s+s+s+s+s+s+", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "0H<$'8/UL-_=I|8K<-s", 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.repeat("[buESDM$bWv", (String) null, (-1172));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.rightPad("\"W'$!I%Rx(o)S%", (-2826), 'B');
      assertEquals("\"W'$!I%Rx(o)S%", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 31, "rlx:\"?Q");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, "VFs?f RhfLpb}4MAxU");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      // Undeclared exception!
      StringUtils.rightPad("8mJi", 18275, (String) null);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.center("+D]", 75, "q4,/`i{w0b;6.,bq4,/`i{w0b;6.,bq4,/`i{w0b;6.,bq4,/`i{w0b;6.,bq4,/`i{w0b;6.,b");
      assertEquals("q4,/`i{w0b;6.,bq4,/`i{w0b;6.,bq4,/`i+D]q4,/`i{w0b;6.,bq4,/`i{w0b;6.,bq4,/`i", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 7, 'T');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.leftPad("TY-(VSWaW+p{InCombiningDiacriticalMarks}+", 16, "");
      assertEquals("TY-(VSWaW+p{InCombiningDiacriticalMarks}+", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.center("', is neither of type Map.Entry nor an Array", 60, "7)gjtB$b");
      assertEquals("7)gjtB$b', is neither of type Map.Entry nor an Array7)gjtB$b", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.stripStart("w9GM", (String) null);
      int int0 = StringUtils.length(string0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.center("", 0, 's');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.center("(J0@(4(VW|gM`:zqL!", 4);
      assertEquals("(J0@(4(VW|gM`:zqL!", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-1019), "P(}$2^Q#/1x3P(wMf$");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.center("40o+h%x__8lxa8hA{g", (-1088), "/r7Ki|IpX8");
      assertEquals("40o+h%x__8lxa8hA{g", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.center("", 31, (String) null);
      assertEquals("                               ", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.center("p{InCombiningDiacriticalMarks}+", 11, "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      String string0 = StringUtils.upperCase("", locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("");
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.lowerCase("\"W'$!I%Rx(o)S%");
      assertNotNull(string0);
      assertEquals("\"w'$!i%rx(o)s%", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.capitalize("<w}hQ6G(~z;''67q%{");
      assertEquals("<w}hQ6G(~z;''67q%{", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(" vs ");
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.swapCase("Wl2m}D^s7N?Jn1");
      assertEquals("wL2M}d^S7n?jN1", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.upperCase("FifZue3/B|gmTcE65~ ");
      assertEquals("FIFZUE3/B|GMTCE65~ ", string0);
      
      int int0 = StringUtils.countMatches("SecurityException occurred", string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, ')', 'Z');
      int int0 = StringUtils.countMatches("SecurityException occurred", string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      int int0 = StringUtils.countMatches("   ", "   ");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("IllegalAccessException occurred");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = StringUtils.isAlpha(charBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("ss than 0: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.replaceChars("QA|B<C&", "QA|B<C&", "_S*KU0z7$j$@iiI>J#");
      assertEquals("_S*KU0z", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("java.lang.Object@554fcebd7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.rightPad(" ", 3732);
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("CZh u(fx:YgRCZh u(fx:YgRskf+)8p`haKVp^H5+)8p`haKVp^H5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("\"3jSyZzl~P-&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = StringUtils.center("6@k", 57);
      assertEquals("                           6@k                           ", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" in an array of ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-280), "Sfi[%,<I");
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("9%`WTc=~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("normaliz");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("M>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("A");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.defaultString("No7c<]_,%<'owx-@");
      assertEquals("No7c<]_,%<'owx-@", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.defaultString("\"W'$!I%Rx(o)S%", "\"W'$!I%Rx(o)S%");
      assertEquals("\"W'$!I%Rx(o)S%", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, "org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty(",Ig}1mx", (String) null);
      assertEquals(",Ig}1mx", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = StringUtils.reverse("40o+h%x__8lxa8hA{g");
      assertEquals("g{Ah8axl8__x%h+o04", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '(');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 4);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.abbreviate("org.apache.commons.lang3.CharSequenceUtils", 20, 31);
      assertEquals("...mons.lang3.CharSequenceUtils", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-1), 101);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("g&v%@a:l}]E8On*", 1025, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.abbreviate("VT?IIYStrings musG not be null", 16, 8);
      assertEquals("...sG...", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 48);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("r", "The character ", 0);
      assertEquals("r", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("-#JG:c\">#L]?ThG", "", 3368);
      assertEquals("-#JG:c\">#L]?ThG", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("r", "The character ", 60);
      assertEquals("r", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("q4,/`i{w0b;6.,bq4,/`i{w0b;6.,bq4,/`i+D]q4,/`i{w0b;6.,bq4,/`i{w0b;6.,bq4,/`i", "r", 16);
      assertEquals("q4,/`i{wrbq4,/`i", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.difference("SecurityException occurred", "SQ)YXa.pryE");
      assertEquals("Q)YXa.pryE", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "M)&");
      assertEquals("M)&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.difference("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'E');
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) ">q?(N[Sv$", (CharSequence) string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.substring("SecurityException occurred", 791);
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.difference("fW?82c! U&/A7?", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("OCSrWMMB");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "2<.";
      stringArray0[1] = "2<.";
      stringArray0[2] = "2<.";
      stringArray0[3] = ">)LC6#^.R+mI";
      stringArray0[4] = "2<.";
      stringArray0[5] = "2<.";
      stringArray0[6] = "2<.";
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.repeat("Strings must not be null", "Strings must not be null", 108);
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = "Strings must not be null";
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("Strings must not be null", string1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[1] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[2] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[3] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[4] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[5] = "p{InCombiningDiacriticalMarks}+";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null);
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", (CharSequence) "");
      assertEquals(77, int0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "2#O'heL4Y+PFOK:((((2#O'heL4Y+PFOK:((", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "$HWg+=]^>k5", (CharSequence) "$HWg+=]^>k5");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "sP26z4ln3X", (CharSequence) "h");
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, (-718));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "lydk;t}.qO/kPWB1", (CharSequence) null, (-2034));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "b", (-1533));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = StringUtils.repeat("q7<r\"u(y@pIt6*iD+LA", "q7<r\"u(y@pIt6*iD+LA", (int) 'h');
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) string0, 2836);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||Il%IJi", (CharSequence) "", 1080);
      assertEquals(256, int0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "q4,/`i{w0b;6.,b", (CharSequence) "q4,/`i{w0b;6.,bq4,/`i{w0b;6.,bq4,/`i{w0b;6.,bq4,/`i{w0b;6.,bq4,/`i{w0b;6.,b", 478);
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "b{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toab{-b7,#Toa", (CharSequence) "b{-b7,#Toa", 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width with offset is 7", (CharSequence) "dWU<B54@\"T;a#TimeToLive of ", 29);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.startsWithAny("h", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.startsWithAny("/4r", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[3] = (CharSequence) "6@k";
      boolean boolean0 = StringUtils.startsWithAny("6@k", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" ?V[[]'F");
      assertEquals("?V[[]'F", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("\"W'$!I%Rx(o)S%", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.endsWithAny("PNiCS!CO_f%Lk6bZ", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
      boolean boolean0 = StringUtils.endsWithAny("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", charSequenceArray0);
      assertTrue(boolean0);
  }
}
