/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 16:33:03 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

 
public class StringUtils_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = StringUtils.abbreviate("+Rt", 2466);
      assertNotNull(string0);
      assertEquals("+Rt", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&m-", "&m-");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("8+|XXhf>9qD", "p{InCombiningDiacriticalMarks}+");
      assertEquals("8+|XXhf>9qD", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-1864));
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("5>;+7]/7DLMTDWgEr", string0, 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("voXCDy>mM@");
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("+Rt", "+Rt", 2466);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("java.lang.String@0000000001", "in an array of", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[0];
      String string0 = StringUtils.join(charBufferArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "The String must not be empty");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("B?|g_#(DMB");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("NPBHS'OL)", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.endsWithAny("{t&.X)A,", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Strings must not be null");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "The String must not be empty");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("sun.text.Normalizer is not available");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharBuffer charBuffer0 = StringUtils.defaultIfBlank((CharBuffer) null, (CharBuffer) null);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("                                                                                                                                                                                                                                                                ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("(ihflVa(|X4qV");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.trimToNull("5WQJ|");
      assertNotNull(string0);
      assertEquals("5WQJ|", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.trimToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("(ihflVa(|X4qV");
      assertEquals("(ihflVa(|X4qV", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.stripToNull("U!");
      assertEquals("U!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("h<@*");
      assertEquals("h<@*", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "IFPIDCk#<lkaz3#\u0005L");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", '", " is less than 0: ", 0);
      String[] stringArray1 = StringUtils.stripAll(stringArray0, ", '");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 1311);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = string0;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{rbd2Si=Y mh$*x";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "'+ZK");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.strip("}(B*zv>_1{@@", "The Array must not be null");
      assertEquals("}(B*zv>_1{@@", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "\\u00";
      String string1 = StringUtils.normalizeSpace(string0);
      String string2 = StringUtils.stripEnd("00u", string1);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "tA>E>9VPb,DQ&");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "Minimum abbreviation width with offset is 7", (CharSequence) "java.text.Normalizer is not available");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "Arguments cannot both be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("xIT^chMy\"6\"p] mDx$;CV", " 1$&z%FVy~kTeru");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("ARGUMENTS CANNOT BOTH BE NULL", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "htZEU-3vj4X9Sem", 57);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 256);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "~;glF6X* bTv].#WnU", 65, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 2, 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) ":}tN+");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "F}KUPy+gm^3R@{OMwL", (CharSequence) "F}KUPy+gm^3R@{OMwL");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) ":(/w", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "'>!r?t(eMhk>qK", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "The Character must not be null", (CharSequence) null, (-649));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "?hu^y1;F\"OewtW", (-1728));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", (CharSequence) null, 811);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 243);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 7);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("|Dm", "!d7OYC3=z|Dm", 806);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "+Exuld,inQ(x@", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "#@;nW^l,}2d", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-2876));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "!d7OYC3=z|Dm");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "#@;nW^l,}2d", (CharSequence) "#@;nW^l,}2d");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "#@;nW^l,}2d", (CharSequence) "u3YDD:(0");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "#@;nW^l,}2d", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-2492));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "jau3YDD:(0va.text.Normalizer is not available", 0, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 2895, 2112);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "#@;nW^l,}2d");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "jau3YDD:(0va.text.Normalizer is not available", (CharSequence) "jau3YDD:(0va.text.Normalizer is not available");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, (int) '\"');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "The String must not be empty", (CharSequence) "{t&.X)A,", 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "!sSNV", (CharSequence) null, (-839));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "p", (CharSequence) "p");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ywrnz$,i", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-2219));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "5WQJ|", (CharSequence) null, 1057);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ot\"uJ;_ws#S&6d?", (CharSequence) "Search and Replace array lengths don't match: ", (-575));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "sun.text.Normalizer is not available", (CharSequence) "");
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width is 4", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "U!", 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, 97);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) " ", 32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "The character must not be null", (CharSequence) "The character must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) ".pg?SHSwR", (CharSequence) "BBBBBBBBBBBBBBBBBBBB.pg?SHSwR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "timeToLive of ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("", "C&7nsc.8F$n&-PraSJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = StringUtils.leftPad("Az", 3071);
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, "Az");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("The Character must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = StringUtils.right("", 1057);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("HJ&<mMG$t~}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny((CharSequence) "A^BZL0fk4", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = StringUtils.rightPad(" vs ", 4569, (String) null);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string0, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'g';
      int int0 = StringUtils.indexOfAny((CharSequence) "\"g", charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "#@;nW^ }2java.text.Normalizer is not available";
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      int int0 = StringUtils.indexOfAny(charSequenceArray0[0], charArray0);
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "org.apache.commons.lang3.ArrayUtils");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "InvocationTargetException occurredInvocationTargetException occurredInvocationInvocationTargetException occurred", "InvocationTargetException occurred");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "java.lang.Integer@0000000001", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "c~LuJvc/wwwww", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 's';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Arguments cannot both be null", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "|]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "java.text.Normalizer is not available", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "sun.text.Normalizer is not available", "sun.text.Normalizer is not available");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "my|,|wD,j^tqZ,l[]?>", charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.apache.commons.lang3.ObjectUtils", (CharSequence) ", Length: 0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "M6#yV<", (CharSequence) "M6#yV<GI0JN");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "The character ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ":(/w", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{rbd2si=y mh$*x", "jzmi,5hIQS7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "X", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.exception.CloneFailedException", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "#@;nW^l,}2d", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "#@;nW^l,}2d", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p", "p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Ind~ex: , 'Ind~ex: , 'Ind~ex: , 'Ind~ex: , 'Ind~ex: , ', '", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "2d&gH";
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "4";
      charSequenceArray0[1] = (CharSequence) "4";
      int int0 = StringUtils.indexOfAny((CharSequence) "4", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("Array element ", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "b`QeQnOB5O1XdaWKZ\"";
      int int0 = StringUtils.lastIndexOfAny("b`QeQnOB5O1XdaWKZ\"", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1781));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 2466);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substring("", 10);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substring("", 6, 6);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 1057, 1057);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substring("", 2204, (-1517));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substring("kU{vU", (-3374), (-1445));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substring("sun.text.Normalizer is not available", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.left("oZ[}", 32);
      assertNotNull(string0);
      assertEquals("oZ[}", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("F?HX0aD2;0ny?|9!`", ", '");
      assertEquals("F?HX0aD2;0ny?|9!`", string0);
      
      String string1 = StringUtils.left(string0, (-1786));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.left("|MqhEQ|c5k@7XWJEfX8", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.right("", (-637));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.right("!d7OYC3=z|Dm", 3);
      assertEquals("|Dm", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.mid("#@;nW^l,}2d", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.mid("$%TA|f", 32, (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.mid("u3YDD:(0", 57, 57);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.mid("Cannot get the toString of a null identity", (-3310), 1591);
      assertEquals("Cannot get the toString of a null identity", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, "!'8'Y3pU\"B\"_");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Tl%_C3X|<, }R", (String) null);
      assertNotNull(string0);
      assertEquals("Tl%_C3X|<, }R", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringBefore("p;X3f9sg=P", "-F0i]yD'E\"_2vhiv4aM");
      assertEquals("p;X3f9sg=P", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringBefore("tjX{tyN", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringBefore("x=B", "x=B");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substringAfter("St&B[H@2RT9M9n$4X@<", "{t&.X)A,");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "N?ix8(E");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Arguments cannot both be null", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringAfter("a!]Q@0%pf:B nWr", "a!]Q@0%pf:B nWr");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("65kY 0z,[(@,r>", "");
      assertEquals("65kY 0z,[(@,r>", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Cannot store ", "Cannot store ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("bO-xaU{VL|.k8Z'):", ".");
      assertEquals("k8Z'):", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.rightPad(" ", 4981, " ");
      String string1 = StringUtils.substringAfterLast(string0, (String) null);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("d?+'s%KBU:<98_j5[z#", "?)M^CvKer*U@#ss^M|lkiK");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("z4<1]rO>RKRgxR!:j!", "z4<1]rO>RKRgxR!:j!");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.chomp("#@;nW^ }2java.text.Normalizer is not available");
      String string1 = StringUtils.substringBetween(string0, "my|,|wD,j^tqZ,l[]?>");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.substringBetween("bRcJHr|", (String) null, "yH>~G_,dZnk");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.substringBetween("zA37~N291tyH/OLv", "Q12;9n1ij\"DW&!%|", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Oz[}", "Oz[}");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.substringBetween("T*", "T*", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "x~iN/HNQ[yh4>`3':[!]SL1l", "q12;9N1IJ\"dw&!%|");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("d?+'s%KBU:<98_j5[z#", "d?+'s%KBU:<98_j5[z#", "GI0JN");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" is less than 0: ", (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "~v", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "+Exuld,inQ(x@", "xwnU");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" 1$&z%FVy~kTeru", "M$pjvex=", "xIT^chMy\"6\"p] mDx$;CV");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("java.text.Normalizer is not available", "Minimum abbreviation width with offset is 7", "}(B*zv>_1{@@}(B*zv>_1{@@");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "org.apache.commons.lang3.CharUtils");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("ARGUMENTS CANNOT BOTH BE NULL", (String) null);
      String string0 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertNotNull(string0);
      assertEquals("ARGUMENTSCANNOTBOTHBENULL", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("ua-=okw[zGuhm6=`!n", "");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("InvocationTargetException occurredInvocationTargetException occurredInvocationInvocationTargetException occurred", "InvocationTargetException occurred", 112);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("ES5_T", "ES5_T", (-1638));
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'h');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.center("T*", 1398, '!');
      String string1 = StringUtils.reverseDelimited(string0, '!');
      assertEquals("T*", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.ArrayUtils", 'm');
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("                                sun.text.Normalizer is not available", (String) null);
      assertEquals(36, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("                                                                                                                                                                                                                                                                ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null", "#");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("k^Rc4`:/j", "ARGUMENTS CANNOT BOTH BE NULL");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("'7Rg_7+", "'7Rg_7+");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("sun.text.Normalizer is not available");
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("|Dm");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'Y');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, ' ', (-1128), (-1128));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", '%');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("sun.text.Normalizer is not available", "sun.text.Normalizer is not available");
      String string0 = StringUtils.join((Object[]) stringArray0, 'z');
      assertEquals("z", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0, 'X');
      assertNotNull(string0);
      assertEquals("X", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "Minimum abbreviation width with offset is 7");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "NFD", (-456), (-1156));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("', is neither of type Map.Entry nor an Array", "Tq", 48);
      String string0 = StringUtils.join((Object[]) stringArray0, "", 48, 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0, "F}KUPy+gm^3R@{OMwL");
      assertNotNull(string0);
      assertEquals("F}KUPy+gm^3R@{OMwL", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '}');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      Iterator<Object> iterator0 = linkedList0.iterator();
      String string0 = StringUtils.join(iterator0, 'L');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("java.text.Normalizer");
      stack0.add((String) null);
      ListIterator<String> listIterator0 = stack0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'N');
      assertTrue(listIterator0.hasPrevious());
      assertEquals("java.text.NormalizerN", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category1);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, 'L');
      assertEquals("DISPLAYLFORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      String string0 = StringUtils.join((Iterable<?>) treeSet0, "                            normalize                            ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "x~iN/HNQ[yh4>`3':");
      assertNull(string0);
  }

////  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      priorityQueue0.add("{}");
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, (String) null);
      assertNotNull(string0);
      assertFalse(priorityQueue0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      arrayList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = arrayList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "C!@q/`~4");
      assertFalse(listIterator0.hasNext());
      assertEquals("C!@q/`~4", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category1, locale_Category0, locale_Category1);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, "Y?,.8Czvr6wpYGH,g");
      assertEquals("DISPLAYY?,.8Czvr6wpYGH,gFORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("Yn6LLaQ]%R");
      stack0.add("ARGUMENTS CVNNOT BOTH BE NULLArguments cVnnot both be null");
      ListIterator<String> listIterator0 = stack0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertFalse(listIterator0.hasNext());
      assertEquals("Yn6LLaQ]%RARGUMENTS CVNNOT BOTH BE NULLArguments cVnnot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      String string0 = StringUtils.join((Iterable<?>) treeSet0, ':');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'V');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("#@;nW^l,}2d");
      assertEquals("#@;nW^l,}2d", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("sun.text.Normalizer is not available");
      assertEquals("sun.text.Normalizerisnotavailable", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.removeStart("Arguments cannot both be null", "ARGUMENTS CANNOT BOTH BE NULL");
      assertEquals("Arguments cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.removeStart(" ", (String) null);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.removeStart("?x/`+JLg:(NE)[", "?x/`+JLg:(NE)[");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(" is not in the range '0' - '9'", "");
      assertEquals(" is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("THE CHARACTER ", "The character ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.repeat(" is not in the range '0' - '9'", "Minimum abbreviation width is 4", 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.removeEnd("#@;nW^l,}2d", "java.text.Normalizer is not available");
      assertEquals("#@;nW^l,}2d", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.repeat("6i!^>-", "", 4870);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.repeat("Index: ", ", '", 5);
      assertEquals("Index: , 'Index: , 'Index: , 'Index: , 'Index: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("> <384[Agg?ajp~[", (String) null);
      assertNotNull(string0);
      assertEquals("> <384[Agg?ajp~[", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("ezQ6!b%?LISm.s6?=", "YJ#O");
      assertEquals("ezQ6!b%?LISm.s6?=", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("java.text.Normalizer$Form", "java.text.Normalizer$Form");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.remove("", "2d&gH");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.remove("                            normalize                            ", "L$^WIdp ~8|]");
      assertEquals("                            normalize                            ", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.remove("dp!-=j4t<$nc`uqt", (String) null);
      assertNotNull(string0);
      assertEquals("dp!-=j4t<$nc`uqt", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.remove("", '>');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.remove("k^!!YqIJ?D\"Oq", '>');
      assertEquals("k^!!YqIJ?D\"Oq", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.remove(" 1$&z%FVy~kTeru", 'e');
      assertEquals(" 1$&z%FVy~kTru", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.replace(", Length: ", "", "");
      assertEquals(", Length: ", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("yk-)}PT?", "sun.text.Normalizer is not available", (String) null);
      assertNotNull(string0);
      assertEquals("yk-)}PT?", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.replace("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", "l'{|3X('Q[$zh}", 0);
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("%_", "%_", "}h5`P|5nN(6*N");
      assertEquals("}h5`P|5nN(6*N", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.replace("[;", "[;", "Y", 999);
      assertEquals("Y", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.replace("(kr", "(kr", "Duk5L+~8", (-767));
      assertEquals("Duk5L+~8", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("N43_P%-}/=6{T", (String[]) null, (String[]) null);
      assertEquals("N43_P%-}/=6{T", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null");
      String string0 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("java.text.Normalizer$Form", stringArray0, stringArray0);
      assertEquals("java.text.Normalizer$Form", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.replaceEachRepeatedly("tA>E>9VPb,DQ&", stringArray0, (String[]) null);
      assertEquals("tA>E>9VPb,DQ&", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null");
      String[] stringArray1 = new String[4];
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("Minimum abbreviation width is 4", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 5 vs 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "";
      String string0 = StringUtils.replaceEachRepeatedly("decompose", stringArray0, stringArray0);
      assertEquals("decompose", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "}(B*zv>_1{@@";
      stringArray0[1] = "}(B*zv>_1{@@";
      String string0 = StringUtils.replaceEach("}(B*zv>_1{@@", stringArray0, stringArray0);
      assertEquals("}(B*zv>_1{@@", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p\"ju56l?3*CQ)}t!l", "kp");
      String string0 = StringUtils.replaceEach("p\"ju56l?3*CQ)}t!l", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("p\"ju56l?3*CQ)}t!l", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "decompose";
      stringArray0[1] = "y]NOi1B=VL';:(";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("decompose", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: decompose
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.replaceChars("#@;nW^l,}2d", 'W', 'W');
      assertEquals("#@;nW^l,}2d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'Q', '@');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", " is not in the range '0' - '9'", "}8kAGMc^>");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.replaceChars("vv1*e=d+dcW", "", "p");
      assertEquals("vv1*e=d+dcW", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Fx E(~$", "Fx E(~$", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.replaceChars(":[L,OPuwJ6~/eJ2ee>z", "HZtkve/ r", "Search and Replace array lengths don't match: ");
      assertEquals(":[L,OPuwJ6~ hJ2hh>z", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.replaceChars("nnl", "NFD", "[;nB");
      assertEquals("nnl", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.overlay("", (String) null, 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "WBsdRoNsS&E=Vk<9", 1906, (-1200));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.overlay("0", "WzIQOJWP", (-1), (-1));
      assertEquals("WzIQOJWP0", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.overlay("vj9%", "org.apache.commons.lang3.StringUtils", 8192, 367);
      assertEquals("vj9%org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.overlay("qt9i,=#Z7b|DK?Dj)", "sun.text.Normalizer is not available", 2632, 9);
      assertEquals("qt9i,=#Z7sun.text.Normalizer is not available", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.chomp("', is neither of type Map.Entry nor an Array", (String) null);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.chomp("Minimum abbreviation width with offset is 7", "r");
      assertEquals("Minimum abbreviation width with offset is 7", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.chomp("org.apache.commons.lang3.StringUtils", "");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.chop("Minimum abbreviation width is 4");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is ", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.chop("#");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.repeat(", Length: ", 1);
      assertEquals(", Length: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1444);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.repeat("AJ", 2892);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, ", '", 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.repeat("", (String) null, (-5447));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-1), ',');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.rightPad("9TF4TJGk$sON", (-4133), "9TF4TJGk$sON");
      assertEquals("9TF4TJGk$sON", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.rightPad("M6#yV<", 11, "GI0JN");
      assertEquals("M6#yV<GI0JN", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 10, "w9hNkcV5(sDX_TlC");
      assertEquals("w9hNkcV5(s", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-238), 'p');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.leftPad("gT", 8214, ' ');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-1), "#Az3HvbOu{2");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.leftPad(" has no clone method", 3876, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.leftPad("#@;nW^l,}2d", 0, "#@;nW^l,}2d");
      assertEquals("#@;nW^l,}2d", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.leftPad("lkiK", 8, "lkiK");
      assertEquals("lkiKlkiK", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.leftPad("u3YDD:(0", 11, "#@;nW^l,}2d");
      assertEquals("#@u3YDD:(0", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int int0 = StringUtils.length("SecurityException occurred");
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.center("tA>E>9VPb,DQ&", (-348), '=');
      assertEquals("tA>E>9VPb,DQ&", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.center("Index: ", 1, '<');
      assertEquals("Index: ", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-60), "2d&gH");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.center("-H!uhf7Qr", 0, "-H!uhf7Qr");
      assertEquals("-H!uhf7Qr", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.center("WzIQOJWP", 8192, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.center("SSSSSSGI0JN", 11, "Y?,.8Czvr6wpYGH,g");
      assertEquals("SSSSSSGI0JN", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.upperCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      String string0 = StringUtils.upperCase("                                                                                                                                                                                                                                                   YOnHS!x9Z?;HCXK                                                                                                                                                                                                                                                    ", locale0);
      assertEquals("                                                                                                                                                                                                                                                   YONHS!X9Z?;HCXK                                                                                                                                                                                                                                                    ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = StringUtils.lowerCase("Cannot store ");
      assertNotNull(string0);
      assertEquals("cannot store ", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      String string0 = StringUtils.lowerCase("+Rt", locale0);
      assertNotNull(string0);
      assertEquals("+rt", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.capitalize(" is not in the range '0' - '9'");
      assertEquals(" is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("45@l[hP[~~");
      assertEquals("45@l[hP[~~", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = StringUtils.swapCase("Q12;9n1ij\"DW&!%|");
      assertEquals("q12;9N1IJ\"dw&!%|", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = StringUtils.center("YOnHS!x9Z?;HCXK", 502);
      assertEquals("                                                                                                                                                                                                                                                   YOnHS!x9Z?;HCXK                                                                                                                                                                                                                                                    ", string0);
      
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = StringUtils.center("T*", 1398, '!');
      int int0 = StringUtils.countMatches(string0, (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha(":}(sB}fEZkmg6MxKeS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("DISPLAYDISPLAYFORMATDISPLAYFORMAT");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("T*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("IllegalAccessException occurred");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("tA>E>9VPb,DQ&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("Y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("+Rt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("                            normalize                            ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("Minimum abbreviation width is 4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("}(B*zv>_1{@@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("2d&gH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" in an array of ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" 1$&z%FVy~kTeru");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("Hdyc+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("i");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("N]Pu0_hT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("AJ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.ArrayUtils", "[Z2Nx.Bbv<oCa{Qdg");
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, "84AytP'_)D");
      assertNotNull(string0);
      assertEquals("84AytP'_)D", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank(", '", " is less than 0: ");
      assertEquals(", '", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "{t&.X)A", (CharSequence) "{t&.X)A");
      assertEquals("{t&.X)A", charSequence0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) "");
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.reverse("The character must not be null");
      assertNotNull(string0);
      assertEquals("llun eb ton tsum retcarahc ehT", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'U');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 3, (-238));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("9TF4TJGk$sON", 256, (-4133));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.abbreviate("java.text.Normalizer is not available", 1123, 14);
      assertEquals("...t available", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 22, 14);
      assertEquals("...idth wit...", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("PKwzDt0vzHl; f~d", 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 4);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("9TF4TJGk$sON", "}IO)xKM", 16);
      assertEquals("9TF4TJGk$sON", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("pH-", "", (-3336));
      assertEquals("pH-", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("normalize", "L$^WIdp ~8|]", 0);
      assertEquals("normalize", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("LD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[SLD8L[S", "4}PDc[B__G", 37);
      assertEquals("LD8L[SLD8L[SLD4}PDc[B__GSLD8L[SLD8L[S", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.difference("                            normalize                            ", "~;glF6X* bTv].#WnU");
      assertEquals("~;glF6X* bTv].#WnU", string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = StringUtils.difference(" yKg(zY=26i Xp", (String) null);
      assertEquals(" yKg(zY=26i Xp", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = StringUtils.difference(":}tN+", ":}tN+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "lBVo=d9Wn:--94,Z%fh");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "|+/yh?ZmgWf.0~eT=)m", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) " is less than 0: ", (CharSequence) " is less than 0: ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "vB", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " in an array of ";
      charSequenceArray0[1] = (CharSequence) " in an array of ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v]E`[12v";
      charSequenceArray0[1] = (CharSequence) "12v]E`[";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("@4a</0X'", "65kY 0z,[(@,r>");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("@4a</0X'", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&Amo>*|u\"8%E0:6";
      stringArray0[1] = "&dD#}P}\u0007(F&/Vij4";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "INVOCATIONTARGETEXCEPTION OCCURRED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "6i!^>-");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", Length: ", (CharSequence) ", Length: ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot store ", (CharSequence) "");
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = StringUtils.rightPad("7qC!-K@LVj?R|m", 1548);
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM");
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "cbS6~!ZamM+BO8p`", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = StringUtils.chomp("#@;nW^ }2java.text.Normalizer is not available");
      assertEquals("#@;nW^ }2java.text.Normalizer is not available", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) string0, 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "The String must not be empty", (CharSequence) null, 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "sun.text.Normalizer is not available", (CharSequence) "60Z45WCw:rjGQ", (-796));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#@;nW^l,}2d", (CharSequence) "09Hng?/TW", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 3773);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "z", (CharSequence) "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#Az3HvbOu{2", (CharSequence) "", 350);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "java.lang.String@0000000001", (CharSequence) "java.lang.String@0000000001", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = StringUtils.rightPad("E*ogqFd/j6>nF*n", 1855, "E*ogqFd/j6>nF*n");
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) "org.apache.commons.lang3.ArrayUtils", 65);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.startsWithAny("C&7nsc.8F$n&-PraSJ", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null");
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("0z}!WD$o|G..[on6l", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("7Dy");
      boolean boolean0 = StringUtils.startsWithAny("7Dy", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("+rt", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "The Character must not be nul";
      boolean boolean0 = StringUtils.endsWithAny("The Character must not be nul", charSequenceArray0);
      assertTrue(boolean0);
  }
}
