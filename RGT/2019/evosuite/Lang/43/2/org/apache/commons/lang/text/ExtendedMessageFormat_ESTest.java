/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 05:41:34 GMT 2019
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.lang.text.ExtendedMessageFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.junit.runner.RunWith;

 
public class ExtendedMessageFormat_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("", map0);
      // Undeclared exception!
      try { 
        extendedMessageFormat0.setFormatsByArgumentIndex((Format[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.ExtendedMessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        extendedMessageFormat0.setFormatByArgumentIndex(3380, mockSimpleDateFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.ExtendedMessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("", locale0);
      // Undeclared exception!
      try { 
        extendedMessageFormat0.setFormat(0, extendedMessageFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.ExtendedMessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("^s4X:~:g*!C0|PQEW,j", locale0);
      String string0 = extendedMessageFormat0.toPattern();
      assertEquals("^s4X:~:g*!C0|PQEW,j", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<DecimalFormat, MessageFormat> hashMap0 = new HashMap<DecimalFormat, MessageFormat>();
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("CHU>~e&!!k:O.Nr3k", hashMap0);
      Format[] formatArray0 = new Format[5];
      // Undeclared exception!
      try { 
        extendedMessageFormat0.setFormats(formatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.ExtendedMessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<NumberFormat, ChoiceFormat> hashMap0 = new HashMap<NumberFormat, ChoiceFormat>();
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("Y:K1/'j", hashMap0);
      // Undeclared exception!
      try { 
        extendedMessageFormat0.applyPattern("3{,,BxT4h]g#F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 2: ,
         //
         verifyException("org.apache.commons.lang.text.ExtendedMessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<Integer, ChoiceFormat> hashMap0 = new HashMap<Integer, ChoiceFormat>();
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("a{5}g,LE?PBxrBSQ", hashMap0);
      assertEquals("a{5}g,LE?PBxrBSQ", extendedMessageFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashMap<Integer, ChoiceFormat> hashMap0 = new HashMap<Integer, ChoiceFormat>();
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("`%h1-6>O*os#@=j", hashMap0);
      // Undeclared exception!
      try { 
        extendedMessageFormat0.applyPattern("oB{ ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated format element at position 3
         //
         verifyException("org.apache.commons.lang.text.ExtendedMessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("'\"", locale0, map0);
      // Undeclared exception!
      try { 
        extendedMessageFormat0.applyPattern("hXX{0 eDo@PU=4zy<ln");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 4: 0 e
         //
         verifyException("org.apache.commons.lang.text.ExtendedMessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HashMap<NumberFormat, ChoiceFormat> hashMap0 = new HashMap<NumberFormat, ChoiceFormat>();
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat("XX{0,-xo@P{(z<Zj", hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated format element at position 5
         //
         verifyException("org.apache.commons.lang.text.ExtendedMessageFormat", e);
      }
  }
}
