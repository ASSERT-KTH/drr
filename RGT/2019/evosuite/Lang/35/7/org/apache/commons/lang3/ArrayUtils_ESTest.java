/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 23:34:59 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class ArrayUtils_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.add(charArray0, 'V');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'V'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 1544L);
      assertArrayEquals(new long[] {1544L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "K$x");
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) "arp,xO6R");
      assertEquals("arp,xO6R", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'Z');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)48);
      assertArrayEquals(new short[] {(short)0, (short)48}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.add(intArray0, 1, (-1219));
      assertArrayEquals(new int[] {0, (-1219), 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 1, (byte)37);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals(")WM+!.~v++", ")WM+!.~v++");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1720.9492296));
      assertArrayEquals(new double[] {(-1720.9492296)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "K$x";
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "K$x");
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, (-97), (short)1003);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -97, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 3187.33241030899, (double) 363);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'h');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_CHAR_ARRAY, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)61);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[7];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1), 108.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.add(longArray0, (-1L));
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-1780.3591135801062));
      assertEquals(0, doubleArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1811L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1811L);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 363);
      assertNotNull(intArray1);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)65;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)65);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AbstractMap.SimpleEntry<Object, Integer>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Integer>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 3);
      Object object0 = new Object();
      Integer integer0 = new Integer(1441);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(object0, integer0);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(abstractMap_SimpleEntryArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 1, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (int) 5, (-1073));
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-1), 1968);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.indexOf(longArray0, 718L);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 362, int0);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2, 2);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 10, (-29));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2521), 2);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 110, (-1864));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 236, 0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-615), 68);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 3, (-2184));
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 64, 64);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1), 0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-381), (int) (short)1451);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-3069), 27);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1867), (-2305));
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[8];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte) (-48), (int) (byte)57);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 383, (int) (byte)81);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-135), 1191);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 3864);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-1), (-1));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-125), (int) (byte)4);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-2365), 0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-1), (-1));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, Integer.MAX_VALUE);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1126), 503);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-662), 0);
      assertNotNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, Integer.MAX_VALUE, (int) (byte)4);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char char0 = '<';
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) char0, (int) char0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1480), 1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray1, (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, (String[]) null);
      assertNotNull(stringArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray1, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) longArray1);
      assertFalse(boolean0);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long[] longArray0 = new long[8];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[] longArray0 = new long[5];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 280, (-2404));
      boolean boolean0 = ArrayUtils.isSameLength(longArray1, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 280, (-2404));
      boolean boolean0 = ArrayUtils.isSameLength(longArray1, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertEquals(8, intArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertEquals(18, shortArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = new char[7];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[5];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[5];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[] floatArray0 = new float[8];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = new float[8];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = new boolean[6];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (-1223));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1223, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.isSameType((byte)9, byteArray0[5]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayUtils.reverse(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[8];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      short[] shortArray0 = new short[4];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[5];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer integer0 = new Integer(0);
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) "aa", (-2146126198));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = objectArray0[3];
      objectArray0[6] = object0;
      objectArray0[7] = objectArray0[2];
      objectArray0[8] = objectArray0[7];
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Object object0 = new Object();
      int int0 = ArrayUtils.indexOf((Object[]) longArray0, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) "EnX", 623);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[] longArray0 = new long[7];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray1, (Object) "HJ, p9W$I{0:$m\"=", (-1));
      assertEquals((-1), int0);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = objectArray0[2];
      objectArray0[4] = objectArray0[3];
      objectArray0[5] = objectArray0[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 15);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 1451);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 1451);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, 1L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.indexOf(longArray0, 2719L, (int) (byte) (-106));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long[] longArray0 = new long[9];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 4081L, (-1428));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[] longArray0 = new long[9];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 913);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 'Z';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[3];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((int[]) null, 5809, (int) (byte)89);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = ArrayUtils.indexOf(intArray0, 503, (-744));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2);
      assertArrayEquals(new int[] {0, 0, 2, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-459));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 8, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, 4111);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short)280, (int) (byte)74);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      short[] shortArray0 = new short[8];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (int) (short) (-792));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      short[] shortArray0 = new short[2];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1, (-18));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      short[] shortArray0 = new short[2];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1467);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)2224;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2224);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((char[]) null, 'q');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'Y', (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '9');
      assertEquals(9, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '~', (int) '~');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char[] charArray0 = new char[7];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'r', (int) (byte) (-5));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'C', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\\', (int) (short)3868);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      boolean boolean0 = ArrayUtils.contains(charArray0, '<');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-98));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (-4103));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)1, 4852);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-60), (int) (byte) (-106));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)5, (int) (short)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)92);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)64);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 765.149, (-243));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-2065));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1078.8009817, 1784, 1117.1982313);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)2, (-544), 58.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char char0 = '/';
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1191.60394268;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) char0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-235));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3144.012860740366), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)1, (double) (short)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-2063), (-1633.5));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3.0, 2, (-1132.860315434));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = (double) 'w';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 65.0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1615.33804));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      char char0 = '/';
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) char0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) char0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      float[] floatArray0 = new float[5];
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-1057.5111F), (int) (short) (-1219));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      float[] floatArray0 = new float[6];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-669));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)2909, (int) (short)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 238.99F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 238.99F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      float[] floatArray0 = new float[8];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-4090));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1431655765);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-451));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short)89);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('!');
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'!'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char char0 = '/';
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertEquals(2, characterArray1.length);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '|');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\\');
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char char0 = '/';
      Character character0 = new Character('/');
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(2);
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {2L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (short)0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(3271L);
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertArrayEquals(new long[] {3271L, 0L, 0L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 503;
      integerArray0[1] = (Integer) (-2404);
      integerArray0[2] = (Integer) 503;
      integerArray0[3] = (Integer) 503;
      integerArray0[4] = (Integer) (-2404);
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {503, (-2404), 503, 503, (-2404)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)5);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (int) (short)0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-1202));
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 7);
      assertArrayEquals(new int[] {(-1202), 7, 7, 7, 7, 7, 7}, intArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, (Integer) null);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      int[] intArray0 = new int[4];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 2, (Integer) (-1113));
      assertEquals(5, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      short[] shortArray0 = new short[3];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertEquals(3, shortArray2.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)6);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)74);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1866);
      assertArrayEquals(new short[] {(short)1866}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = (Short) (short) (-2337);
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1866);
      assertArrayEquals(new short[] {(short) (-2337)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      byteArray0[1] = byteArray0[0];
      byteArray0[2] = (Byte) byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-33));
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-13));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)87;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)87;
      Byte byte1 = new Byte((byte)87);
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = Double.valueOf((-3051.26459555372));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-3051.26459555372), (-3051.26459555372), (-3051.26459555372), (-3051.26459555372), (-3051.26459555372), (-3051.26459555372), (-3051.26459555372)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (byte)92);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 2904.9411062386393);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1179.4143267778);
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertArrayEquals(new double[] {1.5, 1179.4143267778, 1.5, 1.5, 1.5}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(1432.4F);
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = floatArray0[1];
      floatArray0[3] = floatArray0[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1432.4F, 1432.4F, 1432.4F, 1432.4F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 1.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(1294.344F);
      floatArray0[0] = float0;
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) floatArray0[0]);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Float[] floatArray0 = new Float[9];
      floatArray0[0] = (Float) (-1.0F);
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-2638.2F));
      assertArrayEquals(new float[] {(-1.0F), (-2638.2F), (-2638.2F), (-2638.2F), (-2638.2F), (-2638.2F), (-2638.2F), (-2638.2F), (-2638.2F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      float[] floatArray0 = new float[8];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = booleanArray0[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean("java.lang.Byte");
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      long[] longArray0 = new long[5];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      int[] intArray0 = new int[9];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 0L, 0, (double) (-2404));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-2750));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean("java.lang.Byte");
      booleanArray0[1] = boolean0;
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) shortArray1, (Object[]) booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Boolean in an array of java.lang.Short
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.addAll((long[]) null, longArray0);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, object0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, 3433, (Object) "pdn}kLS&");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3433, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, 3448, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      char[] charArray0 = ArrayUtils.add((char[]) null, 0, '%');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'%'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 436, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 436, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 5, integerArray0[2]);
      assertEquals(6, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[7] = 'd';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'd');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'd', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2841L));
      assertEquals(1, longArray1.length);
  }
}
