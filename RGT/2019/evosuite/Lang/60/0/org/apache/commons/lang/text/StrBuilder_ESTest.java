/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 12:42:44 GMT 2019
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class StrBuilder_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.setLength(181);
      strBuilder0.trim();
      assertEquals(181, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(115);
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertEquals(115, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("X=AR");
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("[j=zmG.");
      StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, "2*\"oj1Do!\t");
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(476);
      int int0 = strBuilder0.capacity();
      assertEquals(476, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("c|,~<-Oi$");
      strBuilder0.getNewLineText();
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("X=AR");
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) strMatcher_NoMatcher0);
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Reader reader0 = strBuilder0.asReader();
      assertFalse(reader0.ready());
      
      int int0 = reader0.read();
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.substring(0);
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("1.4");
      int int0 = strBuilder0.lastIndexOf('4');
      assertEquals(2, int0);
      assertEquals(3, strBuilder0.size());
      assertEquals(35, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("Invalid offset: ");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#-2xoy");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(0, 0, 'y');
      assertEquals(38, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      int int0 = strBuilder0.indexOf((String) null);
      assertEquals((-1), int0);
      assertEquals(2, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("33}FC!");
      strBuilder0.append((-1L));
      assertEquals(8, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.charMatcher('*');
      StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.asTokenizer();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, (long) 0);
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, (-147));
      int int0 = strBuilder0.lastIndexOf("'; the SystemUtils property value will default to null.");
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-118));
      // Undeclared exception!
      try { 
        strBuilder0.insert((-118), (float) 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -118
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(1, (double) 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadRight(0, 1957, '\"');
      strBuilder0.deleteFirst('o');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("line.separator");
      strBuilder0.insert(5, '6');
      assertEquals(15, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Reader reader0 = strBuilder0.asReader();
      reader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(reader0.ready());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Reader reader0 = strBuilder0.asReader();
      boolean boolean0 = reader0.markSupported();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Reader reader0 = strBuilder0.asReader();
      reader0.mark((-1403));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("4.0");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(0);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("");
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VX.*c(P\")Yc(_>!F3");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'\"");
      char[] charArray0 = new char[4];
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, (-2172), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|5T*][5~1g}");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((String) null, 52, 70);
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VX.*c(P\")Yc(_>!F3");
      strBuilder0.setNullText("JJ");
      strBuilder0.append((StringBuffer) null, (-1617), 4);
      assertEquals(19, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#-2xoy");
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-1066));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1066
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.insert(0, (float) 0);
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder1.setLength(0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append("startIndex must be valid", 10, 10);
      strBuilder1.setLength(10);
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(44);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(44, 44, 'o');
      strBuilder1.minimizeCapacity();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(44, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(115);
      strBuilder0.setLength(115);
      strBuilder0.insert(102, "', is neither of type Map.Entry nor an Array");
      strBuilder0.deleteAll('A');
      strBuilder0.minimizeCapacity();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      Object[] objectArray0 = new Object[3];
      strBuilder0.appendWithSeparators(objectArray0, "NG7yF.}p");
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(16, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("?h");
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-1358));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1358
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("iMJG{maGY2nc0I=");
      // Undeclared exception!
      try { 
        strBuilder0.charAt(44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 44
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(44);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(44, 44, 'o');
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(111, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-322));
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-322), '(');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -322
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$+@");
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(44, ':');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 44
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      strBuilder1.setCharAt(0, 'B');
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("h5|]ai6R?Lx(X5 ");
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-401));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -401
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("4.0");
      strBuilder0.deleteCharAt(0);
      assertEquals(2, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ka:e3Eacmt&6?3");
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(206);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 206
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(476);
      strBuilder0.append(true);
      strBuilder0.toCharArray();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.insert(0, (float) 0);
      char[] charArray0 = strBuilder1.toCharArray(0, 1);
      assertFalse(strBuilder0.isEmpty());
      assertArrayEquals(new char[] {'0'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("y!wdD\"[G<");
      char[] charArray0 = strBuilder0.toCharArray(0, 0);
      assertEquals(0, charArray0.length);
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(0, charArray0.length);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[8];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding(1790, '(');
      char[] charArray0 = new char[8];
      strBuilder0.getChars(charArray0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append("startIndex must be valid", 10, 10);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[5];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|5T*][5~1g}");
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-1078), 0, charArray0, 2517);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1078
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(3943, (-1310), charArray0, 3943);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1310
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1605));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(102, Integer.MAX_VALUE, charArray0, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2147483647
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1790, '3');
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder1.getChars(387, 39, charArray0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(476);
      strBuilder0.setNewLineText("java.class.path");
      strBuilder0.appendNewLine();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(115);
      strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("1.6");
      // Undeclared exception!
      try { 
        strBuilder0.append(":Mx%Q+@:N", (-709), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("%-u2j/R", 4453, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|5T*][5~1g}");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("|5T*][5~1g}", 4, (-4632));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("vfU", 3, 5744);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append("startIndex must be valid", 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-118));
      StringBuffer stringBuffer0 = new StringBuffer();
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|5T*][5~1g}");
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|5T*][5~1g}");
      StringBuffer stringBuffer0 = new StringBuffer("s!");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(44, strBuilder1.capacity());
      assertEquals(12, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StringBuffer stringBuffer0 = new StringBuffer(59);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 59, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, (-45));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m7whAGc~]dQ(9q:~m+");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, 823);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(3682);
      stringBuffer0.append((CharSequence) "'; the SystemUtils property value will default to null.");
      strBuilder0.append(stringBuffer0, 0, 2);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ka:e3Eacmt&6?3");
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 44, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("d");
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, (-395), 0);
      assertEquals(1, strBuilder1.size());
      assertEquals(33, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-1278), 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) strBuilder0;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "_L");
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder0, 44, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.home");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, (-2077));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

////  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) strBuilder0;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "_L");
      strBuilder1.append(strBuilder0, 44, 44);
      assertEquals(154, strBuilder0.capacity());
      assertEquals(154, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(115);
      strBuilder0.setLength(115);
      strBuilder0.append(strBuilder0, 115, 0);
      assertEquals(115, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2680));
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-3535));
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[0];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-118));
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((char[]) null, 0, 3332);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[4];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1795));
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 115, (-3196));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -3196
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 0, (-1535));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1535
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 0, 1084);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 1084
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[7];
      strBuilder0.append(charArray0, 0, 5);
      assertFalse(strBuilder0.isEmpty());
  }

////  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1605));
      StrBuilder strBuilder1 = strBuilder0.append(false);
      strBuilder0.appendFixedWidthPadLeft((-1605), 1257, 'e');
      String string0 = strBuilder1.midString(1257, 1257);
      assertEquals(1262, strBuilder0.capacity());
      assertEquals("00002", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "0Invalid");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("d");
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "d");
      assertEquals(33, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("awt.toolkit");
      Object[] objectArray0 = new Object[9];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-118));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "end < start");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(426);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("|mFUl");
      linkedList0.offerLast("AIX");
      strBuilder0.appendWithSeparators((Collection) linkedList0, "oIQ_^NLK]m/X3oSe.'%");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.iterator();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-2752), 'g');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3657);
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 3657, '_');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendFixedWidthPadLeft(0, 9, ' ');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VX.*c(P\")Yc(_>!F3");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(4, (-1466), 'J');
      assertEquals(49, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) null, 1434, 'e');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VX.*c(P\")Yc(_>!F3");
      strBuilder0.appendFixedWidthPadRight((Object) "VX.*c(P\")Yc(_>!F3", 4, 'j');
      assertEquals(21, strBuilder0.length());
  }

////  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m7whAGc~]dQ(9q:~m+");
      strBuilder0.insert(0, (Object) "m7whAGc~]dQ(9q:~m+");
      assertEquals(45, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1851));
      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|5T*][5~1g}");
      StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null);
      assertEquals(44, strBuilder1.capacity());
      assertEquals(12, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[6];
      strBuilder0.appendWithSeparators(objectArray0, "_L");
      char[] charArray0 = new char[4];
      strBuilder0.insert(5, charArray0, 0, 0);
      assertEquals(10, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null, 0, 15);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding(1790, '(');
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(1739, charArray0, (-1), 1790);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(426);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("|mFUl");
      strBuilder0.appendWithSeparators((Collection) linkedList0, "oIQ_^NLK]m/X3oSe.'%");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(9, charArray0, 9, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 9
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("3zC.");
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, (-1140));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1140
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("X=AR");
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder0.insert(1, charArray0, 1, 38);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 38
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendPadding(3518, 'x');
      char[] charArray0 = strBuilder0.toCharArray();
      strBuilder1.insert(2, charArray0, 1, 2);
      assertEquals(3520, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.insert(0, true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.delete(0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-4086));
      StrBuilder strBuilder1 = strBuilder0.append('0');
      strBuilder0.append('0');
      assertEquals(2, strBuilder0.length());
      
      strBuilder1.deleteAll('0');
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('L');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#-2xoy");
      strBuilder0.deleteFirst('o');
      assertEquals(5, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("line.separator");
      strBuilder0.deleteAll("line.separator");
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VX.*c(P\")Yc(_>!F3");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("VX.*c(P\")Yc(_>!F3");
      boolean boolean0 = strBuilder1.startsWith(" kCzX0k4}<oA45}");
      assertEquals(0, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'\"");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("O~6@@fgX1$$");
      assertEquals(2, strBuilder1.size());
      assertEquals(34, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replace(0, 0, (String) null);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("Invalid offset: ");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
      strBuilder0.replaceFirst(strMatcher0, "");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("X=AR");
      strBuilder0.replaceFirst("X=AR", "org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      assertEquals(59, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.replace(0, 0, "org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll('*', '*');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|5T*][5~1g}");
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      strBuilder0.insert(0, charArray0);
      strBuilder0.replaceAll('s', '=');
      assertEquals(13, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('q', 'q');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      Object[] objectArray0 = new Object[6];
      strBuilder0.appendWithSeparators(objectArray0, "_L");
      strBuilder0.replaceFirst('z', 'L');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|5T*][5~1g}");
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      strBuilder0.insert(0, charArray0);
      strBuilder0.replaceFirst('s', 'J');
      assertEquals(13, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll("startIndex must be valid", "startIndex must be valid");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

////  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder0;
      objectArray0[4] = (Object) strBuilder0;
      objectArray0[5] = (Object) strBuilder0;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "_L");
      strBuilder1.append("startIndex must be valid");
      strBuilder1.replaceAll("org.apache.commons.lang.text.StrBuilder@0000000001_Lorg.apache.commons.lang.text.StrBuilder@0000000001_L_Lorg.apache.commons.lang.text.StrBuilder@0000000001_Lorg.apache.commons.lang.text.StrBuilder@0000000001_Lorg.apache.commons.lang.text.StrBuilder@0000000001startIndex must be valid", (String) null);
      assertEquals(284, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.compiler");
      strBuilder0.replaceFirst("java.compiler", (String) null);
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3033);
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) null);
      assertEquals(3033, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'\"");
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      strBuilder0.deleteAll(strMatcher0);
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("Invalid offset: ");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      strBuilder1.reverse();
      assertEquals(16, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2659);
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(2659, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(323);
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(323, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("Invalid offset: ");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      strBuilder1.trim();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VX.*c(P\")Yc(_>!F3");
      boolean boolean0 = strBuilder0.startsWith(" kCzX0k4}<oA45}");
      assertEquals(17, strBuilder0.size());
      assertFalse(boolean0);
      assertEquals(49, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-322));
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      boolean boolean0 = strBuilder0.startsWith("");
      assertEquals(11, strBuilder0.size());
      assertTrue(boolean0);
      assertEquals(43, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder");
      boolean boolean0 = strBuilder0.startsWith("org.apache.commons.lang.text.StrBuilder");
      assertTrue(boolean0);
      assertEquals(71, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.compiler");
      boolean boolean0 = strBuilder0.endsWith("java.compiler");
      assertTrue(boolean0);
      assertEquals(45, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.endsWith("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      boolean boolean0 = strBuilder0.endsWith("dJ//K ]IV.SpUTY95_V");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("d");
      StrBuilder strBuilder1 = strBuilder0.append((-613.783166345533));
      boolean boolean0 = strBuilder1.endsWith("d");
      assertEquals(18, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.leftString(8);
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("33}FC!");
      strBuilder0.leftString((-2671));
      assertEquals(6, strBuilder0.length());
      assertEquals(38, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("Invalid offset: ");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      String string0 = strBuilder1.leftString(8);
      assertEquals(16, strBuilder0.size());
      assertEquals("Invalid ", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.rightString(84);
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.rightString(0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding(1790, '3');
      strBuilder0.rightString(84);
      assertEquals(1790, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(323);
      strBuilder0.midString((-1), 5);
      assertEquals(323, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.midString(0, (-3812));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(323);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(323, 'q');
      String string0 = strBuilder1.midString((-1), 5);
      assertFalse(strBuilder0.isEmpty());
      assertEquals("qqqqq", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|5T*][5~1g}");
      boolean boolean0 = strBuilder0.contains('#');
      assertFalse(boolean0);
      assertEquals(44, strBuilder0.capacity());
      assertEquals(12, strBuilder0.size());
  }

////  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("?h");
      strBuilder0.append((Object) "?h");
      boolean boolean0 = strBuilder0.contains('n');
      assertEquals(29, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VX.*c(P\")Yc(_>!F3");
      boolean boolean0 = strBuilder0.contains("{}ii@tpfd%Iz2x4B{N2");
      assertEquals(49, strBuilder0.capacity());
      assertFalse(boolean0);
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      boolean boolean0 = strBuilder0.contains("");
      assertTrue(boolean0);
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'\"");
      StrMatcher strMatcher0 = StrMatcher.charMatcher('a');
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertEquals(34, strBuilder0.capacity());
      assertFalse(boolean0);
      assertEquals(2, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_TrimMatcher0);
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf('[', (-1));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("1.4");
      int int0 = strBuilder0.indexOf('4');
      assertEquals(35, strBuilder0.capacity());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf("", (-1403));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append((-1.0F));
      strBuilder0.replaceFirst("Z", "Z");
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(115);
      StrBuilder strBuilder1 = strBuilder0.setLength(115);
      strBuilder1.replaceFirst("qb/", "qb/");
      assertEquals(115, strBuilder0.size());
      assertEquals(115, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf((StrMatcher) null, (-2044));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(323);
      char[] charArray0 = new char[0];
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals(323, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      int int0 = strBuilder0.lastIndexOf('1', 1050);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append("startIndex must be valid", 10, 10);
      strBuilder0.lastIndexOf('T');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3033);
      int int0 = strBuilder0.lastIndexOf("pppppppppppppppppppppppppppppppppppppppppppp", 44);
      assertEquals(3033, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("4.0");
      int int0 = strBuilder0.lastIndexOf((String) null);
      assertEquals(3, strBuilder0.size());
      assertEquals(35, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'\"");
      int int0 = strBuilder0.lastIndexOf("'\"");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[1];
      strBuilder0.append(charArray0);
      int int0 = strBuilder0.lastIndexOf("");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[6];
      strBuilder0.appendWithSeparators(objectArray0, "_L");
      int int0 = strBuilder0.lastIndexOf("E", 0);
      assertEquals(10, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3033);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(44, 'p');
      int int0 = strBuilder1.lastIndexOf("*2c{{pIlcw{");
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(323);
      char[] charArray0 = new char[0];
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(323, 'q');
      int int0 = strBuilder1.lastIndexOf(strMatcher0, 0);
      assertEquals(323, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null, 0);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(115);
      strBuilder0.setLength(115);
      strBuilder0.insert(102, "', is neither of type Map.Entry nor an Array");
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertEquals(159, strBuilder0.size());
      assertEquals(103, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = new StrBuilder();
      strBuilder1.insert(0, (double) 0);
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertFalse(strBuilder1.isEmpty());
      assertFalse(boolean0);
  }

////  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder0;
      objectArray0[4] = (Object) strBuilder0;
      objectArray0[5] = (Object) strBuilder0;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "_L");
      strBuilder1.append("startIndex must be valid");
      StrBuilder strBuilder2 = new StrBuilder("org.apache.commons.lang.text.StrBuilder@0000000001_Lorg.apache.commons.lang.text.StrBuilder@0000000001_L_Lorg.apache.commons.lang.text.StrBuilder@0000000001_Lorg.apache.commons.lang.text.StrBuilder@0000000001_Lorg.apache.commons.lang.text.StrBuilder@0000000001startIndex must be valid");
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder2);
      assertEquals(284, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vm.version");
      StrBuilder strBuilder1 = new StrBuilder("bX.iHRgUB{F%I1B");
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(47, strBuilder1.capacity());
      assertFalse(boolean0);
      assertEquals(15, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.compiler");
      StrBuilder strBuilder1 = new StrBuilder("java.compiler");
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      boolean boolean0 = strBuilder2.equals(strBuilder1);
      assertEquals(26, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder();
      boolean boolean0 = strBuilder0.equals((Object) strBuilder1);
      assertTrue(boolean0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vm.version");
      StrBuilder strBuilder1 = new StrBuilder("bX.iHRgUB{F%I1B");
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertEquals(47, strBuilder1.capacity());
      assertFalse(boolean0);
      assertEquals(15, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ka:e3Eacmt&6?3");
      StrBuilder strBuilder1 = new StrBuilder("Ka:e3Eacmt&6?3");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertTrue(boolean0);
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(115);
      Object object0 = new Object();
      boolean boolean0 = strBuilder0.equals(object0);
      assertFalse(boolean0);
      assertEquals(115, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      strBuilder0.append(2);
      strBuilder0.hashCode();
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.delete((-1), 3614);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.validateRange(97, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

////  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.reset("org.apache.commons.lang.text.StrMatcher$CharMatcher");
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "org.apache.commons.lang.text.StrMatcher$CharMatcher");
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(27, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.reset("org.apache.commons.lang.text.StrMatcher$CharMatcher");
      String string0 = strTokenizer0.getContent();
      assertEquals(32, strBuilder0.capacity());
      assertEquals("org.apache.commons.lang.text.StrMatcher$CharMatcher", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-2241), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 2504, (-543));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-4086));
      char[] charArray0 = new char[4];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 3066, 22);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Reader reader0 = strBuilder0.asReader();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      int int0 = reader0.read(charBuffer0);
      assertEquals(0, int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[7];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 1, 1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("os.version");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "os.versionja555555555555555555555555555555555555555555");
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip((-1));
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0L, long0);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip(4);
      assertEquals(4, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0L, long0);
      assertEquals(0, strBuilder0.size());
  }
}
