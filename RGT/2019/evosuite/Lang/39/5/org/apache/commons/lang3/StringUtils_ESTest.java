/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 03:06:21 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class StringUtils_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("1.2", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("5\"\u0001[M", "U9H@%8cx*B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.center("!GzWH58&8{i[(_n,", (-1));
      assertEquals("!GzWH58&8{i[(_n,", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.defaultIfEmpty(string0, "");
      String[] stringArray0 = StringUtils.splitByCharacterType(string1);
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string2);
      assertEquals("\\u0", string2);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-1472));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+toH\"3G}'z\"WOQgJt ", 't');
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.leftPad("ClassNotFoundException occurred during 1.6 backcompat code", (-3135));
      assertNotNull(string0);
      assertEquals("ClassNotFoundException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith("", "$wef,pO?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "hnCt$");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.replace("", "SecurityException occurred during 1.6 backcompat code", "r/w");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "EnRy[");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("+)@e54<;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("VR{KgP>*trF");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("                                                         ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.trimToNull("+)@e54<;");
      assertEquals("+)@e54<;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.stripToNull("rH6-t~AZGIhDh9k(2r");
      assertNotNull(string0);
      assertEquals("rH6-t~AZGIhDh9k(2r", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("+r^%p/.*uT,'|^");
      assertEquals("+r^%p/.*uT,'|^", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.stripStart("", " ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.stripStart(").CB)>DM)~wXx4_^", " vs ");
      assertEquals(").CB)>DM)~wXx4_^", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Windows 9");
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.strip("|", "");
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.stripStart("user.region", "user.region");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripEnd("       ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Q[W1", "Q[W1");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.stripEnd("{}", "Q[W1");
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 1);
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Minimum abbreviation width with offset is 7");
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = StringUtils.equals("'aK{OE`!2o", "'aK{OE`!2o");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, "S8slzmD_J]dwt'(:/68");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("L.X^~fRMsaW`y?#", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = StringUtils.indexOf(" ?j]1?2?4OCN", 'E');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, '#');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = StringUtils.indexOf("^!rPP}HG`*'_CYg*~Iv", '=', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = StringUtils.indexOf("", ';', (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "$=qhA_E>x1 \"-nz+H[");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = StringUtils.indexOf("8+aPlpQkHNCWQg ", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = StringUtils.indexOf("a", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, "java.vm.specification.vendor", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("~[:2C", (String) null, 127);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("NoSuchFieldException occurred during 1.6 backcompat code", "yPnaS", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 3193);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("r", "r", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("IllegalArgumentException occurred during 1.6 backcompat codeIllegalArgumentException occurred during 1.6 backcompat code", "IllegalArgumentException occurred during 1.6 backcompat code", 2);
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, (String) null, (-550));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf("mhDxcT", 3373);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf("Mac OS X", (String) null, (int) 'z');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "", 4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf("Mac OS X", "", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("HNcT", '+');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", 'r');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("cOrR", 't', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", 'M', (-1088));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("ND0z=2E{r", "J]+$2~PW5R");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "Minimum abbreviation width with offset is 7", 2845);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("Solaris", "Can't find a public method for ", 1707);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("java.runtime.name", (String) null, 444);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("IllegalAccessException occurred during 1.6 backcompat code", 'e');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", '#');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("h[%", 'P');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "java.class.path");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(",Y8'X>)=m", "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("!upWA^G9(}3],-", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("A9=q(m,)}~xI", "A9=q(m,)}~xI");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "ksE{y-A3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("^!rPP}HG`*'_CY", "^!rPP}HG`*'_CY");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("aG=N#wG", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("TH+.%`", "oY*2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[5];
      int int0 = StringUtils.indexOfAny("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("+Q@i*JZ-..;-?reQlb", "Solaris");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("\"`d:W6l45\f", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAny("*X*&f5?Uc,pWDa<)DA", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("", "Q");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("CM1\"=#M5c", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsAny((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("ClassNotFoundException occurred during 1.6 backcompat code", "ClassNotFoundException occurred during 1.6 backcompat code");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("", "P ,L.p:2O/$#T$?Xw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("INVOCATIONTARGETEXCEPTION OCCURRED DURING 1.6 BACKCOMPAT CODE", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("}NB@aSRT\"~tRwsr", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsAny(" vs ", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = StringUtils.indexOfAnyBut("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("Q[W1", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("JD19Q", "JD19Q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("Cannot pad a negative amount: ", "Cannot pad a negative amount: ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("c_JbGd", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("/y+l\"C", "qVGhRqx=m1+]");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly("D", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("aG=N#wG", "\"`d:W6l45\f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((String) null, "ue_=_V?KGOgGbmb");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("{ev-", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsNone((String) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("{<%qy1[", "user.country");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("p#Mb]2", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[7];
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("+)@e54<;", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "t`+YEwM[Kio%";
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      stringArray0[3] = "";
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[9];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("zR2*ZAolZu|wBOBFE|", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^!rPP}HG`*'_CYg*~Iv";
      int int0 = StringUtils.lastIndexOfAny("^!rPP}HG`*'_CYg*~Iv", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^!rPP}HG`*'_CYg*~Iv";
      stringArray0[1] = "^!rPP}HG`*'_CYg*~Iv";
      int int0 = StringUtils.lastIndexOfAny("^!rPP}HG`*'_CYg*~Iv", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = StringUtils.substring("D                                                                                                                         ", 520);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 32);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.substring(";", (-1673));
      assertEquals(";", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.substring(" ?j]1?2?4OCN", (-1), (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.substring("", 256, 256);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.left("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-2702));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.left("Vp8!XE\"T}G'", (-1443));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.left("3nNSmK=G|", 2);
      assertNotNull(string0);
      assertEquals("3", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.right("l{$gWVyW+IW", (-4177));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.right((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.right("r,sv$()W", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.right("Windows 9", 127);
      assertNotNull(string0);
      assertEquals("Windows 9", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.mid("", (-1), 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 122, (-921));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.mid("D", 0, (-921));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.mid("", 256, 256);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.mid("IllegalAccessException occurred during 1.6 backcompat code", 0, 36);
      assertEquals("IllegalAccessException occurred duri", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" ", "[]");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.substringBefore("5.0", (String) null);
      assertNotNull(string0);
      assertEquals("5.0", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substringBefore("J',Di", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substringBefore("\"E4", "\"E4");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substringAfter("EReVz:[", "EReVz:[");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, " vs ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substringAfter("S./%|N:UQ$BpnOI!=g", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substringAfter("|l(|`,Kd;2dhvglc", "Jg=vQ3-lfNt0$1UTR5'");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, "Can't find a public method for ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("^!rPP}HG`*'_CYg*~Iv", "+Q@i*JZ-..;-?reQlb");
      assertEquals("^!rPP}HG`*'_CYg*~Iv", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("YhOs&7G9A\"q)A", "");
      assertEquals("YhOs&7G9A\"q)A", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("!,4:hm-||*Us", "!,4:hm-||*Us");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Ve/}ZLy`HH", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "am=V}Tg");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.chomp("E)Z");
      assertEquals("E)Z", string0);
      
      String string1 = StringUtils.substringAfterLast("t~@Qml", string0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("xgt", "xgt");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("m\"8kn\"Cm\"8kn\"CLUbCc\"LUbCc\"", "m\"8kn\"CLUbCc\"");
      assertEquals("LUbCc\"", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "_=/5j{~Bb|$/KP");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringBetween("{%_^Wn)PPW_J$bz<.I", (String) null, "&ft+IVR-wmLw#");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.substringBetween("mb4}h|", "", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringBetween("5.0", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBetween("XS", "", "InvocationTargetException occurred during 1.6 backcompat code");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "java.text.Normalizer$Form", "java.text.Normalizer$Form");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("S.S%|NQUQ$BpnOI!=g", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("$f L;4(", "l{$gWVyW+IW", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", " vs ", "ClassNotFoundException occurred during 1.6 backcompat code");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(",Y8'X>)=m", "4.9", "IllegalArgumentException occurred during 1.6 backcompat code");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("java.vm.specification.vendorp{InCombiningDiacriticalMarks}+p{I", "java.vm.specification.vendor", "g");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("][j}PhD)MJBCzUI~$Y", "][j}PhD)MJBCzUI~$Y", "awt.toolkit");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("hnCt$", "hnCt$");
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("eNrY[", (String) null, 1648);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("a", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("ksE{y-A3Search and Replace array lengths don't match: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh5JR0W<hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhSearch and Replace array lengths don't match: 5JR0W<Search and Replace array lengths don't match: ksE{y-A3Search and Replace array lengths don't match: KsE{y-A3Search and Replace array lengths don't match: KsE{y-A3Search and Replace array lengths don't match: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh5JR0W<hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", "ksE{y-A3", 97);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, '#');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'f');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;c=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("][j}PhD)MJBCzUI~$Y", "D", 132);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("D                                                                                                                         ", "D", 159);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("{LTj-xb<", "{LTj-xb<");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("CJi6a#");
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'X');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'h', 10, (-3349));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("LP=Kc0{4.0rqmjS", 'U');
      assertEquals("LP=Kc0{4.0rqmjS", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.join((Object[]) stringArray0, 'G');
      assertEquals("GGG", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "", 128, 32);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.join((Object[]) stringArray0, "kn\"", 1105, (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, 'O');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'G');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "E)Z");
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '.');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "E)Z");
      linkedList0.push((Object) null);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '.');
      assertFalse(listIterator0.hasNext());
      assertEquals(".E)Z", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-3283));
      linkedList0.addLast(integer0);
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'J');
      assertFalse(listIterator0.hasNext());
      assertEquals("-3283J", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, "Strings must not be null");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.setSize(64);
      Iterator<Object> iterator0 = stack0.iterator();
      String string0 = StringUtils.join(iterator0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category1);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("DISPLAYFORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'Z');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>(1);
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>(vector0);
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "?:cSt]$1jHM-6-GH!");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("The Array must not be null");
      assertEquals("TheArraymustnotbenull", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, "][j}PhD)MJBCzUI~$Y");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.removeStart("kn\"CLUbCc\"", "m\"8");
      assertEquals("kn\"CLUbCc\"", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.removeStart("java.text.Normalizer", "");
      assertEquals("java.text.Normalizer", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.removeStart("7caqqnVjP\"b( ", "7caqqnVjP\"b( ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, "O?..1vY;T|GGMNN^|");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("('!V|G]C>G9HN)F", "Y");
      assertEquals("('!V|G]C>G9HN)F", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("4.1", "");
      assertEquals("4.1", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("}j1", "}j1");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.repeat("Jg=vQ3-lfNt0$1UTR5'", "/<}", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.repeat("bE7G~bdMNa", "IllegalArgumentException occurred during 1.6 backcompat code", 36);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.removeEnd("1.1", " vs ");
      assertEquals("1.1", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("%1DRm`ls(ERmZr", (String) null);
      assertNotNull(string0);
      assertEquals("%1DRm`ls(ERmZr", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("F''%$", "F''%$");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(":$^/J?=2RKZf?_", "04y6x");
      assertEquals(":$^/J?=2RKZf?_", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.remove("IllegalArgumentException occurred during 1.6 backcompat code", "^!rPP}HG`*'_CYg*~Iv");
      assertEquals("IllegalArgumentException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.remove("yJHLEBa/r&0OGQ}d", (String) null);
      assertEquals("yJHLEBa/r&0OGQ}d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.remove("", '=');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.remove("D0lAsc8Ic `Qd)XL`", 'i');
      assertEquals("D0lAsc8Ic `Qd)XL`", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.remove("java.vm.version", 'm');
      assertEquals("java.v.version", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.replace("java.text.Normalizer$Form", "", "");
      assertEquals("java.text.Normalizer$Form", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.replace("InvocationTargetException occurred during 1.6 backcompat code", "h+.%`", (String) null, 1699);
      assertEquals("InvocationTargetException occurred during 1.6 backcompat code", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.replace("I", string0, " is less than 0: ", 0);
      assertEquals("I", string1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.stripAccents("^!rPP}HG`*'_CY");
      String string1 = StringUtils.replace(string0, "^!rPP}HG`*'_CY", "dowsA_E>x1 \"-nz+H[", 1105);
      assertEquals("dowsA_E>x1 \"-nz+H[", string1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.remove(">*B}hLZD<BU[", ">*B}hLZD<BU[");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("i$70:K-Bn", "i$70:K-Bn", "_a%@y[Y/tu+d4_0RBi");
      assertEquals("_a%@y[Y/tu+d4_0RBi", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("!'j0)dg;bGq@:J7Wo", "NoSuchFieldException occurred during 1.6 backcompat code", 4);
      String string0 = StringUtils.replaceEachRepeatedly("Bm*wE ", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("Bm*wE ", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.replaceEach("eNrY[", (String[]) null, (String[]) null);
      assertEquals("eNrY[", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.split("");
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.replaceEachRepeatedly("(Za-0GA>\"Vl", stringArray0, stringArray1);
      assertEquals("(Za-0GA>\"Vl", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("[0(6MVy-'g:h", "[0(6MVy-'g:h");
      String[] stringArray1 = StringUtils.split("UhCu`}:%>`%", "UhCu`}:%>`%", (-563));
      assertEquals(0, stringArray1.length);
      
      String string0 = StringUtils.replaceEach("UhCu`}:%>`%", stringArray0, stringArray1);
      assertEquals("UhCu`}:%>`%", string0);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("U(hR)Yet<1Ce+D$+", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("java.vm.version", "Cannot pad a negative amount: ");
      String string0 = StringUtils.replaceEach("java.vm.version", stringArray0, stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals("java.vm.version", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Y";
      stringArray0[7] = "AQ-B>'F^G#4Yf)";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("AQ-B>'F^G#4Yf)", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: AQ-B>'F^G#4Yf)
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.replaceChars("^!rPP}HG`*'_CYg*~Iv", '=', '=');
      assertNotNull(string0);
      assertEquals("^!rPP}HG`*'_CYg*~Iv", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, '^', '(');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "java.vendor.url", "4 fu@");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.replaceChars("os.name", "", "os.name");
      assertEquals("os.name", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.replaceChars(",Y8'X>)=m", "4.9", "^ >I$9=S#^A");
      assertEquals(",Y8'X>)=m", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.replaceChars("'cyagg)u/6b*r|z6", "Mac OS X", (String) null);
      assertEquals("'ygg)u/6b*r|z6", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.replaceChars("kw%1 K", "81K", "?Y?FsTKB1ecU");
      assertEquals("kw%Y ?", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.overlay("", "2DF2=", 1729, 1729);
      assertEquals("2DF2=", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "eNrY[", 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.overlay("", (String) null, (-699), 4483);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.overlay("9Embx.p4'c^)0", "9Embx.p4'c^)0", 13, (-1604));
      assertEquals("9Embx.p4'c^)0", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "S./%|N:UQ$BpnOI!=g");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.chomp("NoSuchMethodException occurred during 1.6 backcompat code", "t~@Qml");
      assertEquals("NoSuchMethodException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.chomp("The stripAccents(String) method is not supported until Java 1.6", (String) null);
      assertNotNull(string0);
      assertEquals("The stripAccents(String) method is not supported until Java 1.6", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.chomp("S./%|N:UQ$BpnOI!=g", "S./%|N:UQ$BpnOI!=g");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.chop("}hZ");
      assertEquals("}hZ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.repeat("eNrY[", 1);
      assertEquals("eNrY[", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.repeat("", Integer.MAX_VALUE);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.repeat("C", (int) 'T');
      assertNotNull(string0);
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.repeat(string0, "", 684);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "", (-2055));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.repeat("fH|s:Z", (String) null, 46);
      assertEquals("fH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:ZfH|s:Z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 4096, 'J');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.rightPad("a'#\"w", 9970, 'O');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 123, "1.1");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-2311), "");
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.rightPad("java.vm.specification.vendor", 64, "p{InCombiningDiacriticalMarks}+");
      assertEquals("java.vm.specification.vendorp{InCombiningDiacriticalMarks}+p{InC", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 756, "NoSuchMethodException occurred during 1.6 backcompat code
      assertEquals("NoSuchMethodException occurred during 1.6 backcompat codestring0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 19);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.leftPad("~5m", 132);
      assertEquals("                                                                                                                                 ~5m", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.leftPad(",Y8'X>)=m", 8215, '');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 59, "D'R;y+s@~]dC~M}5}[W");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 555, "");
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 0, "...");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.center("i", 933, "`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+");
      assertEquals("`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+`L`o%+WQNM`L`o%+WQNMi`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+`L`o%+WQNM`L`o%+WQNM", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      int int0 = StringUtils.length("java.awt.graphicsenv");
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = StringUtils.length((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-1), 'i');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.center("m+bz,}11/,C<P15X", 99, 's');
      assertEquals("sssssssssssssssssssssssssssssssssssssssssm+bz,}11/,C<P15Xssssssssssssssssssssssssssssssssssssssssss", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.center(", Length: 0", 4, '4');
      assertEquals(", Length: 0", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 46, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.center("!upWA^G9(}3],-", 0, "LINUX");
      assertEquals("!upWA^G9(}3],-", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.center("", 57, "");
      assertEquals("                                                         ", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.center("`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+`L`o%+WQNM`L`o%+WQNMi`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+`L`o%+WQNM`L`o%+WQNM", 930, ">:0S+Q");
      assertEquals("`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+`L`o%+WQNM`L`o%+WQNMi`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+WQNM`L`o%+`L`o%+WQNM`L`o%+WQNM", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.upperCase("ClassNotFoundException occurred during 1.6 backcompat code");
      assertNotNull(string0);
      assertEquals("CLASSNOTFOUNDEXCEPTION OCCURRED DURING 1.6 BACKCOMPAT CODE", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      String string0 = StringUtils.upperCase("Windows", locale0);
      assertNotNull(string0);
      assertEquals("WINDOWS", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      String string0 = StringUtils.lowerCase("~5m", locale0);
      assertEquals("~5m", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.capitalize("A]%O $A963}");
      assertEquals("A]%O $A963}", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("RiOi");
      assertEquals("riOi", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.swapCase("EnRy[");
      assertEquals("eNrY[", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      int int0 = StringUtils.countMatches("java.awt.graphicsenv", "java.awt.graphicsenv");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int int0 = StringUtils.countMatches("Minimum abbreviation width with offset is 7", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("l{$gWVyW+IW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("]'t6_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("j36G~q5'L(v29P!g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("B");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("NoSuchMethodException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("lNBP=NkEE1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;c=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("IllegalArgumentException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("5%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" w;;@}^_>@gBu9WM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" Behd;&pwpPTA)d,3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("RO~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("byte");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("nv0zx\"^)2~6f%l ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("G");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = StringUtils.defaultString("H?\"&ng^zcY'e");
      assertEquals("H?\"&ng^zcY'e", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = StringUtils.defaultString("EReVz:[", "IllegalAccessException occurred during 1.6 backcompat code");
      assertEquals("EReVz:[", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, "TimeToLive of ");
      assertNotNull(string0);
      assertEquals("TimeToLive of ", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.reverse("IllegalAccessException occurred during 1.6 backcompat code");
      assertEquals("edoc tapmockcab 6.1 gnirud derrucco noitpecxEsseccAlagellI", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'X');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 76, (-2420));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.abbreviate("][j}PhD)MJBCzUI~$Y", 3373, 127);
      assertEquals("][j}PhD)MJBCzUI~$Y", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.abbreviate("java.endorsed.dirs", 98, 7);
      assertEquals("...dirs", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.abbreviate("rPI1-D", 5, 5);
      assertEquals("rP...", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 11, 11);
      assertEquals("...revia...", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.difference(", Length: ", (String) null);
      assertEquals(", Length: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "1.3");
      assertEquals("1.3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.difference("$wef,pO?", "1.3");
      assertEquals("1.3", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String) null, "qM.");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("g", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("NoSuchMethodException occurred during 1.6 backcompat code", "NoSuchMethodException occurred during 1.6 backcompat code");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.stripAccents("^!rPP}HG`*'_CY");
      assertEquals("^!rPP}HG`*'_CY", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1.1 vs ";
      stringArray0[1] = "r5+LPo^l6s/";
      stringArray0[2] = "^!rPP}HG`*'_CY";
      stringArray0[3] = "r5+LPo^l6s/";
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A{af->";
      stringArray0[1] = "A{af->";
      stringArray0[2] = "A{af->";
      stringArray0[3] = "A{af->";
      stringArray0[4] = "A{af->";
      stringArray0[5] = "A{af->";
      stringArray0[6] = "A{af->";
      stringArray0[7] = "A{af->";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{MW*TG(", "V>", 1774);
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("{MW*TG(", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.leftPad(":l)yi", 1742, ":l)yi");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ":l)yi";
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = ":l)yi";
      stringArray0[4] = ":l)yi";
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(":l)yi", string1);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((String) null, "\u0002.\"Y[6oHC1NY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("w]2F2S", "^!rPP}HG`*'_CYg*~Iv");
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("v5J,z=oWmf*UQ,vY%|N", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "Lh&");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("ksE{y-A3", "");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("nLZ*B-]Pj&7]\"SM", ".......E)Z");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, "YPLz([v.&|-=qbxG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.startsWithAny("GYo9K_|MgzEpGgQn", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("S./%|N:UQ$BpnOI!=g", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "04y6x";
      boolean boolean0 = StringUtils.startsWithAny("04y6x", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "S.S%|NQUQ$BpnOI!=g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, (String) null);
      assertTrue(boolean0);
  }
}
