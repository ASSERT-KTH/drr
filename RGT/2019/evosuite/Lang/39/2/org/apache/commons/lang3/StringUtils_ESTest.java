/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 02:55:00 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Stack;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class StringUtils_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("c:fTw", "c:fTw", (-607));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("W", "T...");
      assertNotNull(stringArray0);
      
      StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("[<6>9\"Xsx-3Ea2", (-1436));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("|", "|");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.center("DD", 1228);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny((String) null, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("MDha~OD16sNh", "", 8192);
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string0);
      assertEquals("MDha~OD16sNh", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("T...", "", "Jip(/qfC=GN=+G PxT9");
      assertEquals("T...", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'l');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("grlK(}$u2c`O:-A4`7", "XJs>Uf");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "DD", (-1033));
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("^", "^");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.substringBetween("IllegalAccessException occurred during 1.6 backcompat codeIllegalAccessException occurred during 1.6 backcompat codeIllegalAccessException occurred during 1.6 backcompat code", "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("ClassNotFoundException occurred during 1.6 backcompat code");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("8(ET9glw");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Okd\"nNlfl|46C[][B,");
      assertNotNull(string0);
      assertEquals("Okd\"nNlfl|46C[][B,", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(", Length: 0");
      assertEquals(", Length: 0", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.stripToNull("7 l!12)mT2#)");
      assertNotNull(string0);
      assertEquals("7 l!12)mT2#)", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.stripToNull("                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Q](W3a\"");
      assertEquals("Q](W3a\"", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "A.-m_2/U+(Z4Gcl;", (String) null);
      String string1 = StringUtils.stripToEmpty(string0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.strip("u(3.Ha!r<?V7<*I", "java.awt.printerjob");
      assertEquals("u(3.Ha!r<?V7<*I", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(".sUaf+3|^;o`ZF");
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "java.text.Normalizer$Form";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "java.text.Normalizer$Form");
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.stripEnd("  ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.stripEnd("java.ext.dirs", "java.ext.dirs");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "GxCkBM]o4$wMY^>Z");
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = StringUtils.equals("", " vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, "java.awt.graphicsenv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("l Java 1.6", "The stripAccents(String) method is not supported until Java 1.6nosuchfieldexception occurred ;vws/|+$7d#sh1cb hpat codeq5z=2:*ik/7eid1%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "8inoyrvqo`53;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = StringUtils.indexOf("java.text.Normalizer$Form", '4');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, 'G');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = StringUtils.indexOf("NoSuchFieldException occurred during 1.6 backcompat code", '^', (int) '^');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'Z', 36);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "', has a length less than 2");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.indexOf("_k=M*Q2,^<52YA", "_k=M*Q2,^<52YA");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.indexOf("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, "boolean", 1970);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("O,g.3.6mm4$&7qlur", "K'M39Yh", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", (String) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 2203);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("HOjn/yCLyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", "HOjn/yCL", 59);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("'-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sa", "'-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sazqI,+vY-^P*sa", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, (String) null, (-2297));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf("Solaris", "java.runtime.name", (-647));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf(", Length: 0", (String) null, 57);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf(".4_N^$Gw[hBsgEGAxb2", "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOf("Minimum abbreviation width is 4", "", 2170);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("org.apache.commons.lang3.StringUtils", 'M');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, 'u');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("v", 'W', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", 'W', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("NVqQ)Kt/0~!Lo9", "kF92TK}JLX`^aWT");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("2>$q5M=@", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null, 1706);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("ay9a>m;`Gid", "nosuchfieldexcepti;vws/|+$7d#sh1cb h 1.6 backcompat code", 979);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("nosuchfieldexception occurred ;vws/|+$7d#sh1cb hpat codeq5z=2:*ik/7eid1%", (String) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("7 l!12)mT2#)", '7');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", 'H');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("short", 'a');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "OS/2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("IllegalAccessException occurred during 1.6 backcompat code", "os.name");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("Cannot pad a negative amount: ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("<aXy8(CxF", "<aXy8(CxF");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("y)2#sok:C>m", "y)2#sok:C>m");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("-7e<u-%jm", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase(".OBHI828,}W", "nR7Nji[h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.indexOfAny(" f A]", "/??Xn9s@V ,bP/");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny(" %{oZ<#:e3", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.indexOfAny(" f A]", "4.0");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("", "9$/p:~");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("java.text.Normalizer$Form", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsAny((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("", "@cANWg}E~{)g9o&_]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("mRV{rGJm*", "8C<fR,H");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("/??Xn9s@V ,bP/", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("}", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsAny(" vs ", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("NoSuchFieldException occurred during 1.6 backcompat code", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAnyBut("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("4.0", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("5a<5l6t3yN'Jom", "5a<5l6t3yN'Jom");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "java.vm.specification.name");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("7 l!12)mT2#)", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("sal", "]Q;W)");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("+ _s<w]7df> Ka^~&B4", "+ _s<w]7df> Ka^~&B4");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("nosuchfieldexcep(ug=l`Z{kXi", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsOnly((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("", "8InoyrVQo`53;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("+PR4EI7", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsOnly("Drm?B4AO(-e", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((String) null, "`4i|Q*wdE-(/.R4byfS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("SecurityException occurred during 1.6 backcompat code", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((String) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsNone("NoSuchMethodException occurred during 1.6 backcompat code", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("jdMHbT 4", "+QE4VQZDSOCD@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, "j<dVnE:iu5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[5];
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = StringUtils.indexOfAny(", Length: 0", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "y)2#sok:C>m";
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[2] = "";
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.ClassUtils", "org.apache.commons.lang3.ClassUtils", 1);
      int int0 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.ClassUtils", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[25];
      int int0 = StringUtils.lastIndexOfAny(".c", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.replace("j<dVnE:iu5", "j<dVnE:iu5", "j<dVnE:iu5");
      assertEquals("j<dVnE:iu5", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, "");
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 1013);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.substring("IllegalAccessException occurred during 1.6 backcompat code", (-558));
      assertEquals("IllegalAccessException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.substring("URv", 3354);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-2516), 1142);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.substring("", 127, 90);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.substring("|ed", (-2940), (-2940));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.substring("Gj[P)e<D5", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.left("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-4379));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.left("java.runtime.name", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.left("java.awt.fonts", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.right("", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 3239);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.right("", 730);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.right("W", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.mid("fFt*v]", (-1947), (-1947));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 682, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.mid("LR+Wtx{24_p2EI,3?", 1967, 1967);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.mid("", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.mid("NoSuchFieldException occurred during 1.6 backcompat code", (-1), 16);
      assertNotNull(string0);
      assertEquals("NoSuchFieldExcep", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Wh'zIVgS", "aeJH");
      assertEquals("Wh'zIVgS", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substringBefore("d r}G(/ea*}edy", (String) null);
      assertEquals("d r}G(/ea*}edy", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substringBefore("short", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substringBefore("P@2%aY=-)8qJGf", "P@2%aY=-)8qJGf");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substringAfter(".8S>wTt-[>", ".8S>wTt-[>");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "X&");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.substringAfter("Uu%nDT0", stringArray0[0]);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substringAfter("bdRPb{_C", "`zNZam|");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "9\tSfh$");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("dDoQ[;1{PJ4}$", "dDoQ[;1{PJ4}$");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("o_J`n", (String) null);
      assertEquals("o_J`n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("BCaz# 3Fdb]SL%8^eBA", " K");
      assertEquals("BCaz# 3Fdb]SL%8^eBA", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ", "AR");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "NoSuchMethodException occurred during 1.6 backcompat code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("]ER4}}", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("+PR4EI7", "+PR4EI7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("os.version=((b Wj=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`", "os.version=((b Wj");
      assertEquals("=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringBetween("}9(a", (String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "IllegalArgumentException occurred during 1.6 backcompat code", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringBetween("P@2%aY=-)8qJGf", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringBetween("6.0", "", "P_<1,1DN|SHtTRZ+%;,");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Search and Replace array lengths don't match: ", "", "0yWAQ_i# rr0N<");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("%;C:[[v@\"e)Q+", "52w", "v");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "anKXFX7", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "$ZK,7h", "$ZK,7h");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(".6 backcompat code", "NoSuchFieldException occurred during 1.6 backcompat code", ".6 backcompat code");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" f A] f A]<aXy8(CxF<aXy8(CxF<aXy8(CxF K f A]", " f A]", " K");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "1fyJG", 228);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", ".@u\":;?//As}Z<8o", (-1));
      StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Windows NT", "Windows NT", 36);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", 's');
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("O2t3O!Hprnp", 'O');
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("#, '#, '#, '#java.lang.Object@7558bd6f###, '#, '", '6');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Search and Replace array lengths don't match: ", "");
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" f A]");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Cannot pad a negative amount: ", (String) null, 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Okd\"nNlfl|46C[][B,", "v");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("W", "W");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("W", "W");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("@cANWg}E~{)g9o&_]", "yh9}lF6UtS6A", (-1));
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NoSuchFieldException occurred during 1.6 backcompat code", "NoSuchFieldException occurred during 1.6 backcompat code");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("wTixgG[jv&zds8r$");
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Minimum abbreviation width with offset is 7");
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("+q 9c`&LNG--9D3oMDn");
      assertEquals(15, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '7');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'u', 16, 16);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String string0 = StringUtils.join(objectArray0, 'Z', 228, 228);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = StringUtils.join(objectArray0, '8');
      assertEquals("8888888", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "user.dir", (-1), 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("<aXy8(CxF");
      String string0 = StringUtils.join((Object[]) stringArray0, "");
      assertEquals("<aXy8(CxF", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("W", "T...");
      StringUtils.join((Object[]) stringArray0, "1.3", (-607), (-2402));
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.join((Object[]) stringArray0, "java.awt.fonts");
      assertEquals("java.awt.fonts", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, '[');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '(');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>(56);
      String string0 = StringUtils.join((Iterable<?>) arrayDeque0, 'H');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, '[');
      assertEquals("DISPLAY[FORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      String string0 = StringUtils.join((Iterable<?>) arrayList0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "VM</mm%VY}xNX}T<3");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.setSize(2933);
      ListIterator<Integer> listIterator0 = stack0.listIterator(2601);
      StringUtils.join((Iterator<?>) listIterator0, "ClassNotFoundException occurred during 1.6 backcompat code");
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(16);
      linkedHashSet0.add(integer0);
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, "user.region");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category1, locale_Category1);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("DISPLAYFORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'T');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "#tc}2-X");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("mRV{rGJm *");
      assertEquals("mRV{rGJm*", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.removeStart("NVqQ)Kt/0~!Lo9", "Ce//6E(_!leN");
      assertEquals("NVqQ)Kt/0~!Lo9", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.removeStart("Strings must not be null", "");
      assertEquals("Strings must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.overlay(string0, "Irix", 2789, 1480);
      assertEquals("\\uIrix", string1);
      
      String string2 = StringUtils.removeStart(string1, string1);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Q](W3a\"", "");
      assertEquals("Q](W3a\"", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("<aXy8(CxF", "h=zry~&nE_t");
      assertEquals("<aXy8(CxF", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.repeat("v", "v", 64);
      assertNotNull(string0);
      assertEquals("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.removeEnd(", '", (String) null);
      assertNotNull(string0);
      assertEquals(", '", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Q?iguu>,8", "uYT8snf*-b");
      assertEquals("Q?iguu>,8", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "\"nI");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("=GIv1v>J;", "");
      assertEquals("=GIv1v>J;", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("!lCl", "kJ]A86dbS;");
      assertEquals("!lCl", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.remove("Okd\"nNlfl|46C[][B,", "Q](W3a\"");
      assertEquals("Okd\"nNlfl|46C[][B,", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.remove("9$/p:~", (String) null);
      assertNotNull(string0);
      assertEquals("9$/p:~", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, '~');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.remove("XJs>Uf", '4');
      assertEquals("XJs>Uf", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.remove("nosuchfieldexception occurred ;vws/|+$7d#sh1cb hpat codeq5z=2:*ik/7eid1%", 'h');
      assertEquals("nosucfieldexception occurred ;vws/|+$7d#s1cb pat codeq5z=2:*ik/7eid1%", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "IllegalAccessException occurred during 1.6 backcompat code", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.replace("java.endorsed.dirs", "normalize", (String) null, 0);
      assertNotNull(string0);
      assertEquals("java.endorsed.dirs", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.replace("uR[w=+u", "+T? {Wws5", "IllegalAccessException occurred during 1.6 backcompat code", 0);
      assertEquals("uR[w=+u", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.replace("java.vm.specification.name", "java.vm.specification.name", ", Length: 0", 3771);
      assertEquals(", Length: 0", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("W", "W", "Jip(/qfC=GN=+G PxT9");
      assertEquals("Jip(/qfC=GN=+G PxT9", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("vo#o|:,Zoaa6EG", (String[]) null, (String[]) null);
      assertEquals("vo#o|:,Zoaa6EG", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.replaceEach((String) null, (String[]) null, (String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      String string0 = StringUtils.replaceEachRepeatedly("9$/p:~", stringArray0, stringArray0);
      assertEquals("9$/p:~", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Vb", " vs ");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Vb", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: Vb
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("@WBr;`v_S/Y}", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@cANWg}E~{)g9o&_]";
      String string0 = StringUtils.replaceEachRepeatedly("mRV{rGJm*", stringArray0, stringArray0);
      assertEquals("mRV{rGJm*", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8AI5";
      stringArray0[1] = "`M=<";
      String string0 = StringUtils.replaceEach("8AI5", stringArray0, stringArray0);
      assertEquals("8AI5", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8AI5";
      stringArray0[5] = "";
      String string0 = StringUtils.replaceEach("8AI5", stringArray0, stringArray0);
      assertEquals("8AI5", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "2";
      stringArray0[2] = "2";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("SaM2q03Y2?qB<G&X", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: SaM2q03Y2?qB<G&X
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'p', 'p');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'Q', 'Q');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "user.region", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.replaceChars("ClassNotFoundException occurred during 1.6 backcompat code", "Windows NT", "ClassNotFoundException occurred during 1.6 backcompat code");
      assertEquals("ClaooFstFsuasExceptlsatsccurrestsurlagt1.6tbackcsmpattcsse", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.replaceChars("j<dVnE:iu5", "", "");
      assertEquals("j<dVnE:iu5", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.replaceChars("}NMzdJm", "Ce//6E(_!leNNVqQ)Kt/0~!Lo9", (String) null);
      assertEquals("}MzdJm", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.replaceChars("UmVx!F|akK~!Ljj9", "g", "LR+Wtx{24_p2EI,3?");
      assertEquals("UmVx!F|akK~!Ljj9", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "A.-m_2/U+(Z4Gcl;", (String) null);
      String string1 = StringUtils.overlay(string0, "Sh7c-j", 3347, 3347);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.overlay("fB6,6m%", (String) null, 60, (-2917));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.overlay("$>|Oxm~@&p*", "L~ZISJJ-=]T#+a", (-2503), (-2503));
      assertEquals("L~ZISJJ-=]T#+a$>|Oxm~@&p*", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.chomp("q%d!}_]~GPV&vJ:?m");
      assertEquals("q%d!}_]~GPV&vJ:?m", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.chomp("", "NoSuchFieldException occurred during 1.6 backcompat code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.chomp("mihn':2~W", (String) null);
      assertEquals("mihn':2~W", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.chomp("\bV)", "/CfvyuM]5iA#yYc:`");
      assertEquals("\bV)", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.chomp("[NgvN!A", "");
      assertEquals("[NgvN!A", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.chop(".6 backcompat code");
      assertEquals(".6 backcompat cod", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.chop("J");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.repeat("mRV{rGJm *", 1);
      assertEquals("mRV{rGJm *", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.repeat("", 872);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.repeat("=", 5);
      assertEquals("=====", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.repeat("java.runtime.name", 128);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "@J6nL<s!%Fd", 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.repeat("", (String) null, (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 256);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.rightPad("aeJ", 8212, 'u');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 0, "8AI5");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.rightPad("fFt*v]", 8212, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.rightPad("12d:6)+xp=en8bfr", 1, "q15z=2:*ik/7eid1%c");
      assertEquals("12d:6)+xp=en8bfr", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.center("Can't find a public method for ", 36, "java.text.Normalizer");
      assertEquals("jaCan't find a public method for jav", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 1228, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.center(" K", 5, " K");
      assertNotNull(string0);
      assertEquals("  K K", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 25, 'e');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.leftPad("8AI5", 0);
      assertEquals("8AI5", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      StringUtils.leftPad("5z=:*k/7eidl%rmc", 13945, 'I');
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 2975, "Gec;3?/4G;?c8-");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.leftPad("NFD", 2766, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.leftPad("NoSuchFieldException occurred during 1.6 backcompat code", 0, ".4_N^$Gw[hBsgEGAxb2");
      assertEquals("NoSuchFieldException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.leftPad("yh9}lF6UtS6A", 19, "wBF2'#D");
      assertEquals("wBF2'#Dyh9}lF6UtS6A", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      int int0 = StringUtils.length("IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      int int0 = StringUtils.length((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 97, 'm');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.center(" B8Il:yWjzBZY[", 0, '\\');
      assertEquals(" B8Il:yWjzBZY[", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.center("ClassNotFoundException occurred during 1.6 backcompat code", 16, 'S');
      assertEquals("ClassNotFoundException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 1044, "The stripAccents(String) method is not supported until Java 1.6");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.center("vSCA(NI0K", 0, "IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals("vSCA(NI0K", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.center("", 3302, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.center("~K", 2409, "a_Rr:QJ~I");
      String string1 = StringUtils.center(string0, 2409, "a_Rr:QJ~I");
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.upperCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      String string0 = StringUtils.upperCase("M-]AgMtFo?K", locale0);
      assertEquals("M-]AGMTFO?K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.lowerCase("8(ET9glw");
      assertNotNull(string0);
      assertEquals("8(et9glw", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      String string0 = StringUtils.lowerCase("SaM2q03Y2?qB<G&X", locale0);
      assertNotNull(string0);
      assertEquals("sam2q03y2?qb<g&x", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.capitalize("Q](W3a\"");
      assertEquals("Q](W3a\"", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Tt,u");
      assertEquals("tt,u", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.swapCase("m|VeYPz^J,tot~%");
      assertEquals("M|vEypZ^j,TOT~%", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "Minimum abbreviation width with offset is 7");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      int int0 = StringUtils.countMatches("Zqa3DE@CoJW#", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int int0 = StringUtils.countMatches(" vs ", " vs ");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("kForA\"eF'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Cannot pad a negative amount: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("Q](W3a\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("NoSuchFieldException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("@cANWg}E~{)g9o&_]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("eNPISt\"(WtRE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("5z=2:*ik/7eid1%c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" lp^i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" KJi=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("IllegalArgumentException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("nosuchfieldexcep");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("Strings must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("NFD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = StringUtils.defaultString("Q](W3a\"", "Q](W3a\"");
      assertEquals("Q](W3a\"", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, ", '");
      assertNotNull(string0);
      assertEquals(", '", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("IllegalArgumentException occurred during 1.6 backcompat codc", "Ok.7Y!+");
      assertEquals("IllegalArgumentException occurred during 1.6 backcompat codc", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.reverse("NFD");
      assertNotNull(string0);
      assertEquals("DFN", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'v');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (-1), 57);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = StringUtils.abbreviate("W", 0, 4);
      assertEquals("W", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("+q 9c`&LNG--9D3oMDn", Integer.MAX_VALUE, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.abbreviate("+q 9c`&LNG--9D3oMDn", Integer.MAX_VALUE, 13);
      assertEquals("...G--9D3oMDn", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.abbreviate("<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C", 230, 230);
      assertEquals("...Y:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQhY:ucp|;y0C<?~nQh...", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.difference("8AI5", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.difference(".M]pcKz}l/_]Y9_I0?", (String) null);
      assertEquals(".M]pcKz}l/_]Y9_I0?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String) null, "ClassNotFoundException occurred during 1.6 backcompat code");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("Caught a SecurityException reading the system property '", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("mRV{rGJm *", "mRV{rGJm*");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.difference("Q](W3a\"", "Q](W3a\"");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("=", ".@u\":;?//As}Z<8o", (-1));
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[5] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[1] = "p{InCombiningDiacriticalMarks}";
      stringArray0[2] = "p{InCombiningDiacriticalMarks}+";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("p{InCombiningDiacriticalMarks}", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "dvjP`D2#qh";
      stringArray0[1] = "os.version=((b Wj=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`F%rU$T=c`";
      stringArray0[2] = "nzoW`|7QdTYWN's!gc";
      stringArray0[3] = "3oSSF_HP-UX";
      stringArray0[4] = "dvjP`D2#qh";
      stringArray0[5] = "os.version=((b Wj";
      stringArray0[6] = "os.version=((b Wj";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "IllegalArgumentException occurred during 1.6 backcompat code";
      stringArray0[1] = "IllegalArgumentException occurred during 1.6 backcompat code";
      stringArray0[2] = "IllegalArgumentException occurred during 1.6 backcompat code";
      stringArray0[3] = "IllegalArgumentException occurred during 1.6 backcompat code";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((String) null, "1fyjg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 4, '^');
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("75@KA-5Ix\"+", string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("y)2#sok:C>m", "ClassNotFoundException occurred during 1.6 backcompat code");
      assertEquals(56, int0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("...", "");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("3VUA&tG", "S]@n#6");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, "java.awt.graphicsenv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(".sUaf+3|^;o`ZF");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("!", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "+q 9c`&LNG--9D3oMDn", 1);
      boolean boolean0 = StringUtils.startsWithAny(":", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "IllegalArgumentException occurred during 1.6 backcompat code";
      boolean boolean0 = StringUtils.startsWithAny("IllegalArgumentException occurred during 1.6 backcompat code", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("short", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "");
      assertFalse(boolean0);
  }
}
