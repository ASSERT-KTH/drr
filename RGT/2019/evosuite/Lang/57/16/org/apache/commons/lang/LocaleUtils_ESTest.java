/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 11:14:03 GMT 2019
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class LocaleUtils_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = new Locale("W#G^AU/JB", "W#G^AU/JB", "W#G^AU/JB");
      List list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("\uC774\uD0C8\uB9AC\uC544\uC5B4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: \uC774\uD0C8\uB9AC\uC544\uC5B4
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("mP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: mP
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("c}pay~-j_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: c}pay~-j_
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ty_[G`4E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ty_[G`4E
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("org.apache.commons.lang.LocaleUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apache.commons.lang.LocaleUtils
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ty_'E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ty_'E
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ty_DE");
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ty_D-`4E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ty_D-`4E
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ty_G`4E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ty_G`4E
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ty_DG4E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ty_DG4E
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocaleUtils.languagesByCountry("");
      LocaleUtils.availableLocaleList();
      String string0 = null;
      LocaleUtils.languagesByCountry((String) null);
      LocaleUtils.availableLocaleList();
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.ITALIAN;
      locale1.getDisplayName(locale0);
      locale0.getDisplayName(locale1);
      locale0.getExtensionKeys();
      locale1.getDisplayName(locale0);
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "JP";
      LocaleUtils.languagesByCountry("JP");
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("-OXywJ'MsWoT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: -OXywJ'MsWoT
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocaleUtils.countriesByLanguage((String) null);
      Locale locale0 = Locale.CANADA;
      Locale.getISOCountries();
      locale0.getDisplayCountry();
      locale0.getDisplayCountry();
      locale0.clone();
      Locale.getISOCountries();
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
      
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(2, list0.size());
      
      LocaleUtils.toLocale((String) null);
      List list1 = LocaleUtils.countriesByLanguage("");
      List list2 = LocaleUtils.countriesByLanguage("");
      assertSame(list2, list1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocaleUtils.languagesByCountry("sr");
      List list0 = LocaleUtils.countriesByLanguage((String) null);
      List list1 = LocaleUtils.countriesByLanguage("sr");
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "lt";
      LocaleUtils.countriesByLanguage("lt");
      LocaleUtils.toLocale("lt");
      String string1 = "mt";
      LocaleUtils.toLocale("mt");
      String string2 = "th";
      LocaleUtils.countriesByLanguage("th");
      LocaleUtils.countriesByLanguage("lt");
      LocaleUtils.countriesByLanguage("mt");
      LocaleUtils.toLocale("mt");
      LocaleUtils.countriesByLanguage("lt");
      String string3 = "";
      LocaleUtils.countriesByLanguage("");
      LocaleUtils.countriesByLanguage(",~+4'.NOu~");
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale(",~+4'.NOu~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ,~+4'.NOu~
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }
}
