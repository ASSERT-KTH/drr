/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 11:32:28 GMT 2019
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class LocaleUtils_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      List list0 = LocaleUtils.countriesByLanguage("");
      locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      locale0.getDisplayScript();
      List list2 = LocaleUtils.countriesByLanguage("th");
      assertFalse(list2.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale(")M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: )M
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("aw_XZ");
      assertNotNull(locale0);
      assertEquals("aw_XZ", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("}Yi]\bfT?]uLU&2XA\"}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: }Yi]\bfT?]uLU&2XA\"}
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("w}xcq8F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: w}xcq8F
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ic`pd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ic`pd
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("my_<Ewg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: my_<Ewg
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("zs_~ogl#K1nh&7Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: zs_~ogl#K1nh&7Z
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("aw_X=%Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: aw_X=%Z
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("aw_Xe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: aw_Xe
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("aw_XA+Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: aw_XA+Z
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("aw_XA_`:");
      assertEquals("`:", locale0.getVariant());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = new Locale("~>KfJoAHPkW$y:x$", "HQxX&Y+)asS9gQ", "~>KfJoAHPkW$y:x$");
      List list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Locale locale1 = Locale.TAIWAN;
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocaleUtils.availableLocaleSet();
      Set set0 = LocaleUtils.availableLocaleSet();
      assertEquals(160, set0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocaleUtils.availableLocaleList();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.stripExtensions();
      locale0.getDisplayName();
      locale0.getDisplayScript();
      locale0.getDisplayLanguage();
      locale0.getDisplayScript();
      LocaleUtils.localeLookupList(locale0);
      LocaleUtils.availableLocaleList();
      List list0 = LocaleUtils.languagesByCountry((String) null);
      LocaleUtils.toLocale((String) null);
      List list1 = LocaleUtils.languagesByCountry("");
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "JP";
      LocaleUtils.languagesByCountry("JP");
      String string1 = "(h1";
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("(h1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: (h1
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Locale locale1 = Locale.TAIWAN;
      List list0 = LocaleUtils.countriesByLanguage((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "hi";
      LocaleUtils.countriesByLanguage("hi");
      LocaleUtils.languagesByCountry("Invalid locale format: ");
      LocaleUtils.countriesByLanguage("cs");
      LocaleUtils.countriesByLanguage("Invalid locale format: ");
      LocaleUtils.languagesByCountry("T7kyF^W{e %W");
      LocaleUtils.countriesByLanguage("Invalid locale format: ");
      LocaleUtils.countriesByLanguage("T7kyF^W{e %W");
      String string1 = "org.apache.commons.lang.LocaleUtils";
      LocaleUtils.countriesByLanguage(string1);
      String string2 = "";
      LocaleUtils.countriesByLanguage(string2);
      String string3 = "ja";
      LocaleUtils.toLocale(string3);
      String string4 = "org.apache.commons.lang.LocaleUtils";
      LocaleUtils.languagesByCountry(string4);
      LocaleUtils.countriesByLanguage(string0);
      String string5 = "wYNN@!F]aJ`)*(d";
      LocaleUtils.languagesByCountry(string5);
      String string6 = "d+2Ip7{Jx<*(9AP";
      LocaleUtils.countriesByLanguage(string6);
      LocaleUtils.countriesByLanguage(string6);
      String string7 = "nl";
      LocaleUtils.countriesByLanguage(string7);
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale(string5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: wYNN@!F]aJ`)*(d
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }
}
