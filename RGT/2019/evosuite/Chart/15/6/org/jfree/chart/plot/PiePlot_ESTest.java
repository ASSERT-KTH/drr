/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 10:03:35 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieToolTipGenerator;
import org.jfree.chart.plot.AbstractPieLabelDistributor;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.PieLabelDistributor;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PiePlotState;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.urls.StandardPieURLGenerator;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;


public class PiePlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setSimpleLabels(true);
      assertTrue(piePlot3D0.getSimpleLabels());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      Paint paint0 = ringPlot0.getSeparatorPaint();
      ringPlot0.setLabelShadowPaint(paint0);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      Color color0 = (Color)ringPlot0.getLabelOutlinePaint();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setShadowYOffset(0.5);
      assertEquals(0.5, piePlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getIgnoreZeroValues();
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Color color0 = (Color)piePlot0.lookupSectionPaint("{0}: ({1}, {2})");
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertNotNull(color0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(128, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      piePlot3D0.getLabelOutlineStroke();
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      boolean boolean0 = ringPlot0.getSectionOutlinesVisible();
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      piePlot0.setLabelLinksVisible(true);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      Color color0 = (Color)ringPlot0.getLabelShadowPaint();
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(151, color0.getRed());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Color color0 = (Color)piePlot3D0.getLabelLinkPaint();
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals((-16777216), color0.getRGB());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_GRIDLINE_STROKE;
      piePlot0.setLabelOutlineStroke(basicStroke0);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getLegendLabelURLGenerator();
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      Paint paint0 = piePlot3D0.getNoDataMessagePaint();
      ringPlot0.setShadowPaint(paint0);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      SystemColor systemColor0 = SystemColor.desktop;
      piePlot0.setLabelBackgroundPaint(systemColor0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      Color color0 = (Color)ringPlot0.getBaseSectionPaint();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(128, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      
      ringPlot0.setSectionOutlinesVisible(false);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      PiePlot piePlot0 = new PiePlot(jDBCPieDataset0);
      Millisecond millisecond0 = new Millisecond();
      piePlot0.getSectionOutlineStroke(millisecond0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      boolean boolean0 = piePlot3D0.getLabelLinksVisible();
      assertTrue(boolean0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getBaseOutlinePaint();
      piePlot3D0.setSectionOutlinePaint(numberTickUnit0, paint0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      ringPlot0.setCircular(true);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      RectangleInsets rectangleInsets0 = ringPlot0.getSimpleLabelOffset();
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.18, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      RectangleInsets rectangleInsets0 = piePlot3D0.getLabelPadding();
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      piePlot3D0.setIgnoreNullValues(false);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("#?*-4~\u0003*H>)B");
      piePlot3D0.setLegendLabelURLGenerator(standardPieURLGenerator0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.getSectionOutlinePaint(piePlot0.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setMaximumLabelWidth(2385.17);
      assertEquals(2385.17, piePlot3D0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getIgnoreNullValues();
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Color color0 = (Color)piePlot3D0.getBaseSectionOutlinePaint();
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(128, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("#?*-4~\u0003*H>)B");
      piePlot3D0.setURLGenerator(standardPieURLGenerator0);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      piePlot3D0.setSectionPaint("#?*-4~\u0003*H>)B", defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.getPlotType();
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setShadowXOffset(10);
      assertEquals(10.0, piePlot3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      piePlot3D0.getSimpleLabels();
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setPieIndex(2);
      assertEquals(2, piePlot3D0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      
      ringPlot0.setMinimumArcAngleToDraw(0.0);
      assertEquals(0.0, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Locale locale0 = Locale.ITALY;
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator("o", locale0);
      piePlot3D0.setLabelGenerator(standardPieSectionLabelGenerator0);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      piePlot3D0.setSectionOutlineStroke(1.0F, (Stroke) null);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D0.getLabelLinkStroke();
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getBaseSectionOutlineStroke();
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      piePlot0.getLabelDistributor();
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Color color0 = (Color)piePlot3D0.getLabelBackgroundPaint();
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(255, color0.getRed());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Color color0 = (Color)piePlot3D0.getLabelPaint();
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      MockDate mockDate0 = new MockDate(3044L);
      Week week0 = new Week(mockDate0);
      ringPlot0.getSectionPaint(week0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 1827);
      PiePlot piePlot0 = new PiePlot(categoryToPieDataset0);
      piePlot0.getLegendLabelToolTipGenerator();
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 1827);
      PiePlot piePlot0 = new PiePlot(categoryToPieDataset0);
      piePlot0.setDataset(categoryToPieDataset0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setDataset((PieDataset) null);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Rotation rotation0 = Rotation.CLOCKWISE;
      piePlot3D0.setDirection(rotation0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setDirection((Rotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'direction' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setInteriorGap((-1561.8643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (-1561.8643) argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setInteriorGap(4.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (4.0) argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      
      piePlot0.setInteriorGap(0.0);
      assertEquals(0.0, piePlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      
      piePlot0.setInteriorGap(0.08);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Comparable comparable0 = piePlot0.getSectionKey(255);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(255, comparable0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNotNull(comparable0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      Comparable comparable0 = ringPlot0.getSectionKey((-383));
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals((-383), comparable0);
      assertNotNull(comparable0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      Comparable comparable0 = piePlot0.getSectionKey(0);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertNotNull(comparable0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0, comparable0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      ringPlot0.setBaseSectionPaint(color0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      // Undeclared exception!
      try { 
        piePlot3D0.setBaseSectionPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Second second0 = new Second();
      Paint paint0 = ringPlot0.lookupSectionOutlinePaint(second0, true);
      Color color0 = (Color)ringPlot0.lookupSectionOutlinePaint(second0, false);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNotNull(color0);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertSame(color0, paint0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(192, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Color color0 = (Color)Axis.DEFAULT_TICK_LABEL_PAINT;
      piePlot0.setBaseSectionOutlinePaint(color0);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setBaseSectionOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      DateTickUnit dateTickUnit0 = new DateTickUnit(0, 0, (DateFormat) null);
      Stroke stroke0 = ringPlot0.lookupSectionOutlineStroke(dateTickUnit0, true);
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(dateTickUnit0, false);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertSame(basicStroke0, stroke0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertNotNull(basicStroke0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      ringPlot0.setBaseSectionOutlineStroke(defaultPolarItemRenderer0.DEFAULT_STROKE);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setBaseSectionOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      piePlot0.setExplodePercent("RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]", (-3628.83));
      double double0 = piePlot0.getExplodePercent("RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]");
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals((-3628.83), double0, 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setExplodePercent((Comparable) null, 0.05);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      Paint paint0 = xYLine3DRenderer0.getWallPaint();
      piePlot3D0.setLabelLinkPaint(paint0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      // Undeclared exception!
      try { 
        piePlot0.setLabelLinkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setLabelLinkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setLabelFont(piePlot3D0.DEFAULT_LABEL_FONT);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      // Undeclared exception!
      try { 
        ringPlot0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      PiePlot piePlot0 = new PiePlot(jDBCPieDataset0);
      // Undeclared exception!
      try { 
        piePlot0.setLabelPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setSimpleLabelOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(3042);
      ringPlot0.setLabelDistributor(pieLabelDistributor0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setLabelDistributor((AbstractPieLabelDistributor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'distributor' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Line2D.Double line2D_Double0 = new Line2D.Double((-2333.41929271), 10, 10, (-1106.1057957));
      piePlot3D0.setLegendItemShape(line2D_Double0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setLegendItemShape((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PieSectionLabelGenerator pieSectionLabelGenerator0 = piePlot3D0.getLegendLabelGenerator();
      piePlot3D0.setLegendLabelGenerator(pieSectionLabelGenerator0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setLegendLabelGenerator((PieSectionLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("c90.W+?D])@-a+h", piePlot0);
      jFreeChart0.createBufferedImage(1637, 1062);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      ringPlot0.setCircular(false, false);
      defaultPieDataset0.setValue((Comparable) 10.0F, (Number) 10.0F);
      JFreeChart jFreeChart0 = new JFreeChart("s", ringPlot0.DEFAULT_LABEL_FONT, ringPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(1115, 15, chartRenderingInfo0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        piePlot0.drawPie((Graphics2D) null, rectangle2D_Double0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        piePlot0.drawPie((Graphics2D) null, rectangle2D_Double0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      piePlot3D0.setDataset(jDBCPieDataset0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      piePlot3D0.drawItem(graphics2D0, 1874, rectangle2D_Double0, piePlotState0, 15);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      ArrayList<PiePlot> arrayList0 = new ArrayList<PiePlot>();
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      piePlot3D0.drawSimpleLabels(graphics2D0, arrayList0, 0, rectangle2D_Double0, rectangle2D0, piePlotState0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      // Undeclared exception!
      try { 
        piePlot3D0.drawSimpleLabels(graphics2D0, list0, (-0.9722171277992747), rectangle2D_Double0, rectangle2D_Double0, piePlotState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      defaultPieDataset0.setValue((Comparable) 0.0F, (Number) 0.0F);
      JFreeChart jFreeChart0 = new JFreeChart("s", ringPlot0.DEFAULT_LABEL_FONT, ringPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1115, 15, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ringPlot0.setIgnoreZeroValues(true);
      ringPlot0.drawPie(sunGraphics2D0, rectangle2D_Float0, plotRenderingInfo0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      ringPlot0.setStartAngle(1.5707963267948966);
      defaultPieDataset0.setValue((Comparable) 10.0F, (Number) 10.0F);
      JFreeChart jFreeChart0 = new JFreeChart("s", ringPlot0.DEFAULT_LABEL_FONT, ringPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(1115, 15, chartRenderingInfo0);
      assertEquals(1.5707963267948966, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getLegendItems();
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      defaultPieDataset0.setValue((Comparable) 0.0F, (Number) 0.0F);
      ringPlot0.setIgnoreZeroValues(true);
      ringPlot0.getLegendItems();
      assertTrue(ringPlot0.getIgnoreZeroValues());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      defaultPieDataset0.setValue((Comparable) 0.0F, (Number) (-649.5567F));
      JFreeChart jFreeChart0 = new JFreeChart("s", ringPlot0.DEFAULT_LABEL_FONT, ringPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(1115, 15, chartRenderingInfo0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator();
      ringPlot0.setLegendLabelToolTipGenerator(standardPieSectionLabelGenerator0);
      defaultPieDataset0.setValue((Comparable) 10.0F, (Number) 10.0F);
      JFreeChart jFreeChart0 = new JFreeChart("s", ringPlot0.DEFAULT_LABEL_FONT, ringPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(1115, 15, chartRenderingInfo0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(10, 10, 1.0F, 1.0F);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ringPlot0.getArcBounds(rectangle2D_Float0, rectangle2D_Float0, 10.0F, 2647.3072672397, 96.36901);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.y, 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 1827);
      PiePlot3D piePlot3D0 = new PiePlot3D(categoryToPieDataset0);
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      piePlot3D0.setLabelLinkStroke(defaultPolarItemRenderer0.DEFAULT_STROKE);
      categoryToPieDataset0.hasListener(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      boolean boolean0 = defaultPieDataset0.hasListener(piePlot0);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Paint paint0 = combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      piePlot3D0.setBackgroundPaint(paint0);
      PiePlot3D piePlot3D1 = new PiePlot3D();
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, piePlot3D1.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      
      piePlot3D1.setExplodePercent(1.0F, 1.0F);
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      
      Color color0 = (Color)combinedDomainXYPlot0.getDomainCrosshairPaint();
      piePlot3D1.setLabelPaint(color0);
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      
      piePlot3D1.setLabelOutlinePaint(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Object object0 = piePlot3D0.clone();
      assertTrue(object0.equals((Object)piePlot3D0));
      
      piePlot3D0.setSimpleLabelOffset(combinedDomainXYPlot0.DEFAULT_INSETS);
      object0.equals(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Object object0 = piePlot3D0.clone();
      assertTrue(object0.equals((Object)piePlot3D0));
      
      piePlot3D0.setLabelPadding(combinedDomainXYPlot0.DEFAULT_INSETS);
      boolean boolean0 = piePlot3D0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      piePlot3D1.setLabelGap((-3415.09938));
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertEquals((-3415.09938), piePlot3D1.getLabelGap(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      piePlot3D1.setLabelLinkMargin(0.7853981633974483);
      piePlot3D0.equals(piePlot3D1);
      assertEquals(0.7853981633974483, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertTrue(boolean0);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      
      StandardPieToolTipGenerator standardPieToolTipGenerator0 = new StandardPieToolTipGenerator();
      piePlot3D1.setToolTipGenerator(standardPieToolTipGenerator0);
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      
      DecimalFormat decimalFormat0 = new DecimalFormat("Q");
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator("26 ;f<j(+d 7aX", decimalFormat0, decimalFormat0);
      piePlot3D1.setLegendLabelGenerator(standardPieSectionLabelGenerator0);
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertFalse(boolean0);
  }
}
