/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 09:50:02 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Area;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.text.DateFormatSymbols;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.PieToolTipGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.AbstractPieLabelDistributor;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.PieLabelDistributor;
import org.jfree.chart.plot.PieLabelRecord;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PiePlotState;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.urls.CustomPieURLGenerator;
import org.jfree.chart.urls.PieURLGenerator;
import org.jfree.chart.urls.StandardPieURLGenerator;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;


public class PiePlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setSimpleLabels(false);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Color color0 = (Color)piePlot0.getLabelOutlinePaint();
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals((-16777216), color0.getRGB());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Rotation rotation0 = piePlot0.getDirection();
      piePlot0.setDirection(rotation0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setLabelLinkMargin((-83L));
      RingPlot ringPlot1 = new RingPlot();
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertEquals((-83.0), ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getIgnoreZeroValues();
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0.08, (Number) 1.0F);
      Color color0 = (Color)ringPlot0.lookupSectionPaint(xYDataItem0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNotNull(color0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(128, color0.getRed());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getLabelOutlineStroke();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      boolean boolean0 = piePlot0.getSectionOutlinesVisible();
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(boolean0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      int int0 = piePlot0.getPieIndex();
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, int0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setLabelLinksVisible(true);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Paint paint0 = piePlot0.getLabelShadowPaint();
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(3, paint0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Color color0 = (Color)ringPlot0.getShadowPaint();
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Color color0 = (Color)ringPlot0.getLabelLinkPaint();
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(0, ringPlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Stroke stroke0 = ringPlot0.getSeparatorStroke();
      ringPlot0.setLabelOutlineStroke(stroke0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      ringPlot0.getLegendLabelURLGenerator();
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PieSectionLabelGenerator pieSectionLabelGenerator0 = piePlot3D0.getLegendLabelGenerator();
      piePlot3D0.setLegendLabelToolTipGenerator(pieSectionLabelGenerator0);
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Color color0 = Color.yellow;
      piePlot3D0.setShadowPaint(color0);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      double double0 = piePlot0.getShadowXOffset();
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, double0, 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Color color0 = (Color)piePlot3D0.getLabelBackgroundPaint();
      piePlot3D0.setLabelBackgroundPaint(color0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(255, color0.getRed());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Color color0 = (Color)piePlot0.getBaseSectionPaint();
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(128, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      DateAxis dateAxis0 = new DateAxis();
      DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Second second0 = new Second(dateAxis0.DEFAULT_ANCHOR_DATE, timeZone0);
      ringPlot0.getSectionOutlineStroke(second0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setToolTipGenerator((PieToolTipGenerator) null);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      boolean boolean0 = ringPlot0.getLabelLinksVisible();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(boolean0);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      double double0 = ringPlot0.getShadowYOffset();
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, double0, 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Comparable comparable0 = piePlot3D0.getSectionKey((-1551));
      assertEquals((-1551), comparable0);
      assertNotNull(comparable0);
      
      Color color0 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      piePlot3D0.setSectionOutlinePaint(comparable0, color0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setShadowYOffset(170.41291863);
      assertEquals(170.41291863, piePlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      
      ringPlot0.setStartAngle(0.0);
      assertEquals(0.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      RectangleInsets rectangleInsets0 = piePlot0.getSimpleLabelOffset();
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.18, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 10);
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      RectangleInsets rectangleInsets0 = ringPlot0.getLabelPadding();
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setIgnoreNullValues(false);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setLegendLabelURLGenerator((PieURLGenerator) null);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("6", dateFormatSymbols0);
      NumberFormat numberFormat0 = mockSimpleDateFormat0.getNumberFormat();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0, numberFormat0);
      ringPlot0.getSectionOutlinePaint(numberTickUnit0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setMaximumLabelWidth(2.0F);
      assertEquals(2.0, ringPlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getIgnoreNullValues();
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Color color0 = (Color)ringPlot0.getBaseSectionOutlinePaint();
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0.08, (Number) 1.0F);
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      ringPlot0.setSectionPaint(xYDataItem0, color0);
      Color color1 = (Color)ringPlot0.lookupSectionPaint(xYDataItem0);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(192, color1.getGreen());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getURLGenerator();
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      piePlot0.getPlotType();
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getToolTipGenerator();
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setShadowXOffset((-114.43));
      assertEquals((-114.43), piePlot3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getSimpleLabels();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setPieIndex((-1465));
      assertEquals((-1465), ringPlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setLabelGenerator((PieSectionLabelGenerator) null);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getLabelLinkStroke();
      ringPlot0.setSectionOutlineStroke("{0}", basicStroke0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      
      ringPlot0.setLabelGap(0.0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getBaseSectionOutlineStroke();
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getLabelDistributor();
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Color color0 = (Color)ringPlot0.getLabelPaint();
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, color0.getGreen());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MockDate mockDate0 = new MockDate(10);
      Year year0 = new Year(mockDate0);
      piePlot3D0.getSectionPaint(year0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getLegendLabelToolTipGenerator();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Locale locale0 = Locale.UK;
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator("Null 'key' argument.", locale0);
      piePlot0.setLegendLabelToolTipGenerator(standardPieSectionLabelGenerator0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setDataset((PieDataset) null);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      piePlot0.setDataset(defaultKeyedValuesDataset0);
      piePlot0.setDataset(defaultKeyedValuesDataset0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setDirection((Rotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'direction' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      // Undeclared exception!
      try { 
        piePlot3D0.setInteriorGap((-1694.392));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (-1694.392) argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setInteriorGap(207.1178256);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (207.1178256) argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      
      piePlot3D0.setInteriorGap(0.0);
      assertEquals(0.0, piePlot3D0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      
      piePlot3D0.setInteriorGap(0.08);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setDrawingSupplier((DrawingSupplier) null);
      Color color0 = (Color)piePlot3D0.lookupSectionPaint(10, true);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals((-8355712), color0.getRGB());
      assertNotNull(color0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      piePlot0.setDataset(defaultKeyedValuesDataset0);
      Comparable comparable0 = piePlot0.getSectionKey((-1085));
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals((-1085), comparable0);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Comparable comparable0 = piePlot0.getSectionKey(151);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(151, comparable0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      defaultPieDataset0.setValue((Comparable) 1.0F, (double) 10);
      Comparable comparable0 = ringPlot0.getSectionKey(0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, comparable0);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      // Undeclared exception!
      try { 
        piePlot3D0.setBaseSectionPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Color color0 = Color.GRAY;
      piePlot3D0.setSectionOutlinePaint(fixedMillisecond0, color0);
      Color color1 = (Color)piePlot3D0.lookupSectionOutlinePaint(fixedMillisecond0, false);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(128, color1.getRed());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Color color0 = (Color)piePlot3D0.lookupSectionOutlinePaint(10, true);
      assertNotNull(color0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals((-4144960), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setDrawingSupplier((DrawingSupplier) null);
      Color color0 = (Color)piePlot3D0.lookupSectionOutlinePaint(10, true);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertNotNull(color0);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      LogAxis logAxis0 = new LogAxis("4j,V_f=qB#,l");
      piePlot3D0.setBaseSectionOutlinePaint(logAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      PiePlot piePlot0 = new PiePlot(jDBCPieDataset0);
      // Undeclared exception!
      try { 
        piePlot0.setBaseSectionOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Stroke stroke0 = candlestickRenderer0.getBaseStroke();
      Hour hour0 = new Hour();
      piePlot0.setSectionOutlineStroke(hour0, stroke0);
      BasicStroke basicStroke0 = (BasicStroke)piePlot0.lookupSectionOutlineStroke(hour0, false);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      piePlot3D0.setDrawingSupplier((DrawingSupplier) null);
      Stroke stroke0 = piePlot3D0.lookupSectionOutlineStroke(areaRenderer0.ZERO, true);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNotNull(stroke0);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setBaseSectionOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      double double0 = piePlot3D0.getExplodePercent(1.0F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      ringPlot0.setExplodePercent(boxAndWhiskerRenderer0.ZERO, (-1084.0871));
      double double0 = ringPlot0.getExplodePercent(boxAndWhiskerRenderer0.ZERO);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals((-1084.0871), double0, 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setExplodePercent((Comparable) null, 0.001);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("Sy", piePlot3D0.DEFAULT_LABEL_FONT, piePlot3D0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(255, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Stack<String> stack0 = new Stack<String>();
      stack0.add("Sy");
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 1, 1, 10, 10, 15, false, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        piePlot3D0.drawLabels(graphics2D0, stack0, 15, (Rectangle2D) null, (Rectangle2D) null, piePlotState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      defaultPieDataset0.setValue((Comparable) 10, 1.0E-5);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 6.0F, 1.0F, 1.0F);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        piePlot3D0.drawPie((Graphics2D) null, rectangle2D_Float0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("AH(^?\"");
      ringPlot0.setLabelLinkPaint(subCategoryAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setLabelLinkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      piePlot3D0.setLabelLinkStroke(basicStroke0);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      // Undeclared exception!
      try { 
        piePlot3D0.setLabelLinkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("AH(^?\"");
      ringPlot0.setLabelFont(subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 255);
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      // Undeclared exception!
      try { 
        ringPlot0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setLabelPadding(piePlot3D0.DEFAULT_INSETS);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setLabelPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setSimpleLabelOffset(ringPlot0.DEFAULT_INSETS);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setSimpleLabelOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(1);
      piePlot3D0.setLabelDistributor(pieLabelDistributor0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      // Undeclared exception!
      try { 
        piePlot0.setLabelDistributor((AbstractPieLabelDistributor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'distributor' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Line2D.Double line2D_Double0 = new Line2D.Double((-2338.934895), 10, 1.0F, 75.0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      piePlot3D0.setLegendItemShape(rectangle2D0);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      // Undeclared exception!
      try { 
        ringPlot0.setLegendItemShape((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator("pr@+?iHY'e}x4;");
      ringPlot0.setLegendLabelGenerator(standardPieSectionLabelGenerator0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setLegendLabelGenerator((PieSectionLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("kXOgE!?ho`cDr!T$", ringPlot0.DEFAULT_LABEL_FONT, ringPlot0, true);
      jFreeChart0.createBufferedImage(10, 1705);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'generator' argument.", ringPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(10, 202, 0.14, 90.0, chartRenderingInfo0);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      piePlot3D0.setCircular(true);
      JFreeChart jFreeChart0 = new JFreeChart("5Zf2l+SY;n-ClP_", areaRenderer0.DEFAULT_VALUE_LABEL_FONT, piePlot3D0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 2, 2323, 10, 10, 2, true, false, false, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      // Undeclared exception!
      try { 
        piePlot3D0.drawPie((Graphics2D) null, rectangle2D0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 6.0F, 1.0F, 0.0F);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        piePlot3D0.drawPie((Graphics2D) null, rectangle2D_Float0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      defaultPieDataset0.setValue((Comparable) 10, (-2.0628207742511564));
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 6.0F, 1.0F, 1.0F);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        piePlot3D0.drawPie((Graphics2D) null, rectangle2D_Float0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 6.0F, 1.0F, 0.0F);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      piePlot3D0.drawItem((Graphics2D) null, 102, rectangle2D_Float0, piePlotState0, 10);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 192, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<Integer> vector0 = new Vector<Integer>();
      Area area0 = new Area();
      Rectangle2D rectangle2D0 = area0.getBounds2D();
      ringPlot0.drawSimpleLabels(graphics2D0, vector0, (double) boxAndWhiskerRenderer0.ZERO, rectangle2D0, rectangle2D0, (PiePlotState) null);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 192, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<Integer> vector0 = new Vector<Integer>();
      Area area0 = new Area();
      vector0.add((Integer) 0);
      Rectangle2D rectangle2D0 = area0.getBounds2D();
      // Undeclared exception!
      try { 
        ringPlot0.drawSimpleLabels(graphics2D0, vector0, (double) boxAndWhiskerRenderer0.ZERO, rectangle2D0, rectangle2D0, (PiePlotState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 192, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<Integer> vector0 = new Vector<Integer>();
      Area area0 = new Area();
      Rectangle2D rectangle2D0 = area0.getBounds2D();
      // Undeclared exception!
      try { 
        ringPlot0.drawLabels(graphics2D0, vector0, 0, rectangle2D0, rectangle2D0, (PiePlotState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = ringPlot0.initialise((Graphics2D) null, rectangle2D_Float0, piePlot3D0, (Integer) 10, plotRenderingInfo0);
      piePlotState0.setLinkArea(rectangle2D_Float0);
      ringPlot0.drawRightLabels(defaultKeyedValuesDataset0, (Graphics2D) null, rectangle2D_Float0, rectangle2D_Float0, 1.0F, piePlotState0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlotState0.getLatestAngle(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      defaultPieDataset0.setValue((Comparable) 10, 1.0E-5);
      LegendItemCollection legendItemCollection0 = piePlot3D0.getLegendItems();
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1, legendItemCollection0.getItemCount());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      defaultPieDataset0.setValue((Comparable) 10, (-2.0628207742511564));
      LegendItemCollection legendItemCollection0 = piePlot3D0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Line2D.Double line2D_Double0 = new Line2D.Double((-2338.934895), 10, 1.0F, 75.0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      Rectangle2D rectangle2D1 = piePlot3D0.getArcBounds(rectangle2D0, rectangle2D0, (-1150.965703913279), 1168.530029296875, 1.0F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertNotSame(rectangle2D1, rectangle2D0);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(rectangle2D1.equals((Object)rectangle2D0));
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = ringPlot0.initialise((Graphics2D) null, rectangle2D_Float0, piePlot3D0, (Integer) 10, plotRenderingInfo0);
      piePlotState0.setLinkArea(rectangle2D_Float0);
      TextBox textBox0 = new TextBox();
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(boxAndWhiskerRenderer0.ZERO, 0.14, 90.0, textBox0, (-636.5879758628366), 90.0, 1.0E-5);
      // Undeclared exception!
      try { 
        piePlot3D0.drawLeftLabel((Graphics2D) null, piePlotState0, pieLabelRecord0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      PiePlot piePlot0 = new PiePlot();
      boolean boolean0 = piePlot0.equals(ringPlot0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      boolean boolean0 = piePlot0.equals(customPieURLGenerator0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.isCircular());
      assertFalse(boolean0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      
      piePlot3D1.lookupSectionOutlineStroke(10, true);
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertFalse(boolean0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = new RingPlot();
      ringPlot0.setIgnoreZeroValues(true);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertTrue(ringPlot0.getIgnoreZeroValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Object object0 = piePlot3D0.clone();
      assertTrue(object0.equals((Object)piePlot3D0));
      
      piePlot3D0.setBaseSectionPaint(((PiePlot) object0).DEFAULT_LABEL_BACKGROUND_PAINT);
      boolean boolean0 = piePlot3D0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      piePlot0.setSectionOutlinesVisible(false);
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      RingPlot ringPlot0 = new RingPlot(jDBCPieDataset0);
      boolean boolean0 = piePlot0.equals(ringPlot0);
      assertFalse(piePlot0.getSectionOutlinesVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'generator' argument.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      Stroke stroke0 = combinedDomainCategoryPlot0.getRangeCrosshairStroke();
      ringPlot0.setBaseSectionOutlineStroke(stroke0);
      PiePlot piePlot0 = new PiePlot();
      boolean boolean0 = piePlot0.equals(ringPlot0);
      assertFalse(boolean0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = new RingPlot();
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      
      ringPlot0.setLabelPaint(ringPlot1.DEFAULT_OUTLINE_PAINT);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = new RingPlot();
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      
      ringPlot0.setLabelBackgroundPaint(ringPlot1.DEFAULT_LABEL_OUTLINE_PAINT);
      ringPlot0.equals(ringPlot1);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = new RingPlot();
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      
      ringPlot1.setLabelOutlinePaint(ringPlot0.DEFAULT_BACKGROUND_PAINT);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = new RingPlot();
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      
      ringPlot0.setLabelShadowPaint(ringPlot1.DEFAULT_BACKGROUND_PAINT);
      ringPlot0.equals(ringPlot1);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = new RingPlot();
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator();
      ringPlot1.setURLGenerator(standardPieURLGenerator0);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = new RingPlot();
      ringPlot1.setMinimumArcAngleToDraw((-66L));
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertEquals((-66.0), ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      RingPlot ringPlot0 = new RingPlot(jDBCPieDataset0);
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertTrue(ringPlot1.isCircular());
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertNotSame(ringPlot1, ringPlot0);
  }
}
