/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 10:22:10 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Area;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.Locale;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieToolTipGenerator;
import org.jfree.chart.plot.AbstractPieLabelDistributor;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PiePlotState;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.urls.CustomPieURLGenerator;
import org.jfree.chart.urls.PieURLGenerator;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;


public class PiePlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      ringPlot0.setSimpleLabels(false);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      piePlot3D0.setLabelShadowPaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      Color color0 = (Color)ringPlot0.getLabelOutlinePaint();
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0, color0.getBlue());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getDirection();
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      int int0 = piePlot0.getPieIndex();
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getIgnoreZeroValues();
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Week week0 = new Week();
      Color color0 = (Color)ringPlot0.lookupSectionPaint(week0);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(128, color0.getRed());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertNotNull(color0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getLabelOutlineStroke();
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      boolean boolean0 = ringPlot0.getSectionOutlinesVisible();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setLabelLinksVisible(false);
      assertFalse(ringPlot0.getLabelLinksVisible());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Paint paint0 = piePlot0.getLabelShadowPaint();
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(3, paint0.getTransparency());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      defaultPieDataset0.setValue((Comparable) 1.0F, (Number) 0.08);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, piePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(1059);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      piePlot0.drawPie(sunGraphics2D0, rectangle0, plotRenderingInfo0);
      assertEquals((-16777216), sunGraphics2D0.eargb);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Color color0 = (Color)piePlot0.getShadowPaint();
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(128, color0.getGreen());
      assertEquals(0, piePlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      Color color0 = (Color)piePlot0.getLabelLinkPaint();
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Stroke stroke0 = stackedAreaRenderer0.getItemOutlineStroke(10, 0);
      piePlot0.setLabelOutlineStroke(stroke0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      piePlot0.getLegendLabelURLGenerator();
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      PieSectionLabelGenerator pieSectionLabelGenerator0 = piePlot0.getLegendLabelGenerator();
      piePlot0.setLegendLabelToolTipGenerator(pieSectionLabelGenerator0);
      PiePlot piePlot1 = (PiePlot)piePlot0.clone();
      assertEquals(0.08, piePlot1.getInteriorGap(), 0.01);
      assertTrue(piePlot1.equals((Object)piePlot0));
      assertTrue(piePlot1.isCircular());
      assertEquals(4.0, piePlot1.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot1.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot1.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot1.getSectionOutlinesVisible());
      assertNotSame(piePlot1, piePlot0);
      assertEquals(0.025, piePlot1.getLabelGap(), 0.01);
      assertEquals(0, piePlot1.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setIgnoreZeroValues(false);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Color color0 = (Color)BarRenderer3D.DEFAULT_WALL_PAINT;
      piePlot0.setShadowPaint(color0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      double double0 = piePlot0.getShadowXOffset();
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, double0, 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(90.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Paint paint0 = thermometerPlot0.getMercuryPaint();
      ringPlot0.setLabelBackgroundPaint(paint0);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      Color color0 = (Color)ringPlot0.getBaseSectionPaint();
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals((-8355712), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setSectionOutlinesVisible(true);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      Minute minute0 = new Minute();
      ringPlot0.getSectionOutlineStroke(minute0);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      StandardPieToolTipGenerator standardPieToolTipGenerator0 = new StandardPieToolTipGenerator("");
      piePlot0.setToolTipGenerator(standardPieToolTipGenerator0);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      boolean boolean0 = piePlot0.getLabelLinksVisible();
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(boolean0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      double double0 = piePlot0.getShadowYOffset();
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, double0, 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(90.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Paint paint0 = thermometerPlot0.getMercuryPaint();
      ringPlot0.setSectionOutlinePaint(2, paint0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setShadowYOffset(588.7044935369958);
      assertEquals(588.7044935369958, piePlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.", piePlot3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(10, 3102, 0.08, 90.0, chartRenderingInfo0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      ringPlot0.setCircular(false);
      JFreeChart jFreeChart0 = new JFreeChart("($CXj/Pka0u3>mV=I", ringPlot0.DEFAULT_LABEL_FONT, ringPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(((SunGraphics2D) graphics2D0).transform, ((SunGraphics2D) graphics2D0).hints);
      Rectangle2D rectangle2D0 = affineTransformOp0.getBounds2D(bufferedImage0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ringPlot0.drawPie(graphics2D0, rectangle2D0, plotRenderingInfo0);
      assertFalse(ringPlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      RectangleInsets rectangleInsets0 = piePlot3D0.getSimpleLabelOffset();
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.18, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      RectangleInsets rectangleInsets0 = piePlot3D0.getLabelPadding();
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setIgnoreNullValues(false);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getSectionOutlinePaint(false);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setMaximumLabelWidth(277.8186);
      assertEquals(277.8186, piePlot3D0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getIgnoreNullValues();
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      Color color0 = (Color)piePlot3D0.getBaseSectionOutlinePaint();
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(128, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setURLGenerator((PieURLGenerator) null);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DateFormat dateFormat0 = DateFormat.getInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(0, 0, 0, 0, dateFormat0);
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Color color0 = (Color)piePlot0.lookupSectionOutlinePaint(dateTickUnit0, true);
      assertNotNull(color0);
      
      piePlot0.setSectionPaint(dateTickUnit0, color0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getURLGenerator();
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.getPlotType();
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      piePlot0.getToolTipGenerator();
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getSimpleLabels();
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setMinimumArcAngleToDraw((-3508.26117699));
      assertEquals((-3508.26117699), piePlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getLabelLinkStroke();
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getBaseSectionOutlineStroke();
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Color color0 = (Color)piePlot0.getLabelBackgroundPaint();
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals((-64), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      Color color0 = (Color)piePlot0.getLabelPaint();
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(255);
      Date date0 = spreadsheetDate0.toDate();
      Quarter quarter0 = new Quarter(date0);
      piePlot3D0.getSectionPaint(quarter0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      piePlot3D0.getLegendLabelToolTipGenerator();
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, 1772);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      piePlot0.setDataset(categoryToPieDataset0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      ringPlot0.setDataset((PieDataset) null);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      Rotation rotation0 = Rotation.ANTICLOCKWISE;
      ringPlot0.setDirection(rotation0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      // Undeclared exception!
      try { 
        piePlot3D0.setDirection((Rotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'direction' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setInteriorGap((-1340.697641831022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (-1340.697641831022) argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, 1772);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      
      piePlot0.setInteriorGap(0.08);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setInteriorGap(3308.213335);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (3308.213335) argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Comparable comparable0 = ringPlot0.getSectionKey(2146173085);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(2146173085, comparable0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertNotNull(comparable0);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, (-2003));
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      Comparable comparable0 = ringPlot0.getSectionKey((-2003));
      assertEquals((-2003), comparable0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertNotNull(comparable0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Comparable comparable0 = piePlot0.getSectionKey(2146173085);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertNotNull(comparable0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(2146173085, comparable0);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, 1772);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      RingPlot ringPlot0 = new RingPlot();
      piePlot0.setBaseSectionPaint(ringPlot0.DEFAULT_LABEL_SHADOW_PAINT);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setBaseSectionPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DateFormat dateFormat0 = DateFormat.getInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(0, 0, 0, 0, dateFormat0);
      defaultPieDataset0.setValue((Comparable) dateTickUnit0, (Number) 6);
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Color color0 = (Color)piePlot0.lookupSectionOutlinePaint(dateTickUnit0, true);
      assertNotNull(color0);
      assertEquals(192, color0.getGreen());
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1, legendItemCollection0.getItemCount());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setBaseSectionOutlinePaint(ringPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setBaseSectionOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DateFormat dateFormat0 = DateFormat.getInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(0, 0, 0, 0, dateFormat0);
      defaultPieDataset0.setValue((Comparable) dateTickUnit0, (Number) 6);
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      Stroke stroke0 = ringPlot0.getOutlineStroke();
      piePlot0.setSectionOutlineStroke(dateTickUnit0, stroke0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, piePlot0.DEFAULT_LABEL_FONT, piePlot0, false);
      jFreeChart0.createBufferedImage(385, 5);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      BasicStroke basicStroke0 = (BasicStroke)piePlot0.lookupSectionOutlineStroke(0.08, true);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertNotNull(basicStroke0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(2, basicStroke0.getLineJoin());
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Day day0 = new Day();
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D0.lookupSectionOutlineStroke(day0);
      assertNotNull(basicStroke0);
      
      piePlot3D0.setBaseSectionOutlineStroke(basicStroke0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      // Undeclared exception!
      try { 
        piePlot0.setBaseSectionOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setExplodePercent(1.0F, 0.025);
      double double0 = piePlot3D0.getExplodePercent(1.0F);
      assertEquals(0.025, double0, 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setExplodePercent((Comparable) null, 25000.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DateFormat dateFormat0 = DateFormat.getInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(0, 0, 0, 0, dateFormat0);
      defaultPieDataset0.setValue((Comparable) dateTickUnit0, (Number) 6);
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      piePlot0.setExplodePercent(dateTickUnit0, 6);
      double double0 = piePlot0.getMaximumExplodePercent();
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(6.0, double0, 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Color color0 = Color.LIGHT_GRAY;
      ringPlot0.setLabelLinkPaint(color0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setLabelLinkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Stroke stroke0 = thermometerPlot0.getThermometerStroke();
      piePlot3D0.setLabelLinkStroke(stroke0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setLabelLinkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      ringPlot0.setLabelFont(ringPlot0.DEFAULT_LABEL_FONT);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      // Undeclared exception!
      try { 
        piePlot0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      piePlot0.setLabelPadding(piePlot0.DEFAULT_INSETS);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setLabelPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setSimpleLabelOffset(piePlot0.DEFAULT_INSETS);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      // Undeclared exception!
      try { 
        piePlot3D0.setSimpleLabelOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      AbstractPieLabelDistributor abstractPieLabelDistributor0 = piePlot3D0.getLabelDistributor();
      piePlot3D0.setLabelDistributor(abstractPieLabelDistributor0);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, (-2416));
      PiePlot3D piePlot3D0 = new PiePlot3D(categoryToPieDataset0);
      // Undeclared exception!
      try { 
        piePlot3D0.setLabelDistributor((AbstractPieLabelDistributor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'distributor' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setLegendItemShape((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setLegendLabelGenerator((PieSectionLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("($CXj/Pka0u3>mV=I", ringPlot0.DEFAULT_LABEL_FONT, ringPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(10, 10, 1282.70166, (-1.0), chartRenderingInfo0);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("($CXj/Pka0u3>mV=I", ringPlot0.DEFAULT_LABEL_FONT, ringPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(((SunGraphics2D) graphics2D0).transform, ((SunGraphics2D) graphics2D0).hints);
      Rectangle2D rectangle2D0 = affineTransformOp0.getBounds2D(bufferedImage0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ringPlot0.drawPie(graphics2D0, rectangle2D0, plotRenderingInfo0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, piePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      JTableHeader jTableHeader0 = new JTableHeader();
      defaultPieDataset0.insertValue(0, (Comparable) 0, (Number) null);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(1059);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      piePlot0.drawPie(sunGraphics2D0, rectangle0, plotRenderingInfo0);
      assertEquals((-16777216), sunGraphics2D0.pixel);
      assertEquals((-16777216), sunGraphics2D0.eargb);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, piePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      JTableHeader jTableHeader0 = new JTableHeader();
      defaultPieDataset0.insertValue(0, (Comparable) 0, (Number) 0);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(1059);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      piePlot0.drawPie(sunGraphics2D0, rectangle0, plotRenderingInfo0);
      assertEquals((-16777216), sunGraphics2D0.pixel);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DateFormat dateFormat0 = DateFormat.getInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(0, 0, 0, 0, dateFormat0);
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Area area0 = new Area(piePlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      Rectangle2D rectangle2D0 = area0.getBounds2D();
      RingPlot ringPlot0 = new RingPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      PiePlotState piePlotState0 = ringPlot0.initialise((Graphics2D) null, rectangle2D0, piePlot0, (Integer) dateTickUnit0.MILLISECOND, plotRenderingInfo0);
      piePlot0.drawItem((Graphics2D) null, 6, rectangle2D0, piePlotState0, (-1240));
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      defaultPieDataset0.setValue((Comparable) 1.0F, (Number) 0.08);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, piePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(1059);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      piePlot0.drawPie(sunGraphics2D0, rectangle0, plotRenderingInfo0);
      assertEquals((-16777216), sunGraphics2D0.eargb);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, piePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(1059);
      piePlot0.drawSimpleLabels(graphics2D0, linkedList0, (-2307.99424883), rectangle0, rectangle0, (PiePlotState) null);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, piePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add((Double) piePlot0.DEFAULT_START_ANGLE);
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(1059);
      // Undeclared exception!
      try { 
        piePlot0.drawSimpleLabels(graphics2D0, linkedList0, (-2307.99424883), rectangle0, rectangle0, (PiePlotState) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 90.0
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      defaultPieDataset0.setValue((Comparable) 1.0F, (Number) 0.08);
      defaultPieDataset0.setValue((Comparable) 0.4, (double) 1.0F);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, piePlot0);
      jFreeChart0.createBufferedImage(10, 10);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getLegendItems();
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      defaultPieDataset0.insertValue(0, (Comparable) 0, (Number) null);
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(1, legendItemCollection0.getItemCount());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      LogAxis logAxis0 = new LogAxis("");
      NumberTickUnit numberTickUnit0 = logAxis0.getTickUnit();
      defaultPieDataset0.setValue((Comparable) numberTickUnit0, (Number) 0.0F);
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1, legendItemCollection0.getItemCount());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      defaultPieDataset0.setValue((Comparable) 1.0F, (Number) 0.08);
      PieSectionLabelGenerator pieSectionLabelGenerator0 = piePlot0.getLegendLabelGenerator();
      piePlot0.setLegendLabelToolTipGenerator(pieSectionLabelGenerator0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, piePlot0);
      jFreeChart0.createBufferedImage(10, 10);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, 1772);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Rectangle rectangle0 = new Rectangle((byte)69, 2);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)piePlot0.getArcBounds(rectangle0, rectangle0, (-1.5707963267948966), (-676.3181034769475), (-1415.79501));
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      boolean boolean0 = piePlot0.equals((Object) null);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      PiePlot piePlot1 = (PiePlot)piePlot0.clone();
      boolean boolean0 = piePlot0.equals(piePlot1);
      assertEquals(4.0, piePlot1.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot1.getPieIndex());
      assertTrue(boolean0);
      assertEquals(0.025, piePlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot1.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot1.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot1.getLabelGap(), 0.01);
      assertNotSame(piePlot1, piePlot0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      PiePlot piePlot1 = (PiePlot)piePlot0.clone();
      assertTrue(piePlot1.equals((Object)piePlot0));
      
      piePlot1.lookupSectionPaint(10, true);
      boolean boolean0 = piePlot0.equals(piePlot1);
      assertFalse(boolean0);
      assertFalse(piePlot1.equals((Object)piePlot0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      piePlot0.setPieIndex(16777215);
      PiePlot piePlot1 = new PiePlot();
      boolean boolean0 = piePlot0.equals(piePlot1);
      assertEquals(16777215, piePlot0.getPieIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      Object object0 = piePlot0.clone();
      piePlot0.setInteriorGap(0.4);
      boolean boolean0 = piePlot0.equals(object0);
      assertEquals(0.4, piePlot0.getInteriorGap(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      boolean boolean0 = piePlot0.equals(piePlot3D0);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(boolean0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      piePlot0.setStartAngle(0.0);
      RingPlot ringPlot0 = new RingPlot();
      boolean boolean0 = piePlot0.equals(ringPlot0);
      assertFalse(boolean0);
      assertEquals(0.0, piePlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Object object0 = ringPlot0.clone();
      ringPlot0.setShadowXOffset((-4.0));
      boolean boolean0 = ringPlot0.equals(object0);
      assertEquals((-4.0), ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Locale locale0 = Locale.ITALIAN;
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator(locale0);
      piePlot0.setLabelGenerator(standardPieSectionLabelGenerator0);
      RingPlot ringPlot0 = new RingPlot();
      boolean boolean0 = piePlot0.equals(ringPlot0);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(boolean0);
      assertTrue(ringPlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Color color0 = (Color)spiderWebPlot0.getBaseSeriesOutlinePaint();
      ringPlot1.setLabelPaint(color0);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      
      ringPlot1.setLabelOutlinePaint(ringPlot0.DEFAULT_LABEL_SHADOW_PAINT);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      PiePlot piePlot1 = (PiePlot)piePlot0.clone();
      piePlot1.setLabelGap(3);
      boolean boolean0 = piePlot0.equals(piePlot1);
      assertEquals(3.0, piePlot1.getLabelGap(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      ringPlot1.setLabelLinkMargin(0.08);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertEquals(0.08, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Object object0 = ringPlot0.clone();
      assertTrue(object0.equals((Object)ringPlot0));
      
      ringPlot0.setLegendItemShape(((Plot) object0).DEFAULT_LEGEND_ITEM_BOX);
      boolean boolean0 = ringPlot0.equals(object0);
      assertFalse(boolean0);
      assertFalse(object0.equals((Object)ringPlot0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator(locale0);
      ringPlot1.setLegendLabelGenerator(standardPieSectionLabelGenerator0);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      ringPlot0.setLegendLabelURLGenerator(customPieURLGenerator0);
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(0, ringPlot1.getPieIndex());
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
  }
}
