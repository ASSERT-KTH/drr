/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 10:38:37 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Arc2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieToolTipGenerator;
import org.jfree.chart.plot.AbstractPieLabelDistributor;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PieLabelDistributor;
import org.jfree.chart.plot.PieLabelRecord;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PiePlotState;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.urls.CustomPieURLGenerator;
import org.jfree.chart.urls.StandardPieURLGenerator;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Rotation;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;


public class PiePlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      SystemColor systemColor0 = SystemColor.scrollbar;
      ringPlot0.setLabelShadowPaint(systemColor0);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      PiePlot3D piePlot3D0 = new PiePlot3D(jDBCPieDataset0);
      jDBCPieDataset0.setValue((Comparable) 90.0, 0.08);
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0);
      jFreeChart0.createBufferedImage(731, 10, 20000.0, 1.2930439540732435, (ChartRenderingInfo) null);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setLabelLinkMargin(10);
      assertEquals(10.0, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setLabelLinksVisible(true);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      piePlot3D0.getIgnoreZeroValues();
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      piePlot0.getLabelOutlineStroke();
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      boolean boolean0 = piePlot0.getSectionOutlinesVisible();
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      int int0 = piePlot3D0.getPieIndex();
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Color color0 = (Color)ringPlot0.getShadowPaint();
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(128, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Color color0 = (Color)piePlot0.getLabelLinkPaint();
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      piePlot0.setLabelOutlineStroke(stackedAreaRenderer0.DEFAULT_STROKE);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getLegendLabelURLGenerator();
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getLegendLabelGenerator();
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      piePlot0.setShadowPaint((Paint) null);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      double double0 = piePlot3D0.getShadowXOffset();
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, double0, 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Paint paint0 = statisticalBarRenderer0.getErrorIndicatorPaint();
      piePlot0.setLabelBackgroundPaint(paint0);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Color color0 = (Color)ringPlot0.getBaseSectionPaint();
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(128, color0.getRed());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setSectionOutlinesVisible(true);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Year year0 = new Year();
      Week week0 = new Week(10, year0);
      ringPlot0.getSectionOutlineStroke(week0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Locale locale0 = Locale.GERMANY;
      StandardPieToolTipGenerator standardPieToolTipGenerator0 = new StandardPieToolTipGenerator(locale0);
      piePlot0.setToolTipGenerator(standardPieToolTipGenerator0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      boolean boolean0 = piePlot0.getLabelLinksVisible();
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(boolean0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      double double0 = piePlot3D0.getShadowYOffset();
      assertEquals(4.0, double0, 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Color color0 = (Color)piePlot0.lookupSectionOutlinePaint(fixedMillisecond0, true);
      assertNotNull(color0);
      
      piePlot0.setSectionOutlinePaint(fixedMillisecond0, color0);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(192, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setShadowYOffset((-1115.5));
      assertEquals((-1115.5), ringPlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setStartAngle(53);
      assertEquals(53.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setCircular(false);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RectangleInsets rectangleInsets0 = ringPlot0.getSimpleLabelOffset();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.18, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RectangleInsets rectangleInsets0 = ringPlot0.getLabelPadding();
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setIgnoreNullValues(true);
      assertTrue(piePlot0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      piePlot0.setLegendLabelURLGenerator(customPieURLGenerator0);
      PiePlot piePlot1 = (PiePlot)piePlot0.clone();
      assertTrue(piePlot1.equals((Object)piePlot0));
      assertEquals(4.0, piePlot1.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot1.getPieIndex());
      assertNotSame(piePlot1, piePlot0);
      assertEquals(0.08, piePlot1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot1.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot1.isCircular());
      assertEquals(0.025, piePlot1.getLabelGap(), 0.01);
      assertEquals(0.14, piePlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot1.getShadowYOffset(), 0.01);
      assertTrue(piePlot1.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot1.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getSectionOutlinePaint(0.4);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getIgnoreNullValues();
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      Color color0 = (Color)ringPlot0.getBaseSectionOutlinePaint();
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(128, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator();
      piePlot0.setURLGenerator(standardPieURLGenerator0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Color color0 = (Color)XYTextAnnotation.DEFAULT_PAINT;
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 10);
      piePlot3D0.setSectionPaint(simpleTimePeriod0, color0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.getURLGenerator();
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      piePlot0.getPlotType();
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getToolTipGenerator();
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      Paint paint0 = piePlot0.getOutlinePaint();
      piePlot0.setLabelOutlinePaint(paint0);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setPieIndex(2380);
      assertEquals(2380, ringPlot0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setMinimumArcAngleToDraw(3.0);
      assertEquals(3.0, piePlot0.getMinimumArcAngleToDraw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 10);
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      piePlot3D0.setSectionOutlineStroke(simpleTimePeriod0, basicStroke0);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      BasicStroke basicStroke0 = (BasicStroke)piePlot0.getLabelLinkStroke();
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      piePlot0.getBaseSectionOutlineStroke();
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.getLabelDistributor();
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Color color0 = (Color)piePlot0.getLabelBackgroundPaint();
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals((-64), color0.getRGB());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Color color0 = (Color)piePlot3D0.getLabelPaint();
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      DateAxis dateAxis0 = new DateAxis();
      Date date0 = dateAxis0.getMaximumDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      piePlot0.getSectionPaint(fixedMillisecond0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.getLegendLabelToolTipGenerator();
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      piePlot0.setDataset((PieDataset) null);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      ringPlot0.setDataset(defaultKeyedValuesDataset0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Rotation rotation0 = Rotation.ANTICLOCKWISE;
      piePlot0.setDirection(rotation0);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setDirection((Rotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'direction' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setInteriorGap((-529.35034655));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (-529.35034655) argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      ringPlot0.setInteriorGap((double) minMaxCategoryRenderer0.ZERO);
      assertEquals(0.0, ringPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setInteriorGap(4.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (4.0) argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      
      ringPlot0.setInteriorGap(0.08);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Minute minute0 = new Minute();
      Color color0 = (Color)piePlot3D0.lookupSectionPaint(minute0, false);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertNotNull(color0);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Comparable comparable0 = ringPlot0.getSectionKey(0);
      assertEquals(0, comparable0);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertNotNull(comparable0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      Comparable comparable0 = ringPlot0.getSectionKey((-12));
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNotNull(comparable0);
      assertEquals((-12), comparable0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      Comparable comparable0 = ringPlot0.getSectionKey(10);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertNotNull(comparable0);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(10, comparable0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setBaseSectionPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Paint paint0 = piePlot0.lookupSectionOutlinePaint(fixedMillisecond0, true);
      Color color0 = (Color)piePlot0.lookupSectionOutlinePaint(fixedMillisecond0, true);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertNotNull(color0);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertSame(color0, paint0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals((-4144960), color0.getRGB());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Color color0 = (Color)ringPlot0.getLabelShadowPaint();
      ringPlot0.setBaseSectionOutlinePaint(color0);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(151, color0.getRed());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setBaseSectionOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Stroke stroke0 = piePlot3D0.lookupSectionOutlineStroke("h$", true);
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D0.lookupSectionOutlineStroke("h$", true);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertNotNull(basicStroke0);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertSame(basicStroke0, stroke0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("xQ8c-+", 2030.71084346, 0.0, 10);
      Stroke stroke0 = xYPointerAnnotation0.getArrowStroke();
      piePlot0.setBaseSectionOutlineStroke(stroke0);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setBaseSectionOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      piePlot0.setExplodePercent(fixedMillisecond0, 1000.0);
      double double0 = piePlot0.getExplodePercent(fixedMillisecond0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1000.0, double0, 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setExplodePercent((Comparable) null, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      SystemColor systemColor0 = SystemColor.scrollbar;
      ringPlot0.setLabelLinkPaint(systemColor0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setLabelLinkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      BasicStroke basicStroke0 = (BasicStroke)piePlot0.lookupSectionOutlineStroke(fixedMillisecond0);
      assertNotNull(basicStroke0);
      
      piePlot0.setLabelLinkStroke(basicStroke0);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setLabelLinkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setLabelFont(ringPlot0.DEFAULT_LABEL_FONT);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Color color0 = (Color)piePlot0.getLabelOutlinePaint();
      piePlot0.setLabelPaint(color0);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setLabelPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      LegendTitle legendTitle0 = new LegendTitle(piePlot0, columnArrangement0, columnArrangement0);
      piePlot0.setSimpleLabelOffset(legendTitle0.DEFAULT_PADDING);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      // Undeclared exception!
      try { 
        piePlot0.setSimpleLabelOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(10);
      piePlot3D0.setLabelDistributor(pieLabelDistributor0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setLabelDistributor((AbstractPieLabelDistributor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'distributor' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(1);
      Point2D point2D0 = arc2D_Double0.getStartPoint();
      Line2D.Double line2D_Double0 = new Line2D.Double(point2D0, point2D0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      piePlot0.setLegendItemShape(rectangle2D0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      // Undeclared exception!
      try { 
        piePlot0.setLegendItemShape((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator("org.jfree.chart.plot.PiePlot");
      ringPlot0.setLegendLabelGenerator(standardPieSectionLabelGenerator0);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      // Undeclared exception!
      try { 
        ringPlot0.setLegendLabelGenerator((PieSectionLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", ringPlot0);
      jFreeChart0.createBufferedImage(10, 2);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setSimpleLabels(true);
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(874, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        piePlot3D0.drawPie(graphics2D0, (Rectangle2D) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 1, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, true, true);
      Rectangle rectangle0 = chartPanel0.getBounds();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      piePlot3D0.drawPie(graphics2D0, rectangle0, plotRenderingInfo0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      // Undeclared exception!
      try { 
        ringPlot0.drawPie((Graphics2D) null, rectangle2D_Float0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      piePlot0.setDataset(defaultKeyedValuesDataset0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      RingPlot ringPlot0 = new RingPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = ringPlot0.initialise((Graphics2D) null, rectangle0, piePlot0, (Integer) rectangle0.width, plotRenderingInfo0);
      piePlot0.drawItem((Graphics2D) null, 10, rectangle0, piePlotState0, (-2736));
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Number[][] numberArray0 = new Number[8][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<String> arrayList0 = new ArrayList<String>(set0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea(1145, 250);
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      PiePlotState piePlotState0 = piePlot3D0.initialise(graphics2D0, rectangle2D0, ringPlot0, (Integer) chartPanel0.DEFAULT_ZOOM_TRIGGER_DISTANCE, plotRenderingInfo0);
      piePlot3D0.drawSimpleLabels(graphics2D0, arrayList0, (-3835.121725869), rectangle2D0, rectangle2D0, piePlotState0);
      assertEquals(2, piePlotState0.getPassesRequired());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart(ringPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.9, 0.08, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LinkedList<StandardPieSectionLabelGenerator> linkedList0 = new LinkedList<StandardPieSectionLabelGenerator>();
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator();
      linkedList0.add(standardPieSectionLabelGenerator0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(3329.661F, 0.0F, (-1493.0F), 1.0F);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        ringPlot0.drawSimpleLabels(graphics2D0, linkedList0, 0.9, rectangle2D_Float0, rectangle2D_Float0, piePlotState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.labels.StandardPieSectionLabelGenerator cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      PiePlot3D piePlot3D0 = new PiePlot3D(jDBCPieDataset0);
      jDBCPieDataset0.setValue((Comparable) 90.0, 0.08);
      LegendItemCollection legendItemCollection0 = piePlot3D0.getLegendItems();
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1, legendItemCollection0.getItemCount());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ringPlot0.getArcBounds(rectangle0, rectangle0, (-1110.24), 0.0, 1.0F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0, 0.0, 0.14, 1.0E-5);
      Rectangle2D rectangle2D0 = piePlot0.getArcBounds(rectangle2D_Double0, rectangle2D_Double0, 1861.2698550887885, 1861.2698550887885, 0.0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertSame(rectangle2D0, rectangle2D_Double0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      RingPlot ringPlot0 = new RingPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = ringPlot0.initialise((Graphics2D) null, rectangle0, piePlot0, (Integer) piePlot0.MINIMUM_HEIGHT_TO_DRAW, plotRenderingInfo0);
      piePlotState0.setLinkArea(rectangle0);
      TextBox textBox0 = new TextBox("");
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(0.4, 1.0F, 1.0F, textBox0, 1.0E-5, 2000.0, 1717.0);
      // Undeclared exception!
      try { 
        piePlot0.drawLeftLabel((Graphics2D) null, piePlotState0, pieLabelRecord0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      
      ringPlot1.setBaseSectionPaint(ringPlot0.DEFAULT_LABEL_PAINT);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertNotSame(ringPlot1, ringPlot0);
      assertTrue(boolean0);
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      boolean boolean0 = piePlot0.equals(xYDatasetTableModel0);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      
      ringPlot1.setBackgroundPaint(ringPlot0.DEFAULT_LABEL_PAINT);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      ringPlot1.setCircular(false, false);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertFalse(ringPlot1.isCircular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      ringPlot1.setIgnoreZeroValues(true);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertTrue(ringPlot1.getIgnoreZeroValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      
      ringPlot1.setShadowXOffset(1.0F);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Object object0 = ringPlot0.clone();
      assertTrue(object0.equals((Object)ringPlot0));
      
      ringPlot0.setLabelGenerator((PieSectionLabelGenerator) null);
      boolean boolean0 = ringPlot0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      ringPlot1.setSimpleLabels(true);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertTrue(ringPlot1.getSimpleLabels());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Object object0 = ringPlot0.clone();
      assertTrue(object0.equals((Object)ringPlot0));
      
      ringPlot0.setLabelPadding(((Plot) object0).DEFAULT_INSETS);
      boolean boolean0 = ringPlot0.equals(object0);
      assertFalse(object0.equals((Object)ringPlot0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Object object0 = ringPlot0.clone();
      ringPlot0.setMaximumLabelWidth(1.0E-5);
      boolean boolean0 = ringPlot0.equals(object0);
      assertEquals(1.0E-5, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      ringPlot1.setLabelGap(0.14);
      boolean boolean0 = ringPlot0.equals(ringPlot1);
      assertEquals(0.14, ringPlot1.getLabelGap(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      PiePlot3D piePlot3D0 = new PiePlot3D(jDBCPieDataset0);
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D1.isCircular());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator();
      piePlot0.setLegendLabelToolTipGenerator(standardPieSectionLabelGenerator0);
      PiePlot piePlot1 = (PiePlot)piePlot0.clone();
      assertEquals(0.025, piePlot1.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot1.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot1.getLabelGap(), 0.01);
      assertNotSame(piePlot1, piePlot0);
      assertEquals(4.0, piePlot1.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot1.getPieIndex());
      assertTrue(piePlot1.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot1.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot1.equals((Object)piePlot0));
      assertTrue(piePlot1.isCircular());
  }
}
