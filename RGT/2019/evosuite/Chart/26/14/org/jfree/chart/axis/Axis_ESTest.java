/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 01 23:33:05 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.font.FontRenderContext;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.EventListener;
import java.util.TimeZone;
import javax.swing.JSplitPane;
import javax.swing.border.BevelBorder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.time.Second;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;


public class Axis_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(" 07hQ;4PhQ4GQK7,");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultKeyedValues2DDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3492, 2, 0.01, 0.25, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartPanel0.getScreenDataArea(427, 486);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AxisState axisState0 = extendedCategoryAxis0.draw(sunGraphics2D0, 0.5F, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
      assertEquals((-16777216), sunGraphics2D0.pixel);
      assertEquals(24.6328125, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2553.856591281949);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxis0.setFixedDimension(3);
      assertEquals(3.0, valueAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setLabelURL("");
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("?3RLA{86Re");
      logarithmicAxis0.setTickMarkOutsideLength(2.0F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("2");
      dateAxis0.setLabelAngle((-1519.607F));
      assertEquals((-1519.6070556640625), dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setLabelToolTip("nPk+;;n))~2");
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.getLabelURL();
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'state' argument.");
      subCategoryAxis0.getLabelToolTip();
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-100, (-1981.832451248), "");
      assertTrue(cyclicNumberAxis0.isVisible());
      
      cyclicNumberAxis0.setVisible(true);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      assertTrue(logarithmicAxis0.isVisible());
      
      logarithmicAxis0.setVisible(false);
      assertFalse(logarithmicAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabel(stringArray0[1]);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("?3RLA{86Re");
      logarithmicAxis0.setLabel("?3RLA{86Re");
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("%?CZfsT[rF");
      logarithmicAxis0.setLabel((String) null);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabel("=;0S");
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("+");
      periodAxis0.setLabelFont(periodAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      // Undeclared exception!
      try { 
        dateAxis0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2922.8663488283, (String) null);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      cyclicNumberAxis0.setLabelFont(meterPlot0.DEFAULT_LABEL_FONT);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setLabelPaint(categoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateAxis dateAxis0 = new DateAxis((String) null, timeZone0);
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      dateAxis0.setLabelInsets(symbolAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("o3RLiA996Re");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      Second second0 = new Second();
      PeriodAxis periodAxis0 = new PeriodAxis("6{DS:?'']0?yc<", second0, second0, second0.DEFAULT_TIME_ZONE);
      subCategoryAxis0.setLabelInsets(periodAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Heure de Greenwich");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, 344.0, 3.0, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      subCategoryAxis0.setAxisLinePaint(((SunGraphics2D) graphics2D0).foregroundColor);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("^WW8cQhXh}JKGy$%V(\"");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Heure de Greenwich");
      BasicStroke basicStroke0 = new BasicStroke();
      subCategoryAxis0.setAxisLineStroke(basicStroke0);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("?3RLA{86Re");
      // Undeclared exception!
      try { 
        numberAxis0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0, 1746.20180483127, (String) null);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      
      cyclicNumberAxis0.setTickLabelsVisible(true);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("k\"}a");
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      
      logarithmicAxis0.setTickLabelsVisible(false);
      assertFalse(logarithmicAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("k\"}a");
      logarithmicAxis0.setTickLabelFont(logarithmicAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("k\"}a");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setTickLabelFont(dateAxis0.DEFAULT_TICK_LABEL_FONT);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("pSDpU'cHZ}6Fk'3%=W");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Paint paint0 = combinedDomainXYPlot0.getDomainGridlinePaint();
      subCategoryAxis0.setTickLabelPaint(paint0);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("+");
      // Undeclared exception!
      try { 
        periodAxis0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Heure de Greenwich");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("{0}: ({1}, {2})");
      logarithmicAxis0.setTickLabelInsets(subCategoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1638.6), "IDEK2H2!Br<3j%,h@");
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      
      cyclicNumberAxis0.setTickMarksVisible(true);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("clT\"%wlfX");
      RingPlot ringPlot0 = new RingPlot();
      Stroke stroke0 = ringPlot0.getSeparatorStroke();
      extendedCategoryAxis0.setTickMarkStroke(stroke0);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis("./>))1Nzg<WBAf]k", stringArray0);
      // Undeclared exception!
      try { 
        symbolAxis0.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickMarkStroke(symbolAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0, false, standardXYToolTipGenerator0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("{0}: ({1}, {2})");
      logarithmicAxis0.setTickMarkPaint(candlestickRenderer0.DEFAULT_OUTLINE_PAINT);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("*b");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("pSDpU'cHZ}6Fk'3%=W");
      logarithmicAxis0.removeChangeListener(combinedDomainXYPlot0);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateAxis dateAxis0 = new DateAxis((String) null, timeZone0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      dateAxis0.removeChangeListener(compassPlot0);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1165.763, 1165.763);
      boolean boolean0 = cyclicNumberAxis0.hasListener((EventListener) null);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("k\"}a");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logarithmicAxis0);
      boolean boolean0 = logarithmicAxis0.hasListener(combinedRangeCategoryPlot0);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(boolean0);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("ItemLabelAnchor.OUTSIDE4", numberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.createBufferedImage(500, 10, chartRenderingInfo0);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      DateAxis dateAxis0 = new DateAxis("JFreeChart - No path exists");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("DomainOrder.ASCENDING", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(907, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      FontRenderContext fontRenderContext0 = new FontRenderContext(((SunGraphics2D) graphics2D0).transform, false, true);
      Rectangle2D rectangle2D0 = periodAxis0.DEFAULT_TICK_LABEL_FONT.getStringBounds("ZOOM_RESET_RANGE", fontRenderContext0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedDomainAxisSpace();
      AxisSpace axisSpace1 = dateAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D0, rectangleEdge0, axisSpace0);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(20.1328125, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'paint' argument.");
      DateAxis dateAxis0 = new DateAxis("JFreeChart - No path exists");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("DomainOrder.ASCENDING", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(903, 10, 10, chartRenderingInfo0);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Rectangle rectangle0 = new Rectangle(798, 500, 798, (-1244));
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      logarithmicAxis0.draw(sunGraphics2D0, 500, rectangle2D0, rectangle0, rectangleEdge0, plotRenderingInfo0);
      assertEquals((-16777216), sunGraphics2D0.eargb);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("JFreeChart - No path exists");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("DomainOrder.ASCENDING", combinedRangeXYPlot0);
      jFreeChart0.createBufferedImage(800, 903);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'paint' argument.");
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("DomainOrder.ASCENDING", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(903, 10, 10, chartRenderingInfo0);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      Rectangle rectangle0 = new Rectangle(680, 500, 798, (-1244));
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      AxisState axisState0 = logarithmicAxis0.draw(sunGraphics2D0, 500, rectangle2D0, rectangle0, rectangleEdge0, plotRenderingInfo0);
      assertEquals((-16777216), sunGraphics2D0.eargb);
      assertEquals(534.1328125, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(999, 2, (double) 2.0F, (double) 2.0F, chartRenderingInfo0);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2.5E9, 0.0, (-3.495143169681221), 2.0F);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("?3RLA{86v[");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, 0.05, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("E3RLA{6Re");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", subCategoryAxis0.DEFAULT_TICK_LABEL_FONT, combinedDomainCategoryPlot0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(4, 3032);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 942, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(":");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(4.0, 5.0, 0.2, 2.0F);
      LegendTitle legendTitle0 = new LegendTitle(categoryPlot0);
      RectangleEdge rectangleEdge0 = legendTitle0.getLegendItemGraphicEdge();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 0.0, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      BevelBorder bevelBorder0 = new BevelBorder(180, systemColor0, systemColor0);
      JSplitPane jSplitPane0 = new JSplitPane();
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) jSplitPane0, 500, 83, 180, 83);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, (-1749.133366), rectangle0, rectangle0, (RectangleEdge) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryAxis categoryAxis1 = (CategoryAxis)categoryAxis0.clone();
      assertTrue(categoryAxis1.equals((Object)categoryAxis0));
      
      categoryAxis1.setTickLabelInsets(categoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
      boolean boolean0 = categoryAxis0.equals(categoryAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryAxis categoryAxis1 = (CategoryAxis)categoryAxis0.clone();
      boolean boolean0 = categoryAxis0.equals(categoryAxis1);
      assertEquals(0.0F, categoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis1.getLabelAngle(), 0.01);
      assertTrue(boolean0);
      assertFalse(categoryAxis1.isTickMarksVisible());
      assertTrue(categoryAxis1.isVisible());
      assertTrue(categoryAxis1.isAxisLineVisible());
      assertTrue(categoryAxis1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      categoryAxis3D0.setLabelURL("");
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      boolean boolean0 = categoryAxis3D0.equals(subCategoryAxis0);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(boolean0);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryAxis categoryAxis1 = (CategoryAxis)categoryAxis0.clone();
      categoryAxis1.setTickMarkInsideLength(1.0F);
      boolean boolean0 = categoryAxis0.equals(categoryAxis1);
      assertFalse(boolean0);
      assertEquals(1.0F, categoryAxis1.getTickMarkInsideLength(), 0.01F);
  }
}
