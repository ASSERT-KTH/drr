/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 00:02:50 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.ValueDataset;
import org.junit.runner.RunWith;


public class Axis_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("uYRQ", dateAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(193, 1, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1, 0, "");
      AxisSpace axisSpace0 = new AxisSpace();
      cyclicNumberAxis0.reserveSpace(graphics2D0, fastScatterPlot0, rectangle0, rectangleEdge0, axisSpace0);
      assertEquals(15.77734375, axisSpace0.getTop(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("l1+8sGNTAoH9])N;{");
      categoryAxis3D0.setFixedDimension(Double.NaN);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      numberAxis3D0.removeChangeListener(piePlot3D0);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      DateAxis dateAxis1 = (DateAxis)dateAxis0.clone();
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis1.isVisible());
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertNotSame(dateAxis1, dateAxis0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      extendedCategoryAxis0.setLabelAngle((-654.460654));
      assertEquals((-654.460654), extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.getLabelURL();
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getLabelToolTip();
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SymbolAxis symbolAxis0 = new SymbolAxis("3wBQkH0", stringArray0);
      symbolAxis0.setTickMarkInsideLength((-3.0F));
      assertEquals((-3.0F), symbolAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("l1+8sGNTAoH9])N;{");
      assertTrue(categoryAxis3D0.isVisible());
      
      categoryAxis3D0.setVisible(true);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertTrue(categoryAxis0.isVisible());
      
      categoryAxis0.setVisible(false);
      assertFalse(categoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabel("uYRQ");
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("z'pZr)AO~70fnTK*");
      subCategoryAxis0.setLabel("z'pZr)AO~70fnTK*");
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("mF}6 ");
      logarithmicAxis0.setLabel("");
      assertEquals("", logarithmicAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1380.0);
      cyclicNumberAxis0.setLabel((String) null);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelFont(categoryAxis3D0.DEFAULT_AXIS_LABEL_FONT);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      dateAxis0.setLabelFont(dateAxis0.DEFAULT_TICK_LABEL_FONT);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2027.9121783120863), "@Y7?Sfx16an/u1");
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("@Y7?Sfx16an/u1");
      categoryAxis3D0.setLabelPaint(cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("8*EA");
      ModuloAxis moduloAxis0 = new ModuloAxis("8*EA", logarithmicAxis0.DEFAULT_RANGE);
      moduloAxis0.setLabelInsets(logarithmicAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertTrue(moduloAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      // Undeclared exception!
      try { 
        numberAxis0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      dateAxis0.setAxisLinePaint(waferMapPlot0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1453.718790299);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Stroke stroke0 = stackedAreaRenderer0.getItemOutlineStroke(500, 500);
      cyclicNumberAxis0.setAxisLineStroke(stroke0);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis("org.jfree.chart.axis.Axis", stringArray0);
      // Undeclared exception!
      try { 
        symbolAxis0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("z'pZr)AO~70fnTK*");
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      
      subCategoryAxis0.setTickLabelsVisible(true);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'insets' argument.");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'end' argument.");
      logarithmicAxis0.setTickLabelFont(logarithmicAxis0.DEFAULT_TICK_LABEL_FONT);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'insets' argument.");
      SystemColor systemColor0 = SystemColor.controlHighlight;
      extendedCategoryAxis0.setTickLabelPaint(systemColor0);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Value");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Y1i;tRj?SM~u]B");
      extendedCategoryAxis0.setTickLabelInsets(extendedCategoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      // Undeclared exception!
      try { 
        numberAxis3D0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("-");
      subCategoryAxis0.setTickMarksVisible(false);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      logarithmicAxis0.setTickMarkStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("C");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("(z,SZBm3muE_v@S6Z");
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      subCategoryAxis0.setTickMarkStroke(basicStroke0);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      dateAxis0.removeChangeListener(combinedDomainXYPlot0);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Unrecognised title position.");
      CategoryPlot categoryPlot0 = new CategoryPlot();
      boolean boolean0 = periodAxis0.hasListener(categoryPlot0);
      assertFalse(boolean0);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertTrue(thermometerPlot0.getUseSubrangePaint());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis3D0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, true);
      jFreeChart0.createBufferedImage(500, 2603);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart("j:-s`hL_vD8GlDo8V]z", numberAxis3D0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot0, false);
      jFreeChart0.createBufferedImage(500, 2603);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("uYRQ", dateAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, false);
      jFreeChart0.createBufferedImage(193, 10);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("SansSerif");
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("zfoR$:`3!(*$I,y>([@", subCategoryAxis0.DEFAULT_TICK_LABEL_FONT, meterPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle rectangle0 = new Rectangle(680, 182);
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, 0.2, rectangle2D0, rectangle0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("SansSerif");
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("zfoR$:`3!(*$I,y>([@", subCategoryAxis0.DEFAULT_TICK_LABEL_FONT, meterPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle rectangle0 = new Rectangle(680, 182);
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.drawAxisLine((Graphics2D) null, 182, rectangle2D0, (RectangleEdge) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("SansSerif");
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("zfoR$:`3!(*$I,y>([@", subCategoryAxis0.DEFAULT_TICK_LABEL_FONT, meterPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle rectangle0 = chartPanel0.getBounds();
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, 0.0, rectangle2D0, rectangle0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("SansSerif");
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("SansSerif", subCategoryAxis0.DEFAULT_TICK_LABEL_FONT, meterPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle rectangle0 = new Rectangle(680, 10);
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge((-1355));
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, 0.2, rectangle2D0, rectangle0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("(z,SZBm3muE_v@S6Z");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("(z,SZBm3muE_v@S6Z");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(subCategoryAxis1.isTickMarksVisible());
      assertTrue(subCategoryAxis1.isVisible());
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
      assertTrue(subCategoryAxis1.isAxisLineVisible());
      assertTrue(boolean0);
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~dp~oaR,f4H");
      String[] stringArray0 = new String[7];
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, stringArray0[3]);
      boolean boolean0 = logarithmicAxis0.equals(cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(boolean0);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~dp~oaR,f4H");
      logarithmicAxis0.setLabelInsets(numberAxis0.DEFAULT_TICK_LABEL_INSETS);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "~dp~oaR,f4H");
      boolean boolean0 = logarithmicAxis0.equals(cyclicNumberAxis0);
      assertFalse(boolean0);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~dp~oaR,f4H");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "~dp~oaR,f4H");
      cyclicNumberAxis0.setLabelToolTip("B]4Obu#xVN-|#-=");
      boolean boolean0 = logarithmicAxis0.equals(cyclicNumberAxis0);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(boolean0);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~dp~oaR,f4H");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "~dp~oaR,f4H");
      cyclicNumberAxis0.setLabelURL("~dp~oaR,f4H");
      boolean boolean0 = logarithmicAxis0.equals(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(boolean0);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~dp~oaR,f4H");
      logarithmicAxis0.setTickLabelsVisible(false);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-100, "~dp~oaR,f4H");
      boolean boolean0 = logarithmicAxis0.equals(cyclicNumberAxis0);
      assertFalse(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~dp~oaR,f4H");
      logarithmicAxis0.setTickLabelFont(numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "~dp~oaR,f4H");
      boolean boolean0 = logarithmicAxis0.equals(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(boolean0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~dp~oaR,f4H");
      logarithmicAxis0.setTickMarkOutsideLength(1732.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-100, "~dp~oaR,f4H");
      boolean boolean0 = logarithmicAxis0.equals(cyclicNumberAxis0);
      assertEquals(1732.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~dp~oaR,f4H");
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      logarithmicAxis0.setTickMarkPaint(color0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "~dp~oaR,f4H");
      boolean boolean0 = logarithmicAxis0.equals(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(boolean0);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
  }
}
