/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 18:59:27 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;


public class Week_ESTest {

//  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Week week0 = new Week((-3274), (-3274));
      week0.hashCode();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-173468L), week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(0, year0);
      week0.getEnd();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106742L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Invalid day-of-the-week code.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

//  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week(1902, 1902);
      int int0 = week0.getYearValue();
      assertEquals(1902, int0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(100916L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-626), (-626), (-626), (-1367), (-626), (-626));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(8);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Week week0 = new Week(date0, timeZone0);
      String string0 = week0.toString();
      assertEquals("Week 40, 1582", string0);
      assertEquals((-12219292800001L), week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week((-1595), (-1595));
      long long0 = week0.getSerialIndex();
      assertEquals((-84594L), long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-1132L));
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      week0.getFirstMillisecond();
      assertEquals((-1133L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week();
      Month month0 = new Month();
      int int0 = week0.compareTo(month0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(0, int0);
  }

//  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(1137, year0);
      Week week1 = new Week(1137, 1137);
      boolean boolean0 = week0.equals(week1);
      assertFalse(week1.equals((Object)week0));
      assertFalse(boolean0);
      assertEquals(60374L, week1.getSerialIndex());
      assertEquals(113, week0.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = null;
      try {
        week0 = new Week((Date) null, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.CHINA;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2141, 9999, 32, 9999, 2141);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2141, "dBm");
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, simpleTimeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

//  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(489L, 489L);
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      Week week1 = (Week)week0.previous();
      assertNotNull(week1);
      
      Week week2 = (Week)week1.next();
      assertNotNull(week2);
      assertEquals(1392409281319L, week2.getLastMillisecond());
      assertEquals(52, week1.getWeek());
      assertEquals(104411L, week2.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Year year0 = new Year();
      MockDate mockDate0 = new MockDate(383, 383, 383, 376, 376, (-801));
      Locale locale0 = Locale.FRANCE;
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE, locale0);
      assertEquals(10918792958999L, week0.getLastMillisecond());
      assertEquals(52, week0.getWeek());
  }

//  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(121, 335, 887, 40, 335);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      boolean boolean0 = week0.equals(regularTimePeriod0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(108721L, regularTimePeriod0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1346), (-1346), (-1346), (-1346), (-1346));
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(23215L, week0.getSerialIndex());
      assertEquals((-48345467160001L), week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
  }

//  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate(121, 335, 887, 40, 335);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      RegularTimePeriod regularTimePeriod1 = week0.next();
      boolean boolean0 = ((Week) regularTimePeriod1).equals(regularTimePeriod0);
      assertEquals(1392409281319L, regularTimePeriod1.getLastMillisecond());
      assertEquals(108723L, regularTimePeriod1.getSerialIndex());
      assertFalse(regularTimePeriod1.equals((Object)week0));
      assertTrue(boolean0);
  }

//  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3645, 0, 0, 0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.GERMAN;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(293885L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Week week0 = new Week(573, 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNull(regularTimePeriod0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(530008L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(489L, 489L);
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      boolean boolean0 = week0.equals(instant0);
      assertEquals(488999L, week0.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(104411L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(121, 335, 887, 40, 335);
      Week week0 = new Week(mockDate0);
      boolean boolean0 = week0.equals(week0);
      assertTrue(boolean0);
      assertEquals(2567108099999L, week0.getLastMillisecond());
      assertEquals(108722L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(489L, 489L);
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      int int0 = week0.compareTo(instant0);
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(488999L, week0.getLastMillisecond());
      assertEquals(1, int0);
  }

//  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(489L, 489L);
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      int int0 = week0.compareTo(week0);
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(0, int0);
      assertEquals(488999L, week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(489L, 489L);
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      int int0 = week0.compareTo(regularTimePeriod0);
      assertEquals(1, week0.getWeek());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1, int0);
      assertEquals(104409L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("}~<M[^z$kK1p5HUm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 1, 1970");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }
}
