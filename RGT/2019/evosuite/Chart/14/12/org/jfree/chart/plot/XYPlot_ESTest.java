/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 25 10:07:19 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Arc2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.LookupOp;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.LinkedList;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.Vector;
import javax.swing.border.BevelBorder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.MultipleXYSeriesLabelGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.urls.CustomXYURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.general.CombinedDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Month;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;


public class XYPlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1624.366189635358, 0.05);
      combinedRangeXYPlot0.removeDomainMarker((Marker) intervalMarker0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      NumberAxis numberAxis0 = new NumberAxis("");
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(standardXYToolTipGenerator0, customXYURLGenerator0);
      XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer2_0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(500, 500);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setRangeAxis(500, (ValueAxis) dateAxis0);
      assertEquals(501, combinedRangeXYPlot0.getRangeAxisCount());
      
      combinedRangeXYPlot0.clearRangeAxes();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("9[?eo0KA)A>");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(3);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((-546), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ValueMarker valueMarker0 = new ValueMarker(2.0F);
      combinedRangeXYPlot0.addRangeMarker((Marker) valueMarker0, (Layer) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("wMPAb~v]N0Ji`B");
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, logarithmicAxis0, logarithmicAxis0, clusteredXYBarRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(0.05);
      xYPlot0.addRangeMarker((Marker) valueMarker0);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("~mST.X", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(3917.04, 0.0, (-3209.2814839), 2.0F, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, dateAxis0.DEFAULT_TICK_MARK_PAINT);
      boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(boolean0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.POSITIVE_INFINITY);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(false);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, (ValueAxis) null, (ValueAxis) null, (XYItemRenderer) null);
      xYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue(2220.849893663967);
      assertEquals(2220.849893663967, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("+Cvm(3>8z");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      boolean boolean0 = combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      assertTrue(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      xYPlot0.setDomainAxisLocation(500, axisLocation0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation((-2189));
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisCount();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      xYPlot0.removeRangeMarker((Marker) categoryMarker0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("+Cvm(3>8z");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot0.getAnnotations();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainZeroBaselineVisible(false);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      combinedDomainXYPlot0.setDataset((XYDataset) timeTableXYDataset0);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot0.setRangeCrosshairValue(0.0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearAnnotations();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)combinedDomainXYPlot0.getRangeCrosshairPaint();
      assertEquals(0, color0.getGreen());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      
      combinedRangeXYPlot0.setWeight(0);
      assertEquals(0, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, basicStroke0.getLineJoin());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("9[?eo0KA)A>");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(500, true);
      combinedRangeXYPlot0.getIndexOf(clusteredXYBarRenderer0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("9", simpleTimeZone0);
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, dateAxis0, dateAxis0, xYBarRenderer0);
      MultipleXYSeriesLabelGenerator multipleXYSeriesLabelGenerator0 = new MultipleXYSeriesLabelGenerator("9");
      xYBarRenderer0.setLegendItemLabelGenerator(multipleXYSeriesLabelGenerator0);
      assertFalse(xYBarRenderer0.getUseYInterval());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) xYStepAreaRenderer0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation(0);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0, false);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDomainAxisCount();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-889.9305113135802), (-889.9305113135802), "Null 'axisIndex' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.getDomainCrosshairPaint();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeCrosshairStroke();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.zoomDomainAxes(1141.0, plotRenderingInfo0, (Point2D) null);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Point2D.Double point2D_Double0 = (Point2D.Double)xYPlot0.getQuadrantOrigin();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = combinedDomainXYPlot0.getSeriesCount();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, (ValueAxis) null, (ValueAxis) null, (XYItemRenderer) null);
      xYPlot0.getPlotType();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      int int0 = combinedRangeXYPlot0.getWeight();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = (Color)LegendTitle.DEFAULT_ITEM_PAINT;
      xYPlot0.setRangeTickBandPaint(color0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("wg4?>H");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) null, logarithmicAxis0);
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      xYPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1021.00192485011, 0.0, 1021.00192485011, 1.0);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      boolean boolean0 = combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
      assertTrue(boolean0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point(500, 10);
      xYPlot0.zoomRangeAxes(0.05, plotRenderingInfo0, (Point2D) point0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setDomainTickBandPaint(dateAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setAxisOffset(xYPlot0.DEFAULT_INSETS);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("wg4?>H");
      xYPlot0.setDomainAxis(1833, (ValueAxis) logarithmicAxis0);
      assertEquals(1834, xYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Day day0 = new Day();
      PeriodAxis periodAxis0 = new PeriodAxis("", day0, day0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) periodAxis0);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      xYPlot0.setDomainAxes(valueAxisArray0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.clearDomainAxes();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.clearDomainAxes();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisEdge(300);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 1585);
      Month month0 = new Month(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.renderer.category.GanttRenderer", month0, month0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) null);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.clearRangeAxes();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation(0, (AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation((-1609));
      combinedRangeXYPlot0.setRangeAxisLocation(0, axisLocation0, false);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setDataset(500, (XYDataset) null);
      combinedDomainXYPlot0.getDomainAxisForDataset(4);
      assertEquals(501, combinedDomainXYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(10, 10);
      XYBarDataset xYBarDataset0 = new XYBarDataset(dynamicTimeSeriesCollection0, 0);
      int int0 = xYPlot0.indexOf(xYBarDataset0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals((-1), int0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(229.5751);
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("9 v.KC-15F/ed`urh", stringArray0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(78);
      XYPlot xYPlot0 = new XYPlot(categoryTableXYDataset0, cyclicNumberAxis0, symbolAxis0, cyclicXYItemRenderer0);
      int int0 = xYPlot0.indexOf(categoryTableXYDataset0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[9];
      xYPlot0.setRenderers(xYItemRendererArray0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("QM9v*ILhfpC");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = categoryPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      combinedRangeXYPlot0.getRendererForDataset(defaultTableXYDataset0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainGridlinesVisible(true);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setDomainGridlinesVisible(false);
      assertFalse(combinedRangeXYPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(moduloAxis0);
      combinedRangeXYPlot0.setDomainGridlineStroke(moduloAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setDomainGridlinePaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setRangeGridlinesVisible(true);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setRangeGridlinesVisible(false);
      assertFalse(combinedRangeXYPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("wMPAb~v]N0Ji`B");
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, logarithmicAxis0, logarithmicAxis0, clusteredXYBarRenderer0);
      xYPlot0.setRangeGridlineStroke(logarithmicAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setRangeGridlinePaint(dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.POSITIVE_INFINITY);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Day day0 = new Day();
      PeriodAxis periodAxis0 = new PeriodAxis("", day0, day0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(periodAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point point0 = new Point(966, 420);
      combinedDomainXYPlot0.setQuadrantOrigin(point0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint((-2347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-2347) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (2147483647) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getQuadrantPaint(0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("bJKA$:isI m!VI", (-5895.96996), (-3), 1.0F);
      Paint paint0 = xYPointerAnnotation0.getArrowPaint();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantPaint((-3), paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-3) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("bJKA$:isI m!VI", (-5895.96996), 3, 1.0F);
      Paint paint0 = xYPointerAnnotation0.getArrowPaint();
      combinedRangeXYPlot0.setQuadrantPaint(3, paint0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_SHADOW_PAINT;
      // Undeclared exception!
      try { 
        xYPlot0.setQuadrantPaint(1214, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (1214) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.clearDomainMarkers();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.clearDomainMarkers();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker((-1558), (Marker) null, layer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((-2296), (Marker) intervalMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, candlestickRenderer0.DEFAULT_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker(10, (Marker) categoryMarker0, layer0, false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, (ValueAxis) null, (ValueAxis) null, (XYItemRenderer) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE, 0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.removeDomainMarker(0, (Marker) categoryMarker0, layer0, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addRangeMarker((-2679), (Marker) intervalMarker0, layer0, false);
      xYPlot0.clearRangeMarkers();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1202.8362598, 36);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addRangeMarker(1159, (Marker) intervalMarker0, layer0);
      combinedRangeXYPlot0.clearRangeMarkers();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker(3511, (Marker) null, layer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0, layer0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(213, 26);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("Null 'annotation' argument.", numberFormat0, numberFormat0);
      DateFormat dateFormat0 = DateFormat.getInstance();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "{0}: ({1}, {2})", "{0}: ({1}, {2})", "Id+");
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(standardXYToolTipGenerator0, timeSeriesURLGenerator0);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, (ValueAxis) null, (ValueAxis) null, xYStepRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.addAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, (ValueAxis) null, (ValueAxis) null, (XYItemRenderer) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(8000000.0, 1.0F, 1168.73256, 1179.83523, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(4888, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      byte[][] byteArray0 = new byte[9][5];
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(10, byteArray0);
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, ((SunGraphics2D) graphics2D0).hints);
      Rectangle2D rectangle2D0 = lookupOp0.getBounds2D(bufferedImage0);
      AxisSpace axisSpace0 = xYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle2D0, (AxisSpace) null);
      assertEquals(1, xYPlot0.getWeight());
      assertNotNull(axisSpace0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("wMPAb~v]N0Ji`B");
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, logarithmicAxis0, logarithmicAxis0, clusteredXYBarRenderer0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("wMPAb~v]N0Ji`B", logarithmicAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 2, (double) 2.0F, (double) 2.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AxisSpace axisSpace0 = xYPlot0.calculateRangeAxisSpace(graphics2D0, (Rectangle2D) null, (AxisSpace) null);
      assertEquals(34.1328125, axisSpace0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      JFreeChart jFreeChart0 = new JFreeChart("", valueAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((int) (byte)19, (int) (byte)19, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.createBufferedImage(500, 680, 93.9418134995668, (double) 0.0F, chartRenderingInfo0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setRangeAxis(500, (ValueAxis) dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 193, (-1076.716141771), (double) 1.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle2D_Double0, rectangle2D_Double1, plotRenderingInfo0);
      assertEquals(501, combinedRangeXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.getDomainAxisForDataset((-115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -115 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset(680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 680 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(279);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 279 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      combinedRangeXYPlot0.setDataset(500, (XYDataset) jDBCXYDataset0);
      combinedRangeXYPlot0.getRangeAxisForDataset(1);
      assertEquals(501, combinedRangeXYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("", font0, combinedDomainXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(937, 1175);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea(1175, 6);
      LinkedList<MatrixSeriesCollection> linkedList0 = new LinkedList<MatrixSeriesCollection>();
      combinedDomainXYPlot0.drawDomainGridlines(graphics2D0, rectangle2D0, linkedList0);
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>();
      combinedRangeXYPlot0.drawRangeGridlines((Graphics2D) null, rectangle2D_Double0, vector0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("wMPAb~v]N0Ji`B");
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, logarithmicAxis0, logarithmicAxis0, clusteredXYBarRenderer0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 15, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      xYPlot0.setRangeAxes(valueAxisArray0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Stack<StackedXYBarRenderer> stack0 = new Stack<StackedXYBarRenderer>();
      xYPlot0.drawRangeGridlines(graphics2D0, rectangle2D_Double0, stack0);
      assertEquals(2, xYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.drawDomainMarkers((Graphics2D) null, (Rectangle2D) null, 82, (Layer) null);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Color color0 = Color.gray;
      BevelBorder bevelBorder0 = new BevelBorder(10, color0, color0, color0, color0);
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) null, 34, 21, 68, 1163);
      combinedRangeXYPlot0.drawRangeMarkers((Graphics2D) null, rectangle0, 35, (Layer) null);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainMarkers(497, (Layer) null);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeMarkers((-660), (Layer) null);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(15.0, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addRangeMarker(380, (Marker) valueMarker0, layer0, false);
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(380, layer0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(collection0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("FREQUENCY", combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 5, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      xYPlot0.drawHorizontalLine(graphics2D0, (Rectangle2D) null, 10, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      float[][] floatArray0 = new float[3][2];
      NumberAxis numberAxis0 = new NumberAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, numberAxis0, numberAxis0);
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      combinedDomainXYPlot0.drawDomainCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, (-4291.2243), numberAxis0, fastScatterPlot0.DEFAULT_OUTLINE_STROKE, numberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("", font0, combinedDomainXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(937, 1175);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea(1175, 6);
      combinedDomainXYPlot0.drawVerticalLine(graphics2D0, rectangle2D0, 243.4453125, (Stroke) null, ((SunGraphics2D) graphics2D0).paint);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(chartPanel0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("wMPAb~v]N0Ji`B");
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, logarithmicAxis0, logarithmicAxis0, clusteredXYBarRenderer0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("wMPAb~v]N0Ji`B", logarithmicAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 2, (double) 2.0F, (double) 2.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      xYPlot0.drawVerticalLine(graphics2D0, rectangle2D_Double0, (double) clusteredXYBarRenderer0.ZERO, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE, logarithmicAxis0.DEFAULT_TICK_MARK_PAINT);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      PlotOrientation plotOrientation0 = xYPlot0.getOrientation();
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis("V!q9sk30", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      xYPlot0.drawRangeCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 10, numberAxis3D0, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE, paint0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, 1661.6, 100.0, (ChartRenderingInfo) null);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      BasicStroke basicStroke0 = (BasicStroke)defaultPolarItemRenderer0.getBaseOutlineStroke();
      combinedRangeXYPlot0.drawRangeCrosshair(sunGraphics2D0, rectangle2D_Double0, plotOrientation0, 0.0, dateAxis0, basicStroke0, defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertEquals((-16777216), sunGraphics2D0.eargb);
      assertEquals((-16777216), sunGraphics2D0.pixel);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, 1661.6, 100.0, (ChartRenderingInfo) null);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      BasicStroke basicStroke0 = (BasicStroke)defaultPolarItemRenderer0.getBaseOutlineStroke();
      combinedRangeXYPlot0.drawRangeCrosshair(sunGraphics2D0, rectangle2D_Double0, plotOrientation0, 0.0, dateAxis0, basicStroke0, defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertEquals((-16777216), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeState);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.handleClick(804, 804, plotRenderingInfo0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      xYPlot0.setDataset(403, (XYDataset) xYIntervalSeriesCollection0);
      assertEquals(404, xYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("wMPAb~v]N0Ji`B");
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, logarithmicAxis0, logarithmicAxis0, clusteredXYBarRenderer0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      valueAxisArray0[1] = (ValueAxis) numberAxis3D0;
      xYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(2, xYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis("!fef;XMq0'W56%wx%");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2693.913338, 4988.820545082835, "!fef;XMq0'W56%wx%");
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairVisible(false);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      xYPlot0.setDomainCrosshairVisible(true);
      xYPlot0.setDomainCrosshairValue(Double.POSITIVE_INFINITY, false);
      assertEquals(Double.POSITIVE_INFINITY, xYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(280.36283615, 280.36283615, "+wf+IsqCj&'");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(true);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainCrosshairLockedOnData(false);
      assertFalse(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      xYPlot0.setDomainCrosshairVisible(true);
      xYPlot0.setDomainCrosshairValue((double) 8, true);
      assertTrue(xYPlot0.isDomainCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      PeriodAxis periodAxis0 = new PeriodAxis("FREQUENCY");
      Stroke stroke0 = periodAxis0.getMinorTickMarkStroke();
      xYPlot0.setDomainCrosshairStroke(stroke0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      xYPlot0.setDomainCrosshairPaint(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairVisible(false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairVisible(true);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      
      xYPlot0.setRangeCrosshairLockedOnData(true);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(false);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      combinedDomainXYPlot0.setRangeCrosshairStroke(basicStroke0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = (Color)LegendTitle.DEFAULT_ITEM_PAINT;
      xYPlot0.setRangeCrosshairPaint(color0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      xYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      xYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Point point0 = new Point(1578, 1348);
      xYPlot0.zoomDomainAxes(377.6571752218, (PlotRenderingInfo) null, (Point2D) point0, false);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.005, (String) null);
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(combinedDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYLineAndShapeRenderer0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      // Undeclared exception!
      try { 
        xYPlot0.zoomDomainAxes(0.0, (PlotRenderingInfo) null, (Point2D) point2D_Double0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D point2D0 = RectangleAnchor.coordinates((Rectangle2D) null, (RectangleAnchor) null);
      xYPlot0.zoomDomainAxes(2512.471, (-859.831564), plotRenderingInfo0, point2D0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.zoomDomainAxes((-561.5187875510595), 927.5525299, plotRenderingInfo0, (Point2D) null);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      Point2D point2D0 = arc2D_Double0.getEndPoint();
      xYPlot0.zoomRangeAxes((double) 1.0F, plotRenderingInfo0, point2D0, true);
      assertFalse(numberAxis3D0.isAutoRange());
      assertEquals(Double.NaN, numberAxis3D0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Point point0 = new Point();
      combinedRangeXYPlot0.zoomRangeAxes((-1.0), (PlotRenderingInfo) null, (Point2D) point0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("9", simpleTimeZone0);
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, dateAxis0, dateAxis0, xYBarRenderer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      xYPlot0.zoomRangeAxes(2.0, (double) 500, plotRenderingInfo0, (Point2D) point0);
      assertEquals(500.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0, dateAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      int int0 = xYPlot0.getSeriesCount();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
      xYPlot0.setFixedLegendItems(legendItemCollection0);
      xYPlot0.getLegendItems();
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, (ValueAxis) null, (ValueAxis) null, (XYItemRenderer) null);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(10, 59);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 1.0F);
      boolean boolean0 = xYPlot0.equals(intervalMarker0);
      assertFalse(boolean0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, (XYToolTipGenerator) null);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
  }
}
