/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 17:28:28 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.time.Instant;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.Vector;
import javax.swing.Action;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.RenderingSource;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;


public class XYPlot_ESTest {

////  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-12), (-12), (-1), 0, 0, 4, 186, (-1069), 1);
      Locale locale0 = Locale.ROOT;
      Month month0 = new Month(date0, simpleTimeZone0, locale0);
      PeriodAxis periodAxis0 = new PeriodAxis("David M. O'Donnell", month0, month0, simpleTimeZone0, locale0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, periodAxis0, periodAxis0, candlestickRenderer0);
      Area area0 = new Area();
      Rectangle2D rectangle2D0 = area0.getBounds2D();
      JFreeChart jFreeChart0 = new JFreeChart("Wolfgang Irler", periodAxis0.DEFAULT_TICK_LABEL_FONT, spiderWebPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, true, false);
      xYPlot0.select(0.0, (double) 0.0F, rectangle2D0, (RenderingSource) chartPanel0);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 0, fixedMillisecond0);
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1, true, boxAndWhiskerXYToolTipGenerator0);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, (ValueAxis) null, (ValueAxis) null, candlestickRenderer0);
      xYPlot0.setRangeAxis(0, (ValueAxis) null);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.UK;
      DateAxis dateAxis0 = new DateAxis((String) null, zoneInfo0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F, dateAxis0.DEFAULT_AXIS_LINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot0.addRangeMarker((Marker) valueMarker0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      boolean boolean0 = xYPlot0.canSelectByRegion();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setDomainCrosshairValue((-1486.67385216535));
      assertEquals((-1486.67385216535), combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.getRangeAxisCount();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.clearDomainMarkers();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.canSelectByPoint();
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(2);
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, valueAxis0, valueAxis0, stackedXYBarRenderer0);
      Color color0 = (Color)xYPlot0.getRangeZeroBaselinePaint();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      combinedDomainXYPlot0.setDataset((XYDataset) defaultTableXYDataset0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("y");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.clearAnnotations();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Paint paint0 = combinedRangeXYPlot0.getRangeCrosshairPaint();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantPaint(2448, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (2448) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-12), (-12), (-1), 0, 0, 4, 186, (-1069), 1);
      Locale locale0 = Locale.ROOT;
      Month month0 = new Month(date0, simpleTimeZone0, locale0);
      PeriodAxis periodAxis0 = new PeriodAxis("David M. O'Donnell", month0, month0, simpleTimeZone0, locale0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, periodAxis0, periodAxis0, candlestickRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.setDomainAxisLocation((AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeCrosshairStroke();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(2, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      DefaultEditorKit.CutAction defaultEditorKit_CutAction0 = new DefaultEditorKit.CutAction();
      JMenuItem jMenuItem0 = jPopupMenu0.add((Action) defaultEditorKit_CutAction0);
      MenuElement[] menuElementArray0 = new MenuElement[3];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jMenuItem0, 2599, 0, 0, 954, 10, 2, 2, 2, true, menuElementArray0, menuSelectionManager0);
      Point point0 = menuDragMouseEvent0.getPoint();
      xYPlot0.zoomDomainAxes(2.5E10, plotRenderingInfo0, (Point2D) point0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Point2D.Double point2D_Double0 = (Point2D.Double)xYPlot0.getQuadrantOrigin();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker((Marker) categoryMarker0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      combinedRangeXYPlot0.panRangeAxes(2.0F, plotRenderingInfo0, point0);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getPlotType();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, yIntervalRenderer0);
      AxisSpace axisSpace0 = new AxisSpace();
      xYPlot0.setFixedRangeAxisSpace(axisSpace0);
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertEquals(1, xYPlot1.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, yIntervalRenderer0);
      xYPlot0.setRangeTickBandPaint(yIntervalRenderer0.DEFAULT_PAINT);
      JFreeChart jFreeChart0 = new JFreeChart("11DZIe|!8dd;8", xYPlot0);
      jFreeChart0.createBufferedImage(2011, 2011, (ChartRenderingInfo) null);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot0, 10);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      xYPlot0.zoomRangeAxes((-1861.65), plotRenderingInfo0, (Point2D) point2D_Double0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("iM~g?DR\\");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(500, axisLocation0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getRangeZeroBaselineStroke();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesRenderingOrder();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(500);
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(250.0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, yIntervalRenderer0);
      xYPlot0.isRangeCrosshairLockedOnData();
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxisLocation(92, (AxisLocation) null);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getAnnotations();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue(312.14);
      assertEquals(312.14, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.5F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeMinorGridlineStroke();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(Double.POSITIVE_INFINITY);
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
      xYPlot0.setFixedLegendItems(legendItemCollection0);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDomainAxisCount();
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.getDomainMarkers(layer0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.UK;
      DateAxis dateAxis0 = new DateAxis((String) null, zoneInfo0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Color color0 = (Color)combinedRangeXYPlot0.getDomainCrosshairPaint();
      assertEquals((-16776961), color0.getRGB());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDomainMinorGridlinePaint();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      assertEquals(255, color0.getRed());
  }

////  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-12), (-12), (-1), 0, 0, 4, 186, (-1069), 1);
      Locale locale0 = Locale.ROOT;
      Month month0 = new Month(date0, simpleTimeZone0, locale0);
      PeriodAxis periodAxis0 = new PeriodAxis("David M. O'Donnell", month0, month0, simpleTimeZone0, locale0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, periodAxis0, periodAxis0, candlestickRenderer0);
      int int0 = xYPlot0.getSeriesCount();
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("E:Mw(h/mbvG");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(914.60995619, (-796.1027923145024));
      combinedDomainXYPlot0.removeDomainMarker((Marker) intervalMarker0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, dateAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(10, 1, chartRenderingInfo0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = combinedDomainXYPlot0.getWeight();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangePannable(false);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, yIntervalRenderer0);
      xYPlot0.getFixedDomainAxisSpace();
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(0.0, 10, 4.0, 3076.58167);
      xYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      boolean boolean0 = xYPlot0.isDomainCrosshairLockedOnData();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(boolean0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("#Y");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.setDomainTickBandPaint(logAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0, "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertEquals(2, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E-6, 2.5E-6);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setDomainPannable(true);
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      xYPlot0.setOrientation(plotOrientation0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("@OcX");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("@OcX");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainXYPlot0.setAxisOffset(combinedDomainCategoryPlot0.DEFAULT_INSETS);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[7];
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      assertEquals(7, combinedDomainXYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("@OcX");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.clearDomainAxes();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.clearDomainAxes();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedRangeXYPlot0.setDomainAxisLocation(92, axisLocation0, false);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogAxis logAxis0 = new LogAxis((String) null);
      xYPlot0.setRangeAxis((ValueAxis) logAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      xYPlot0.zoomRangeAxes((-1861.65), plotRenderingInfo0, (Point2D) point2D_Double0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 10);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.1, 1718.151615);
      ValueAxis[] valueAxisArray0 = new ValueAxis[7];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(7, combinedRangeXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeAxes();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.clearRangeAxes();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge(2599);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "EB=78\"<^y!`$QNt}{~");
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      xYPlot0.setDataset(0, (XYDataset) matrixSeriesCollection0);
      assertEquals(1, xYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0, "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setDataset(500, (XYDataset) null);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("GX");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      int int0 = combinedDomainXYPlot0.indexOf(defaultTableXYDataset0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals((-1), int0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.18, "!");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      int int0 = combinedRangeXYPlot0.indexOf((XYDataset) null);
      assertEquals(0, int0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Stack<ValueMarker> stack0 = new Stack<ValueMarker>();
      // Undeclared exception!
      try { 
        xYPlot0.mapDatasetToDomainAxes((-3766), stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("jONH3");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes((-1922), vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("jONH3");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes(2671, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Stack<ValueMarker> stack0 = new Stack<ValueMarker>();
      // Undeclared exception!
      try { 
        xYPlot0.mapDatasetToDomainAxes(3230, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LinkedList<DefaultKeyedValues2DDataset> linkedList0 = new LinkedList<DefaultKeyedValues2DDataset>();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      linkedList0.add(defaultKeyedValues2DDataset0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(1, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be Integer instances.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYPlot xYPlot0 = new XYPlot(timePeriodValuesCollection0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer0);
      xYPlot0.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[9];
      xYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(9, xYPlot0.getRendererCount());
  }

////  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "!", 0, 0, (-12), (-12), (-1), 0, 0, 4, 186, (-1069), 1);
      Locale locale0 = Locale.ROOT;
      Month month0 = new Month(date0, simpleTimeZone0, locale0);
      PeriodAxis periodAxis0 = new PeriodAxis("David M. O'Donnell", month0, month0, simpleTimeZone0, locale0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, periodAxis0, periodAxis0, candlestickRenderer0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Index ");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("E:Mw(h/mbvG");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset(matrixSeriesCollection0);
      assertNull(xYItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainGridlinesVisible(true);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("jONH3");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setDomainGridlinesVisible(false);
      assertFalse(combinedRangeXYPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainMinorGridlinesVisible(false);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(true);
      assertTrue(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setDomainGridlineStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(basicStroke0);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setDomainMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("@OcX");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setDomainGridlinePaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      xYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertFalse(cyclicNumberAxis0.isInverted());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeGridlinesVisible(true);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeGridlineStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("pX*,zz", 10, 0.8700000000000002, 200.0);
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      xYPlot0.setRangeGridlinePaint(paint0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeMinorGridlinesVisible(false);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(true);
      assertTrue(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)CyclicNumberAxis.DEFAULT_ADVANCE_LINE_STROKE;
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(basicStroke0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      xYPlot0.setRangeMinorGridlinePaint(combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_STROKE;
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(basicStroke0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("ItemLabelAnchor.OUTSIDE9");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, yIntervalRenderer0);
      xYPlot0.setDomainZeroBaselinePaint(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-12), (-12), (-1), 0, 0, 4, 186, (-1069), 1);
      Locale locale0 = Locale.ROOT;
      Month month0 = new Month(date0, simpleTimeZone0, locale0);
      PeriodAxis periodAxis0 = new PeriodAxis("David M. O'Donnell", month0, month0, simpleTimeZone0, locale0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, periodAxis0, periodAxis0, candlestickRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_CROSSHAIR_STROKE;
      combinedDomainXYPlot0.setRangeZeroBaselineStroke(basicStroke0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = (Color)MeterPlot.DEFAULT_NEEDLE_PAINT;
      xYPlot0.setRangeZeroBaselinePaint(color0);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, valueAxis0.DEFAULT_AXIS_LABEL_FONT, thermometerPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 15, (-427), 1, 0, 0, true, false, true, true, true, true, true);
      Point point0 = chartPanel0.getLocation();
      combinedRangeXYPlot0.setQuadrantOrigin(point0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint((-324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-324) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(2860);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (2860) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Paint paint0 = xYPlot0.getQuadrantPaint(0);
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint((-1248), cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-1248) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setQuadrantPaint(1, stackedXYAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      ValueMarker valueMarker0 = new ValueMarker(1.0E-8, numberAxis0.DEFAULT_AXIS_LABEL_PAINT, numberAxis0.DEFAULT_AXIS_LINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker(500, (Marker) valueMarker0, layer0, false);
      combinedRangeXYPlot0.clearDomainMarkers();
      assertFalse(combinedRangeXYPlot0.isSubplot());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("iM~g?DR\\");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, 2.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(Double.POSITIVE_INFINITY);
      Layer layer0 = Layer.BACKGROUND;
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((-324), (Marker) valueMarker0, layer0, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(0, (-1861.65), xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE, (Paint) null, xYPlot0.DEFAULT_CROSSHAIR_STROKE, 0.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addRangeMarker(0, (Marker) intervalMarker0, layer0, false);
      xYPlot0.clearRangeMarkers();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(334.6, 0.7300000000000001);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, (ValueAxis) null, cyclicNumberAxis0, (XYItemRenderer) null);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, (-3788.76));
      xYPlot0.addRangeMarker(2665, (Marker) intervalMarker0, (Layer) null, false);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("Null 'offset' argument.", zoneInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.clearRangeMarkers(500);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        xYPlot0.removeRangeMarker((-2326), (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeRangeMarker(10, (Marker) categoryMarker0, layer0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(0, (-1861.65), xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE, (Paint) null, xYPlot0.DEFAULT_CROSSHAIR_STROKE, 0.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addRangeMarker(0, (Marker) intervalMarker0, layer0, false);
      boolean boolean0 = xYPlot0.removeRangeMarker(0, (Marker) intervalMarker0, layer0, true);
      assertTrue(boolean0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addAnnotation((XYAnnotation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

////  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "!", 0, 0, (-12), (-12), (-1), 0, 0, 4, 186, (-1069), 1);
      Locale locale0 = Locale.ROOT;
      Month month0 = new Month(date0, simpleTimeZone0, locale0);
      PeriodAxis periodAxis0 = new PeriodAxis("David M. O'Donnell", month0, month0, simpleTimeZone0, locale0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, periodAxis0, periodAxis0, candlestickRenderer0);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("0OK}]G", 0.01, 1.0E-8, (-1.0));
      xYPlot0.addAnnotation((XYAnnotation) xYPointerAnnotation0, false);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("5o}2fvmAS%", statisticalBarRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainXYPlot0, false);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, basicStroke0, jFreeChart0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisSpace axisSpace0 = xYPlot0.calculateDomainAxisSpace((Graphics2D) null, (Rectangle2D) null, (AxisSpace) null);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(axisSpace0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisSpace axisSpace0 = new AxisSpace();
      xYPlot0.setFixedRangeAxisSpace(axisSpace0);
      JFreeChart jFreeChart0 = new JFreeChart("11DZIe|!8dd;8", xYPlot0);
      jFreeChart0.createBufferedImage(2011, 2011, (ChartRenderingInfo) null);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(3, 2);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      jFreeChart0.createBufferedImage(11, 10);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("M>5M^=@AUFoSh'", font0, xYPlot0, true);
      jFreeChart0.createBufferedImage(464, 485, chartRenderingInfo0);
      assertEquals(4, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRenderer(500, (XYItemRenderer) yIntervalRenderer0, true);
      JFreeChart jFreeChart0 = new JFreeChart("11DZIe|!8dd;8", xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2011, 2011, (ChartRenderingInfo) null);
      assertEquals(0, bufferedImage0.getMinX());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(250.0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, yIntervalRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.getDomainAxisForDataset((-2339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -2339 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset(479);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 479 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset((-2205));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -2205 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("@OcX");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(420);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 420 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(11, 420);
      assertTrue(bufferedImage0.hasTileWriters());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDomainMarkers(0, (Layer) null);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(0, layer0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(collection0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeMarkers((Layer) null);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      LogAxis logAxis0 = new LogAxis((String) null);
      xYPlot0.setRangeAxis((ValueAxis) logAxis0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      xYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D_Double0, 77.0966800723, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(7, 500, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      int[] intArray0 = new int[6];
      Polygon polygon0 = new Polygon(intArray0, intArray0, 4);
      Rectangle rectangle0 = (Rectangle)polygon0.getBounds2D();
      combinedRangeXYPlot0.drawHorizontalLine(sunGraphics2D0, rectangle0, 0.0, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeState);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, yIntervalRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("11DZIe|!8dd;8", xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2011, 2011, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame("11DZIe|!8dd;8", true, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("u*3f.mVOva2e!4*g))");
      xYPlot0.drawDomainCrosshair(graphics2D0, rectangle0, plotOrientation0, Double.NaN, logarithmicAxis0, thermometerPlot0.DEFAULT_OUTLINE_STROKE, ((SunGraphics2D) graphics2D0).backgroundColor);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, yIntervalRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("11DZIe|!8dd;8", xYPlot0);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2011, 2011, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame("11DZIe|!8dd;8", true, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("u*3f.mVOva2e!4*g))");
      xYPlot0.drawDomainCrosshair(graphics2D0, rectangle0, plotOrientation0, 0, logarithmicAxis0, thermometerPlot0.DEFAULT_OUTLINE_STROKE, ((SunGraphics2D) graphics2D0).backgroundColor);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("@OcX");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "@OcX");
      combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, (Rectangle2D) null, 2914.7771095017097, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        xYPlot0.drawVerticalLine((Graphics2D) null, rectangle2D0, 0.6900000000000002, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      LogAxis logAxis0 = new LogAxis((String) null);
      xYPlot0.drawRangeCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 1096.62, logAxis0, stackedAreaRenderer0.DEFAULT_STROKE, logAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYPlot xYPlot0 = new XYPlot(timePeriodValuesCollection0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.handleClick(44, 19, plotRenderingInfo0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogAxis logAxis0 = new LogAxis();
      xYPlot0.setDomainAxis(4, (ValueAxis) logAxis0);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(5, xYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, xYBlockRenderer0);
      assertEquals(1, xYPlot0.getWeight());
      
      combinedDomainXYPlot0.add(xYPlot0, 10);
      assertEquals(1, xYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(xYDifferenceRenderer0, false);
      xYPlot0.rendererChanged(rendererChangeEvent0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(xYPlot0, true);
      xYPlot0.rendererChanged(rendererChangeEvent0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairVisible(false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainCrosshairVisible(true);
      assertTrue(xYPlot0.isDomainCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("*{4,F,c<_@BO", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(false);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, yIntervalRenderer0);
      xYPlot0.setDomainCrosshairStroke(yIntervalRenderer0.DEFAULT_STROKE);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      NumberAxis numberAxis0 = new NumberAxis();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, numberAxis0, numberAxis0, xYSplineRenderer0);
      xYPlot0.setDomainCrosshairPaint(xYSplineRenderer0.DEFAULT_PAINT);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeCrosshairVisible(false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeCrosshairVisible(true);
      assertTrue(xYPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      
      xYPlot0.setRangeCrosshairLockedOnData(false);
      xYPlot0.setRangeCrosshairLockedOnData(false);
      assertFalse(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
      combinedDomainXYPlot0.setRangeCrosshairStroke(basicStroke0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, valueAxis0, valueAxis0, xYLine3DRenderer0);
      xYPlot0.setRangeCrosshairPaint(xYLine3DRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, yIntervalRenderer0);
      xYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1, 2599, 10, 6, 0, 0, true, true, false, false, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float(420, 1229.6172F);
      xYPlot0.panDomainAxes((-2159.100459), plotRenderingInfo0, point2D_Float0);
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      MouseEvent mouseEvent0 = new MouseEvent(defaultTableCellRenderer0, 10, (-4494L), (-1846), 839, 2188, 500, true);
      Point point0 = mouseEvent0.getPoint();
      combinedDomainXYPlot0.zoomDomainAxes(1.0E-8, plotRenderingInfo0, (Point2D) point0, true);
      assertEquals(Double.NaN, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.zoomDomainAxes(3183.9456626, plotRenderingInfo0, (Point2D) null, false);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Viktor Rajewski");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.zoomDomainAxes((-1621.1), 0.0, plotRenderingInfo0, (Point2D) null);
      assertFalse(logarithmicAxis0.isAutoRange());
      assertEquals(Double.NEGATIVE_INFINITY, logarithmicAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      combinedRangeXYPlot0.zoomRangeAxes((double) 1845, plotRenderingInfo0, (Point2D) point2D_Double0, true);
      assertFalse(numberAxis3D0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      xYPlot0.zoomRangeAxes((double) 458, 1957.8757787579777, plotRenderingInfo0, (Point2D) null);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogAxis logAxis0 = new LogAxis((String) null);
      xYPlot0.setRangeAxis((ValueAxis) logAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(731, 0);
      // Undeclared exception!
      try { 
        xYPlot0.zoomRangeAxes(3.0, 0.05, plotRenderingInfo0, (Point2D) point0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (31622.776601683792) <= upper (0.010232929922807547).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.UK;
      DateAxis dateAxis0 = new DateAxis((String) null, zoneInfo0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-12), (-12), (-1), 0, 0, 4, 186, (-1069), 1);
      Locale locale0 = Locale.ROOT;
      Month month0 = new Month(date0, simpleTimeZone0, locale0);
      PeriodAxis periodAxis0 = new PeriodAxis("David M. O'Donnell", month0, month0, simpleTimeZone0, locale0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, periodAxis0, periodAxis0, candlestickRenderer0);
      jDBCXYDataset0.removeChangeListener(spiderWebPlot0);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
  }

////  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-12), (-12), (-1), 0, 0, 4, 186, (-1069), 1);
      Locale locale0 = Locale.ROOT;
      Month month0 = new Month(date0, simpleTimeZone0, locale0);
      PeriodAxis periodAxis0 = new PeriodAxis("David M. O'Donnell", month0, month0, simpleTimeZone0, locale0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, periodAxis0, periodAxis0, candlestickRenderer0);
      xYPlot0.clone();
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getWeight());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("@OcX");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      GeneralPath generalPath0 = new GeneralPath();
      combinedDomainXYPlot0.select(generalPath0, (Rectangle2D) null, (RenderingSource) chartPanel0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }
}
