/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 16:32:49 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.GeneralPath;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.JInternalFrame;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.RenderingSource;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.Crosshair;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;


public class XYPlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(340.9955310217, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      combinedRangeXYPlot0.select(7.0, 0.0, (Rectangle2D) null, (RenderingSource) chartPanel0);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(Double.NaN);
      IntervalMarker intervalMarker0 = new IntervalMarker(1200.09375, 1597.23404585, candlestickRenderer0.DEFAULT_PAINT);
      xYPlot0.addRangeMarker((Marker) intervalMarker0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 10, (-3052), 15, (-3052), 15, false, false, false, false, false, false);
      Stroke stroke0 = chartPanel0.getSelectionOutlineStroke();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, (-30.0), 0.0, (-30.0), stroke0, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisForDataset(0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2238, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = (Color)combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.canSelectByRegion();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue(10.0);
      assertEquals(10.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisCount();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      DateAxis dateAxis0 = new DateAxis("%b/y\"ca@07NKHL3{'H\"", timeZone0, locale0);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, dateAxis0, dateAxis0, deviationRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(141, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(2.0F, 500, (-1.0F), Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 2.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      xYPlot0.drawQuadrants(graphics2D0, rectangle2D0);
      assertEquals(2, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("'p5A<[vK");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      DateAxis dateAxis0 = new DateAxis("%b/y\"ca@07NKHL3{'H\"", timeZone0, locale0);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, dateAxis0, dateAxis0, deviationRenderer0);
      boolean boolean0 = xYPlot0.canSelectByPoint();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeZeroBaselinePaint();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearAnnotations();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultWindDataset0, 0.0);
      DateAxis dateAxis0 = new DateAxis("2($w'6>y86zlY");
      XYPlot xYPlot0 = new XYPlot(xYBarDataset0, dateAxis0, dateAxis0, (XYItemRenderer) null);
      Color color0 = (Color)xYPlot0.getRangeCrosshairPaint();
      assertEquals(255, color0.getBlue());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Font font0 = MeterPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, xYPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(18, 420, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      xYPlot0.drawZeroRangeBaseline(graphics2D0, (Rectangle2D) null);
      assertFalse(xYPlot0.canSelectByPoint());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeCrosshairStroke();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      DateAxis dateAxis0 = new DateAxis("", timeZone0, locale0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.zoomDomainAxes(0.05, (PlotRenderingInfo) null, (Point2D) null);
      assertEquals(0.525, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedRangeXYPlot0.getQuadrantOrigin();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.panRangeAxes(0.0, plotRenderingInfo0, (Point2D) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getPlotType();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(340.9955310217, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isRangeGridlinesVisible();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      combinedRangeXYPlot0.setRangeTickBandPaint(color0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      combinedDomainXYPlot0.setDomainAxis(valueAxis0);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      combinedRangeXYPlot0.zoomRangeAxes(2659.02, (PlotRenderingInfo) null, (Point2D) point0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2238, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame("");
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      ArrayList<CategoryAxis> arrayList0 = new ArrayList<CategoryAxis>();
      xYPlot0.drawRangeTickBands(sunGraphics2D0, rectangle0, arrayList0);
      assertEquals(0, sunGraphics2D0.paintState);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      RectangleInsets rectangleInsets0 = xYPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeAxisLocation(71, (AxisLocation) null);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeZeroBaselineVisible(false);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2238, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame("");
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      ArrayList<CategoryAxis> arrayList0 = new ArrayList<CategoryAxis>();
      xYPlot0.drawDomainTickBands(graphics2D0, rectangle0, arrayList0);
      assertFalse(xYPlot0.isSubplot());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      combinedDomainXYPlot0.setRangeCrosshairStroke(basicStroke0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      boolean boolean0 = combinedRangeXYPlot0.isRangeCrosshairLockedOnData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxisLocation((-1), (AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedDomainXYPlot0.removeRangeMarker((Marker) categoryMarker0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      List list0 = combinedDomainXYPlot0.getAnnotations();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDomainGridlineStroke();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) xYBoxAndWhiskerRenderer0);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(true);
      assertTrue(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue(0.0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeMinorGridlineStroke();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.panDomainAxes((-0.037142479771126544), plotRenderingInfo0, (Point2D) null);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedLegendItems((LegendItemCollection) null);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(255, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisCount();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = (Color)combinedRangeXYPlot0.getDomainGridlinePaint();
      assertEquals(255, color0.getGreen());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Color color0 = (Color)combinedRangeXYPlot0.getDomainCrosshairPaint();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)combinedDomainXYPlot0.getDomainMinorGridlinePaint();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(255, color0.getRed());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(255, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1165.972558222));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Range range0 = meterPlot0.getRange();
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, moduloAxis0, moduloAxis0, xYStepRenderer0);
      boolean boolean0 = xYPlot0.isDomainGridlinesVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(0.08);
      combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1988.5275));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      int int0 = combinedRangeXYPlot0.getWeight();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultWindDataset0, 0.0);
      DateAxis dateAxis0 = new DateAxis("2($w'6>y86zlY");
      XYPlot xYPlot0 = new XYPlot(xYBarDataset0, dateAxis0, dateAxis0, (XYItemRenderer) null);
      xYPlot0.setRangePannable(true);
      assertTrue(xYPlot0.isRangePannable());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(1);
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      Paint paint0 = grayPaintScale0.getPaint(0.0);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(10, 1.0F, (-688.15), 1.0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, paint0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.controlText;
      combinedDomainXYPlot0.setDomainTickBandPaint(systemColor0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("#,lNI<_");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainPannable(true);
      assertTrue(combinedRangeXYPlot0.isDomainPannable());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      NumberAxis numberAxis0 = new NumberAxis();
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, numberAxis0, numberAxis0, candlestickRenderer0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      xYPlot0.setOrientation(plotOrientation0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      combinedRangeXYPlot0.setAxisOffset(symbolAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[19];
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      assertEquals(19, combinedDomainXYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearDomainAxes();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearDomainAxes();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Null 'stroke' argument.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) logAxis0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(6, combinedRangeXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[19];
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      xYPlot0.setRangeAxis(1032, valueAxisArray0[0]);
      assertEquals(1033, xYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeAxes();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeAxes();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      DateAxis dateAxis0 = new DateAxis("%b/y\"ca@07NKHL3{'H\"", timeZone0, locale0);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, dateAxis0, dateAxis0, deviationRenderer0);
      xYPlot0.getRangeAxisLocation(500);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeAxisLocation(0, (AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(18.0, 647.73, (String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setDataset(500, (XYDataset) null);
      assertEquals(501, combinedDomainXYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      int int0 = xYPlot0.indexOf(xYSeriesCollection0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals((-1), int0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      int int0 = xYPlot0.indexOf((XYDataset) null);
      assertEquals(0, int0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxis((-6), (-176));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxis((-1612), 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxes(0, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("#q!>Zb&,)9B");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(1866, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      DateAxis dateAxis0 = new DateAxis("", simpleTimeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ArrayList<VectorRenderer> arrayList0 = new ArrayList<VectorRenderer>();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      arrayList0.add(vectorRenderer0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(500, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be Integer instances.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      DateAxis dateAxis0 = new DateAxis("%b/y\"ca@07NKHL3{'H\"", timeZone0, locale0);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, dateAxis0, dateAxis0, deviationRenderer0);
      xYPlot0.setRenderer(48, (XYItemRenderer) deviationRenderer0, false);
      assertEquals(49, xYPlot0.getRendererCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[5];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(5, combinedDomainXYPlot0.getRendererCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot0.getDatasetRenderingOrder();
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(false);
      XYItemRenderer xYItemRenderer0 = combinedDomainXYPlot0.getRendererForDataset(simpleHistogramDataset0);
      assertNull(xYItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setDomainGridlinesVisible(true);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("\t&_7cmF<|'HO");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.setDomainGridlinesVisible(false);
      assertFalse(combinedRangeXYPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainMinorGridlinesVisible(false);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainMinorGridlinesVisible(true);
      assertTrue(xYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Jl:Z", 0.0, 10, 0.0);
      Stroke stroke0 = xYPointerAnnotation0.getOutlineStroke();
      combinedRangeXYPlot0.setDomainGridlineStroke(stroke0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getBaseStroke();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(stroke0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = (Color)MeterPlot.DEFAULT_DIAL_BACKGROUND_PAINT;
      xYPlot0.setDomainGridlinePaint(color0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1165.972558222));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Range range0 = meterPlot0.getRange();
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, moduloAxis0, moduloAxis0, xYStepRenderer0);
      xYPlot0.setRangeGridlinesVisible(true);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeGridlinesVisible(false);
      assertFalse(combinedRangeXYPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_GRIDLINE_STROKE;
      xYPlot0.setRangeGridlineStroke(basicStroke0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-5.0), 0.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setRangeGridlinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeMinorGridlinesVisible(false);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeMinorGridlinesVisible(true);
      assertTrue(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      DateAxis dateAxis0 = new DateAxis("%b/y\"ca@07NKHL3{'H\"", timeZone0, locale0);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, dateAxis0, dateAxis0, deviationRenderer0);
      xYPlot0.setRangeMinorGridlineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      RingPlot ringPlot0 = new RingPlot(jDBCPieDataset0);
      Stroke stroke0 = ringPlot0.getLabelLinkStroke();
      xYPlot0.setDomainZeroBaselineStroke(stroke0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis("|Q'w6{472.", stringArray0);
      xYPlot0.setDomainZeroBaselinePaint(symbolAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Null 'stroke' argument.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot0.setRangeZeroBaselineStroke(logAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = Color.blue;
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(color0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      combinedRangeXYPlot0.setQuadrantOrigin(point2D_Double0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint((-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-14) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.getQuadrantPaint(2);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(58);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (58) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)XYLine3DRenderer.DEFAULT_WALL_PAINT;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint((-2885), color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-2885) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      xYPlot0.setQuadrantPaint(3, ganttRenderer0.DEFAULT_OUTLINE_PAINT);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Paint paint0 = ganttRenderer0.getCompletePaint();
      // Undeclared exception!
      try { 
        xYPlot0.setQuadrantPaint(45, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (45) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearDomainMarkers();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Null 'stroke' argument.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot0.clearDomainMarkers(500);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker(37, (Marker) intervalMarker0, (Layer) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      DateAxis dateAxis0 = new DateAxis("%b/y\"ca@07NKHL3{'H\"", timeZone0, locale0);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, dateAxis0, dateAxis0, deviationRenderer0);
      Stroke stroke0 = xYPlot0.getRangeGridlineStroke();
      CategoryMarker categoryMarker0 = new CategoryMarker(true, deviationRenderer0.DEFAULT_PAINT, stroke0, xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE, 0.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      NumberAxis numberAxis0 = new NumberAxis();
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, numberAxis0, numberAxis0, candlestickRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(1);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker(0, (Marker) valueMarker0, layer0, false);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      IntervalMarker intervalMarker0 = new IntervalMarker(28, (double) candlestickRenderer0.ZERO);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeDomainMarker(28, (Marker) intervalMarker0, layer0, true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      IntervalMarker intervalMarker0 = new IntervalMarker(28, (double) candlestickRenderer0.ZERO);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addRangeMarker(0, (Marker) intervalMarker0, layer0, false);
      combinedDomainXYPlot0.clearRangeMarkers();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1200.09375, 10);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker((-262), (Marker) intervalMarker0, layer0, true);
      combinedDomainXYPlot0.clearRangeMarkers();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("#q!>Zb&,)9B");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_PAINT;
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, dateAxis0.DEFAULT_TICK_MARK_STROKE, color0, dateAxis0.DEFAULT_TICK_MARK_STROKE, 1.0F);
      combinedRangeXYPlot0.addRangeMarker(2064, (Marker) categoryMarker0, (Layer) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        xYPlot0.removeRangeMarker(1010, (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker((-2887), (Marker) categoryMarker0, layer0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(340.9955310217, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("=]& ", 1200.09375, 500);
      xYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 408);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AxisSpace axisSpace0 = xYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, (AxisSpace) null);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(4320, 10, (double) 10, (double) 1.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(1.0F, 10, (-4730.21), 10, 1.0F, (-2209.143017243));
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle2D0, (AxisSpace) null);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(18.484375, axisSpace0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2238, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle0, (AxisSpace) null);
      assertEquals(15.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2238, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      combinedDomainXYPlot0.drawQuadrants(graphics2D0, rectangle0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("ti@dDJ,L9Iu<", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(4, 10, (ChartRenderingInfo) null);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1062.09F), 921.0F, (-5.0F), 1.0F);
      Map map0 = combinedRangeXYPlot0.drawAxes(sunGraphics2D0, rectangle2D_Float0, rectangle2D_Float0, (PlotRenderingInfo) null);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset((-1982));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -1982 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset(385);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 385 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      TimeZone timeZone0 = TimeZone.getTimeZone("Bill Kelemen");
      Locale locale0 = Locale.GERMAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      xYPlot0.setDataset(15, (XYDataset) timeTableXYDataset0);
      assertEquals(16, xYPlot0.getDatasetCount());
      
      xYPlot0.getDomainAxisForDataset(15);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.getRangeAxisForDataset((-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -14 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.getRangeAxisForDataset(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 10 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 9, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      xYPlot0.drawDomainGridlines(graphics2D0, defaultCaret0, stack0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("Bill Kelemen", font0, xYPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3478, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      Stack<Point2D.Double> stack0 = new Stack<Point2D.Double>();
      xYPlot0.drawRangeGridlines(graphics2D0, rectangle0, stack0);
      assertEquals(2, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1165.972558222));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Range range0 = meterPlot0.getRange();
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, moduloAxis0, moduloAxis0, xYStepRenderer0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(layer0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDomainMarkers((-196), (Layer) null);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      DateAxis dateAxis0 = new DateAxis("8%7@-U~myJMUOp", timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeMarkers(637, (Layer) null);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'maximumDate' argument.", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(5, 4, 0.05, Double.NaN, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, true, false);
      Rectangle rectangle0 = chartPanel0.getBounds();
      SystemColor systemColor0 = SystemColor.scrollbar;
      combinedRangeXYPlot0.drawHorizontalLine(sunGraphics2D0, rectangle0, (-4036.6), symbolAxis0.DEFAULT_AXIS_LINE_STROKE, systemColor0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals((-1), sunGraphics2D0.eargb);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("Bill Kelemen", font0, xYPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3478, 10, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("The index value (");
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("$[x6P|l3^*3+%\"b", 2.5E8, 0.0, 775.34470809875);
      BasicStroke basicStroke0 = (BasicStroke)xYPointerAnnotation0.getArrowStroke();
      xYPlot0.drawDomainCrosshair(sunGraphics2D0, rectangle0, plotOrientation0, 0, numberAxis3D0, basicStroke0, numberAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(2, standardEntityCollection0.getEntityCount());
      assertEquals((-8355712), sunGraphics2D0.pixel);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("ti@dDJ,L9Iu<", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(4, 10, (ChartRenderingInfo) null);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1062.09F), 921.0F, (-5.0F), 1.0F);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.0F);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      combinedRangeXYPlot0.drawDomainCrosshair(sunGraphics2D0, rectangle2D_Float0, plotOrientation0, 0.5F, dateAxis0, thermometerPlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals((-8355712), sunGraphics2D0.eargb);
      assertEquals((-8355712), sunGraphics2D0.pixel);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart("IR/_!8;uG+Uq1", numberAxis3D0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.05, 1.0E-8, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_AXIS_LINE_STROKE;
      combinedDomainXYPlot0.drawVerticalLine(sunGraphics2D0, rectangle0, 0.5F, basicStroke0, numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
      assertEquals((-8355712), sunGraphics2D0.eargb);
      assertEquals((-8355712), sunGraphics2D0.pixel);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 9, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      NumberAxis numberAxis0 = new NumberAxis();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("ZOOM_IN_BOTH");
      Stroke stroke0 = extendedCategoryAxis0.getAxisLineStroke();
      xYPlot0.drawRangeCrosshair(graphics2D0, defaultCaret0, plotOrientation0, 270.0, numberAxis0, stroke0, multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 9, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      NumberAxis numberAxis0 = new NumberAxis();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("ZOOM_IN_BOTH");
      BasicStroke basicStroke0 = (BasicStroke)extendedCategoryAxis0.getAxisLineStroke();
      xYPlot0.drawRangeCrosshair(sunGraphics2D0, defaultCaret0, plotOrientation0, 0, numberAxis0, basicStroke0, multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertEquals((-8355712), sunGraphics2D0.eargb);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.handleClick(3099, 3099, plotRenderingInfo0);
      assertTrue(xYPlot0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[19];
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.05);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      xYPlot0.setDataset(2, (XYDataset) timeSeriesCollection0);
      assertEquals(19, xYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[19];
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      xYPlot0.getDataRange(valueAxisArray0[1]);
      assertEquals(19, xYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      TimeZone timeZone0 = TimeZone.getDefault();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      DateAxis dateAxis0 = new DateAxis("Null 'marker' not permitted.", timeZone0);
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, dateAxis0, dateAxis0, deviationRenderer0);
      // Undeclared exception!
      xYPlot0.setDataset(4977, (XYDataset) defaultWindDataset0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1, "Jl:Z");
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, yIntervalRenderer0);
      combinedRangeXYPlot0.add(xYPlot0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-2942), 9);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      xYPlot0.setParent(waferMapPlot0);
      xYPlot0.mapDatasetToDomainAxis(0, 0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(combinedDomainXYPlot0, true);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairVisible(false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultWindDataset0, 0.0);
      DateAxis dateAxis0 = new DateAxis("2($w'6>y86zlY");
      XYPlot xYPlot0 = new XYPlot(xYBarDataset0, dateAxis0, dateAxis0, (XYItemRenderer) null);
      xYPlot0.setDomainCrosshairVisible(true);
      assertTrue(xYPlot0.isDomainCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(true);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(false);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      combinedDomainXYPlot0.setDomainCrosshairStroke(candlestickRenderer0.DEFAULT_OUTLINE_STROKE);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      DateAxis dateAxis0 = new DateAxis("%b/y\"ca@07NKHL3{'H\"", timeZone0, locale0);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, dateAxis0, dateAxis0, deviationRenderer0);
      xYPlot0.setDomainCrosshairPaint(dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeCrosshairVisible(false);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeCrosshairVisible(true);
      xYPlot0.setRangeCrosshairValue(485.6078771806, false);
      assertTrue(xYPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      DateAxis dateAxis0 = new DateAxis("%b/y\"ca@07NKHL3{'H\"", timeZone0, locale0);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, dateAxis0, dateAxis0, deviationRenderer0);
      xYPlot0.setRangeCrosshairLockedOnData(true);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(false);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(340.9955310217, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setRangeCrosshairPaint(cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisSpace axisSpace0 = xYPlot0.getFixedDomainAxisSpace();
      xYPlot0.setFixedDomainAxisSpace(axisSpace0, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart("WRmu\u0000R]\"]", thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GeneralPath generalPath0 = new GeneralPath(thermometerPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      Point2D point2D0 = generalPath0.getCurrentPoint();
      xYPlot0.zoomDomainAxes(502.073522, plotRenderingInfo0, point2D0, true);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      NumberAxis numberAxis0 = new NumberAxis();
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, numberAxis0, numberAxis0, candlestickRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("t]t<^yLP8v", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2000, 4481);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea();
      Point2D point2D0 = spiderWebPlot0.calculateLabelLocation(rectangle2D0, 2335.42391, rectangle2D0, 2241.0);
      xYPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, point2D0, true);
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double(10, (-3199.393574082268));
      combinedDomainXYPlot0.zoomDomainAxes(0.0, 4.0, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.zoomDomainAxes(3.0, 4.0, (PlotRenderingInfo) null, (Point2D) null);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      xYPlot0.zoomRangeAxes(2752.3325285, plotRenderingInfo0, (Point2D) point2D_Float0, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomRangeAxes(3.141592653589793, (PlotRenderingInfo) null, (Point2D) point0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomRangeAxes((-2182.759515), Double.NaN, plotRenderingInfo0, (Point2D) null);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Point point0 = new Point();
      xYPlot0.zoomRangeAxes(4.0, (-2075.78001110423), (PlotRenderingInfo) null, (Point2D) point0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Null 'stroke' argument.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      int int0 = combinedDomainXYPlot0.getSeriesCount();
      assertEquals(0, int0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, (ValueAxis) null, (ValueAxis) null, xYSplineRenderer0);
      int int0 = xYPlot0.getSeriesCount();
      assertEquals(0, int0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      xYPlot0.setDataset((XYDataset) timeSeriesCollection0);
      jFreeChart0.createBufferedImage(1, 408);
      assertEquals(1, xYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      boolean boolean0 = xYPlot0.equals(defaultPieDataset0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      DateAxis dateAxis0 = new DateAxis("%b/y\"ca@07NKHL3{'H\"", timeZone0, locale0);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, dateAxis0, dateAxis0, deviationRenderer0);
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      assertEquals(1, combinedRangeXYPlot1.getWeight());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(18.0, 647.73, (String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      JFreeChart jFreeChart0 = new JFreeChart("WRmu\u0000R]\"]", thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      GeneralPath generalPath0 = new GeneralPath(thermometerPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      Size2D size2D0 = new Size2D(Double.POSITIVE_INFINITY, 9.0);
      Crosshair crosshair0 = new Crosshair(2.0F, valueAxis0.DEFAULT_AXIS_LABEL_PAINT, thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      RectangleAnchor rectangleAnchor0 = crosshair0.getLabelAnchor();
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, (-1283.041048690791), (-1283.041048690791), rectangleAnchor0);
      xYPlot0.select(generalPath0, rectangle2D0, (RenderingSource) chartPanel0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      xYPlot0.setDataset((XYDataset) timeSeriesCollection0);
      // Undeclared exception!
      try { 
        xYPlot0.select((GeneralPath) null, (Rectangle2D) null, (RenderingSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      DateAxis dateAxis0 = new DateAxis("%b/y\"ca@07NKHL3{'H\"", timeZone0, locale0);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, dateAxis0, dateAxis0, deviationRenderer0);
      xYPlot0.clearSelection();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.clearSelection();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }
}
