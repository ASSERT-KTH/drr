/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 02:05:28 GMT 2019
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.text.ParsePosition;
import java.time.DayOfWeek;
import java.time.Instant;
import java.time.chrono.ThaiBuddhistDate;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;


public class XYSeries_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2262, 2262);
      Second second0 = new Second(mockDate0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, true);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2262, 2262);
      Second second0 = new Second(mockDate0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, true);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1256));
      Week week0 = new Week((-1256), 0);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      xYSeries0.add(Double.NEGATIVE_INFINITY, (Number) integer0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2262, 2262);
      Second second0 = new Second(mockDate0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, true);
      xYSeries0.add((double) 0, (double) 59, true);
      xYSeries0.addOrUpdate(0.0, 1.5);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-9999));
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      xYSeries0.getItems();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2262, 2262);
      Second second0 = new Second(mockDate0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.add((double) 0, (double) 59, false);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.add((double) (-9999), (Number) null, true);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      XYSeries xYSeries0 = new XYSeries(thaiBuddhistDate0, false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2262, 2262);
      Second second0 = new Second(mockDate0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.addOrUpdate(0.0, 1.5);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-28), 29, 29);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertFalse(boolean0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week((-1140), Integer.MAX_VALUE);
      XYSeries xYSeries0 = new XYSeries(week0, false, true);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-28), 29, 29);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      xYSeries0.add((double) (-28), (double) 29, false);
      xYSeries0.addOrUpdate((double) 29, (double) (-28));
      xYSeries0.setMaximumItemCount(1);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2262, 2262);
      Second second0 = new Second(mockDate0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.add((double) 0, (double) 59, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(0.0, 1.5);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week((-1140), Integer.MAX_VALUE);
      XYSeries xYSeries0 = new XYSeries(week0, false, true);
      xYSeries0.add((double) 1, (double) 1, false);
      xYSeries0.createCopy(Integer.MAX_VALUE, (-1140));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      xYSeries0.add((double) (-28), (double) 29, false);
      Double double0 = new Double(3445.09209884462);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (-28), (Number) double0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-28), 29, 29);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      xYSeries0.addOrUpdate((double) 29, (double) (-28));
      xYSeries0.setMaximumItemCount(1);
      Double double0 = new Double(3445.09209884462);
      xYSeries0.add((double) (-28), (Number) double0, false);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-28), 29, 29);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      xYSeries0.delete(29, (-2114));
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-1187), year0);
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-9999), 9999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-53), 29, 29);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      xYSeries0.add((double) (-53), (double) 29, false);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2262, 2262);
      Second second0 = new Second(mockDate0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, true);
      xYSeries0.add((double) 0, (double) 59, true);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(0, 59);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      // Undeclared exception!
      try { 
        xYSeries0.update(0, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 0
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Year year0 = new Year(date0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(year0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-53), 29, 29);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      xYSeries0.add((double) (-53), (double) 29, false);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate(1998.3254213028508, (double) (-2114));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-9999));
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      XYSeries xYSeries1 = xYSeries0.createCopy((-1), 0);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(boolean0);
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      Integer integer0 = new Integer(1700);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-1060), (-678));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2262, 2262);
      Second second0 = new Second(mockDate0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, true);
      XYSeries xYSeries1 = new XYSeries(second0, true, true);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer((-9999));
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Year year0 = new Year(date0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(year0, false);
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      boolean boolean0 = xYSeries0.equals(dayOfWeek0);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-9999));
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      XYSeries xYSeries1 = xYSeries0.createCopy((-9999), 2372);
      xYSeries1.setMaximumItemCount(2372);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(2372, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true);
      XYSeries xYSeries1 = new XYSeries(month0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertFalse(xYSeries1.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      XYSeries xYSeries1 = new XYSeries(week0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer((-9999));
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      XYSeries xYSeries1 = xYSeries0.createCopy((-1), 0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.add(0.5, (Number) integer0, true);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) (-9999), (Number) 9999);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add((double) 1392409281320L, (double) (-9999));
      xYSeries0.addOrUpdate((Number) (-9999), (Number) (-9999));
      xYSeries0.hashCode();
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      XYSeries xYSeries0 = new XYSeries(thaiBuddhistDate0, false);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, true, false);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }
}
