/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 01:49:16 GMT 2019
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.Instant;
import java.util.Date;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;


public class XYSeries_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(316, year0);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(30);
      XYSeries xYSeries0 = new XYSeries(integer0, true, false);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(316, year0);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      xYSeries0.add((double) 0, 2033.98210357, true);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true);
      xYSeries0.getItems();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true);
      Float float0 = new Float(0.0F);
      xYSeries0.add((Number) float0, (Number) float0, false);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(29, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(316, year0);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      xYSeries0.addOrUpdate((double) 316, (double) 53);
      xYSeries0.add(Double.NaN, (-1541.28915806657));
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond((-2672), second0);
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("org.jfree.d}ta.statistics.DefaultMultiValueCategoryDataset", true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.getAllowDuplicateXValues();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond((-2672), second0);
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((double) 499L, (double) 999);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond((-2672), second0);
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add((Number) 0, (Number) 0, true);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2984);
      Day day0 = new Day(serialDate0);
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      xYSeries0.add(408.2489990621, (Number) 2, false);
      xYSeries0.add((double) 5, (-1.0));
      xYSeries0.addOrUpdate((Number) 9999, (Number) 2);
      xYSeries0.hashCode();
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1781);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 1, (double) 2);
      xYSeries0.add(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, true, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.add((Number) bigInteger0, (Number) week0.FIRST_WEEK_IN_YEAR, true);
      xYSeries0.add((Number) 1, (Number) 53);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      xYSeries0.addOrUpdate((double) 59, (double) (-92));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2984);
      Day day0 = new Day(spreadsheetDate0);
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      xYSeries0.add((double) 4, Double.NaN, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 4, (Number) 2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(316, year0);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      xYSeries0.delete(316, (-9999));
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Year year0 = new Year(999);
      XYSeries xYSeries0 = new XYSeries(year0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1781);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, false);
      xYSeries0.clear();
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-851), 29, 0);
      Quarter quarter0 = new Quarter(mockDate0);
      XYSeries xYSeries0 = new XYSeries(quarter0, true, true);
      xYSeries0.add((double) 1, (Number) 1);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(1, 4);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(316, year0);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      // Undeclared exception!
      try { 
        xYSeries0.update(53, (-9999));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 53
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2984);
      Day day0 = new Day(serialDate0);
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      xYSeries0.addOrUpdate((Number) 3, (Number) 2958465);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2984);
      Day day0 = new Day(serialDate0);
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      xYSeries0.addOrUpdate((Number) 9999, (Number) 2);
      xYSeries0.addOrUpdate((Number) 9999, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(350, year0);
      XYSeries xYSeries0 = new XYSeries(week0, true, false);
      xYSeries0.addOrUpdate((Number) 9999, (Number) 1);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, true, true);
      xYSeries0.add(1176.341898842817, (Number) null);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(2, doubleArray0.length);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(316, year0);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 53);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.add((double) 0, 2033.98210357, true);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(316, year0);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      xYSeries0.addOrUpdate((double) 316, (double) 53);
      xYSeries0.createCopy(1, (-9999));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(316, year0);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      xYSeries0.addOrUpdate((double) 316, (double) 53);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(1, 1483);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Year year0 = new Year(1656);
      XYSeries xYSeries0 = new XYSeries(year0, false);
      boolean boolean0 = xYSeries0.equals(year0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(660);
      Day day0 = new Day(serialDate0);
      XYSeries xYSeries0 = new XYSeries(day0, true, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 2);
      XYSeries xYSeries1 = new XYSeries(timeSeriesDataItem0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(316, year0);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(8, 53);
      xYSeries1.setMaximumItemCount(1896);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(1896, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      XYSeries xYSeries1 = new XYSeries(millisecond0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(660);
      XYSeries xYSeries0 = new XYSeries(serialDate0, true, true);
      XYSeries xYSeries1 = new XYSeries(serialDate0, true, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(316, year0);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 53);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("[a%(4PK3a5=|=:hDl/", true, true);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(660);
      Day day0 = new Day(serialDate0);
      XYSeries xYSeries0 = new XYSeries(day0, true, true);
      xYSeries0.add(408.2489990621, (Number) 2, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(660);
      Day day0 = new Day(serialDate0);
      XYSeries xYSeries0 = new XYSeries(day0, true, true);
      xYSeries0.add(408.2489990621, (Number) 2, false);
      xYSeries0.add((double) 5, (-1.0));
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }
}
