/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 11:34:34 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.CoalesceVariableNames;
import com.google.javascript.jscomp.CodeConsumer;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.InferJSDocInfo;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SourceInformationAnnotator;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CodeGenerator_ESTest extends CodeGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "S<TRT_OF_EXPR", "S<TRT_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      compiler0.toSource(node0);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      CodeGenerator.identifierEscape("Couldn't use Java reflection to implement protocol message reflection.");
      Node node0 = Node.newString("o {Vc-{B;_!rNq");
      // Undeclared exception!
      try { 
        codeGenerator0.addArrayList(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      Logger logger0 = Logger.getLogger("5<z?+uw");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node0 = compiler_IntermediateState0.externsRoot;
      FileSystemHandling.shouldAllThrowIOExceptions();
      codeGenerator0.addArrayList((Node) null);
      loggerErrorManager0.generateReport();
      CodeGenerator.Context.values();
      logger0.severe("5<z?+uw");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      loggerErrorManager0.printSummary();
      loggerErrorManager0.setTypedPercent(49);
      // Undeclared exception!
      try { 
        CodeGenerator.Context.valueOf("M{Mia4m>nXxS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.CodeGenerator.Context.M{Mia4m>nXxS
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CodeGenerator.jsString("ds]5')%", (CharsetEncoder) null);
      CodeGenerator.strEscape("\"ds]5')%\"", '@', "ds]5')%", "VwW%>&H@u/", "\"ds]5')%\"", (CharsetEncoder) null);
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      CodeGenerator.escapeToDoubleQuotedJsString("VwW%>&H@u/");
      MockPrintStream mockPrintStream0 = new MockPrintStream("z+u");
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.PRESERVE_BLOCK;
      // Undeclared exception!
      try { 
        codeGenerator0.add((Node) null, codeGenerator_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      Node node0 = null;
      String string0 = "<7. kn4E=HxL*`o1,_";
      CodeGenerator.regexpEscape("<7. kn4E=HxL*`o1,_");
      codeGenerator0.addAllSiblings((Node) null);
      charset0.aliases();
      // Undeclared exception!
      try { 
        codeGenerator0.add("<7. kn4E=HxL*`o1,_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      String string0 = CodeGenerator.jsString("%@sanN^>F", charsetEncoder0);
      assertEquals("\"%@sanN^>F\"", string0);
      
      double double0 = CodeGenerator.getSimpleNumber("not all control paths assign property {1} in function {0}");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "0";
      CodeGenerator.getSimpleNumber("0");
      CodeGenerator.Context.values();
      // Undeclared exception!
      try { 
        CodeGenerator.Context.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "debugger", "debugger");
      compiler0.toSource(node0);
      // Undeclared exception!
      try { 
        Charset.forName("debugger");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // debugger
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(49);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(64);
      node0.addChildrenToFront(node2);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(6);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 6
         // IFEQ 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(46);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 46
         // SHNE 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "START_OF_EXPR";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(9);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 9
         // BITOR 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      Node node1 = Node.newString("+", 35, 174);
      node0.addChildrenToFront(node1);
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(85);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for expr_result (type 130)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(37);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for expr_result (type 130)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(112);
      compiler0.toSource(node0);
      CodeGenerator.identifierEscape("hz@Bc0 .[N1 ^Gv,");
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
      // Undeclared exception!
      try { 
        codeGenerator0.add(node0, codeGenerator_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("START_OF_EXPR");
      compiler0.toSource(node0);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(30);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for expr_result (type 130)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      String string0 = "START_OF_EXPR";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CodeGenerator.identifierEscape("Bad binary operator \"%s\": expected 2 arguments but got %s");
      node0.setType(38);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 1 [sourcename: java.lang.String@0000000478] [synthetic: 1] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(4, node0, node0, node0, node0);
      CompilerOptions compilerOptions0 = compiler0.options;
      compiler0.toSource(node0);
      compilerOptions0.nameReferenceReportPath = "Expected a string; found: null";
      compilerOptions0.manageClosureDependencies = false;
      CodeGenerator.Context.values();
      // Undeclared exception!
      try { 
        CodeGenerator.isSimpleNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "START_OF_EXPR";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      node0.setType(80);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 80
         // RB 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(32);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for expr_result (type 130)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(100);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 100
         // OR 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(69);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(31);
      compiler0.toSource(node0);
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, true, codeGenerator_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(143);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 143
         // XMLATTR 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CodeGenerator.identifierEscape("\n");
      CodeGenerator.identifierEscape("nWew]xV&");
      char char0 = ' ';
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharBuffer charBuffer0 = CharBuffer.allocate(220);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      charset0.decode(byteBuffer0);
      CodeGenerator.strEscape("\n", ' ', "nWew]xV&", "\n", "sN", charsetEncoder0);
      CodeGenerator.Context.values();
      CodeGenerator.identifierEscape("\n");
      CodeGenerator.Context.values();
      System.setCurrentTimeMillis(9007199254740992L);
      String string0 = "\\";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Found ");
      CharsetEncoder charsetEncoder1 = charset0.newEncoder();
      CodeGenerator.strEscape("", 'j', "sN", "", "msQ0 )G Xv$jjb0", charsetEncoder1);
      CodeGenerator.Context.values();
      CodeGenerator.identifierEscape("com.google.javascript.jscomp.CodeGenerator");
      String string1 = "nA^*yCm|d,-p";
      CodeGenerator.strEscape("Found ", 'j', "Found ", "nA^*yCm|d,-p", "\n", charsetEncoder0);
      // Undeclared exception!
      try { 
        CodeGenerator.Context.valueOf("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.CodeGenerator.Context.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(4, node0, node0, node0, node0);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(124);
      node0.addChildrenToFront(node2);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      String string0 = "START_OF_EXPR";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(109);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 109
         // ELSE 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(77);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(141);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 141
         // XML 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape("ok&*Es ");
      assertEquals("/ok&*Es /", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = CodeGenerator.escapeToDoubleQuotedJsString("{");
      assertEquals("\"{\"", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CodeGenerator.Context.values();
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[4];
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("mYZ@", jSType0);
      ObjectType objectType0 = enumType0.getImplicitPrototype();
      jSTypeArray0[1] = (JSType) objectType0;
      Vector<JSType> vector0 = new Vector<JSType>();
      closureReverseAbstractInterpreter0.getRestrictedWithoutNull(enumType0);
      jSTypeArray0[3] = (JSType) enumType0;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        codeGenerator0.addArrayList(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lp (type 83)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "P4[?97x);Ic{Dl\\Z";
      CodeGenerator.escapeToDoubleQuotedJsString("P4[?97x);Ic{DlZ");
      CodeGenerator.escapeToDoubleQuotedJsString("\"P4[?97x);Ic{Dl\\Z\"");
      CodeGenerator.getSimpleNumber("\"\"P4[?97x);Ic{Dl\\u007f\\u007f\\\\Z\"\"");
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      CodeGenerator.jsString("\"\"P4[?97x);Ic{Dl\\u007f\\u007f\\\\Z\"\"", charsetEncoder0);
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset1);
      int int0 = 102;
      StatementFusion statementFusion0 = new StatementFusion();
      Node node0 = null;
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CodeGenerator.Context.values();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      CodeGenerator.jsString("k", charsetEncoder0);
      // Undeclared exception!
      try { 
        CodeGenerator.Context.valueOf("k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.CodeGenerator.Context.k
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CodeGenerator.regexpEscape("(~Oza6Z0");
      CodeGenerator.escapeToDoubleQuotedJsString("q'i5>QeL Jn;2Q%?-");
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      CodeGenerator.jsString("(~Oza6Z0", charsetEncoder0);
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      CodeGenerator.jsString("/(~Oza6Z0/", charsetEncoder0);
      // Undeclared exception!
      try { 
        codeGenerator0.tagAsStrict();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharsetEncoder charsetEncoder0 = null;
      CodeGenerator.jsString("ds]5')%", (CharsetEncoder) null);
      CodeGenerator.strEscape("\"ds]5')%\"", 'D', "ds]5')%", "VwW%>&H@u/", "\"ds]5')%\"", (CharsetEncoder) null);
      String string0 = "2GI_^)r[wbqE&";
      CodeGenerator.regexpEscape("2GI_^)r[wbqE&");
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      CodeGenerator.escapeToDoubleQuotedJsString("2GI_^)r[wbqE&");
      Node node0 = Node.newNumber(1295.5449, 0, 0);
      // Undeclared exception!
      try { 
        codeGenerator0.addExpr(node0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = CodeGenerator.identifierEscape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CodeGenerator.getSimpleNumber("}");
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      Node node0 = Node.newString("}");
      Node node1 = new Node(3742, node0, node0, node0);
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=3742> (type 3742)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler((PrintStream) null);
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inferJSDocInfo0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      Node node0 = compiler1.jsRoot;
      codeGenerator0.addList((Node) null, false);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      CodeGenerator.strEscape("", 'h', "", "knTVI+{:C&00Jz'1R[", "knTVI+{:C&00Jz'1R[", charsetEncoder0);
      String string0 = CodeGenerator.jsString("knTVI+{:C&00Jz'1R[", charsetEncoder0);
      assertEquals("\"knTVI+{:C&00Jz'1R[\"", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CodeGenerator.regexpEscape("rk&<jxP{`aB");
      // Undeclared exception!
      try { 
        Charset.forName("/rk&<jxP{`aB/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /rk&<jxP{`aB/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CodeGenerator.isSimpleNumber("");
      CodeGenerator.Context.values();
      boolean boolean0 = CodeGenerator.isSimpleNumber("");
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      String string0 = CodeGenerator.jsString("com.google.javascript.rhino.JSDocInfo$1", charsetEncoder0);
      assertEquals("\"com.google.javascript.rhino.JSDocInfo$1\"", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "0F(%hAke.2N";
      CodeGenerator.getSimpleNumber("0F(%hAke.2N");
      CodeGenerator.identifierEscape("0F(%hAke.2N");
      // Undeclared exception!
      try { 
        Charset.forName("0F(%hAke.2N");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 0F(%hAke.2N
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      Node node0 = null;
      String string0 = "<7. kn4E=HxL*`o1,_";
      CodeGenerator.escapeToDoubleQuotedJsString("<7. kn4E=HxL*`o1,_");
      codeGenerator0.addAllSiblings((Node) null);
      charset0.aliases();
      // Undeclared exception!
      try { 
        codeGenerator0.add("<7. kn4E=HxL*`o1,_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CodeGenerator.escapeToDoubleQuotedJsString("'K+?&O.r ");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      CodeGenerator.strEscape(">uQD", '0', (String) null, "$7_[Ae\"Ck)g%", "\"'K+?&O.r \"", charsetEncoder0);
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = '<';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charset0.encode(charBuffer0);
      Node node0 = new Node(1909);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("JSC_INVALID_MARKER_USAGE");
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      CodeGenerator.regexpEscape("jA8Gk]!$:Oe", charsetEncoder0);
      Charset.defaultCharset();
      CodeGenerator.strEscape("$7ACX 2Gs", '&', "only arrays or objects can be accessed", "com.google.javascript.jscomp.ChainCalls$CallSite", "JSC_INVALID_MARKER_USAGE", charsetEncoder0);
      CodeGenerator.Context.values();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = Node.newString("", (-664), (-1613));
      Node node1 = new Node(39, node0, node0, node0, node0);
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
      // Undeclared exception!
      try { 
        codeGenerator0.addLeftExpr(node1, 42, codeGenerator_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "STATEMENT");
      CodeGenerator.isSimpleNumber("L'fI");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CodeGenerator.isSimpleNumber("L'fI");
      CodeGenerator.isSimpleNumber("L'fI");
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = Node.newString((-3159), "Z?+", (-3159), (-3159));
      Node node1 = new Node((-3159), node0, node0, 2, 13);
      // Undeclared exception!
      try { 
        codeGenerator0.add(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler((PrintStream) null);
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inferJSDocInfo0);
      Compiler compiler1 = new Compiler();
      Node node0 = compiler1.jsRoot;
      codeGenerator0.addList((Node) null, false);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      CodeGenerator.strEscape("", 'h', "", "knTVI+{:C&00Jz'1R[", "knTVI+{:C&00Jz'1R[", charsetEncoder0);
      CodeGenerator.jsString("knTVI+{:C&00Jz'1R[", charsetEncoder0);
      CodeGenerator.Context.values();
      // Undeclared exception!
      try { 
        codeGenerator0.addCaseBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      CodeGenerator.strEscape("zf</scriptyb9", 'G', "zf</scriptyb9", "zf</scriptyb9", "U;XJW;JTKt;z", charsetEncoder0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CodeGenerator.isSimpleNumber("dJmd");
      CodeGenerator.Context.values();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CodeGenerator.strEscape("z?+uwa)", 'G', "SETPROP_", "2~Ej", "", charsetEncoder0);
      // Undeclared exception!
      try { 
        CodeGenerator.Context.valueOf("/script");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.CodeGenerator.Context./script
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      String string0 = "P/:[L\\bg_Qv(>&\\~";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "P/:[L\bg_Qv(>&~", "P/:[L\bg_Qv(>&~");
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      compilerOptions0.setAliasTransformationHandler(compilerOptions_AliasTransformationHandler0);
      compilerOptions0.nameReferenceReportPath = "NoObject";
      boolean boolean0 = true;
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.STATEMENT;
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, false, codeGenerator_Context0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for block (type 125)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Compiler compiler0 = new Compiler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(296);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream1.printf("j2[049 69P0w@N:Y$", objectArray0);
      Compiler compiler1 = new Compiler(printStream0);
      printStream0.write((-1474));
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "j2[049 69P0w@N:Y$");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile1);
      compiler1.parse(jSSourceFile0);
      codeGenerator0.addArrayList((Node) null);
      // Undeclared exception!
      try { 
        codeGenerator0.addExpr((Node) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node[] nodeArray0 = new Node[8];
      Node node0 = Node.newString(" fN#Xqn:G", 102, 0);
      nodeArray0[0] = node0;
      Node node1 = new Node(8, node0, node0);
      nodeArray0[1] = node1;
      Compiler compiler0 = new Compiler();
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      CoalesceVariableNames coalesceVariableNames0 = new CoalesceVariableNames(compiler1, true);
      logger0.entering("Unexpected token type. Should be LABEL_NAME.", "Unexpected token type. Should be LABEL_NAME.");
      // Undeclared exception!
      try { 
        codeGenerator0.addAllSiblings(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CodeGenerator.identifierEscape("<!--kn4E=HxL*`o1,_");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      CodeGenerator.Context.values();
      CodeGenerator.identifierEscape("<!--kn4E=HxL*`o1,_");
      CodeGenerator.Context.values();
      CodeGenerator.isSimpleNumber("<!--kn4E=HxL*`o1,_");
      CodeGenerator.Context.values();
      CodeGenerator.Context.values();
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      CodeGenerator.strEscape("<!--kn4E=HxL*`o1,_", '.', "<!--kn4E=HxL*`o1,_", "Message initialized using unrecognized function. Please use goog.getMsg() instead.", "<!--kn4E=HxL*`o1,_", charsetEncoder0);
      String string0 = CodeGenerator.identifierEscape("jb,9MV2:5Yz]@SV<7hy");
      assertEquals("jb,9MV2:5Yz]@SV<7hy", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      compiler0.toSource(node0);
      compilerOptions0.setAliasTransformationHandler(compilerOptions_AliasTransformationHandler0);
      compilerOptions0.nameReferenceReportPath = "Expected a string; found: null";
      boolean boolean0 = true;
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.STATEMENT;
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, false, codeGenerator_Context0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for script (type 132)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      compiler0.toSource(node0);
      Charset charset0 = Charset.defaultCharset();
      charset0.newEncoder();
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for script (type 132)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(6);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 6
         // IFEQ 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PRESERVE_BLOCK");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CodeGenerator.getSimpleNumber("0");
      CodeGenerator.getSimpleNumber("PRESERVE_BLOCK");
      String string0 = null;
      // Undeclared exception!
      try { 
        CodeGenerator.identifierEscape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "debugger", "debugger");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      compiler0.toSource(node0);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for script (type 132)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      compiler0.toSource(node0);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(24);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 24
         // DIV 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType((-601));
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -601
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      compiler0.getErrors();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(11);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 11
         // BITAND 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(21);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 21
         // ADD 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(26);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for expr_result (type 130)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(30);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for expr_result (type 130)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(14);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 14
         // LT 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(64);
      node0.addChildrenToFront(node1);
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      compiler0.toSource(node0);
      compilerOptions0.setAliasTransformationHandler(compilerOptions_AliasTransformationHandler0);
      compilerOptions0.nameReferenceReportPath = "Expected a string; found: null";
      compilerOptions0.manageClosureDependencies = false;
      // Undeclared exception!
      try { 
        compiler0.compileModules((List<JSSourceFile>) null, arrayList0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(15);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 15
         // LE 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      node0.addChildrenToFront(node0);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      Node.newNumber(0.0);
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(9);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 9
         // BITOR 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(28);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for expr_result (type 130)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "B}e}{8I;.2FjG31H", "B}e}{8I;.2FjG31H");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(26);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(146);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 146
         // TO_DOUBLE 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(123);
      node0.addChildrenToFront(node1);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 123
         // RESERVED
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(13);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 13
         // NE 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(10);
      node0.addChildrenToFront(node1);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 10
         // BITXOR
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(138);
      node0.addChildrenToFront(node1);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 138
         // SET_REF_OP
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(29);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for expr_result (type 130)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(37, node0, node0, node0);
      node0.addChildrenToFront(node1);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for script (type 132)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(12);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 12
         // EQ 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      node0.setType(20);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 20
         // URSH 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(86);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 86
         // ASSIGN 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(23);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 23
         // MUL 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(67);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 67
         // DEL_REF 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      int int0 = 93;
      node0.setType(93);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 93
         // ASSIGN_ADD 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(49);
      node0.addChildrenToFront(node1);
      Node node2 = Node.newString("\r", (-3), 46);
      node0.addChildrenToFront(node2);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(2);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(8);
      node0.addChildrenToFront(node2);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 2
         // ENTERWITH
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(43);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(4, node0, node0, node0, node0);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(64);
      node0.addChildrenToFront(node2);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "S9ART_OF`EXPR", "S9ART_OF`EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(112);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(49);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(66);
      node0.addChildrenToFront(node2);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 66
         // SET_REF
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(31);
      compiler0.toSource(node0);
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.PRESERVE_BLOCK;
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, true, codeGenerator_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(18);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 18
         // LSH 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(121);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 121
         // FINALLY 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      node0.addChildrenToFront(node0);
      Node node1 = new Node(5);
      node0.addChildrenToFront(node1);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 5
         // GOTO
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "/Qr&gR9%rLJZ|8", "/Qr&gR9%rLJZ|8");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(122);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(54);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(64);
      node0.addChildrenToFront(node2);
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 54
         // GETVAR
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      String string0 = "START_OF_EXPR";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(38);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 1 [sourcename: java.lang.String@0000000478] [synthetic: 1] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(34, node0, node0, node0, node0);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(64);
      node0.addChildrenToFront(node2);
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      // Undeclared exception!
      compiler0.toSource(node0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "START_OF_EXPR";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(22);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 22
         // SUB 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(85);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Ab[\"n/CL", "Ab[\"n/CL");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      Node node1 = Node.newNumber(4593.614408917, (-4273), 5133);
      node0.addChildToBack(node1);
      node0.setType(29);
      compiler0.toSource(node0);
      // Undeclared exception!
      try { 
        CodeGenerator.Context.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.CodeGenerator.Context.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(39);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      String string0 = "START_OF_mEXPR";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_mEXPR", "START_OF_mEXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(129);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unexpected EXPR_VOID. Should be EXPR_RESULT.
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(31);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(64);
      node0.addChildrenToFront(node2);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(48);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(55);
      node0.addChildrenToFront(node2);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 55
         // SETVAR
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "START_OF_EXPR";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(40);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(107);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 107
         // IMPORT 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(29);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(69);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(70);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 70
         // DEFAULTNAMESPACE 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(25);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 25
         // MOD 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(83);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for expr_result (type 130)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(101);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 101
         // AND 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(41);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(64);
      node0.addChildrenToFront(node2);
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      compiler0.toSource(node0);
      compilerOptions0.setAliasTransformationHandler(compilerOptions_AliasTransformationHandler0);
      compilerOptions0.nameReferenceReportPath = "Expected a string; found: null";
      compilerOptions0.manageClosureDependencies = false;
      // Undeclared exception!
      try { 
        compiler0.compileModules((List<JSSourceFile>) null, arrayList0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "START_OF_EXPR";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      compiler0.prepareAst(node0);
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(19);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 19
         // RSH 1 [sourcename: java.lang.String@0000000483] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000483]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000483]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(4, node0, node0, node0, node0);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(56);
      node0.addChildrenToFront(node2);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 56
         // CATCH_SCOPE
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(49);
      Node node2 = new Node(17);
      node0.addChildrenToFront(node2);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 17
         // GE
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(4, node0, node0, node0, node0);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(45);
      node0.addChildrenToFront(node2);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 45
         // SHEQ
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "STRT_OFEXPR", "STRT_OFEXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(72);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 72
         // ESCXMLTEXT 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME STRT_OFEXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("]<START_OF_EXhR", "]<START_OF_EXhR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(69);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(35);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Bad GETELEM: expected 2 children but got 1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(95);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 95
         // ASSIGN_MUL 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(81);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 81
         // LC 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(60);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(64);
      node0.addChildrenToFront(node2);
      CompilerOptions compilerOptions0 = compiler0.options;
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 60
         // ENUM_ID
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(1073741823);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(52);
      node0.addChildrenToFront(node2);
      List<JSSourceFile> list0 = null;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.getAliasTransformationHandler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 52
         // INSTANCEOF
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "START_OF_EXPR";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      node0.setType(62);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 62
         // RETURN_RESULT 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "\\r";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      Node node1 = new Node(42);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(64);
      CompilerOptions compilerOptions0 = compiler0.options;
      compiler0.toSource(node0);
      compilerOptions0.nameReferenceReportPath = "Expected a string; found: null";
      compilerOptions0.manageClosureDependencies = false;
      CodeGenerator.Context.values();
      // Undeclared exception!
      try { 
        CodeGenerator.isSimpleNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(127);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 127
         // TARGET 1 [sourcename: java.lang.String@0000000478] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000478]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000478]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      compiler0.reportCodeChange();
      node0.setType(36);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 36
         // SETELEM 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\r", "\r");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nylP");
      node0.setLineno(8448);
      Node node1 = new Node(49);
      node0.addChildrenToFront(node1);
      compiler0.startPass("}u|4-br");
      Node node2 = new Node(39);
      node0.addChildrenToFront(node2);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(57);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 57
         // ENUM_INIT_KEYS 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      Node node1 = Node.newString("+", 35, 174);
      node0.addChildrenToFront(node1);
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(147);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "ST)RT_OF_$PR", "ST)RT_OF_$PR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(103);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      Node node1 = Node.newString("+", 35, 174);
      Node.newNumber((double) 19);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.addChildrenToFront(node1);
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(48);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 48
         // BINDNAME 1 [sourcename: java.lang.String@0000000479] [synthetic: 1]
         //     STRING + 35
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000479]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000479]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(91);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 91
         // ASSIGN_RSH 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "START_OF_EXPR", "START_OF_EXPR");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(89);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 89
         // ASSIGN_BITAND 1 [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //     EXPR_RESULT 1 [sourcename: java.lang.String@0000000477]
         //         NAME START_OF_EXPR 1 [sourcename: java.lang.String@0000000477]
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "debugger", "debugger");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      node0.setType(49);
      compiler0.toSource(node0);
      CodeGenerator.Context.values();
      CodeGenerator.getSimpleNumber("throw debugger;");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
  }
}
