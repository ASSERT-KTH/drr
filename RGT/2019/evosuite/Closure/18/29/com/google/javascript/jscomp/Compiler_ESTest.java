/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 07:21:03 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.LinkedListMultimap;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CallGraph;
import com.google.javascript.jscomp.CheckDebuggerStatement;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckRequiresForConstructors;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.ClosureOptimizePrimitives;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.CombinedCompilerPass;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CompilerPass;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.CustomPassExecutionTime;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ErrorFormat;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FlowSensitiveInlineVariables;
import com.google.javascript.jscomp.FunctionRewriter;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.MoveFunctionDeclarations;
import com.google.javascript.jscomp.NameAnonymousFunctions;
import com.google.javascript.jscomp.NameReferenceGraph;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PassFactory;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.PrepareAst;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceInformationAnnotator;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.net.URI;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.function.Supplier;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.logging.MockFileHandler;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getExternsForTesting();
      // Undeclared exception!
      try { 
        compiler0.rebuildInputsFromModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '`';
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("N3^E!z,xp~pUtvB]2P", "com.google.javascript.jscomp.DefinitionsRemover$FunctionArgumentDefinition");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("N3^E!z,xp~pUtvB]2P", "", 54, longArray0, sQLInvalidAuthorizationSpecException0);
      SQLException sQLException0 = new SQLException(batchUpdateException0);
      batchUpdateException0.getLargeUpdateCounts();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.google.javascript.jscomp.DefinitionsRemover$FunctionArgumentDefinition", "sqNzgFH6)", sQLException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        compiler0.throwInternalError("stripCode", batchUpdateException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      URI uRI0 = MockURI.aFileURI;
      String string0 = "g'#re2,EjvV";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JSModule jSModule0 = new JSModule((String) null);
      // Undeclared exception!
      try { 
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root module has no inputs
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.reset();
      compiler_CodeBuilder0.reset();
      compiler_CodeBuilder0.getLength();
      compiler_CodeBuilder0.reset();
      compiler_CodeBuilder0.reset();
      compiler_CodeBuilder0.reset();
      compiler_CodeBuilder0.reset();
      String string0 = "@xF~I}^8-v1inUiv\\w+";
      compiler_CodeBuilder0.endsWith("@xF~I}^8-v1inUivw+");
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parseInputs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

////  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("OBJECTLIT", sourceFile_Generator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
      TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      double double0 = (-2086.5920943);
      Node node0 = Node.newNumber(double0);
      compiler0.updateGlobalVarReferences(treeMap0, node0);
      compiler0.processAMDAndCommonJSModules();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "com.google.javascript.jscomp.Compiler$7";
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.Compiler$7");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "com.google.javascript.jscomp.Compiler$7";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "com.google.javascript.jscomp.Compiler$7";
      objectArray0[3] = (Object) "com.google.javascript.jscomp.Compiler$7";
      objectArray0[4] = (Object) "com.google.javascript.jscomp.Compiler$7";
      locale0.getExtensionKeys();
      objectArray0[5] = (Object) locale0;
      mockPrintStream0.println("com.google.javascript.jscomp.Compiler$7");
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "com.google.javascript.jscomp.Compiler$7", objectArray0);
      Locale.getISOCountries();
      Compiler compiler0 = new Compiler(printStream0);
      compiler0.getAstDotGraph();
      // Undeclared exception!
      try { 
        compiler0.getSynthesizedExternsInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initOptions(compilerOptions0);
      JSModule[] jSModuleArray0 = new JSModule[1];
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      PrepareAst.PrepareAnnotations prepareAst_PrepareAnnotations0 = new PrepareAst.PrepareAnnotations(compiler0);
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, prepareAst_PrepareAnnotations0);
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(sourceFile_Generator0).getCode();
      SourceFile sourceFile0 = SourceFile.fromGenerator("// Input %num%", sourceFile_Generator0);
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      // Undeclared exception!
      try { 
        compilerInput0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initOptions(compilerOptions0);
      JSModule[] jSModuleArray0 = new JSModule[1];
      // Undeclared exception!
      try { 
        compiler0.toSourceArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

////  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      Logger logger0 = Logger.getAnonymousLogger();
      lightweightMessageFormatter0.setColorize(true);
      Logger logger1 = logger0.getParent();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      MockFile mockFile0 = new MockFile((File) null, "com.google.javascript.jscomp.Compiler$1");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      JSSourceFile.fromCode("com.google.javascript.jscomp.Compiler$1", "com.google.javascript.jscomp.InstrumentFunctions$RemoveCallback");
      arrayList0.add((SourceFile) jSSourceFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.gatherCssNames = true;
      compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) stack0, compilerOptions0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger1);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      String string0 = "/zoJ}`27w?9!3Irr";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(supplier0).get();
      compiler0.getReverseAbstractInterpreter();
      logger1.info(supplier0);
      String string1 = "zMKyacK {V+QeZ\\n";
      compiler1.newExternInput(string1);
      compiler1.getErrorManager();
      compiler0.getTypeValidator();
  }

////  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      Logger logger0 = Logger.getAnonymousLogger();
      Logger logger1 = logger0.getParent();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      MockFile mockFile0 = new MockFile((File) null, "com.google.javascript.jscomp.Compiler$1");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      arrayList0.add((SourceFile) jSSourceFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.gatherCssNames = true;
      compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) stack0, compilerOptions0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger1);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(compilerOptions0.renamePrefixNamespace).when(supplier0).get();
      logger1.info(supplier0);
      String string0 = "zMKyacK {V+QeZ\\n";
      compiler0.newExternInput(string0);
      compiler0.getErrorManager();
      compiler0.getTypeValidator();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CompilerOptions.TweakProcessing.values();
      String string0 = "o2nUiu*";
      MockPrintStream mockPrintStream0 = new MockPrintStream("o2nUiu*");
      mockPrintStream0.print(605.344);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseTestCode(string0);
      int int0 = (-676);
      int int1 = 0;
      mockPrintStream0.println(int1);
      mockPrintStream0.println(int0);
      // Undeclared exception!
      try { 
        compiler0.initInputsByIdMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.getDegenerateModuleGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSModuleGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(")}", ")}");
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      // Undeclared exception!
      try { 
        compiler0.addIncrementalSourceAst(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Compiler.getReleaseVersion();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "Unversioned directory");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CompilerOptions compilerOptions0 = null;
      loggerErrorManager0.setTypedPercent(2899.0);
      // Undeclared exception!
      try { 
        compiler0.init((JSSourceFile[]) null, (JSSourceFile[]) null, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("B%SzlHptz>qVpf");
      Compiler.CodeBuilder compiler_CodeBuilder2 = compiler_CodeBuilder1.append("RJ$");
      assertSame(compiler_CodeBuilder2, compiler_CodeBuilder1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("'%s' : in scope %s:%d\n");
      compiler_CodeBuilder1.getLength();
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      assertFalse(compilerOptions0.checkTypes);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.reset();
      // Undeclared exception!
      try { 
        compiler_CodeBuilder0.append((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler$CodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CompilerOptions.TweakProcessing.values();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String string0 = null;
      compiler_CodeBuilder0.endsWith("JSC_TEMPLATE_TYPE_EXPECTED");
      compiler_CodeBuilder0.reset();
      compiler_CodeBuilder0.endsWith("DA_\"%mU6C");
      compiler_CodeBuilder0.reset();
      // Undeclared exception!
      try { 
        compiler_CodeBuilder0.append((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler$CodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[3];
      diagnosticTypeArray0[0] = compiler0.MOTION_ITERATIONS_ERROR;
      diagnosticTypeArray0[1] = compiler0.OPTIMIZE_LOOP_ERROR;
      DiagnosticType diagnosticType0 = TypedScopeCreator.UNKNOWN_LENDS;
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      DiagnosticType.make("H]2'#8J^v3", checkLevel0, "f:zw6dHO^");
      diagnosticTypeArray0[2] = diagnosticType0;
      DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup("H]2'#8J^v3", diagnosticTypeArray0);
      DiagnosticGroup diagnosticGroup1 = new DiagnosticGroup("H]2'#8J^v3", diagnosticTypeArray0);
      CheckLevel checkLevel1 = CheckLevel.WARNING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "H]2'#8J^v3";
      stringArray0[1] = "f:zw6dHO^";
      JSError jSError0 = JSError.make("JSC_UNKNOWN_LENDS", 1470, 2862, checkLevel1, diagnosticTypeArray0[0], stringArray0);
      diagnosticGroup0.matches(jSError0);
      diagnosticGroup0.isSubGroup(diagnosticGroup1);
      DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
      compiler0.setHasRegExpGlobalReferences(false);
      PassConfig passConfig0 = compiler0.getPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertNotNull(passConfig0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = null;
      // Undeclared exception!
      try { 
        compiler0.ensureLibraryInjected((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getVariableMap();
      // Undeclared exception!
      try { 
        compiler0.getTypeRegistry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1332);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Compiler.getReleaseDate();
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "2019/06/02 00:13", (-1163), (-2845));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "ehj`-xC&j 0'7";
      compiler0.addToDebugLog("ehj`-xC&j 0'7");
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("%K=ixC$");
      compiler_CodeBuilder1.getColumnIndex();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.reset();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("");
      int int0 = compiler_CodeBuilder0.getLength();
      compiler_CodeBuilder1.append("");
      int int1 = compiler_CodeBuilder1.getColumnIndex();
      assertTrue(int1 == int0);
      
      Compiler.CodeBuilder compiler_CodeBuilder2 = new Compiler.CodeBuilder();
      Compiler compiler0 = new Compiler((PrintStream) null);
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
      Logger logger0 = Logger.getGlobal();
      Logger logger1 = logger0.getParent();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(verboseMessageFormatter0, logger1);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      Compiler compiler2 = new Compiler(loggerErrorManager0);
      PassConfig passConfig0 = compiler2.getPassConfig();
      assertNotNull(passConfig0);
      
      compiler1.setPassConfig(passConfig0);
      assertEquals(0.0, compiler2.getProgress(), 0.01);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getWarnings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SQLDataException sQLDataException0 = new SQLDataException("");
      // Undeclared exception!
      try { 
        compiler0.throwInternalError("", sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Logger logger0 = Logger.getLogger("OWX^ixF})}");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.newTracer("OWX^ixF})}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile("V3");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
      try { 
        compiler0.normalize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("IYg5=m!(Q<`");
      Locale locale0 = new Locale("IYg5=m!(Q<`", "IYg5=m!(Q<`", "IYg5=m!(Q<`");
      Locale locale1 = Locale.JAPAN;
      locale0.getDisplayName(locale1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "IYg5=m!(Q<`";
      mockPrintStream0.println(0.0F);
      objectArray0[2] = (Object) "IYg5=m!(Q<`";
      mockPrintStream0.println((-1051));
      mockPrintStream0.println(false);
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintStream0;
      locale0.getExtensionKeys();
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "IYg5=m!(Q<`", objectArray0);
      Compiler compiler0 = new Compiler(printStream0);
      // Undeclared exception!
      try { 
        compiler0.getResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n parent:  ");
      Locale locale0 = new Locale("\n parent:  ", "rE:");
      PrintStream printStream0 = mockPrintStream0.format(locale0, "\n parent:  ", (Object[]) null);
      Compiler compiler0 = new Compiler(printStream0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initOptions(compilerOptions0);
      assertFalse(compilerOptions0.checkTypes);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, (Logger) null);
      loggerErrorManager0.getWarnings();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      String string0 = "co4RXZ@b#IgsB!J*V";
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("co4RXZ@b#IgsB!J*V", "co4RXZ@b#IgsB!J*V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("u#Rj,ac!h0.~Z6I");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      double double0 = (-811.1986604);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)59;
      mockPrintStream0.write(byteArray0, (int) (byte)0, 112);
      mockPrintStream0.println("BY_WHOLE");
      // Undeclared exception!
      try { 
        compiler0.recordFunctionInformation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CompilerOptions.TweakProcessing.values();
      String string0 = "o2nUiu*";
      MockPrintStream mockPrintStream0 = new MockPrintStream("o2nUiu*");
      mockPrintStream0.print(605.344);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseTestCode("o2nUiu*");
      int int0 = (-676);
      int int1 = 0;
      mockPrintStream0.println(int1);
      mockPrintStream0.println(int0);
      // Undeclared exception!
      try { 
        compiler0.initInputsByIdMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Callable<RenameLabels> callable0 = (Callable<RenameLabels>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      RenameLabels renameLabels0 = Compiler.runCallableWithLargeStack(callable0);
      assertNull(renameLabels0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSourceArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getInputsForTesting();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Callable<NameAnonymousFunctions> callable0 = (Callable<NameAnonymousFunctions>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallableWithLargeStack(callable0);
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.getExternsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.getFunctionalInformationMap();
      CompilerOptions.LanguageMode[] compilerOptions_LanguageModeArray0 = CompilerOptions.LanguageMode.values();
      assertEquals(3, compilerOptions_LanguageModeArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "jTdi2-FZJkIDcjqt";
      MockFile mockFile0 = new MockFile("jTdi2-FZJkIDcjqt", "jTdi2-FZJkIDcjqt");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseTestCode("jTdi2-FZJkIDcjqt");
      compiler0.getFunctionalInformationMap();
      JSSourceFile[] jSSourceFileArray0 = null;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      compiler0.getSourceRegion("5'", (-2181));
      LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(linkedList0);
      // Undeclared exception!
      try { 
        CompilerOptions.DevMode.valueOf(";|/]DZ^7hl/<=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.CompilerOptions.DevMode.;|/]DZ^7hl/<=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "";
      compiler0.addToDebugLog("");
      compiler0.disableThreads();
      // Undeclared exception!
      try { 
        compiler0.getErrorCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("pEO'54W{P");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      mockPrintStream0.print((-4398046511104L));
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        compiler0.endPass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tracer should not be null at the end of a pass.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TypedScopeCreator typedScopeCreator0 = null;
      try {
        typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      Logger logger0 = Logger.getLogger("%num%");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      CheckDebuggerStatement checkDebuggerStatement0 = new CheckDebuggerStatement(compiler1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, checkDebuggerStatement0);
      Compiler compiler2 = nodeTraversal0.getCompiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CssRenamingMap cssRenamingMap0 = compilerOptions0.cssRenamingMap;
      // Undeclared exception!
      try { 
        compiler2.setCssRenamingMap((CssRenamingMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
      // Undeclared exception!
      try { 
        compiler0.getInputsById();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      compiler0.setState(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale locale0 = new Locale("IYg5=m!(Q<`", "IYg5=m!(Q<`", "IYg5=m!(Q<`");
      Locale locale1 = Locale.JAPAN;
      locale0.getDisplayName(locale1);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "IYg5=m!(Q<`";
      objectArray0[2] = (Object) "IYg5=m!(Q<`";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) locale0;
      locale0.getExtensionKeys();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getLineIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("I&z;=*oG|vcr");
      compiler_CodeBuilder1.getLength();
      compiler_CodeBuilder1.getLineIndex();
      Compiler compiler0 = new Compiler();
      RenameLabels.DefaultNameSupplier renameLabels_DefaultNameSupplier0 = new RenameLabels.DefaultNameSupplier();
      MakeDeclaredNamesUnique.InlineRenamer makeDeclaredNamesUnique_InlineRenamer0 = new MakeDeclaredNamesUnique.InlineRenamer(renameLabels_DefaultNameSupplier0, "I&z;=*oG|vcr", false);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique(makeDeclaredNamesUnique_InlineRenamer0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      String[] stringArray0 = new String[5];
      stringArray0[1] = null;
      stringArray0[2] = "arguments";
      stringArray0[3] = "~'M?3vFL?C";
      stringArray0[4] = null;
      JSError jSError0 = nodeTraversal0.makeError(node0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
      // Undeclared exception!
      try { 
        compiler0.getErrorLevel(jSError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append(",*dH?<g:e=j)aY#&?");
      compiler_CodeBuilder1.toString();
      String string0 = Compiler.createFillFileName("<v3M2D?S<'P97P]");
      assertEquals("[<v3M2D?S<'P97P]]", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      compiler0.getErrorManager();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR = referenceCollectingCallback_Behavior0;
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("com.google.common.collect.AbstractMultimap$WrappedList");
      compiler_CodeBuilder1.toString();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      compiler_CodeBuilder0.getLength();
      compiler_CodeBuilder1.append("");
      Node node0 = Node.newString(1601076620, "com.google.common.collect.AbstractMultimap$WrappedList", 1601076620, 1910);
      ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.tryOptimizeBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeRemoveDeadCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.ensureDefaultPassConfig();
      String string0 = "_vU.:A \"bbHbLXc,L0[";
      compiler0.addToDebugLog("_vU.:A \"bbHbLXc,L0[");
      SourceFile sourceFile0 = null;
      CompilerOptions compilerOptions0 = compiler0.options;
      // Undeclared exception!
      try { 
        compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      // Undeclared exception!
      try { 
        compiler0.getSourceLine("", 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getUniqueNameIdSupplier();
      // Undeclared exception!
      try { 
        compiler0.getCssRenamingMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Level level0 = Level.SEVERE;
      level0.getLocalizedName();
      Level.parse("SEVERE");
      level0.getLocalizedName();
      Compiler.setLoggingLevel(level0);
      String string0 = null;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      int int0 = 0;
      // Undeclared exception!
      try { 
        Node.newString(4590, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.reportCodeChange();
      // Undeclared exception!
      try { 
        compiler0.check();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      compiler0.getOptions();
      // Undeclared exception!
      try { 
        compiler0.isTypeCheckingEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CssRenamingMap cssRenamingMap0 = compilerOptions0.cssRenamingMap;
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      compilerOptions0.processObjectPropertyString = false;
      JSError jSError0 = JSError.make((String) null, 8239, 8239, compilerOptions0.checkProvides, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      jSError0.format(checkLevel0, lightweightMessageFormatter0);
      jSError0.toString();
      jSError0.getNodeLength();
      compiler0.report(jSError0);
      // Undeclared exception!
      try { 
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Callable<CheckRequiresForConstructors> callable0 = (Callable<CheckRequiresForConstructors>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CheckRequiresForConstructors checkRequiresForConstructors0 = Compiler.runCallable(callable0, false, false);
      assertNull(checkRequiresForConstructors0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ErrorFormat errorFormat0 = ErrorFormat.LEGACY;
      Compiler compiler0 = new Compiler((PrintStream) null);
      MessageFormatter messageFormatter0 = errorFormat0.toFormatter(compiler0, false);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(messageFormatter0, (PrintStream) null);
      printStreamErrorManager0.getWarnings();
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      printStreamErrorManager0.getWarnings();
      compiler1.getTopScope();
      // Undeclared exception!
      try { 
        compiler0.getSynthesizedExternsInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Logger logger0 = Logger.getLogger("Yn[$@;3<OF\u0004H");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      loggerErrorManager0.generateReport();
      loggerErrorManager0.printSummary();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      compiler0.defaultCodingConvention = (CodingConvention) jqueryCodingConvention0;
      LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      compilerOptions0.setCheckProvides(checkLevel0);
      // Undeclared exception!
      try { 
        compiler0.initModules((List<SourceFile>) null, (List<JSModule>) linkedList0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.setProgress(1519.0);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.processDefines();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DefaultPassConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.removeTryCatchFinally();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = compiler0.recentChange;
      codeChangeHandler_RecentChange0.reset();
      codeChangeHandler_RecentChange0.reset();
      compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
      // Undeclared exception!
      try { 
        compiler0.removeTryCatchFinally();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Logger logger0 = Logger.getLogger("%s(%s, '%s', %s);");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter((SourceExcerptProvider) null);
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(verboseMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      // Undeclared exception!
      try { 
        defaultPassConfig0.makeTypeCheck(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MessageFormatter messageFormatter0 = null;
      String string0 = "";
      String string1 = "6w'#0:F#Q";
      MockFile mockFile0 = new MockFile(";L\fAq%iWg|26EvB;z", "6w'#0:F#Q");
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      compiler0.getOptions();
      // Undeclared exception!
      try { 
        compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) null, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureOptimizePrimitives closureOptimizePrimitives0 = new ClosureOptimizePrimitives(compiler0);
      Callable<ClosureOptimizePrimitives> callable0 = (Callable<ClosureOptimizePrimitives>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(closureOptimizePrimitives0).when(callable0).call();
      Compiler.runCallable(callable0, false, true);
      // Undeclared exception!
      try { 
        compiler0.getInputsById();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Compiler compiler0 = new Compiler();
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("", false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      Node node0 = Node.newNumber(0.0, (-1907), (-1907));
      compiler1.toSource(node0);
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Compiler compiler2 = new Compiler();
      RenameLabels renameLabels0 = new RenameLabels(compiler2);
      compiler2.resetUniqueNameId();
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler2, "'vEsgU,]-7");
      processCommonJSModules0.getModule();
      Tracer tracer0 = new Tracer("");
      Tracer.getThreadTrace();
      // Undeclared exception!
      try { 
        compiler2.stopTracer(tracer0, "}m]t8%$ (wMD]b]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Conflicting externs name: ";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "]N/eBF8z<o", "g'#re2,EjvV");
      Node node1 = Node.newString("Conflicting externs name: ", (-2117267724), 37);
      Node node2 = Node.newString(3, "]N/eBF8z<o", 53, 4);
      Node node3 = new Node(113, node0, node1, node2, (-184), (-2408));
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference(node3, node1);
      nameReferenceGraph_Reference0.getModule();
      // Undeclared exception!
      try { 
        compiler0.toSourceArray((JSModule) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

////  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "";
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromInputStream(string0, (InputStream) mockFileInputStream0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      compiler0.replaceScript(jsAst0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T[*0Pcuuxc");
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.getLength();
      compiler_CodeBuilder0.append("6;XKs~*");
      compiler_CodeBuilder0.endsWith("Recording function information");
      Compiler compiler0 = new Compiler();
      DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(compiler0.OPTIMIZE_LOOP_ERROR);
      DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "u4N_(%Tq=4r");
      processCommonJSModules0.getModule();
      // Undeclared exception!
      try { 
        compiler0.toSource((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("resumeGenerator() not implemented");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.hasRegExpGlobalReferences();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "invalid decl type: ";
      objectArray0[1] = (Object) compiler0;
      objectArray0[2] = (Object) "resumeGenerator() not implemented";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "invalid decl type: ";
      objectArray0[5] = (Object) "resumeGenerator() not implemented";
      objectArray0[6] = (Object) compiler0;
      mockPrintStream0.printf("invalid decl type: ", objectArray0);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "g'#re2,EjvV", true);
      processCommonJSModules0.getModule();
      // Undeclared exception!
      try { 
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.setProgress(1519.0);
      double double0 = compiler0.getProgress();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ErrorManager errorManager0 = compiler0.getErrorManager();
      assertNotNull(errorManager0);
      
      compiler0.getRoot();
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("com.google.javascript.jscomp.DefaultPassConfig$26");
      compiler0.getTypedScopeCreator();
      // Undeclared exception!
      try { 
        compiler0.newExternInput("Parsing: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MockFile mockFile0 = new MockFile("<z}");
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      compiler0.getOptions();
      compiler0.getModuleGraph();
      // Undeclared exception!
      try { 
        compiler0.compile(sourceFile0, sourceFile0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("aO_][%;yqxIju^");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "xterm-256color";
      objectArray0[1] = (Object) "aO_][%;yqxIju^";
      Locale locale1 = Locale.GERMAN;
      locale0.getDisplayCountry(locale1);
      objectArray0[2] = (Object) "aO_][%;yqxIju^";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "xterm-256color";
      objectArray0[5] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "xterm-256color", objectArray0);
      Compiler compiler0 = new Compiler(printStream0);
      compiler0.getSourceMap();
      // Undeclared exception!
      try { 
        compiler0.getSourceFileByName("rI)Bq^(DEe6JZ]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

////  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      Logger logger0 = Logger.getAnonymousLogger();
      lightweightMessageFormatter0.setColorize(true);
      Logger logger1 = logger0.getParent();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      SourceFile sourceFile0 = new SourceFile("com.google.javascript.jscomp.Compiler$1");
      arrayList0.add(sourceFile0);
      MockFile mockFile0 = new MockFile((File) null, "com.google.javascript.jscomp.Compiler$1");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      arrayList0.add((SourceFile) jSSourceFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.gatherCssNames = true;
      Result result0 = compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) stack0, compilerOptions0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger1);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(result0.debugLog).when(supplier0).get();
      logger1.info(supplier0);
      String string0 = "com.google.protobuf.DescriptorProtos$ServiceOptions$Builder";
      compiler1.getSourceFileByName(string0);
      String string1 = "zMKyacK {V+QeZ\\n";
      compiler1.newExternInput(string1);
      compiler1.getErrorManager();
      compiler0.getTypeValidator();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile.fromGenerator("OBJECTLIT", sourceFile_Generator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean0 = compiler0.precheck();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(boolean0);
  }

////  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      Logger logger0 = Logger.getAnonymousLogger();
      lightweightMessageFormatter0.setColorize(true);
      Logger logger1 = logger0.getParent();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      MockFile mockFile0 = new MockFile((File) null, "com.google.javascript.jscomp.Compiler$1");
      mockFile0.getCanonicalFile();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      arrayList0.add((SourceFile) jSSourceFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.gatherCssNames = true;
      compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) stack0, compilerOptions0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger1);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      String string0 = "7Hg";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(supplier0).get();
      logger1.info(supplier0);
      String string1 = "zMKyacK {V+QeZ\\n";
      compiler0.parseTestCode(compilerOptions0.inputDelimiter);
      compiler1.newExternInput(string1);
      compiler1.getErrorManager();
      compiler0.getTypeValidator();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      String string0 = "g'#re2,EjvV";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      String string1 = null;
      JSModule jSModule0 = new JSModule((String) null);
      // Undeclared exception!
      try { 
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root module has no inputs
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

////  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      compiler0.getVariableMap();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("OBJECTLIT", sourceFile_Generator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
      compiler0.computeCFG();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.languageMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CompilerOptions.TweakProcessing.values();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o2nUiu*");
      mockPrintStream0.print(605.344);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseTestCode("o2nUiu*");
      mockPrintStream0.print(3471L);
      mockPrintStream0.println(0);
      compiler0.acceptEcmaScript5();
      mockPrintStream0.println((-676));
      // Undeclared exception!
      try { 
        compiler0.initInputsByIdMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("OBJECTLIT", sourceFile_Generator0);
      SourceFile.Generator sourceFile_Generator1 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile sourceFile0 = SourceFile.fromGenerator("`", sourceFile_Generator1);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
      CompilerOptions.TweakProcessing.values();
      JsAst jsAst0 = new JsAst(sourceFile0);
      compiler0.addNewSourceAst(jsAst0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("p");
      String string0 = Compiler.SINGLETON_MODULE_NAME;
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "[singleton]");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, printStream0);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("[(?");
      // Undeclared exception!
      try { 
        compiler1.toSource(compiler_CodeBuilder1, 175, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("YBJuiTLIT", sourceFile_Generator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
      CompilerOptions.TweakProcessing.values();
      compiler0.getDegenerateModuleGraph();
      boolean boolean0 = false;
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(boolean0);
      String string0 = ">*WjiN/=>)";
      Node node0 = compiler0.parseTestCode(string0);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      compiler0.areNodesEqualForInlining(node1, node0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("OBJECTLIT", sourceFile_Generator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
      double double0 = 0.0;
      compiler0.setProgress(double0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initOptions(compilerOptions0);
      JSModule[] jSModuleArray0 = new JSModule[1];
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      PrepareAst.PrepareAnnotations prepareAst_PrepareAnnotations0 = new PrepareAst.PrepareAnnotations(compiler0);
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, prepareAst_PrepareAnnotations0);
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("// Input %num%").when(sourceFile_Generator0).getCode();
      SourceFile sourceFile0 = SourceFile.fromGenerator("// Input %num%", sourceFile_Generator0);
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      compilerInput0.getAstRoot(compiler0);
      loggerErrorManager0.printSummary();
      JSSourceFile.fromFile("com.google.javascript.jscomp.DefinitionsRemover$FunctionArgumentDefinition");
      JSModule[] jSModuleArray1 = new JSModule[5];
      compiler0.getSourceLine((String) null, 659);
      // Undeclared exception!
      try { 
        compiler0.getDegenerateModuleGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSModuleGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initOptions(compilerOptions0);
      JSModule[] jSModuleArray0 = new JSModule[1];
      PrepareAst.PrepareAnnotations prepareAst_PrepareAnnotations0 = new PrepareAst.PrepareAnnotations(compiler0);
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, prepareAst_PrepareAnnotations0);
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("// Input %num%").when(sourceFile_Generator0).getCode();
      SourceFile sourceFile0 = SourceFile.fromGenerator("// Input %num%", sourceFile_Generator0);
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.DefinitionsRemover$FunctionArgumentDefinition");
      JSModule[] jSModuleArray1 = new JSModule[5];
      compilerInput0.getModule();
      jSModuleArray1[2] = null;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference(node0, node0);
      nameReferenceGraph_Reference0.getModule();
      jSModuleArray1[3] = null;
      // Undeclared exception!
      try { 
        compiler0.compile(jSSourceFile0, jSModuleArray1, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler((PrintStream) null);
      // Undeclared exception!
      try { 
        compiler0.getWarningCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("OBJECTLIT", sourceFile_Generator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
      CompilerOptions.TweakProcessing.values();
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      compiler0.replaceScript(jsAst0);
      compiler0.getParserConfig();
      compiler0.optimize();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      compiler0.ensureDefaultPassConfig();
      // Undeclared exception!
      try { 
        compiler0.getInputsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CompilerOptions.TweakProcessing.values();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o2nUiu*");
      mockPrintStream0.print(605.344);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseTestCode("o2nUiu*");
      compiler0.getUniqueNameIdSupplier();
      compiler0.getSourceFileByName("o2nUiu*");
      mockPrintStream0.println(0);
      mockPrintStream0.println((-676));
      // Undeclared exception!
      try { 
        compiler0.initInputsByIdMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

////  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("OBJECTLIT", sourceFile_Generator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      compilerOptions0.brokenClosureRequiresLevel = checkLevel0;
      compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
      TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      double double0 = (-2086.5920943);
      compiler0.getPropertyMap();
      Node node0 = Node.newNumber(double0);
      Node node1 = null;
      node0.replaceChild(node1, node1);
      compiler0.updateGlobalVarReferences(treeMap0, node0);
      compiler0.processAMDAndCommonJSModules();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String string0 = "[XJW}6!>+ktc5<qI";
      compiler_CodeBuilder0.append("[XJW}6!>+ktc5<qI");
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("[XJW}6!>+ktc5<qI");
      compiler_CodeBuilder1.endsWith("[XJW}6!>+ktc5<qI");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2686);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "[XJW}6!>+ktc5<qI");
      Compiler compiler0 = new Compiler(printStream0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node0 = Node.newString(2686, "9.?<`&cS?/i5aO}lJDb");
      mockPrintStream0.print((float) 47);
      Node node1 = new Node(2686, node0, node0, node0);
      String string1 = "Duplicate input %s";
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("com.google.protobuf.Descriptors$EnumValueDescriptor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }
}
