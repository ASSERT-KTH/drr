/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 08:11:15 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AliasStrings;
import com.google.javascript.jscomp.ChainCalls;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.CheckGlobalNames;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckSideEffects;
import com.google.javascript.jscomp.CheckUnreachableCode;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.CodingConventions;
import com.google.javascript.jscomp.CombinedCompilerPass;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.Denormalize;
import com.google.javascript.jscomp.DependencyOptions;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ErrorFormat;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.ExternExportsPass;
import com.google.javascript.jscomp.FieldCleanupPass;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.FunctionNames;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.GroupVariableDeclarations;
import com.google.javascript.jscomp.InferJSDocInfo;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LineNumberCheck;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MarkNoSideEffectCalls;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.PropertyRenamingPolicy;
import com.google.javascript.jscomp.RecordFunctionInformation;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.RemoveUnusedPrototypeProperties;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VariableRenamingPolicy;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.protobuf.ByteString;
import com.google.protobuf.UnknownFieldSet;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.sql.SQLClientInfoException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTransactionRollbackException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.function.Supplier;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      Callable<LineNumberCheck> callable0 = (Callable<LineNumberCheck>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(lineNumberCheck0).when(callable0).call();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initOptions(compilerOptions0);
      Compiler.runCallableWithLargeStack(callable0);
      compiler0.getTypeRegistry();
      ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR = null;
      compiler0.getInputsForTesting();
      compiler0.getTypeRegistry();
      compiler0.getReverseAbstractInterpreter();
      compiler0.getParserConfig();
      compiler0.isInliningForbidden();
      // Undeclared exception!
      try { 
        compiler0.check();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<Xt:' Tk@I%y!?#)[");
      Compiler.setLoggingLevel((Level) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false, "<Xt:' Tk@I%y!?#)[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompilerOptions.DevMode.values();
      MockFile mockFile0 = new MockFile("%name%");
      Compiler compiler0 = new Compiler();
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      Denormalize denormalize0 = new Denormalize(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, denormalize0);
      Compiler compiler2 = nodeTraversal0.getCompiler();
      compiler2.getSourceLine((String) null, 1992);
      assertEquals(0.0, compiler2.getProgress(), 0.01);
  }

////  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler();
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(" on recently changed AST", charset0);
      Node node0 = compiler0.parse((SourceFile) jSSourceFile0);
      compiler0.areNodesEqualForInlining(node0, node0);
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[9];
      jSSourceFileArray0[0] = jSSourceFile0;
      jSSourceFileArray0[1] = jSSourceFile0;
      jSSourceFileArray0[2] = jSSourceFile0;
      jSSourceFileArray0[3] = jSSourceFile0;
      jSSourceFileArray0[4] = jSSourceFile0;
      jSSourceFileArray0[5] = jSSourceFile0;
      jSSourceFileArray0[6] = jSSourceFile0;
      jSSourceFileArray0[7] = jSSourceFile0;
      JSSourceFile jSSourceFile1 = JSSourceFile.fromCode("(DqQU", "hasField() can only be called on non-repeated fields.");
      jSSourceFileArray0[8] = jSSourceFile1;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
      CompilerOptions.TweakProcessing.values();
      compiler0.parseInputs();
      CompilerOptions.DevMode.values();
      compiler0.processAMDAndCommonJSModules();
      compiler0.optimize();
      JsAst jsAst0 = null;
      compiler0.replaceScript(jsAst0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-4063), (-4063), (-4063));
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -4063
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) linkedList0, (List<JSModule>) stack0, compilerOptions0);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      Compiler compiler2 = new Compiler((PrintStream) null);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler2);
      int int0 = 0;
      String string0 = "JSC_GOOG_SCOPE_NON_ALIAS_LOCAL";
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("// Input %num%", (SourceFile.Generator) null);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      // Undeclared exception!
      try { 
        compiler0.addNewScript(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.SourceFile$Generated", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "var JSCompiler_stubMap = [];function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {  return function() {    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(        this, arguments);  };}function JSCompiler_unstubMethod(    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] =       JSCompiler_unstubMethod_body;}";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        compiler0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

////  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "iu9`hK4F/ OZ";
      Node node0 = compiler0.parseTestCode("iu9`hK4F/ OZ");
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      SourceFile sourceFile0 = SourceFile.fromFile(string0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
      compiler0.buildKnownSymbolTable();
      String string1 = "";
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string1);
      compiler0.buildKnownSymbolTable();
      jSSourceFileArray0[0] = jSSourceFile0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(node0.NO_SIDE_EFFECTS);
      UnknownFieldSet unknownFieldSet0 = UnknownFieldSet.parseFrom((InputStream) pipedInputStream0);
      ByteString byteString0 = unknownFieldSet0.toByteString();
      InputStream inputStream0 = byteString0.newInput();
      JSSourceFile jSSourceFile1 = JSSourceFile.fromInputStream(string0, inputStream0);
      jSSourceFileArray0[1] = jSSourceFile1;
      Callable<GatherRawExports> callable0 = (Callable<GatherRawExports>) mock(Callable.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      boolean boolean1 = false;
      Compiler.runCallable(callable0, boolean0, boolean1);
      File file0 = MockFile.createTempFile(string1, string1);
      Charset charset0 = Charset.forName(string0);
      JSSourceFile jSSourceFile2 = JSSourceFile.fromFile(file0, charset0);
      jSSourceFileArray0[2] = jSSourceFile2;
      JSSourceFile jSSourceFile3 = JSSourceFile.fromFile(file0, charset0);
      jSSourceFileArray0[3] = jSSourceFile3;
      compiler0.stripCode(compilerOptions0.aliasableStrings, compilerOptions0.stripNamePrefixes, compilerOptions0.stripNameSuffixes, compilerOptions0.aliasableStrings);
      jSSourceFile1.clearCachedSource();
      String string2 = null;
      JSSourceFile jSSourceFile4 = JSSourceFile.fromFile(string2, charset0);
      jSSourceFileArray0[4] = jSSourceFile4;
      CompilerOptions compilerOptions1 = new CompilerOptions();
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions1);
      compiler0.setProgress(node0.INPUT_ID);
      CompilerOptions.TracerMode.valueOf(string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(verboseMessageFormatter0, logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      String string0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '4';
      int int0 = (-1135);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, (-1135), 3708);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String string0 = "QI&b'`bW-@Y[f|Xzc";
      compiler_CodeBuilder0.endsWith("QI&b'`bW-@Y[f|Xzc");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Logger logger1 = logger0.getParent();
      logger0.setParent(logger1);
      // Undeclared exception!
      try { 
        compiler0.ensureLibraryInjected("QI&b'`bW-@Y[f|Xzc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Compiler compiler0 = new Compiler();
      JSModule[] jSModuleArray0 = new JSModule[6];
      Compiler compiler1 = new Compiler();
      CheckAccessControls checkAccessControls0 = null;
      try {
        checkAccessControls0 = new CheckAccessControls(compiler1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FieldCleanupPass.QualifiedNameSearchTraversal fieldCleanupPass_QualifiedNameSearchTraversal0 = new FieldCleanupPass.QualifiedNameSearchTraversal(jSTypeRegistry0, "4x7S%");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, fieldCleanupPass_QualifiedNameSearchTraversal0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      // Undeclared exception!
      try { 
        compiler1.isInliningForbidden();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap1 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>(hashMap0);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node0 = Node.newNumber((-2297.59531141));
      Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      node0.checkTreeEquals(node1);
      // Undeclared exception!
      try { 
        compiler0.updateGlobalVarReferences(hashMap1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      SourceFile sourceFile0 = SourceFile.fromFile("G.3TI;0Cb2>!");
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        compiler0.replaceIncrementalSourceAst(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("~ rCr>3/`VB");
      compiler_CodeBuilder1.append("g");
      String string0 = "jscompiler";
      compiler_CodeBuilder1.endsWith("jscompiler");
      String string1 = "Tracer should not be null at the end of a pass.";
      String string2 = null;
      String string3 = "getUserData";
      String string4 = "removeTryCatchFinally";
      MockFile mockFile0 = new MockFile("getUserData", "removeTryCatchFinally");
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String string0 = compiler_CodeBuilder0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompilerOptions.DevMode.values();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      boolean boolean0 = compiler_CodeBuilder0.endsWith("J;WwT0Rl7");
      assertFalse(boolean0);
      
      int int0 = compiler_CodeBuilder0.getColumnIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("0x");
      int int0 = compiler_CodeBuilder1.getLength();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.endsWith("");
      compiler_CodeBuilder0.append("*/\n");
      compiler_CodeBuilder0.getColumnIndex();
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      loggerErrorManager0.getWarnings();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "");
      processCommonJSModules0.guessCJSModuleName("*/\n");
      ProcessCommonJSModules.toModuleName("com.google.javascript.jscomp.GlobalNamespace");
      loggerErrorManager0.printSummary();
      processCommonJSModules0.getModule();
      // Undeclared exception!
      try { 
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "Strip code");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      SourceFile.fromFile("recordFunctionInformation", charset0);
      mockFile0.toURI();
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "_#fRK-NRX&vb3";
      stringArray0[3] = "Strip code";
      String string0 = Compiler.createFillFileName("");
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Callable<ExternExportsPass> callable0 = (Callable<ExternExportsPass>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallableWithLargeStack(callable0);
      try { 
        Level.parse("9P-!W*>YB6_q}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad level \"9P-!W*>YB6_q}\"
         //
         verifyException("java.util.logging.Level", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.resetUniqueNameId();
      compiler0.getTypedScopeCreator();
      Map<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> map0 = null;
      SyntheticAst syntheticAst0 = new SyntheticAst(";wVb>P2Ii;**-l");
      SourceFile sourceFile0 = syntheticAst0.getSourceFile();
      // Undeclared exception!
      try { 
        compiler0.parse(sourceFile0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

////  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = ";q:QG%Q)q-y92T";
      compiler0.parseTestCode(";q:QG%Q)q-y92T");
      compiler0.hasHaltingErrors();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String string1 = "wsb<Y?N";
      compiler0.optimize();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append(string1);
      compiler_CodeBuilder1.getColumnIndex();
      compiler0.getInputsById();
      compiler0.getTypedScopeCreator();
  }

////  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.disableThreads();
      String string0 = "goog$object$create";
      DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[0];
      DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticGroupArray0);
      diagnosticGroup0.toString();
      DiagnosticGroups.VISIBILITY = diagnosticGroup0;
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("goog$object$create", "goog$object$create");
      Node node0 = compiler0.parse((SourceFile) jSSourceFile0);
      // Undeclared exception!
      try { 
        node0.replaceChild((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getInputsById();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.hasRegExpGlobalReferences();
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompilerOptions.TracerMode.values();
      Logger logger0 = Logger.getLogger("UoVSso+*bWA");
      Logger logger1 = logger0.getParent();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger1);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ErrorManager errorManager0 = compiler0.getErrorManager();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertSame(errorManager0, loggerErrorManager0);
  }

////  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ITg`uF:IF+,Z2Jk;BH|");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, mockPrintStream0);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      NodeTraversal.Callback[] nodeTraversal_CallbackArray0 = new NodeTraversal.Callback[1];
      Compiler compiler2 = new Compiler(mockPrintStream0);
      FunctionNames functionNames0 = new FunctionNames(compiler0);
      // Undeclared exception!
      try { 
        compiler2.parseSyntheticCode("ITg`uF:IF+,Z2Jk;BH|", "h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate key: modifies
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

////  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "`; )y4li";
      Logger logger0 = Logger.getLogger("`; )y4li");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "`; )y4li", "`; )y4li");
      compiler0.getInputsById();
      compiler0.prepareAst(node0);
      String string1 = "";
      compiler0.parseSyntheticCode(string0, string1);
      Callable<RemoveUnusedPrototypeProperties> callable0 = (Callable<RemoveUnusedPrototypeProperties>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallableWithLargeStack(callable0);
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(string0, sourceFile_Generator0);
      jSSourceFileArray0[0] = jSSourceFile0;
      String string2 = null;
      InputStream inputStream0 = null;
      JSSourceFile jSSourceFile1 = JSSourceFile.fromInputStream(string2, inputStream0);
      jSSourceFileArray0[1] = jSSourceFile1;
      JSModule[] jSModuleArray0 = new JSModule[6];
      String string3 = null;
      JSModule jSModule0 = new JSModule(string3);
      String string4 = "runCustomPasses";
      CompilerInput compilerInput0 = jSModule0.getByName(string4);
      JSModule jSModule1 = compilerInput0.getModule();
      jSModuleArray0[0] = jSModule1;
      JSModuleGraph jSModuleGraph0 = compiler0.getDegenerateModuleGraph();
      Set<JSModule> set0 = jSModule1.getAllDependencies();
      JSModule jSModule2 = jSModuleGraph0.getDeepestCommonDependencyInclusive((Collection<JSModule>) set0);
      jSModuleArray0[1] = jSModule2;
      JSModule jSModule3 = compilerInput0.getModule();
      jSModuleArray0[2] = jSModule3;
      JSModule jSModule4 = jSModuleGraph0.getDeepestCommonDependency(jSModule1, jSModule3);
      jSModuleArray0[3] = jSModule4;
      JSModule jSModule5 = jSModuleGraph0.getDeepestCommonDependency(jSModule0, jSModuleArray0[2]);
      jSModuleArray0[4] = jSModule5;
      String string5 = "parseInputs";
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string5);
      JSModule jSModule6 = processCommonJSModules0.getModule();
      jSModuleArray0[5] = jSModule6;
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.init(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Logger logger0 = Logger.getLogger("2?/iDW-;YM5oKNN");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.getSourceRegion("rL\"gEaOtQf&|m", 0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PassConfig passConfig0 = compiler0.createPassConfigInternal();
      compiler0.setPassConfig(passConfig0);
      // Undeclared exception!
      try { 
        compiler0.hasErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
      logger0.entering(" &WJn<'b86Ym", " &WJn<'b86Ym", (Object) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Callable<MarkNoSideEffectCalls> callable0 = (Callable<MarkNoSideEffectCalls>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallableWithLargeStack(callable0);
      // Undeclared exception!
      try { 
        compiler0.getInputsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

////  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkUnreachableCode0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
      Vector<Node> vector0 = new Vector<Node>();
      nodeTraversal0.traverseRoots((List<Node>) vector0);
      String string0 = "";
      CheckLevel checkLevel1 = CheckLevel.ERROR;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "RANGE_ERROR_FUNCTION_TYPE";
      JSError jSError0 = JSError.make("", (Node) null, nodeTraversal0.NODE_TRAVERSAL_ERROR, stringArray0);
      loggerErrorManager0.println(checkLevel1, jSError0);
      MockFile mockFile0 = new MockFile(string0, string0);
      Charset charset0 = null;
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, charset0);
      jSSourceFileArray0[0] = jSSourceFile0;
      String string1 = "qlN+w#6w|~\"2";
      JSSourceFile jSSourceFile1 = JSSourceFile.fromFile(string1, charset0);
      jSSourceFileArray0[1] = jSSourceFile1;
      CompilerOptions compilerOptions0 = compiler0.options;
      compiler1.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "";
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      InferJSDocInfo inferJSDocInfo0 = defaultPassConfig0.makeInferJsDocInfo(compiler0);
      compiler0.process(inferJSDocInfo0);
      compiler0.addToDebugLog("");
      // Undeclared exception!
      try { 
        compiler0.getTypeRegistry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      boolean boolean0 = false;
      Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, normalize_PropagateConstantAnnotationsOverVars0);
      String string0 = "ua.(.!";
      // Undeclared exception!
      try { 
        compiler0.ensureLibraryInjected("ua.(.!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "YoF";
      MockPrintStream mockPrintStream0 = new MockPrintStream("YoF");
      mockPrintStream0.close();
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      compiler0.setErrorManager(printStreamErrorManager0);
      compiler0.getInputsForTesting();
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeSyntheticCode(compiler0, "YoF", "YoF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tracer should not be null at the end of a pass.");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(compiler0.MOTION_ITERATIONS_ERROR);
      DiagnosticGroups.VISIBILITY = diagnosticGroup0;
      compiler0.resetUniqueNameId();
      String[] stringArray0 = new String[4];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)85;
      mockPrintStream0.write(byteArray0);
      stringArray0[0] = "Tracer should not be null at the end of a pass.";
      stringArray0[1] = "Tracer should not be null at the end of a pass.";
      stringArray0[2] = "Tracer should not be null at the end of a pass.";
      stringArray0[3] = "Tracer should not be null at the end of a pass.";
      mockPrintStream0.println("Tracer should not be null at the end of a pass.");
      JSError jSError0 = JSError.make("Tracer should not be null at the end of a pass.", 1493, 0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
      jSError0.toString();
      // Undeclared exception!
      try { 
        compiler0.report(jSError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "JSC_MISSING_ENTRY_ERROR";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JSError jSError0 = JSError.make("", (-841), 317, checkLevel0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
      // Undeclared exception!
      try { 
        compiler0.getErrorLevel(jSError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String string0 = "";
      compiler_CodeBuilder0.endsWith("");
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("nIB|x}\"PNp+WJ#");
      compiler_CodeBuilder1.getLength();
      compiler_CodeBuilder0.getLineIndex();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = 'K';
      charArray0[2] = '}';
      charArray0[3] = 'i';
      charArray0[4] = '4';
      charArray0[5] = 'q';
      charArray0[6] = '7';
      charArray0[7] = 'u';
      charArray0[8] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) charBuffer0);
      Compiler compiler0 = new Compiler(printStream0);
      // Undeclared exception!
      try { 
        compiler0.languageMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      compiler0.setState(compiler_IntermediateState0);
      // Undeclared exception!
      try { 
        compiler0.acceptEcmaScript5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.getLength();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("AJNkz");
      compiler_CodeBuilder1.reset();
      Compiler compiler0 = new Compiler();
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      Logger logger0 = Logger.getLogger("] ");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      loggerErrorManager0.generateReport();
      lightweightMessageFormatter0.setColorize(false);
      Logger logger1 = Tracer.logger;
      try { 
        Level.parse("vAMM&g n[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad level \"vAMM&g n[\"
         //
         verifyException("java.util.logging.Level", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Callable<LineNumberCheck> callable0 = (Callable<LineNumberCheck>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initOptions(compilerOptions0);
      Compiler.runCallableWithLargeStack(callable0);
      compiler0.getTypeRegistry();
      ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR = null;
      compiler0.getInputsForTesting();
      compiler0.getTypeRegistry();
      compiler0.getReverseAbstractInterpreter();
      compiler0.getParserConfig();
      // Undeclared exception!
      try { 
        compiler0.check();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler.setLoggingLevel((Level) null);
      CompilerOptions.TweakProcessing.values();
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Callable<Denormalize.StripConstantAnnotations> callable0 = (Callable<Denormalize.StripConstantAnnotations>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallable(callable0, true, true);
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      defaultPassConfig0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      CompilerOptions compilerOptions0 = compiler1.options;
      // Undeclared exception!
      try { 
        compiler0.compileModules((List<SourceFile>) null, (List<JSModule>) stack0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0, (ScopeCreator) null);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      // Undeclared exception!
      try { 
        compiler1.toSourceArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("JSC_MISSING_ENTRY_ERROR", "");
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[9];
      MockFile mockFile0 = new MockFile("JSC_MISSING_ENTRY_ERROR", "PIvP*Xd");
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile1 = JSSourceFile.fromFile((File) mockFile0, charset0);
      jSSourceFileArray0[0] = jSSourceFile1;
      jSSourceFileArray0[1] = jSSourceFile0;
      mockFile0.setExecutable(false, true);
      jSSourceFileArray0[2] = jSSourceFile0;
      jSSourceFileArray0[3] = jSSourceFile0;
      jSSourceFileArray0[4] = jSSourceFile0;
      jSSourceFileArray0[5] = jSSourceFile0;
      jSSourceFileArray0[6] = jSSourceFile0;
      jSSourceFileArray0[7] = jSSourceFile0;
      jSSourceFileArray0[8] = jSSourceFile0;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
      compiler0.toSourceArray();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteString.Output byteString_Output0 = ByteString.newOutput(45);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteString_Output0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      objectOutputStream0.write(byteArray0);
      objectOutputStream0.writeShort((-373));
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      mockPrintStream0.close();
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.initCompilerOptionsIfTesting();
      compiler0.getCssRenamingMap();
      compiler0.setCssRenamingMap((CssRenamingMap) null);
      compiler0.getState();
      try { 
        MockURI.URI("com.google.javascript.jscomp.DataFlowAnalysis$FlowState", "com.google.javascript.jscomp.DataFlowAnalysis$FlowState", "com.google.javascript.jscomp.DataFlowAnalysis$FlowState", "\"-8*+?xD9GO61sJ?!", "\"-8*+?xD9GO61sJ?!");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: com.google.javascript.jscomp.DataFlowAnalysis$FlowState://com.google.javascript.jscomp.DataFlowAnalysis$FlowStatecom.google.javascript.jscomp.DataFlowAnalysis$FlowState?%22-8*+?xD9GO61sJ?!#%22-8*+?xD9GO61sJ?!
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.setProgress(0.0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      CleanupPasses cleanupPasses0 = new CleanupPasses((CompilerOptions) null);
      cleanupPasses0.getPassGraph();
      cleanupPasses0.getChecks();
      // Undeclared exception!
      try { 
        compiler0.computeCFG();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Compiler.createFillFileName("9O-Wh'|;[X21Oa");
      Compiler compiler0 = new Compiler();
      compiler0.getTopScope();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[4];
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("com.google.javascript.jscomp.AliasExternals", "H{@o|'p64+_dOv");
      jSSourceFileArray0[0] = jSSourceFile0;
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile1 = JSSourceFile.fromGenerator("[9O-Wh'|;[X21Oa]", sourceFile_Generator0);
      jSSourceFileArray0[1] = jSSourceFile1;
      SourceFile.Generator sourceFile_Generator1 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile2 = JSSourceFile.fromGenerator("9O-Wh'|;[X21Oa", sourceFile_Generator1);
      jSSourceFileArray0[2] = jSSourceFile2;
      MockFile mockFile0 = new MockFile("[9O-Wh'|;[X21Oa]");
      File file0 = MockFile.createTempFile(">hdGx5", "[", (File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile3 = JSSourceFile.fromFile(file0, charset0);
      jSSourceFile2.clearCachedSource();
      jSSourceFileArray0[3] = jSSourceFile3;
      jSSourceFile3.setIsExtern(false);
      CompilerOptions compilerOptions0 = compiler0.options;
      // Undeclared exception!
      try { 
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getPropertyMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ly:MO9t");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("$%+o+VT&g$^wnQ", "", sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      logger0.throwing("ly:MO9t", "ly:MO9t", sQLInvalidAuthorizationSpecException1);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.setProgress((-1761.82));
      compiler0.getErrorManager();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompilerOptions.TracerMode.values();
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("=A/dP$}8aL");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      // Undeclared exception!
      try { 
        compiler1.toSource(compiler_CodeBuilder1, (-1869), node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      compiler0.getTopScope();
      compiler0.hasHaltingErrors();
      compiler0.getAstDotGraph();
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSError jSError0 = JSError.make("", 132, 132, checkLevel0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
      jSError0.toString();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "Exceeded max number of optimization iterations: ";
      stringArray1[3] = "";
      stringArray1[4] = "Exceeded max number of optimization iterations: ";
      stringArray1[5] = "";
      stringArray1[6] = "Exceeded max number of optimization iterations: ";
      JSError.make("Exceeded max number of optimization iterations: ", (Node) null, compiler0.OPTIMIZE_LOOP_ERROR, stringArray1);
      JSError.make("-T3pvl7lfW%co8mG", 0, 0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
      stringArray1[7] = "Exceeded max number of optimization iterations: ";
      JSError.make("Exceeded max number of optimization iterations: ", (Node) null, compiler0.OPTIMIZE_LOOP_ERROR, stringArray1);
      compiler0.report(jSError0);
      compiler0.hasHaltingErrors();
      CompilerOptions.TracerMode.values();
      // Undeclared exception!
      try { 
        compiler0.getExternsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.setHasRegExpGlobalReferences(false);
      compiler0.getVariableMap();
      // Undeclared exception!
      try { 
        compiler0.processDefines();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DefaultPassConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.rebuildInputsFromModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions.TweakProcessing compilerOptions_TweakProcessing0 = CompilerOptions.TweakProcessing.OFF;
      // Undeclared exception!
      try { 
        Compiler.runCallable((Callable<ChainCalls>) null, true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.reportCodeChange();
      // Undeclared exception!
      try { 
        compiler0.getErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, printStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      compiler0.getGlobalVarReferences();
      // Undeclared exception!
      try { 
        compiler0.recordFunctionInformation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      compiler1.setProgress(53.0);
      compiler1.getSourceLine("*7S]g}/1=(q|aqm^;F]", (-2557));
      compiler1.createPassConfigInternal();
      compiler1.getPassConfig();
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameLabels.DefaultNameSupplier renameLabels_DefaultNameSupplier0 = new RenameLabels.DefaultNameSupplier();
      RenameLabels renameLabels0 = new RenameLabels(compiler0, renameLabels_DefaultNameSupplier0, true);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      CompilerOptions compilerOptions0 = compiler1.newCompilerOptions();
      compiler1.initModules((List<SourceFile>) vector0, (List<JSModule>) stack0, compilerOptions0);
      compiler0.getSourceMap();
      CompilerOptions.TracerMode[] compilerOptions_TracerModeArray0 = CompilerOptions.TracerMode.values();
      assertEquals(4, compilerOptions_TracerModeArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Logger.getAnonymousLogger();
      MockFile mockFile0 = new MockFile("base");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
      try { 
        compiler0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getDegenerateModuleGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSModuleGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Logger logger0 = Logger.getLogger("#nhXTP[J$![");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.throwInternalError((String) null, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("axsT'j8=X)!7$~f");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, mockPrintStream0);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0, (SyntacticScopeCreator.RedeclarationHandler) null);
      compiler1.resetUniqueNameId();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, (NodeTraversal.Callback) null, syntacticScopeCreator0);
      Compiler compiler2 = nodeTraversal0.getCompiler();
      mockFileOutputStream0.flush();
      compiler2.getModuleGraph();
      // Undeclared exception!
      try { 
        compiler1.removeTryCatchFinally();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

////  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "iu9`hK4F/ OZ";
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("iu9`hK4F/ OZ");
        fail("Expecting exception: ThreadDeath");
      
      } catch(ThreadDeath e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getSynthesizedExternsInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      Callable<LineNumberCheck> callable0 = (Callable<LineNumberCheck>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(lineNumberCheck0).when(callable0).call();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initOptions(compilerOptions0);
      Compiler.runCallableWithLargeStack(callable0);
      compiler0.getTypeRegistry();
      ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR = null;
      compiler0.getExternsForTesting();
      compiler0.getTypeRegistry();
      compiler0.getReverseAbstractInterpreter();
      compiler0.getParserConfig();
      // Undeclared exception!
      try { 
        compiler0.check();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JSCompiler_stubMethod", "VAc*,Cf\"1rb\u0002v;M|");
      File file0 = MockFile.createTempFile("JSCompiler_stubMethod", "JSCompiler_stubMethod", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      mockPrintStream0.append(')');
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compilerOptions0.setSmartNameRemoval(true);
      compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.ensureLibraryInjected((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(" on recently changed AST", charset0);
      Node node0 = compiler0.parse((SourceFile) jSSourceFile0);
      compiler0.areNodesEqualForInlining(node0, node0);
      CompilerOptions.TweakProcessing[] compilerOptions_TweakProcessingArray0 = CompilerOptions.TweakProcessing.values();
      assertEquals(3, compilerOptions_TweakProcessingArray0.length);
  }

////  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MockFile mockFile0 = new MockFile("M:L.#2'^", "JSC_DUPLICATE_NAMESPACE_ERROR");
      MockFile mockFile1 = new MockFile(mockFile0, "JSC_DUPLICATE_NAMESPACE_ERROR");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "JSC_DUPLICATE_NAMESPACE_ERROR";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      objectArray0[1] = (Object) compiler0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "JSC_DUPLICATE_NAMESPACE_ERROR", objectArray0);
      Compiler compiler1 = new Compiler(printStream0);
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler1);
      Callable<CheckGlobalNames> callable0 = (Callable<CheckGlobalNames>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallable(callable0, false, false);
      Callable<LineNumberCheck> callable1 = (Callable<LineNumberCheck>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(lineNumberCheck0).when(callable1).call();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initOptions(compilerOptions0);
      Compiler.runCallableWithLargeStack(callable1);
      compiler0.getTypeRegistry();
      ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR = null;
      compiler0.getInputsForTesting();
      compiler0.getTypeRegistry();
      compiler0.getReverseAbstractInterpreter();
      // Undeclared exception!
      try { 
        compiler0.getParserConfig();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate key: lends
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      Callable<LineNumberCheck> callable0 = (Callable<LineNumberCheck>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      compiler0.getRoot();
      // Undeclared exception!
      try { 
        lineNumberCheck0.visit(nodeTraversal0, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.LineNumberCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "yQ\"x:4Y*r";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yQ\"x:4Y*r");
      Compiler compiler0 = new Compiler();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
      JSModule[] jSModuleArray0 = new JSModule[6];
      JSModule jSModule0 = new JSModule("yQ\"x:4Y*r");
      jSModuleArray0[0] = jSModule0;
      Compiler compiler1 = new Compiler();
      CheckAccessControls checkAccessControls0 = null;
      try {
        checkAccessControls0 = new CheckAccessControls(compiler1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Compiler compiler0 = new Compiler();
      compiler0.removeChangeHandler((CodeChangeHandler) null);
      // Undeclared exception!
      try { 
        compiler0.getReverseAbstractInterpreter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

////  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "iu9`hK4F/ OZ";
      Node node0 = compiler0.parseTestCode("iu9`hK4F/ OZ");
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
      compiler0.precheck();
      SourceFile sourceFile0 = SourceFile.fromFile(string0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
      String string1 = "-<";
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string1);
      jSSourceFileArray0[0] = jSSourceFile0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(node0.NO_SIDE_EFFECTS);
      UnknownFieldSet unknownFieldSet0 = UnknownFieldSet.parseFrom((InputStream) pipedInputStream0);
      ByteString byteString0 = unknownFieldSet0.toByteString();
      InputStream inputStream0 = byteString0.newInput();
      JSSourceFile jSSourceFile1 = JSSourceFile.fromInputStream(string0, inputStream0);
      jSSourceFileArray0[1] = jSSourceFile1;
      Callable<GatherRawExports> callable0 = (Callable<GatherRawExports>) mock(Callable.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      boolean boolean1 = false;
      Compiler.runCallable(callable0, boolean0, boolean1);
      File file0 = MockFile.createTempFile(string1, string1);
      Charset charset0 = Charset.forName(string0);
      JSSourceFile jSSourceFile2 = JSSourceFile.fromFile(file0, charset0);
      jSSourceFileArray0[2] = jSSourceFile2;
      JSSourceFile jSSourceFile3 = JSSourceFile.fromFile(file0, charset0);
      jSSourceFileArray0[3] = jSSourceFile3;
      jSSourceFile1.clearCachedSource();
      String string2 = null;
      JSSourceFile jSSourceFile4 = JSSourceFile.fromFile(string2, charset0);
      jSSourceFileArray0[4] = jSSourceFile4;
      CompilerOptions compilerOptions1 = new CompilerOptions();
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions1);
      compiler0.setProgress(node0.INPUT_ID);
  }

////  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CompilerOptions.DevMode.values();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "";
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node0 = compiler_IntermediateState0.externsRoot;
      JSError jSError0 = JSError.make("hasField() can only be called on non-repeated fields.", (Node) null, compiler0.OPTIMIZE_LOOP_ERROR, (String[]) null);
      loggerErrorManager0.println(checkLevel0, jSError0);
      logger0.finest(string0);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      logger0.severe(supplier0);
      String string1 = " on recently changed AST";
      compiler0.addToDebugLog(string1);
      compiler0.reportCodeChange();
      compiler0.removeTryCatchFinally();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "Performing HotSwap for pass ";
      Logger logger0 = Logger.getLogger("Performing HotSwap for pass ");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.endPass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tracer should not be null at the end of a pass.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      Callable<LineNumberCheck> callable0 = (Callable<LineNumberCheck>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(lineNumberCheck0).when(callable0).call();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initOptions(compilerOptions0);
      Compiler.runCallableWithLargeStack(callable0);
      compiler0.getTypeRegistry();
      ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR = null;
      compiler0.getInputsForTesting();
      compiler0.getTypeRegistry();
      compiler0.getReverseAbstractInterpreter();
      Node node0 = Node.newString(9, "juU}a:MDUs*#&vw7", 9, 9);
      Node node1 = new Node(9, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 9
         // BITOR
         //     BITOR juU}a:MDUs*#&vw7 9
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ErrorFormat errorFormat0 = ErrorFormat.SOURCELESS;
      Compiler compiler0 = new Compiler();
      MessageFormatter messageFormatter0 = errorFormat0.toFormatter(compiler0, true);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(messageFormatter0, (PrintStream) null);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      String string0 = "\"{0}\" cannot be both provided and declared as a function";
      JSModule jSModule0 = new JSModule("\"{0}\" cannot be both provided and declared as a function");
      // Undeclared exception!
      try { 
        compiler1.toSourceArray(jSModule0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" on recently changed AST");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(" on recently changed AST", charset0);
      Node node0 = compiler0.parse((SourceFile) jSSourceFile0);
      compiler0.areNodesEqualForInlining(node0, node0);
      CompilerOptions.TweakProcessing.values();
      // Undeclared exception!
      try { 
        compiler0.parseInputs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

////  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" on recently changed AST");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "hasField() can only be called on non-repeated fields.");
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(" on recently changed AST", charset0);
      Node node0 = compiler0.parse((SourceFile) jSSourceFile0);
      node0.wasEmptyNode();
      compiler0.areNodesEqualForInlining(node0, node0);
      CompilerOptions.TweakProcessing.values();
      compiler0.buildKnownSymbolTable();
  }

////  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "iu9`hK4F/ OZ";
      Node node0 = compiler0.parseTestCode("iu9`hK4F/ OZ");
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
      compiler0.isTypeCheckingEnabled();
      SourceFile sourceFile0 = SourceFile.fromFile(string0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Result result0 = compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
      String string1 = "";
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(compilerOptions0.syntheticBlockStartMarker, result0.debugLog);
      jSSourceFileArray0[0] = jSSourceFile0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(node0.NO_SIDE_EFFECTS);
      UnknownFieldSet unknownFieldSet0 = UnknownFieldSet.parseFrom((InputStream) pipedInputStream0);
      ByteString byteString0 = unknownFieldSet0.toByteString();
      InputStream inputStream0 = byteString0.newInput();
      JSSourceFile jSSourceFile1 = JSSourceFile.fromInputStream(string0, inputStream0);
      jSSourceFileArray0[1] = jSSourceFile1;
      Callable<GatherRawExports> callable0 = (Callable<GatherRawExports>) mock(Callable.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      boolean boolean1 = false;
      Compiler.runCallable(callable0, boolean0, boolean1);
      File file0 = MockFile.createTempFile(string1, string1);
      Charset charset0 = Charset.forName(string0);
      JSSourceFile jSSourceFile2 = JSSourceFile.fromFile(file0, charset0);
      jSSourceFileArray0[2] = jSSourceFile2;
      JSSourceFile jSSourceFile3 = JSSourceFile.fromFile(file0, charset0);
      jSSourceFileArray0[3] = jSSourceFile3;
      jSSourceFile1.clearCachedSource();
      String string2 = null;
      JSSourceFile jSSourceFile4 = JSSourceFile.fromFile(string2, charset0);
      jSSourceFileArray0[4] = jSSourceFile4;
      CompilerOptions compilerOptions1 = new CompilerOptions();
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions1);
      compiler0.setProgress(node0.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      System.setCurrentTimeMillis(504L);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "%num%");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      compiler0.getFunctionalInformationMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.getLength();
      compiler_CodeBuilder0.getLength();
      compiler_CodeBuilder0.append("getters are not supported in Internet Explorer");
      compiler_CodeBuilder0.append("ua.(.!");
      String string0 = "QI&b'`bW-@Y[f|Xzc";
      compiler_CodeBuilder0.endsWith("QI&b'`bW-@Y[f|Xzc");
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = null;
      try {
        lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) null, sourceExcerptProvider_SourceExcerpt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      Callable<LineNumberCheck> callable0 = (Callable<LineNumberCheck>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(lineNumberCheck0).when(callable0).call();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initOptions(compilerOptions0);
      Compiler.runCallableWithLargeStack(callable0);
      compiler0.getTypeRegistry();
      ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR = null;
      compiler0.getInputsForTesting();
      compiler0.getTypeRegistry();
      compiler0.getReverseAbstractInterpreter();
      compiler0.getParserConfig();
      compiler0.acceptEcmaScript5();
      // Undeclared exception!
      try { 
        compiler0.check();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      String string0 = "externExports";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "externExports");
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      PassConfig passConfig0 = defaultPassConfig0.getBasePassConfig();
      // Undeclared exception!
      try { 
        compiler0.setPassConfig(passConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // this.passes has already been assigned
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "yQ\"x:4Y*r";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yQ\"x:4Y*r");
      Compiler compiler0 = new Compiler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSModule[] jSModuleArray0 = new JSModule[12];
      JSModule jSModule0 = new JSModule("yQ\"x:4Y*r");
      jSModuleArray0[0] = jSModule0;
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
      compiler0.getOptions();
      // Undeclared exception!
      try { 
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CompilerOptions.DevMode.values();
      Compiler compiler0 = new Compiler();
      Callable<ReferenceCollectingCallback.ReferenceCollection> callable0 = (Callable<ReferenceCollectingCallback.ReferenceCollection>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallable(callable0, false, true);
      // Undeclared exception!
      try { 
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      SourceFile.fromFile("G.3TI;0Cb2>!");
      JSModule jSModule0 = new JSModule("et Explorerua.(.!");
      // Undeclared exception!
      try { 
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root module has no inputs
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

////  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "iu9`hK4F/ OZ";
      Node node0 = compiler0.parseTestCode("iu9`hK4F/ OZ");
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      SourceFile sourceFile0 = SourceFile.fromFile(string0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      DependencyOptions dependencyOptions0 = new DependencyOptions();
      compilerOptions0.dependencyOptions = dependencyOptions0;
      compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      compiler0.addNewSourceAst(jsAst0);
      String string1 = "";
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string1);
      compiler0.getParserConfig();
      jSSourceFileArray0[0] = jSSourceFile0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(node0.NO_SIDE_EFFECTS);
      UnknownFieldSet unknownFieldSet0 = UnknownFieldSet.parseFrom((InputStream) pipedInputStream0);
      ByteString byteString0 = unknownFieldSet0.toByteString();
      InputStream inputStream0 = byteString0.newInput();
      JSSourceFile jSSourceFile1 = JSSourceFile.fromInputStream(string0, inputStream0);
      jSSourceFileArray0[1] = jSSourceFile1;
      Callable<GatherRawExports> callable0 = (Callable<GatherRawExports>) mock(Callable.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      boolean boolean1 = false;
      Compiler.runCallable(callable0, boolean0, boolean1);
      File file0 = MockFile.createTempFile(string1, string1);
      Charset charset0 = Charset.forName(string0);
      JSSourceFile jSSourceFile2 = JSSourceFile.fromFile(file0, charset0);
      jSSourceFileArray0[2] = jSSourceFile2;
      JSSourceFile jSSourceFile3 = JSSourceFile.fromFile(file0, charset0);
      jSSourceFileArray0[3] = jSSourceFile3;
      jSSourceFile1.clearCachedSource();
      String string2 = null;
      JSSourceFile jSSourceFile4 = JSSourceFile.fromFile(string2, charset0);
      jSSourceFileArray0[4] = jSSourceFile4;
      CompilerOptions compilerOptions1 = new CompilerOptions();
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions1);
      compiler0.setProgress(node0.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FieldCleanupPass.QualifiedNameSearchTraversal fieldCleanupPass_QualifiedNameSearchTraversal0 = new FieldCleanupPass.QualifiedNameSearchTraversal(jSTypeRegistry0, (String) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, fieldCleanupPass_QualifiedNameSearchTraversal0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      JSModule jSModule0 = new JSModule((String) null);
      // Undeclared exception!
      try { 
        compiler1.toSource(jSModule0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      stack0.retainAll(linkedList0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) linkedList0, (List<JSModule>) stack0, compilerOptions0);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler1);
      inlineSimpleMethods0.getActingCallback();
      Node.newString(0, "JSC_GOOG_SCOPE_NON_ALIAS_LOCAL", 0, 0);
      // Undeclared exception!
      try { 
        compiler1.compileModules((List<SourceFile>) linkedList0, (List<JSModule>) stack0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PrintStreamErrorManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.getSourceRegion("sub", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String string0 = "~ rCr>3/\\`VB";
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("~ rCr>3/`VB");
      compiler_CodeBuilder1.append("");
      compiler_CodeBuilder1.endsWith("");
      String string1 = "Tracer should not be null at the end of a pass.";
      String string2 = null;
      String string3 = "getUserData";
      String string4 = "removeTryCatchFinally";
      MockFile mockFile0 = new MockFile("getUserData", "removeTryCatchFinally");
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'xw%%");
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getWarningCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
