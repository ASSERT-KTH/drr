/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 03:56:02 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSetMultimap;
import com.google.common.collect.LinkedHashMultimap;
import com.google.common.collect.Multimap;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckUnreachableCode;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FlowSensitiveInlineVariables;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.FunctionToBlockMutator;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NameReferenceGraph;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.WhitelistWarningsGuard;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FunctionInjector_ESTest extends FunctionInjector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, true, false);
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("#GQ4>m$/5E[");
      compiler0.externAndJsRoot = node0;
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      Node node1 = new Node(115, compiler0.externAndJsRoot, compiler0.externAndJsRoot, compiler0.externAndJsRoot, compiler0.externAndJsRoot);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkUnreachableCode0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, compiler0.externAndJsRoot, compilerOptions0.aliasableStrings, functionInjector_InliningMode0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0);
      Node node0 = Node.newString((-1225), "", 395, (-1067));
      Node node1 = new Node(4014, node0, node0, 0, (-404));
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node1, compilerOptions0.aliasableStrings, functionInjector_InliningMode0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      Node node0 = Node.newString((-1225), "", 395, (-1067));
      Node node1 = new Node(1344, node0, 702, 3);
      Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node1);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node2, node2, compilerOptions0.stripNamePrefixes, functionInjector_InliningMode0, true, true);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0);
      Node node0 = Node.newString((-1225), "", 395, (-1067));
      Node node1 = new Node(4014, node0, node0, 0, (-404));
      Node node2 = new Node(1344, node1, 702, 3);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node2, compilerOptions0.aliasableStrings, functionInjector_InliningMode0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("/Uv(i aT2O");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Node node0 = Node.newString("com.google.javascript.jscomp.ConcreteType$ConcreteUnionType", 7, 7);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, true, false);
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.ConcreteType$ConcreteUnionType");
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      ImmutableSetMultimap<Integer, FunctionInjector.Reference> immutableSetMultimap0 = ImmutableSetMultimap.of((Integer) 55, functionInjector_Reference0, (Integer) 0, functionInjector_Reference0, (Integer) node0.QUOTED_PROP, functionInjector_Reference0, (Integer) 0, functionInjector_Reference0);
      LinkedHashMultimap<Integer, FunctionInjector.Reference> linkedHashMultimap0 = LinkedHashMultimap.create((Multimap<? extends Integer, ? extends FunctionInjector.Reference>) immutableSetMultimap0);
      Collection<FunctionInjector.Reference> collection0 = linkedHashMultimap0.values();
      File file0 = MockFile.createTempFile("/Uv(i aT2O", "com.google.javascript.jscomp.ConcreteType$ConcreteUnionType");
      Set<String> set0 = WhitelistWarningsGuard.loadWhitelistedJsWarnings(file0);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule0, node0, collection0, set0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.ConcreteType$ConcreteUnionType", 7, 7);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, false, false);
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.ConcreteType$ConcreteUnionType");
      PriorityQueue<FunctionInjector.Reference> priorityQueue0 = new PriorityQueue<FunctionInjector.Reference>();
      File file0 = MockFile.createTempFile("afterStandardChecks", "com.google.javascript.jscomp.ConcreteType$ConcreteUnionType");
      Set<String> set0 = WhitelistWarningsGuard.loadWhitelistedJsWarnings(file0);
      boolean boolean0 = functionInjector0.inliningLowersCost(jSModule0, node0, priorityQueue0, set0, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("afterStandardChecks");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Node node0 = Node.newString("com.google.javascript.jscomp.ConcreteType$ConcreteUnionType", 7, 7);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, false, false);
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.ConcreteType$ConcreteUnionType");
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      ImmutableSetMultimap<Integer, FunctionInjector.Reference> immutableSetMultimap0 = ImmutableSetMultimap.of((Integer) 55, functionInjector_Reference0, (Integer) 0, functionInjector_Reference0, (Integer) node0.REFLECTED_OBJECT, functionInjector_Reference0, (Integer) 0, functionInjector_Reference0);
      LinkedHashMultimap<Integer, FunctionInjector.Reference> linkedHashMultimap0 = LinkedHashMultimap.create((Multimap<? extends Integer, ? extends FunctionInjector.Reference>) immutableSetMultimap0);
      Collection<FunctionInjector.Reference> collection0 = linkedHashMultimap0.values();
      File file0 = MockFile.createTempFile("afterStandardChecks", "com.google.javascript.jscomp.ConcreteType$ConcreteUnionType");
      Set<String> set0 = WhitelistWarningsGuard.loadWhitelistedJsWarnings(file0);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule0, node0, collection0, set0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("afterStandardChecks");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Node node0 = Node.newString("com.google.javascript.jscomp.ConcreteType$ConcreteUnionType", 7, 7);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, false, false);
      File file0 = MockFile.createTempFile("afterStandardChecks", "com.google.javascript.jscomp.ConcreteType$ConcreteUnionType");
      Set<String> set0 = WhitelistWarningsGuard.loadWhitelistedJsWarnings(file0);
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference(node0, node0);
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, nameReferenceGraph_Reference0.site, immutableList0, set0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, false, false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("'QFGnQo");
      functionInjector0.setKnownConstants(linkedHashSet0);
      // Undeclared exception!
      try { 
        functionInjector0.setKnownConstants(linkedHashSet0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
