/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 17:47:16 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JCheckBox;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.RenderingSource;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYTitleAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;


public class XYPlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false, false, false, true, true);
      combinedDomainXYPlot0.select((-1091.698066907), 10.0, (Rectangle2D) null, (RenderingSource) chartPanel0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LogAxis logAxis0 = new LogAxis((String) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxis((-4268), (ValueAxis) logAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(20000.0);
      combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.renderer.category.StackedBarRenderer3D");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(100000.0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, true);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, cyclicNumberAxis0, logarithmicAxis0, deviationRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      
      jFreeChart0.createBufferedImage(500, 500);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = (Color)combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      boolean boolean0 = combinedRangeXYPlot0.canSelectByRegion();
      assertTrue(boolean0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairValue(250.0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisCount();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("categories.default-prefix");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      boolean boolean0 = combinedRangeXYPlot0.canSelectByPoint();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("sb3Y^=_");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      combinedDomainXYPlot0.setDataset((XYDataset) defaultTableXYDataset0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearAnnotations();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)combinedDomainXYPlot0.getRangeCrosshairPaint();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals((-16776961), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("Requires 'index' >= 0.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.setWeight(3186);
      assertEquals(3186, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("sb3Y^=_");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      JCheckBox jCheckBox0 = new JCheckBox("~tG.[rB", true);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jCheckBox0, 10, 187L, 1992, (-2347), (-2347), 2400, (-1413), (-4674), true, 10, 10, (-2347));
      Point point0 = mouseWheelEvent0.getLocationOnScreen();
      combinedDomainXYPlot0.zoomDomainAxes(642.0, plotRenderingInfo0, (Point2D) point0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedDomainXYPlot0.getQuadrantOrigin();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(timePeriodValuesCollection0, periodAxis0, periodAxis0, clusteredXYBarRenderer0);
      Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 3335.4316F);
      xYPlot0.panRangeAxes((-88.75276076537), (PlotRenderingInfo) null, point2D_Float0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis("$%E}U4s{GtPB#UA0");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, numberAxis0, numberAxis0, xYBoxAndWhiskerRenderer0);
      xYPlot0.getPlotType();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("k(J'", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      TextBox textBox0 = new TextBox();
      Paint paint0 = textBox0.getShadowPaint();
      combinedRangeXYPlot0.setRangeTickBandPaint(paint0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) null);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      xYPlot0.zoomRangeAxes(0.0, plotRenderingInfo0, (Point2D) point0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("sb3Y^=_");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      combinedDomainXYPlot0.setRangeAxisLocation(500, axisLocation0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("k(J'", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.getRangeZeroBaselineStroke();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      SeriesRenderingOrder seriesRenderingOrder0 = combinedRangeXYPlot0.getSeriesRenderingOrder();
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("sb3Y^=_");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2892.318343787587);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      boolean boolean0 = combinedRangeXYPlot0.isRangeCrosshairLockedOnData();
      assertTrue(boolean0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation(0);
      xYPlot0.setDomainAxisLocation(1329, axisLocation0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("sb3Y^=_");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getRangeMarkers(layer0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselineVisible(false);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("sb3Y^=_");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setRangeCrosshairValue(0.0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Stroke stroke0 = xYPlot0.getRangeMinorGridlineStroke();
      xYPlot0.setDomainCrosshairStroke(stroke0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, false);
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) xYDifferenceRenderer0);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5.0E-7);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setFixedLegendItems((LegendItemCollection) null);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.getDomainAxisCount();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(layer0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = (Color)combinedRangeXYPlot0.getDomainCrosshairPaint();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, color0.getGreen());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.getDomainMinorGridlinePaint();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker((-124.146342), 10, xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE, 1.0F);
      boolean boolean0 = xYPlot0.removeDomainMarker((Marker) intervalMarker0);
      assertFalse(boolean0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getLegendItems();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("sb3Y^=_");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      int int0 = combinedDomainXYPlot0.getWeight();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, int0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangePannable(false);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5.0E-7);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-4013.6556), 1.0F, 81.0, 2288.36867238462, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("categories.default-prefix");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("M`Z!Y zQ(yF", logAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      jFreeChart0.createBufferedImage(500, 10);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainTickBandPaint((Paint) null);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-505.81688898), "org.jfree.chart.renderer.category.BarRenderer3D");
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      XYPlot xYPlot0 = new XYPlot(categoryTableXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYStepAreaRenderer0);
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getDomainCrosshairStroke();
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainPannable(false);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainPannable());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("categories.default-prefix");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "JLPz(Wo'd$");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.setAxisOffset(numberAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis("5CM{V");
      combinedDomainXYPlot0.setDomainAxis(0, (ValueAxis) logAxis0, true);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearDomainAxes();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearDomainAxes();
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("tn8MR~&H4");
      combinedRangeXYPlot0.setDomainAxis(2, (ValueAxis) numberAxis3D0, false);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawAxes((Graphics2D) null, (Rectangle2D) null, (Rectangle2D) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation(0);
      xYPlot0.setDomainAxisLocation(10, axisLocation0, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

//  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = (MockDate)DateAxis.DEFAULT_ANCHOR_DATE;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, (ValueAxis) null, (ValueAxis) null, deviationRenderer0);
      xYPlot0.setRangeAxis((ValueAxis) null);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5.0E-7);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
  }

//  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("|(H)B[C");
      combinedRangeXYPlot0.setRangeAxis(244, (ValueAxis) periodAxis0, true);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(245, combinedRangeXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeAxes();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeAxes();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      valueAxisArray0[1] = valueAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawAxes((Graphics2D) null, (Rectangle2D) null, (Rectangle2D) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.setDataset(10, (XYDataset) null);
      combinedRangeXYPlot0.getDomainAxisForDataset(4);
      assertEquals(11, combinedRangeXYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      HistogramDataset histogramDataset0 = new HistogramDataset();
      int int0 = combinedDomainXYPlot0.indexOf(histogramDataset0);
      assertEquals((-1), int0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      int int0 = combinedRangeXYPlot0.indexOf((XYDataset) null);
      assertEquals(0, int0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Vector<XYBarRenderer> vector0 = new Vector<XYBarRenderer>();
      // Undeclared exception!
      try { 
        xYPlot0.mapDatasetToDomainAxes((-4268), vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      Vector<XYBoxAnnotation> vector0 = new Vector<XYBoxAnnotation>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes((-566), vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5.0E-7);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      Vector<WaferMapDataset> vector0 = new Vector<WaferMapDataset>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes(0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[6];
      xYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(6, xYPlot0.getRendererCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-4854.0587), "1%9SrTMEvhw)fm:%a\"");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      combinedRangeXYPlot0.getRendererForDataset(categoryTableXYDataset0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, (XYItemRenderer) null);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainGridlinesVisible(true);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainGridlinesVisible(false);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(false);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      assertTrue(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("|(H)B[C");
      combinedRangeXYPlot0.setDomainGridlineStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Stroke stroke0 = combinedDomainCategoryPlot0.getDomainGridlineStroke();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(stroke0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("categories.default-prefix");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setDomainGridlinePaint(dateAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Paint paint0 = fastScatterPlot0.getDomainGridlinePaint();
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(paint0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis numberAxis0 = new NumberAxis("org.jfree.chart.renderer.xy.StandardXYBarPainter");
      combinedRangeXYPlot0.setRangeGridlineStroke(numberAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("tn8MR~&H4");
      combinedRangeXYPlot0.setRangeGridlinePaint(numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeMinorGridlinesVisible(false);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-505.81688898), "org.jfree.chart.renderer.category.BarRenderer3D");
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      XYPlot xYPlot0 = new XYPlot(categoryTableXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYStepAreaRenderer0);
      xYPlot0.setRangeMinorGridlinesVisible(true);
      assertTrue(xYPlot0.isRangeMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(timePeriodValuesCollection0, periodAxis0, periodAxis0, clusteredXYBarRenderer0);
      xYPlot0.setRangeMinorGridlineStroke(clusteredXYBarRenderer0.DEFAULT_OUTLINE_STROKE);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LogAxis logAxis0 = new LogAxis((String) null);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(logAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(fastScatterPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      xYPlot0.setDomainZeroBaselinePaint(xYBlockRenderer0.DEFAULT_OUTLINE_PAINT);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5.0E-7);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("sb3Y^=_");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(2549, 10);
      combinedDomainXYPlot0.setQuadrantOrigin(point0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("1");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-282), (double) yIntervalRenderer0.ZERO);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getQuadrantPaint((-3442));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-3442) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(1930);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (1930) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.getQuadrantPaint(3);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantPaint((-2569), valueAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-2569) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setQuadrantPaint(0, thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantPaint(295, stackedAreaRenderer0.DEFAULT_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (295) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      Layer layer0 = Layer.BACKGROUND;
      NumberAxis numberAxis0 = new NumberAxis("org.jfree.chart.renderer.xy.StandardXYBarPainter");
      CategoryMarker categoryMarker0 = new CategoryMarker(numberAxis0.DEFAULT_TICK_UNIT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, numberAxis0.DEFAULT_AXIS_LINE_STROKE, numberAxis0.DEFAULT_TICK_LABEL_PAINT, waferMapRenderer0.DEFAULT_STROKE, 1.0F);
      combinedRangeXYPlot0.addDomainMarker(1, (Marker) categoryMarker0, layer0, true);
      combinedRangeXYPlot0.clearDomainMarkers();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("k(J'", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker(20, (Marker) null, layer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("k(J'", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker(20, (Marker) valueMarker0, (Layer) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker("ZOOM_RESET_BOTH");
      Layer layer0 = Layer.BACKGROUND;
      boolean boolean0 = xYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      assertFalse(boolean0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("k(J'", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addDomainMarker(10, (Marker) valueMarker0, layer0, false);
      boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(10, (Marker) valueMarker0, layer0, false);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(boolean0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("k(J'", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addDomainMarker(20, (Marker) valueMarker0, layer0, false);
      boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(20, (Marker) valueMarker0, layer0, true);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(boolean0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = (Color)MeterPlot.DEFAULT_DIAL_BACKGROUND_PAINT;
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 364.035253, color0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addRangeMarker(3001, (Marker) intervalMarker0, layer0, true);
      xYPlot0.clearRangeMarkers();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1575.7257726), 3936.6744009507);
      combinedRangeXYPlot0.addRangeMarker((Marker) intervalMarker0, (Layer) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = (Color)MeterPlot.DEFAULT_DIAL_BACKGROUND_PAINT;
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 364.035253, color0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addRangeMarker(3001, (Marker) intervalMarker0, layer0, false);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeMarkers(0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueMarker valueMarker0 = new ValueMarker((-517));
      Layer layer0 = Layer.BACKGROUND;
      boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker((-517), (Marker) valueMarker0, layer0, true);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(boolean0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(2064.33);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker((Marker) valueMarker0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2680.6781845353275);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("k(J'", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(500, 1.0E-8, 10, 1.0F, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, periodAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0, false);
      assertTrue(combinedRangeXYPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("w`^d(}xJ]:BFP{)2", combinedDomainXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(10, 10, legendTitle0, rectangleAnchor0);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYTitleAnnotation0, true);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateDomainAxisSpace((Graphics2D) null, (Rectangle2D) null, (AxisSpace) null);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("k(J'", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.calculateRangeAxisSpace((Graphics2D) null, rectangle2D0, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Font font0 = Axis.DEFAULT_AXIS_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, xYPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(81, 81, 10, chartRenderingInfo0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 0, (-1135), 1, 10, false, false, true, true, false, true);
      Rectangle rectangle0 = chartPanel0.getBounds();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1024, "PRINT");
      xYPlot0.drawDomainCrosshair(graphics2D0, rectangle0, plotOrientation0, 200, cyclicNumberAxis0, xYPlot0.DEFAULT_CROSSHAIR_STROKE, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

//  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(100000.0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, true);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, cyclicNumberAxis0, logarithmicAxis0, deviationRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SystemColor systemColor0 = SystemColor.controlShadow;
      xYPlot0.drawHorizontalLine(graphics2D0, (Rectangle2D) null, 1476.103400575814, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, systemColor0);
      assertEquals((-8355712), systemColor0.getRGB());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset((-314));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -314 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(124.0);
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYLineAndShapeRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.getDomainAxisForDataset(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 500 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("k(J'", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset((-109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -109 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(6416);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 6416 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(1026);
      LinkedList<XYDifferenceRenderer> linkedList0 = new LinkedList<XYDifferenceRenderer>();
      combinedRangeXYPlot0.drawDomainGridlines((Graphics2D) null, rectangle0, linkedList0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2.5E7, 0.0, 1.0F, 2.5E7);
      Stack<AxisState> stack0 = new Stack<AxisState>();
      combinedRangeXYPlot0.drawRangeGridlines((Graphics2D) null, rectangle2D_Double0, stack0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDomainMarkers((-1673), (Layer) null);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("k(J'", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addDomainMarker(20, (Marker) valueMarker0, layer0, false);
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(20, layer0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeMarkers(1506, (Layer) null);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(100000.0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, true);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, cyclicNumberAxis0, logarithmicAxis0, deviationRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SystemColor systemColor0 = SystemColor.controlShadow;
      // Undeclared exception!
      try { 
        xYPlot0.drawHorizontalLine(graphics2D0, (Rectangle2D) null, 1, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, systemColor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis("-rm~\"Jf7On2 wy:", stringArray0);
      // Undeclared exception!
      try { 
        xYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, 0.0, symbolAxis0, symbolAxis0.DEFAULT_TICK_MARK_STROKE, symbolAxis0.DEFAULT_GRID_BAND_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2);
      NumberAxis numberAxis0 = new NumberAxis();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-2413.0700961876846), true, standardXYToolTipGenerator0);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, numberAxis0, numberAxis0, candlestickRenderer0);
      Rectangle rectangle0 = new Rectangle(2000, 2, 500, 1);
      xYPlot0.drawVerticalLine((Graphics2D) null, rectangle0, 757.0, candlestickRenderer0.DEFAULT_STROKE, candlestickRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("k(J'", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2.0, 702.119, 1.0F, 2.0F);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      JFreeChart jFreeChart0 = new JFreeChart("k(J'", combinedDomainCategoryPlot0);
      Paint paint0 = jFreeChart0.getBackgroundPaint();
      combinedRangeXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D_Double0, plotOrientation0, 2.0, periodAxis0, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_STROKE, paint0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle rectangle0 = new Rectangle(10, 2, 10, 3779);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(combinedRangeXYPlot0.ZERO);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2, ",V%Z]9tL V");
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 0.0, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.handleClick(2, 465, plotRenderingInfo0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.7853981633974483);
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer(1396.2161);
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYBarRenderer0);
      xYPlot0.setDataset(500, (XYDataset) xYSeriesCollection0);
      assertEquals(501, xYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      NumberAxis numberAxis0 = new NumberAxis("Null 'paint' argument.");
      valueAxisArray0[3] = (ValueAxis) numberAxis0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      assertEquals(5, xYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2);
      NumberAxis numberAxis0 = new NumberAxis();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-2413.0700961876846), true, standardXYToolTipGenerator0);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, numberAxis0, numberAxis0, candlestickRenderer0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      LogAxis logAxis0 = new LogAxis("'pQ?Cx9-Dc-iOd[>");
      valueAxisArray0[5] = (ValueAxis) logAxis0;
      xYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(6, xYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-505.81688898), "org.jfree.chart.renderer.category.BarRenderer3D");
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      XYPlot xYPlot0 = new XYPlot(categoryTableXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYStepAreaRenderer0);
      xYStepAreaRenderer0.setShapesFilled(true);
      assertTrue(xYStepAreaRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(thermometerPlot0, true);
      combinedRangeXYPlot0.rendererChanged(rendererChangeEvent0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainCrosshairVisible(false);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot0.setDomainCrosshairVisible(true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainCrosshairLockedOnData(false);
      assertFalse(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Paint paint0 = combinedRangeXYPlot0.getRangeMinorGridlinePaint();
      combinedRangeXYPlot0.setDomainCrosshairPaint(paint0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.setRangeCrosshairVisible(false);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.setRangeCrosshairVisible(true);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-282), (double) yIntervalRenderer0.ZERO);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("k(J'", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setRangeCrosshairStroke(periodAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      combinedDomainXYPlot0.setRangeCrosshairPaint(fastScatterPlot0.DEFAULT_GRIDLINE_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("1", font0, xYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = new Point(680, 10);
      xYPlot0.panDomainAxes(1285.662677132, plotRenderingInfo0, point0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.zoomDomainAxes(5.0E-6, plotRenderingInfo0, (Point2D) null, false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(2549, 10);
      JFreeChart jFreeChart0 = new JFreeChart("w`^d(}xJ]:BFP{)2", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 0, plotRenderingInfo0, (Point2D) point0, true);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("1", font0, xYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 200);
      xYPlot0.zoomDomainAxes((-25.0018338029), (-3907.03), plotRenderingInfo0, (Point2D) point2D_Float0);
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      GeneralPath generalPath0 = new GeneralPath(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      Point2D point2D0 = generalPath0.getCurrentPoint();
      combinedDomainXYPlot0.zoomDomainAxes((double) 0.0F, 0.05, (PlotRenderingInfo) null, point2D0);
      assertEquals(5.0, valueAxis0.getUpperBound(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis("$%E}U4s{GtPB#UA0");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, numberAxis0, numberAxis0, xYBoxAndWhiskerRenderer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float(4414.14F, (-1.0F));
      xYPlot0.zoomRangeAxes((-437.71), plotRenderingInfo0, (Point2D) point2D_Float0, true);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 500, 10, 1336, 500, 931, 1138, false, false, false, true, false, true);
      Point point0 = chartPanel0.getLocation();
      combinedRangeXYPlot0.zoomRangeAxes(0.05, plotRenderingInfo0, (Point2D) point0, false);
      assertTrue(chartPanel0.getRefreshBuffer());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      combinedRangeXYPlot0.zoomRangeAxes((-2231.953735), (-2231.953735), plotRenderingInfo0, (Point2D) point2D_Double0);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      JViewport jViewport0 = new JViewport();
      Point point0 = jViewport0.getViewPosition();
      xYPlot0.zoomRangeAxes(123.0, 1270.407447, plotRenderingInfo0, (Point2D) point0);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertEquals(0, int0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(100000.0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, true);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, cyclicNumberAxis0, logarithmicAxis0, deviationRenderer0);
      xYPlot0.getSeriesCount();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis("$%E}U4s{GtPB#UA0");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, numberAxis0, numberAxis0, xYBoxAndWhiskerRenderer0);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((double) xYBoxAndWhiskerRenderer0.ZERO, 1.0F, 0.05, 0.05, xYPlot0.DEFAULT_OUTLINE_STROKE, xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      boolean boolean0 = xYPlot0.equals(xYBoxAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("k(J'", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addDomainMarker(10, (Marker) valueMarker0, layer0, false);
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      
      combinedRangeXYPlot1.clearDomainMarkers();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1370.672785), (-1370.672785), "");
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYStepRenderer0);
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.equals((Object)xYPlot0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      GeneralPath generalPath0 = new GeneralPath(thermometerPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.renderer.xy.StandardXYBarPainter", waferMapRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Point point0 = new Point(0, 1324);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(timePeriodValuesCollection0, periodAxis0, periodAxis0, clusteredXYBarRenderer0);
      xYPlot0.clearSelection();
      assertEquals(1, xYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.clearSelection();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }
}
