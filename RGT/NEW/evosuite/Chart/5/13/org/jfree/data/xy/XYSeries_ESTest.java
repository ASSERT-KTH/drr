/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 01:57:13 GMT 2019
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.Date;
import java.util.Locale;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;


public class XYSeries_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week(978, (-67));
      XYSeries xYSeries0 = new XYSeries(week0, false);
      int int0 = xYSeries0.getMaximumItemCount();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Minute minute0 = new Minute(date0);
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.getItems();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(224, 13, (-2869), (-2021), (-2021), 224);
      Second second0 = new Second(mockDate0);
      Millisecond millisecond0 = new Millisecond(224, second0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add((double) 0, (Number) 0, false);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1, 0, 0, 1533, 0);
      Year year0 = new Year(mockDate0);
      XYSeries xYSeries0 = new XYSeries(year0, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(2, 9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(10);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false, false);
      xYSeries0.addOrUpdate(1.0, 1.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Minute minute0 = new Minute(date0);
      XYSeries xYSeries0 = new XYSeries(minute0);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Minute minute0 = new Minute(date0);
      XYSeries xYSeries0 = new XYSeries(minute0);
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, 0.0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((Number) 0, (Number) 0);
      xYSeries0.setMaximumItemCount(1);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Minute minute0 = new Minute(date0);
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((Number) 0, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 0);
      XYSeries xYSeries1 = new XYSeries("", true, false);
      xYSeries1.addOrUpdate((Number) minute0.FIRST_MINUTE_IN_HOUR, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries1.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Minute minute0 = new Minute(date0);
      XYSeries xYSeries0 = new XYSeries(minute0);
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, 0.0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((Number) 0, (Number) 0);
      xYSeries0.add((Number) 0, (Number) 59, true);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week(978, (-67));
      XYSeries xYSeries0 = new XYSeries(week0, false);
      xYSeries0.add((-1191.74974), (Number) 53);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((Number) 59, (Number) 59);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Year year0 = new Year((-104));
      XYSeries xYSeries0 = new XYSeries(year0, true, true);
      xYSeries0.delete((-104), (-9999));
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(9999, 9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Minute minute0 = new Minute(date0);
      XYSeries xYSeries0 = new XYSeries(minute0);
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, 0.0);
      xYSeries0.add(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(10);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      xYSeries0.add((Number) 3, (Number) bigInteger0, true);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(3, 0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(10);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.update(5, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 5
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(10);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false, false);
      xYSeries0.setMaximumItemCount(2);
      xYSeries0.addOrUpdate((Number) 1, (Number) (-1));
      xYSeries0.add((double) 0, (double) 1);
      xYSeries0.addOrUpdate((Number) (-1), (Number) 1);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(10);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 7, (double) 2);
      xYDataItem0.setY((Number) null);
      xYSeries0.add(xYDataItem0);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2, doubleArray0.length);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((double) 88, (double) 88, false);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(1929, 1929);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries0.add((double) 1929, (Number) null, true);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      boolean boolean0 = xYSeries0.equals(hour0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Minute minute0 = new Minute(date0);
      XYSeries xYSeries0 = new XYSeries(minute0);
      XYSeries xYSeries1 = new XYSeries("", true, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(1929, 1929);
      xYSeries0.setMaximumItemCount(3743);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(3743, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(10);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false, false);
      XYSeries xYSeries1 = new XYSeries(serialDate0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries(mockDate0);
      XYSeries xYSeries1 = new XYSeries(mockDate0, true, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(1900, 1900);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertTrue(boolean0);
      assertFalse(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Minute minute0 = new Minute(date0);
      XYSeries xYSeries0 = new XYSeries(minute0);
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, 0.0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Minute minute0 = new Minute(date0);
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((Number) 0, (Number) 0);
      xYSeries0.add((Number) 0, (Number) 59, false);
      xYSeries0.add((Number) 59, (Number) 59, true);
      xYSeries0.hashCode();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(10);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }
}
