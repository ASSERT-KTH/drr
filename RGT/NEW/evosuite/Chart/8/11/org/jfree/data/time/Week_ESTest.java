/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 19:07:59 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;


public class Week_ESTest {

//  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week(mockDate0);
      week0.hashCode();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-1L), week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week(1343, 9999);
      long long0 = week0.getMiddleMillisecond();
      assertEquals(530010L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 83, 2014");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

//  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week();
      int int0 = week0.getYearValue();
      assertEquals(2014, int0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-2733), year0);
      String string0 = week0.toString();
      assertEquals("Week 83, 2014", string0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week();
      int int0 = week0.compareTo(week0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
  }

//  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getSerialIndex();
      assertEquals(100701L, long0);
      assertEquals((-2209075200001L), week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(53, year0);
      assertEquals(53, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-201), 14, (-6238), 3879, 2914);
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, timeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

//  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4064), (-4064), (-4064), (-1721), (-865), 1800);
      TimeZone timeZone0 = TimeZone.getTimeZone("(");
      Locale locale0 = Locale.ITALY;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      assertEquals(53, week0.getWeek());
      assertEquals((-141503093700001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1045L);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(1970, week0.getYearValue());
      assertEquals(104409L, regularTimePeriod0.getSerialIndex());
      assertNotNull(regularTimePeriod0);
  }

//  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(106748L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNull(regularTimePeriod0);
      assertEquals((-2209075200001L), week0.getLastMillisecond());
      assertEquals(100701L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week((-5315), (-1337));
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals((-70807L), regularTimePeriod0.getSerialIndex());
      assertEquals(61, week0.getWeek());
  }

//  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week(52, 52);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2809L, regularTimePeriod0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Week week0 = new Week(1343, 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNull(regularTimePeriod0);
      assertEquals(63, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Week week0 = new Week((-5315), (-1337));
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2428);
      Date date0 = spreadsheetDate0.toDate();
      Week week1 = new Week(date0);
      week0.equals(week1);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(7, week1.getWeek());
      assertEquals((-70800L), week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Week week0 = new Week((-5315), (-1337));
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2428);
      Date date0 = spreadsheetDate0.toDate();
      Year year0 = new Year(date0);
      boolean boolean0 = week0.equals(year0);
      assertFalse(boolean0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-70800L), week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Week week0 = new Week();
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2428);
      Date date0 = spreadsheetDate0.toDate();
      Week week1 = new Week(date0);
      boolean boolean0 = week0.equals(week1);
      assertTrue(boolean0);
      assertEquals(7, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1716), (-1716), (-1716), (-1716), (-1716), (-1716));
      Week week0 = new Week(mockDate0);
      Week week1 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      boolean boolean0 = ((Week) regularTimePeriod0).equals(week1);
      assertFalse(week1.equals((Object)regularTimePeriod0));
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(1915L, regularTimePeriod0.getSerialIndex());
      assertFalse(week0.equals((Object)regularTimePeriod0));
  }

//  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week((-5315), (-1337));
      int int0 = week0.compareTo((Object) null);
      assertEquals(1, int0);
      assertEquals((-70800L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Week week0 = new Week((-5315), (-1337));
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2428);
      Date date0 = spreadsheetDate0.toDate();
      Week week1 = new Week(date0);
      int int0 = week0.compareTo(week1);
      assertEquals(61, week0.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-3351), int0);
      assertEquals(7, week1.getWeek());
  }

//  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Week week0 = new Week((-5315), (-1337));
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2428);
      Date date0 = spreadsheetDate0.toDate();
      Quarter quarter0 = new Quarter(date0);
      int int0 = week0.compareTo(quarter0);
      assertEquals(0, int0);
      assertEquals((-70800L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("G>|JE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("yyyy-MM-dd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }
}
