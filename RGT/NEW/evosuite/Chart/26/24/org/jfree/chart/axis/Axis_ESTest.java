/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 00:07:58 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.TimeZone;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.junit.runner.RunWith;


public class Axis_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setLabel("5VlHh*Jx_@");
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        categoryAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("SansSerif");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("SansSerif", combinedRangeXYPlot0);
      jFreeChart0.createBufferedImage(10, 234);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      NumberAxis3D numberAxis3D1 = (NumberAxis3D)numberAxis3D0.clone();
      assertTrue(numberAxis3D1.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D1.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D1.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertNotSame(numberAxis3D1, numberAxis3D0);
      assertTrue(numberAxis3D1.isVisible());
      assertTrue(numberAxis3D1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$E}rBqt+g");
      subCategoryAxis0.setTickMarkOutsideLength(0.6F);
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("$E}rBqt+g");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertEquals(0.6F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("CNQs,ED[(B_");
      numberAxis0.setLabelToolTip("CNQs,ED[(B_");
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'stream' argument.");
      subCategoryAxis0.getLabelURL();
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Day day0 = new Day();
      PeriodAxis periodAxis0 = new PeriodAxis("c*+}+0tL}{.", day0, day0);
      periodAxis0.getLabelToolTip();
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(dateAxis0.isVisible());
      
      dateAxis0.setVisible(true);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(439.9);
      assertTrue(cyclicNumberAxis0.isVisible());
      
      cyclicNumberAxis0.setVisible(false);
      assertFalse(cyclicNumberAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1738.66), 1.0, "_h0hvA6L\"X");
      cyclicNumberAxis0.setLabel("Fourth");
      assertEquals("Fourth", cyclicNumberAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("jB=");
      extendedCategoryAxis0.setLabel("jB=");
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Jj-e^4k-{qiIf0");
      DateAxis dateAxis0 = new DateAxis("Jj-e^4k-{qiIf0");
      logarithmicAxis0.setLabelFont(dateAxis0.DEFAULT_TICK_LABEL_FONT);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("HVsXIk~V~!c");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("FtpDXIt'\"Mq");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.2);
      cyclicNumberAxis0.setLabelFont(categoryAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("L1tb+AOw8");
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      logarithmicAxis0.setLabelPaint(spiderWebPlot0.DEFAULT_LABEL_SHADOW_PAINT);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("28D:]y^eB43PCGM");
      // Undeclared exception!
      try { 
        categoryAxis3D0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CategoryMarker categoryMarker0 = new CategoryMarker(dateAxis0.DEFAULT_DATE_TICK_UNIT, dateAxis0.DEFAULT_AXIS_LINE_PAINT, dateAxis0.DEFAULT_TICK_MARK_STROKE);
      RectangleInsets rectangleInsets0 = categoryMarker0.getLabelOffset();
      dateAxis0.setLabelInsets(rectangleInsets0);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      categoryAxis3D0.setAxisLinePaint(color0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      // Undeclared exception!
      try { 
        categoryAxis3D0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(",46#p2xE[8S");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$E}rBqt+g");
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      
      subCategoryAxis0.setTickLabelsVisible(true);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      
      categoryAxis3D0.setTickLabelsVisible(false);
      assertFalse(categoryAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      ModuloAxis moduloAxis0 = new ModuloAxis("MKU7Pi!C]~6%,", cyclicNumberAxis0.DEFAULT_RANGE);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      moduloAxis0.setTickLabelFont(logarithmicAxis0.DEFAULT_TICK_LABEL_FONT);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      LegendTitle legendTitle0 = new LegendTitle(defaultXYItemRenderer0);
      categoryAxis3D0.setTickLabelFont(legendTitle0.DEFAULT_ITEM_FONT);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Jj-e^4k-{qiIf0");
      DateAxis dateAxis0 = new DateAxis("Jj-e^4k-{qiIf0");
      logarithmicAxis0.setTickLabelPaint(dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("9?6i(nApF");
      // Undeclared exception!
      try { 
        dateAxis0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("CNQs,ED[(B_");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "CNQs,ED[(B_");
      cyclicNumberAxis0.setTickLabelInsets(numberAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickLabelInsets(categoryAxis3D0.DEFAULT_AXIS_LABEL_INSETS);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("$YQ^#F|k}.}*");
      assertTrue(numberAxis3D0.isTickMarksVisible());
      
      numberAxis3D0.setTickMarksVisible(true);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$E}rBqt+g");
      subCategoryAxis0.setTickMarkStroke(subCategoryAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D0.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("org.jfree.chart.event.AxisChangeListener", stringArray0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8, 0.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      Stroke stroke0 = combinedRangeCategoryPlot0.getRangeCrosshairStroke();
      symbolAxis0.setTickMarkStroke(stroke0);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("jB=");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      extendedCategoryAxis0.removeChangeListener(fastScatterPlot0);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.2);
      RingPlot ringPlot0 = new RingPlot();
      cyclicNumberAxis0.removeChangeListener(ringPlot0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("jB=");
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      boolean boolean0 = extendedCategoryAxis0.hasListener(defaultTableColumnModel0);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(boolean0);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      jFreeChart0.createBufferedImage(10, 234);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 2366, chartRenderingInfo0);
      assertEquals(1, bufferedImage0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("7QpN'$vuH\u0000%:;LG/&x");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)numberAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(90.0, 1.0E-8, "7QpN'$vuH\u0000%:;LG/&x");
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 90.0, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(139.1328125, axisState0.getCursor(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(49.43359375, rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'negativePaint' argument.", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 8);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, false);
      EmptyBorder emptyBorder0 = new EmptyBorder(500, 2, (-1), 2958465);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) chartPanel0, (Border) emptyBorder0, 1, 10, 2087, 2);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, 0.4, "Jonathan Gabbai");
      Size2D size2D0 = new Size2D(0, 500);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, (-800.90326), 2, rectangleAnchor0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 1.25, rectangle0, rectangle2D0, legendTitle0.DEFAULT_POSITION, plotRenderingInfo0);
      assertEquals((-34.66015625), axisState0.getCursor(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'negativePaint' argument.");
      logarithmicAxis0.setAutoRange(false);
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(500, 500, timeZone0);
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, logarithmicAxis0, logarithmicAxis0, xYBarRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'negativePaint' argument.", xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 8);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, false);
      EmptyBorder emptyBorder0 = new EmptyBorder(500, 2, (-1), 2958465);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) chartPanel0, (Border) emptyBorder0, 1, 10, 2087, 2);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, 0.4, "Jonathan Gabbai");
      Size2D size2D0 = new Size2D(0, 500);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, (-800.90326), 2, rectangleAnchor0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 1.25, rectangle0, rectangle2D0, legendTitle0.DEFAULT_POSITION, plotRenderingInfo0);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-34.66015625), axisState0.getCursor(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, (-1190.6650916464791), defaultCaret0, defaultCaret0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, (-1190.6650916464791), defaultCaret0, defaultCaret0, rectangleEdge1, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, (-1190.6650916464791), defaultCaret0, defaultCaret0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, (-1190.6650916464791), defaultCaret0, defaultCaret0, rectangleEdge1, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$E}rBqt+g");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("$E}rBqt+g");
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      
      subCategoryAxis1.setLabelInsets(subCategoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(subCategoryAxis1.equals((Object)subCategoryAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$E}rBqt+g");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("$E}rBqt+g");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis1.isVisible());
      assertTrue(subCategoryAxis1.isAxisLineVisible());
      assertFalse(subCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$E}rBqt+g");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("nE/H");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(boolean0);
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
      assertFalse(subCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis1.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis1.isVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$E}rBqt+g");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("$E}rBqt+g");
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      
      subCategoryAxis1.setLabelAngle(1.0);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$E}rBqt+g");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("$E}rBqt+g");
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      
      subCategoryAxis0.setLabelURL("ZOOM_IN_RANGE");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$E}rBqt+g");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("$E}rBqt+g");
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      
      subCategoryAxis1.setAxisLineStroke(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(subCategoryAxis1.equals((Object)subCategoryAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$E}rBqt+g");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("$E}rBqt+g");
      subCategoryAxis0.setTickMarkInsideLength((-3.0F));
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertEquals((-3.0F), subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$E}rBqt+g");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("$E}rBqt+g");
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      
      subCategoryAxis1.setTickMarkPaint(subCategoryAxis0.DEFAULT_AXIS_LABEL_PAINT);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(subCategoryAxis1.equals((Object)subCategoryAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$E}rBqt+g");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("$E}rBqt+g");
      subCategoryAxis0.setFixedDimension(0.05);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertEquals(0.05, subCategoryAxis0.getFixedDimension(), 0.01);
      assertFalse(boolean0);
  }
}
