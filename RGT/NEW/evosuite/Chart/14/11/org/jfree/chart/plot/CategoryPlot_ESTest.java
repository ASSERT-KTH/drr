/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 25 10:03:58 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Panel;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.UnitType;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;


public class CategoryPlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = categoryPlot0.getRangeAxisLocation();
      categoryPlot0.setRangeAxisLocation(1028, axisLocation0);
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(626.1, 1.0F);
      categoryPlot0.removeRangeMarker((Marker) intervalMarker0);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryPlot0.setDomainAxis(39, (CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      jFreeChart0.createBufferedImage(358, 500);
      assertEquals(40, categoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      combinedRangeCategoryPlot0.getIndexOf(waterfallBarRenderer0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      jFreeChart0.createBufferedImage(358, 500);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      SortOrder sortOrder0 = combinedDomainCategoryPlot0.getColumnRenderingOrder();
      combinedDomainCategoryPlot0.setColumnRenderingOrder(sortOrder0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getDatasetCount();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setDrawSharedDomainAxis(true);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(358, 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Panel panel0 = new Panel();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(panel0, 10, (-3788), 0, 10, 304, 0, 1874, (-3788), false, 0, 304, 1874);
      Point point0 = mouseWheelEvent0.getLocationOnScreen();
      combinedRangeCategoryPlot0.zoomDomainAxes((double) (-3788), plotRenderingInfo0, (Point2D) point0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      combinedDomainCategoryPlot0.setDomainAxisLocation(40, axisLocation0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DateAxis dateAxis0 = new DateAxis("Null 'position' argument.");
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis0, dateAxis0, statisticalLineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'position' argument.", dateAxis0.DEFAULT_TICK_LABEL_FONT, categoryPlot0, true);
      jFreeChart0.createBufferedImage(430, 480, 10, (ChartRenderingInfo) null);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BasicStroke basicStroke0 = (BasicStroke)categoryPlot0.getRangeCrosshairStroke();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(2, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      IntervalMarker intervalMarker0 = new IntervalMarker((-1174.6), (-152.954), jFreeChart0.DEFAULT_BACKGROUND_PAINT, categoryPlot0.DEFAULT_OUTLINE_STROKE, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, categoryPlot0.DEFAULT_GRIDLINE_STROKE, 0.95F);
      categoryPlot0.addRangeMarker((Marker) intervalMarker0);
      categoryPlot0.clearRangeMarkers();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "7#a)6v");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      int int0 = combinedRangeCategoryPlot0.getRangeAxisCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      ExtendedCategoryAxis[] extendedCategoryAxisArray0 = new ExtendedCategoryAxis[6];
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Emx");
      SystemColor systemColor0 = SystemColor.activeCaption;
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, 2.0, systemColor0, ((Axis) extendedCategoryAxisArray0[0]).DEFAULT_TICK_MARK_STROKE, systemColor0, extendedCategoryAxis0.DEFAULT_AXIS_LINE_STROKE, 0.0F);
      boolean boolean0 = combinedDomainCategoryPlot0.removeDomainMarker((Marker) intervalMarker0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "7#a)6v");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      double double0 = combinedRangeCategoryPlot0.getAnchorValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      categoryPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      RectangleInsets rectangleInsets0 = combinedDomainCategoryPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainCategoryPlot0.getDomainMarkers(layer0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getDrawSharedDomainAxis();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(1);
      combinedDomainCategoryPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double(8.0, 0);
      combinedRangeCategoryPlot0.zoomRangeAxes((double) 1.0F, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setAnchorValue(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.POSITIVE_INFINITY, 0.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.addDomainMarker((CategoryMarker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Layer layer0 = Layer.BACKGROUND;
      Collection collection0 = categoryPlot0.getRangeMarkers(layer0);
      assertNotNull(collection0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis categoryAxis0 = new CategoryAxis("Cameron Riley");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, valueAxis0, (CategoryItemRenderer) null);
      categoryPlot0.setRangeAxis(valueAxis0);
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getDomainAxisCount();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      int int0 = combinedRangeCategoryPlot0.getWeight();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      combinedDomainCategoryPlot0.setRenderer(25, (CategoryItemRenderer) defaultCategoryItemRenderer0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis categoryAxis0 = new CategoryAxis("Cameron Riley");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, valueAxis0, (CategoryItemRenderer) null);
      categoryPlot0.getRowRenderingOrder();
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0);
      combinedDomainCategoryPlot0.setRenderer((CategoryItemRenderer) stackedBarRenderer3D0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double(4180.6668328537, (-5094.114095425364));
      categoryPlot0.zoomRangeAxes(0.05, 0.0, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(":KgM");
      JFreeChart jFreeChart0 = new JFreeChart(":KgM", subCategoryAxis0.DEFAULT_TICK_LABEL_FONT, combinedDomainCategoryPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainCategoryPlot0.zoomDomainAxes(25000.0, plotRenderingInfo0, (Point2D) null, true);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      double double0 = categoryPlot0.getRangeCrosshairValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      LegendItemCollection legendItemCollection0 = ganttRenderer0.getLegendItems();
      categoryPlot0.setFixedLegendItems(legendItemCollection0);
      assertTrue(categoryPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("pI3f/|qc0{cJ9\",#");
      PeriodAxis periodAxis0 = new PeriodAxis("pI3f/|qc0{cJ9\",#");
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis0, periodAxis0, statisticalBarRenderer0);
      assertEquals(0.0, periodAxis0.getUpperBound(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      categoryPlot0.setDataset((CategoryDataset) taskSeriesCollection0);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Color color0 = (Color)combinedRangeCategoryPlot0.getRangeCrosshairPaint();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(255, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setRangeCrosshairValue(169.11280015073967);
      assertEquals(169.11280015073967, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getPlotType();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Color color0 = (Color)categoryPlot0.getDomainGridlinePaint();
      assertEquals((-1), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(0, 0);
      categoryPlot0.zoomDomainAxes((double) 10, (double) 10, plotRenderingInfo0, (Point2D) point0);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(chartPanel0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot0, 10);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      boolean boolean0 = categoryPlot0.isRangeCrosshairLockedOnData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      List list0 = categoryPlot0.getCategories();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("jinw/DSr", combinedRangeCategoryPlot0.DEFAULT_VALUE_LABEL_FONT, combinedRangeCategoryPlot0, false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(0, 2348.3397041641, "ZOOM_RESET_RANGE", 1.0F, jFreeChart0.DEFAULT_BACKGROUND_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      boolean boolean0 = combinedRangeCategoryPlot0.removeAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      assertFalse(boolean0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.clearAnnotations();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      combinedRangeCategoryPlot0.setRenderer((CategoryItemRenderer) stackedBarRenderer3D0, false);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Null 'offset' argument.");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      combinedRangeCategoryPlot0.getDomainGridlinePosition();
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BasicStroke basicStroke0 = (BasicStroke)categoryPlot0.getDomainGridlineStroke();
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(2, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("8(2", scatterRenderer0.ZERO, 0.2);
      categoryPlot0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1828, 1828, 10, (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setAxisOffset(combinedRangeCategoryPlot0.DEFAULT_INSETS);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.clearDomainAxes();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      combinedDomainCategoryPlot0.add(categoryPlot0, 10);
      assertEquals(10, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis[] categoryAxisArray0 = new CategoryAxis[4];
      combinedDomainCategoryPlot0.setDomainAxes(categoryAxisArray0);
      assertEquals(4, combinedDomainCategoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "7#a)6v");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      CategoryAxis categoryAxis0 = new CategoryAxis("7#a)6v");
      combinedRangeCategoryPlot0.getDomainAxisIndex(categoryAxis0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = new Range(0.65, 0.65);
      ModuloAxis moduloAxis0 = new ModuloAxis("+#pXiq+WXdt\"*O(uq|9", range0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(moduloAxis0);
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.getDomainAxisIndex((CategoryAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "7#a)6v");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation(10);
      assertNotNull(axisLocation0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, numberAxis3D0, groupedStackedBarRenderer0);
      // Undeclared exception!
      try { 
        categoryPlot0.setDomainAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(":KgM");
      combinedDomainCategoryPlot0.setDomainAxis(2897, (CategoryAxis) subCategoryAxis0, true);
      assertEquals(2898, combinedDomainCategoryPlot0.getDomainAxisCount());
      
      combinedDomainCategoryPlot0.clearDomainAxes();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      combinedDomainCategoryPlot0.add(categoryPlot0, 10);
      categoryPlot0.getRangeAxis(2003);
      assertEquals(10, categoryPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      combinedDomainCategoryPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(6, combinedDomainCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DateAxis dateAxis0 = new DateAxis("Null 'position' argument.");
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis0, dateAxis0, statisticalLineAndShapeRenderer0);
      int int0 = categoryPlot0.getRangeAxisIndex(dateAxis0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.getRangeAxisIndex((ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.75, 1.0F);
      int int0 = combinedRangeCategoryPlot0.getRangeAxisIndex(cyclicNumberAxis0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getRangeAxisLocation(264);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRangeAxisLocation(0, (AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.clearRangeAxes();
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.clearRangeAxes();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.mapDatasetToDomainAxis(600, 600);
      assertTrue(categoryPlot0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      combinedDomainCategoryPlot0.setDataset(0, (CategoryDataset) null);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxisForDataset((-85));
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      combinedDomainCategoryPlot0.getRangeAxisForDataset(2455);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'offset' argument.");
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, periodAxis0, stackedBarRenderer3D0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Null 'offset' argument.");
      categoryPlot0.setDataset(500, (CategoryDataset) defaultMultiValueCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'offset' argument.", numberAxis3D0.DEFAULT_AXIS_LABEL_FONT, categoryPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(500, 500, 10, chartRenderingInfo0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[2];
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, 0.0);
      categoryItemRendererArray0[0] = (CategoryItemRenderer) barRenderer3D0;
      combinedDomainCategoryPlot0.setRenderers(categoryItemRendererArray0);
      combinedDomainCategoryPlot0.setRenderers(categoryItemRendererArray0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "7#a)6v");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      combinedRangeCategoryPlot0.getRendererForDataset(defaultKeyedValues2DDataset0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "7#a)6v");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedRangeCategoryPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setColumnRenderingOrder((SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4106.21, 0.0, "Null 'orientation' argument.");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      SortOrder sortOrder0 = combinedDomainCategoryPlot0.getColumnRenderingOrder();
      combinedRangeCategoryPlot0.setRowRenderingOrder(sortOrder0);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setRowRenderingOrder((SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setDomainGridlinesVisible(false);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setDomainGridlinesVisible(true);
      assertTrue(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'offset' argument.");
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, periodAxis0, stackedBarRenderer3D0);
      // Undeclared exception!
      try { 
        categoryPlot0.setDomainGridlinePosition((CategoryAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'position' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ValueAxis valueAxis0 = categoryPlot0.getRangeAxis(2882);
      categoryPlot0.setDomainGridlinePaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setRangeGridlinesVisible(true);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setRangeGridlinesVisible(false);
      assertFalse(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Stroke stroke0 = areaRenderer0.getItemStroke(10, (-110));
      categoryPlot0.setRangeGridlineStroke(stroke0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      combinedRangeCategoryPlot0.setRangeGridlinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      categoryPlot0.handleClick(2531, (-2), plotRenderingInfo0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoom((-187.5));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "7#a)6v");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      combinedRangeCategoryPlot0.zoom(50.0);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(52.5, cyclicNumberAxis0.getPeriod(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DateAxis dateAxis0 = new DateAxis("Null 'position' argument.");
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis0, dateAxis0, statisticalLineAndShapeRenderer0);
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, true);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "7#a)6v");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0.0F);
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.addDomainMarker(1, categoryMarker0, (Layer) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeCategoryPlot0.addDomainMarker(categoryMarker0, layer0);
      combinedRangeCategoryPlot0.clearDomainMarkers();
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Layer layer0 = Layer.FOREGROUND;
      Millisecond millisecond0 = new Millisecond();
      CategoryMarker categoryMarker0 = new CategoryMarker(millisecond0, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      combinedRangeCategoryPlot0.addDomainMarker(categoryMarker0, layer0);
      combinedRangeCategoryPlot0.addDomainMarker(0, categoryMarker0, layer0, false);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeCategoryPlot0.addDomainMarker(categoryMarker0, layer0);
      combinedRangeCategoryPlot0.clearDomainMarkers();
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getDomainMarkers((-6049), (Layer) null);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainCategoryPlot0.addDomainMarker(15, categoryMarker0, layer0, false);
      Collection collection0 = combinedDomainCategoryPlot0.getDomainMarkers(15, layer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainCategoryPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_STROKE, 0.5F);
      Layer layer0 = Layer.BACKGROUND;
      boolean boolean0 = combinedDomainCategoryPlot0.removeDomainMarker((-1322), (Marker) categoryMarker0, layer0, false);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainCategoryPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_STROKE, 0.5F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainCategoryPlot0.addDomainMarker((-1322), categoryMarker0, layer0, false);
      boolean boolean0 = combinedDomainCategoryPlot0.removeDomainMarker((-1322), (Marker) categoryMarker0, layer0, false);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(boolean0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      combinedRangeCategoryPlot0.addRangeMarker((Marker) categoryMarker0, (Layer) null);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(169.11280015073967, 1.0F, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeCategoryPlot0.addRangeMarker(0, (Marker) intervalMarker0, layer0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(50000.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeCategoryPlot0.addRangeMarker(10, (Marker) valueMarker0, layer0, false);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getRangeMarkers(0, (Layer) null);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.removeRangeMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      Layer layer0 = Layer.BACKGROUND;
      boolean boolean0 = combinedRangeCategoryPlot0.removeRangeMarker(2869, (Marker) categoryMarker0, layer0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ValueMarker valueMarker0 = new ValueMarker(10, categoryPlot0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      boolean boolean0 = categoryPlot0.removeRangeMarker((Marker) valueMarker0, layer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setRangeCrosshairVisible(false);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setRangeCrosshairLockedOnData(true);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      
      combinedDomainCategoryPlot0.setRangeCrosshairLockedOnData(false);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      
      categoryPlot0.setRangeCrosshairVisible(true);
      categoryPlot0.setRangeCrosshairValue((-1630.794883469045), true);
      assertTrue(categoryPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Stroke stroke0 = areaRenderer0.lookupSeriesOutlineStroke(10);
      combinedDomainCategoryPlot0.setRangeCrosshairStroke(stroke0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueAxis valueAxis0 = combinedRangeCategoryPlot0.getRangeAxisForDataset(0);
      assertNotNull(valueAxis0);
      
      combinedRangeCategoryPlot0.setRangeCrosshairPaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.addAnnotation((CategoryAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", false, (-1276.27257), (-1276.27257));
      combinedDomainCategoryPlot0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, false);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.removeAnnotation((CategoryAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(" Low=", fixedMillisecond0, 2.0F);
      combinedRangeCategoryPlot0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      boolean boolean0 = combinedRangeCategoryPlot0.removeAnnotation((CategoryAnnotation) categoryTextAnnotation0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      DateAxis dateAxis0 = new DateAxis("Xf");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.calculateDomainAxisSpace((Graphics2D) null, rectangle0, (AxisSpace) null);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(axisSpace0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.calculateRangeAxisSpace((Graphics2D) null, (Rectangle2D) null, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.5F, 834.0, (-1504.0), 500);
      jFreeChart0.setPadding(rectangleInsets0);
      jFreeChart0.createBufferedImage(358, 500);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("6LF", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, false);
      jFreeChart0.createBufferedImage(333, 1);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Point point0 = new Point(10, 10);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      ArrayList<IntervalMarker> arrayList0 = new ArrayList<IntervalMarker>();
      combinedDomainCategoryPlot0.drawRangeGridlines((Graphics2D) null, rectangle0, arrayList0);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(jDBCCategoryDataset0);
      Rectangle rectangle0 = new Rectangle();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Rectangle2D rectangle2D0 = spiderWebPlot0.DEFAULT_INSETS.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      ArrayList<SymbolAxis> arrayList0 = new ArrayList<SymbolAxis>();
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("Ot,WZ2q;-_ P", stringArray0);
      arrayList0.add(symbolAxis0);
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.drawRangeGridlines((Graphics2D) null, rectangle2D0, arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.axis.SymbolAxis cannot be cast to org.jfree.chart.axis.ValueTick
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[10];
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      categoryItemRendererArray0[0] = (CategoryItemRenderer) statisticalBarRenderer0;
      categoryPlot0.setRenderers(categoryItemRendererArray0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      
      jFreeChart0.createBufferedImage(1828, 1828, 10, (ChartRenderingInfo) null);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("`", combinedRangeCategoryPlot0.DEFAULT_VALUE_LABEL_FONT, combinedRangeCategoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.drawRangeLine(graphics2D0, (Rectangle2D) null, (-1438.299), statisticalLineAndShapeRenderer0.DEFAULT_OUTLINE_STROKE, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      float[] floatArray0 = new float[1];
      Kernel kernel0 = new Kernel(1150, 0, floatArray0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0, 10, sunGraphics2D0.hints);
      Rectangle rectangle0 = (Rectangle)convolveOp0.getBounds2D(bufferedImage0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LogAxis logAxis0 = new LogAxis((String) null);
      combinedDomainCategoryPlot0.drawRangeCrosshair(sunGraphics2D0, rectangle0, plotOrientation0, 0.0, logAxis0, logAxis0.DEFAULT_TICK_MARK_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertEquals((-8355712), sunGraphics2D0.eargb);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      float[] floatArray0 = new float[1];
      Kernel kernel0 = new Kernel(1150, 0, floatArray0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0, 10, ((SunGraphics2D) graphics2D0).hints);
      Rectangle2D rectangle2D0 = convolveOp0.getBounds2D(bufferedImage0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      LogAxis logAxis0 = new LogAxis((String) null);
      combinedDomainCategoryPlot0.drawRangeCrosshair(graphics2D0, rectangle2D0, plotOrientation0, (-20.536703322914125), logAxis0, logAxis0.DEFAULT_TICK_MARK_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      float[] floatArray0 = new float[1];
      Kernel kernel0 = new Kernel(1150, 0, floatArray0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0, 10, sunGraphics2D0.hints);
      Rectangle rectangle0 = (Rectangle)convolveOp0.getBounds2D(bufferedImage0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      LogAxis logAxis0 = new LogAxis((String) null);
      combinedDomainCategoryPlot0.drawRangeCrosshair(sunGraphics2D0, rectangle0, plotOrientation0, 0.0, logAxis0, logAxis0.DEFAULT_TICK_MARK_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals((-8355712), sunGraphics2D0.eargb);
      assertEquals((-8355712), sunGraphics2D0.pixel);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      categoryPlot0.getDataRange(numberAxis3D0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DateAxis dateAxis0 = new DateAxis("4+5 NJb$^i");
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-1263.4), 0.2);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis3D0, dateAxis0, barRenderer3D0);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis1 = new DateAxis("4+5 NJb$^i", zoneInfo0);
      categoryPlot0.getDataRange(dateAxis1);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      CategoryAxis categoryAxis0 = new CategoryAxis("1&");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      CategoryPlot categoryPlot0 = new CategoryPlot(jDBCCategoryDataset0, categoryAxis0, cyclicNumberAxis0, (CategoryItemRenderer) null);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      double[][] doubleArray0 = new double[8][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      combinedRangeCategoryPlot0.setDataset((CategoryDataset) defaultIntervalCategoryDataset0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      List list0 = combinedRangeCategoryPlot0.getCategoriesForAxis(categoryAxis0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisSpace axisSpace0 = new AxisSpace();
      categoryPlot0.setFixedDomainAxisSpace(axisSpace0, false);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedDomainCategoryPlot0.setFixedRangeAxisSpace(axisSpace0, false);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis0, valueAxis0, stackedAreaRenderer0);
      List list0 = categoryPlot0.getCategories();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainCategoryPlot0.zoomRangeAxes(0.0025, plotRenderingInfo0, (Point2D) null, true);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "7#a)6v");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 751, 10, 10, (-410), 10, (-1), false, true, false, true, false, true);
      Point2D point2D0 = chartPanel0.translateScreenToJava2D(point0);
      combinedRangeCategoryPlot0.zoomRangeAxes(2069.9686, plotRenderingInfo0, point2D0, true);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "7#a)6v");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedRangeCategoryPlot0.setOrientation(plotOrientation0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 751, 10, 10, (-410), 10, (-1), false, true, false, true, false, true);
      Point2D point2D0 = chartPanel0.translateScreenToJava2D(point0);
      combinedRangeCategoryPlot0.zoomRangeAxes(2069.9686, plotRenderingInfo0, point2D0, true);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeCategoryPlot0.zoomRangeAxes((-19.71), (-9.0), plotRenderingInfo0, (Point2D) null);
      assertTrue(chartPanel0.getRefreshBuffer());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setAnchorValue(180.0, false);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'offset' argument.");
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, periodAxis0, stackedBarRenderer3D0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Null 'offset' argument.");
      categoryPlot0.equals(numberAxis3D0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      combinedRangeCategoryPlot1.clearRangeMarkers();
      assertTrue(combinedRangeCategoryPlot0.equals((Object)combinedRangeCategoryPlot1));
      assertEquals(0, combinedRangeCategoryPlot1.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
      
      combinedRangeCategoryPlot0.setBackgroundAlpha(0.0F);
      combinedRangeCategoryPlot1.clearRangeMarkers();
      assertFalse(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      boolean boolean0 = categoryPlot0.equals(combinedRangeCategoryPlot0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
      
      CategoryAnchor categoryAnchor0 = CategoryAnchor.START;
      combinedRangeCategoryPlot0.setDomainGridlinePosition(categoryAnchor0);
      combinedRangeCategoryPlot1.clearRangeMarkers();
      assertFalse(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
      
      combinedRangeCategoryPlot0.setDomainGridlineStroke(combinedRangeCategoryPlot1.DEFAULT_OUTLINE_STROKE);
      combinedRangeCategoryPlot1.clearRangeMarkers();
      assertEquals(1, combinedRangeCategoryPlot1.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
      
      combinedRangeCategoryPlot1.setDomainGridlinePaint(combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeCategoryPlot1.clearRangeMarkers();
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
      
      combinedRangeCategoryPlot0.setWeight(1417);
      combinedRangeCategoryPlot1.clearRangeMarkers();
      assertEquals(1, combinedRangeCategoryPlot1.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      combinedRangeCategoryPlot0.setDataset(2877, (CategoryDataset) defaultKeyedValues2DDataset0);
      combinedRangeCategoryPlot0.clone();
      assertEquals(2878, combinedRangeCategoryPlot0.getDatasetCount());
  }
}
