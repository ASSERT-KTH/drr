/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 25 11:55:36 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.RadialGradientPaint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Arc2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.time.Instant;
import java.util.Date;
import java.util.Map;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JTextPane;
import javax.swing.TransferHandler;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.GradientPaintTransformType;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;


public class XYPlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("AimanHan");
      Stroke stroke0 = extendedCategoryAxis0.getAxisLineStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, (-4499.9498), combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, stroke0, 0.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeDomainMarker((Marker) intervalMarker0, layer0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeAxis(1076, (ValueAxis) null);
      assertEquals(1077, combinedRangeXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      xYPlot0.setRangeAxisLocation(925, axisLocation0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addRangeMarker(31, (Marker) categoryMarker0, layer0);
      xYPlot0.addRangeMarker(31, (Marker) categoryMarker0, layer0, true);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.7976931348623157E308);
      combinedRangeXYPlot0.addRangeMarker((Marker) valueMarker0);
      combinedRangeXYPlot0.clearRangeMarkers();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(105.52908934, 2, (-4.0), 1.0);
      boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = (Color)xYPlot0.getDomainZeroBaselinePaint();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(true);
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getRangeZeroBaselineStroke();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0, basicStroke0.getLineJoin());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Number[][] numberArray0 = new Number[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryAxis categoryAxis0 = new CategoryAxis("J/JPn0l");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, valueAxis0, stackedBarRenderer3D0);
      AxisLocation axisLocation0 = categoryPlot0.getDomainAxisLocation(3);
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainCrosshairValue((double) 83);
      assertEquals(83.0, xYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      boolean boolean0 = combinedRangeXYPlot0.isRangeCrosshairLockedOnData();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      combinedDomainXYPlot0.setDomainAxisLocation(201, axisLocation0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisCount();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker((Marker) categoryMarker0);
      assertFalse(boolean0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.getAnnotations();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      combinedRangeXYPlot0.setRenderer(2775, (XYItemRenderer) clusteredXYBarRenderer0);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("The index value (");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setDomainZeroBaselineVisible(true);
      assertTrue(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("OK8vP*@T-");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      Color color0 = (Color)combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals((-16777216), color0.getRGB());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      combinedDomainXYPlot0.setDataset((XYDataset) defaultTableXYDataset0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairValue(0.0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearAnnotations();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Color color0 = (Color)combinedRangeXYPlot0.getRangeCrosshairPaint();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.add((XYPlot) combinedRangeXYPlot0, 10);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedRangeXYPlot0, defaultTableXYDataset0);
      combinedRangeXYPlot0.datasetChanged(datasetChangeEvent0);
      assertEquals(10, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      combinedDomainXYPlot0.getIndexOf(xYAreaRenderer0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(combinedRangeXYPlot0);
      combinedRangeXYPlot0.rendererChanged(rendererChangeEvent0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(0.05);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      xYPlot0.setRenderer((XYItemRenderer) null);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      combinedDomainXYPlot0.setFixedLegendItems(legendItemCollection0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation(500);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0, true);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDomainAxisCount();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainMarkers((Layer) null);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      Color color0 = (Color)combinedRangeXYPlot0.getDomainCrosshairPaint();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, color0.getRed());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getRangeCrosshairStroke();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point(10, 10);
      xYPlot0.zoomDomainAxes(5.0E-4, plotRenderingInfo0, (Point2D) point0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedDomainXYPlot0.getQuadrantOrigin();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getPlotType();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10);
      boolean boolean0 = xYPlot0.removeDomainMarker((Marker) valueMarker0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(boolean0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = combinedDomainXYPlot0.getWeight();
      assertEquals(1, int0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("9");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      xYPlot0.setRangeTickBandPaint(dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(0.05);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(0, 500, (-326.005518), 2031.5500525178, xYBoxAndWhiskerRenderer0.DEFAULT_STROKE, dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      xYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer(0);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, logAxis0, logAxis0, xYBubbleRenderer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      xYPlot0.zoomRangeAxes((double) xYBubbleRenderer0.ZERO, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("M^=sBaT-\u0003W");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.setDomainTickBandPaint(logAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      xYPlot0.setOrientation(plotOrientation0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("AimanHan");
      combinedDomainXYPlot0.setAxisOffset(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      assertEquals(4, combinedRangeXYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearDomainAxes();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearDomainAxes();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(12);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(axisLocation0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation0, false);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) null);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis("Unrecognised rowKey: ");
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) dateAxis0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      combinedRangeXYPlot0.add(xYPlot0, 218);
      assertEquals(218, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(2, combinedRangeXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeAxes();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeAxes();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisEdge(129);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxisLocation((AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(0);
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, false);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      xYPlot0.setDataset(999, (XYDataset) xYIntervalSeriesCollection0);
      assertEquals(1000, xYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      combinedRangeXYPlot0.setDataset(0, (XYDataset) timeSeriesCollection0);
      combinedRangeXYPlot0.setDataset(0, (XYDataset) timeSeriesCollection0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDataset(14, (XYDataset) null);
      assertEquals(15, combinedDomainXYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      int int0 = combinedRangeXYPlot0.indexOf(timeSeriesCollection0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals((-1), int0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      combinedRangeXYPlot0.setDataset(0, (XYDataset) timeSeriesCollection0);
      int int0 = combinedRangeXYPlot0.indexOf(timeSeriesCollection0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, int0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = xYPlot0.getDatasetRenderingOrder();
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      combinedDomainXYPlot0.getRendererForDataset(defaultTableXYDataset0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDomainGridlinesVisible(true);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainGridlinesVisible(false);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(Double.NaN);
      xYPlot0.setDomainGridlineStroke(candlestickRenderer0.DEFAULT_OUTLINE_STROKE);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      NumberAxis numberAxis0 = new NumberAxis();
      combinedDomainXYPlot0.setDomainGridlinePaint(numberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeGridlinesVisible(true);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      xYPlot0.setRangeGridlineStroke(xYBoxAndWhiskerRenderer0.DEFAULT_OUTLINE_STROKE);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(Double.NaN);
      Paint paint0 = candlestickRenderer0.getItemFillPaint((-2903), 10);
      xYPlot0.setRangeGridlinePaint(paint0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(Double.NaN);
      Paint paint0 = candlestickRenderer0.getItemFillPaint((-2903), 10);
      xYPlot0.setDomainZeroBaselinePaint(paint0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.setRangeZeroBaselineStroke(periodAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Aiman Han");
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(extendedCategoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Point2D point2D0 = spiderWebPlot0.getWebPoint(defaultCaret0, 500, 15);
      xYPlot0.setQuadrantOrigin(point2D0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("9");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.getQuadrantPaint((-2243));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-2243) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getQuadrantPaint(4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (4) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getQuadrantPaint(0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.setQuadrantPaint((-815), (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-815) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("M^=sBaT-\u0003W");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantPaint((byte)7, logAxis0.DEFAULT_AXIS_LABEL_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (7) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = (Color)MeterPlot.DEFAULT_DIAL_BACKGROUND_PAINT;
      xYPlot0.setQuadrantPaint(0, color0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-528), (Marker) categoryMarker0, layer0, false);
      xYPlot0.clearDomainMarkers();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueMarker valueMarker0 = new ValueMarker((-1017.123026881647), combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker(10, (Marker) valueMarker0, layer0, false);
      combinedDomainXYPlot0.clearDomainMarkers();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker((-3199), (Marker) null, layer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, (-3354.0968144310755));
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-528), (Marker) categoryMarker0, layer0, false);
      xYPlot0.addDomainMarker((-528), (Marker) categoryMarker0, layer0, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearRangeMarkers();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedDomainXYPlot0.addRangeMarker(87, (Marker) valueMarker0, (Layer) null, true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3205, 3205, 3205);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      PeriodAxis periodAxis0 = new PeriodAxis("!ys]%~R%q<z*?F7", millisecond0, millisecond0, zoneInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker("", periodAxis0.DEFAULT_TICK_MARK_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(10, (Marker) categoryMarker0, layer0, false);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearRangeMarkers(2017);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker(0, (Marker) null, layer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      ValueMarker valueMarker0 = new ValueMarker(3016.34);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0, layer0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(3460.72381685759, 0.0, (-2032.159487), 0.0);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0, false);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeAnnotation((XYAnnotation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2350, 2350, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D_Double0, (AxisSpace) null);
      assertEquals(14.0, axisSpace0.getLeft(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(91, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LegendTitle legendTitle0 = new LegendTitle(xYPlot0);
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.drawRangeMarkers(graphics2D0, rectangle2D0, 91, layer0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(181, 119, 2257.20993945, (double) 1.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawAxes(graphics2D0, (Rectangle2D) null, (Rectangle2D) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      NumberAxis numberAxis0 = new NumberAxis();
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("M>^duAo!9y]@Az", combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(87, 500);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double((-2645.0), 2031.5500525178, 0.0, (-1167.6008));
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)line2D_Double0.getBounds2D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Map map0 = combinedDomainXYPlot0.drawAxes(sunGraphics2D0, rectangle2D_Double0, rectangle2D_Double0, plotRenderingInfo0);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset((-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -6 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset(973);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 973 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(706.0431469843, ":LLyc~a[8C$~AbXE");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(2317);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 2317 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(1.0F, false);
      JFreeChart jFreeChart0 = new JFreeChart("8I2rYA", clusteredXYBarRenderer0.DEFAULT_VALUE_LABEL_FONT, thermometerPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 895, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<RadialGradientPaint> vector0 = new Vector<RadialGradientPaint>();
      combinedRangeXYPlot0.drawDomainGridlines(graphics2D0, (Rectangle2D) null, vector0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(69, 127, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Vector<Integer> vector0 = new Vector<Integer>();
      xYPlot0.drawRangeGridlines(graphics2D0, rectangle2D_Double0, vector0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.drawDomainMarkers((Graphics2D) null, (Rectangle2D) null, 3, layer0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      Millisecond millisecond0 = new Millisecond();
      CategoryMarker categoryMarker0 = new CategoryMarker(millisecond0);
      xYPlot0.addDomainMarker((Marker) categoryMarker0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'dividerPaint' argument.", xYPlot0);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      
      jFreeChart0.createBufferedImage(1077, 59);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-J");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DateAxis dateAxis0 = new DateAxis("-J");
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(4108.46);
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, dateAxis0, dateAxis0, stackedXYBarRenderer0);
      xYPlot0.getRangeMarkers(500, (Layer) null);
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      NumberAxis numberAxis0 = new NumberAxis("+DZ");
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(974, 244);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawHorizontalLine(graphics2D0, (Rectangle2D) null, 0.05, numberAxis0.DEFAULT_AXIS_LINE_STROKE, numberAxis0.DEFAULT_TICK_MARK_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("L1wA#DV3 IUry");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getSelectedTextColor();
      combinedDomainXYPlot0.drawDomainCrosshair((Graphics2D) null, defaultCaret0, plotOrientation0, 2800.56602812, logarithmicAxis0, lineRenderer3D0.DEFAULT_OUTLINE_STROKE, color0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("x>0*");
      AreaRenderer areaRenderer0 = new AreaRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'dividerPaint' argument.", xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1077, 1, (double) 1.0F, 2118.3469275178, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      // Undeclared exception!
      try { 
        xYPlot0.drawDomainCrosshair(graphics2D0, (Rectangle2D) null, plotOrientation0, 0.2, logarithmicAxis0, areaRenderer0.DEFAULT_STROKE, ((SunGraphics2D) graphics2D0).foregroundColor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'dividerPaint' argument.", xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1077, 59);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(5, 999, (-651), (-111));
      Stroke stroke0 = areaRenderer0.getItemStroke(0, 999);
      xYPlot0.drawVerticalLine(graphics2D0, rectangle0, 118.0, stroke0, dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("L1wA#DV3 IUry");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, defaultCaret0, 1.0E-8, lineRenderer3D0.DEFAULT_OUTLINE_STROKE, lineRenderer3D0.DEFAULT_WALL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("L1wA#DV3 IUry");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, defaultCaret0, plotOrientation0, 2800.56602812, logarithmicAxis0, logarithmicAxis0.DEFAULT_TICK_MARK_STROKE, logarithmicAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.handleClick(0, 140, plotRenderingInfo0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Year year0 = new Year(date0, timeZone0);
      PeriodAxis periodAxis0 = new PeriodAxis("n9nC/:|Z", year0, year0);
      xYPlot0.setDomainAxis(250, (ValueAxis) periodAxis0, false);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      xYPlot0.setRangeAxis(56, (ValueAxis) dateAxis0, true);
      assertEquals(57, xYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairVisible(false);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairVisible(true);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("M^=sBaT-\u0003W");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(false);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("123");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.setDomainCrosshairStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("L1wA#DV3 IUry");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      combinedDomainXYPlot0.setDomainCrosshairPaint(lineRenderer3D0.DEFAULT_VALUE_LABEL_PAINT);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeCrosshairVisible(false);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeCrosshairVisible(true);
      xYPlot0.setRangeCrosshairValue((double) 0.0F, true);
      assertTrue(xYPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("The index value (");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeCrosshairVisible(true);
      xYPlot0.setRangeCrosshairValue((double) 0.0F, false);
      assertTrue(xYPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("fZMi$4");
      Stroke stroke0 = categoryAxis3D0.getAxisLineStroke();
      combinedDomainXYPlot0.setRangeCrosshairStroke(stroke0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis((String) null, zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setRangeCrosshairPaint(dateAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 2159.468769224337);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2775, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.5F, 0.0F, 0.9F, (-2094.1572F));
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Float0);
      combinedRangeXYPlot0.setFixedDomainAxisSpace(axisSpace0, false);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      TransferHandler transferHandler0 = new TransferHandler("fZMi$4");
      Point point0 = transferHandler0.getDragImageOffset();
      combinedDomainXYPlot0.zoomDomainAxes(170.463, plotRenderingInfo0, (Point2D) point0, true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.zoomDomainAxes(11.353185464195803, plotRenderingInfo0, (Point2D) null, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 974, (-2273), 3, 2, 3, 2, true, false, false, true, false, true);
      Point point0 = chartPanel0.getLocation();
      combinedDomainXYPlot0.zoomDomainAxes(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, plotRenderingInfo0, (Point2D) point0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      JFreeChart jFreeChart0 = new JFreeChart("g#CmZC)$", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      Point point0 = chartPanel0.translateJava2DToScreen(point2D_Float0);
      xYPlot0.zoomDomainAxes(819.145854710239, 819.145854710239, plotRenderingInfo0, (Point2D) point0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(chartPanel0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.zoomRangeAxes((double) 0, plotRenderingInfo0, (Point2D) null, true);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(500, customXYToolTipGenerator0, (XYURLGenerator) null);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, standardXYItemRenderer0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      Point2D point2D0 = arc2D_Double0.getEndPoint();
      xYPlot0.zoomRangeAxes(4.0, plotRenderingInfo0, point2D0, true);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = new Point();
      combinedRangeXYPlot0.zoomRangeAxes(Double.NaN, (double) 1.0F, plotRenderingInfo0, (Point2D) point0);
      assertFalse(dateAxis0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      combinedRangeXYPlot0.zoomRangeAxes(Double.NaN, (double) 1.0F, plotRenderingInfo0, (Point2D) point0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      int int0 = xYPlot0.getSeriesCount();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, int0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      int int0 = xYPlot0.getSeriesCount();
      assertEquals(0, int0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(10, 10, day0);
      xYPlot0.setDataset(145, (XYDataset) dynamicTimeSeriesCollection0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2350, 2350, 10, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      boolean boolean0 = xYPlot0.equals(standardGradientPaintTransformer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      NumberAxis numberAxis0 = new NumberAxis("IF+]n%4AB72ssO");
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(500, standardXYToolTipGenerator0, timeSeriesURLGenerator0);
      XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
      Object object0 = xYPlot0.clone();
      assertEquals((-5.0E-9), numberAxis0.getLowerBound(), 0.01);
      assertFalse(object0.equals((Object)xYPlot0));
  }
}
