/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 14:17:16 GMT 2019
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.Writer;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class StrBuilder_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendFixedWidthPadLeft((Object) "", 270, 'm');
      strBuilder0.deleteAll('m');
      assertEquals(270, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("U;w>i,d");
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals("U;w>i,d", stringBuffer0.toString());
      assertEquals(7, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("U;w>i,d");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("U;w>i,d");
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertEquals(39, strBuilder0.capacity());
      assertEquals(6, int0);
      assertEquals(7, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
      StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("DshM0{:W [Xw@7C2qv");
      strBuilder0.setNewLineText("");
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(18, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("T%\"6?vwe1%>e)|e>");
      int int0 = strBuilder0.capacity();
      assertEquals(48, int0);
      assertEquals(16, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("EW}{EJdh!w{/`I");
      strBuilder0.getNewLineText();
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) strMatcher_CharSetMatcher0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("U;w>i,d");
      int int0 = strBuilder0.indexOf('4');
      assertEquals(39, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(7, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pS#fna)5!");
      int int0 = strBuilder0.lastIndexOf('7');
      assertEquals((-1), int0);
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("NcYNC");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(5, 0, 'T');
      assertEquals(37, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" \t\n\r\f");
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      strBuilder0.replaceFirst(strMatcher0, " \t\n\r\f");
      assertEquals(9, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(39);
      int int0 = strBuilder0.indexOf("p:E9]g9{|$H4=E");
      assertEquals((-1), int0);
      assertEquals(39, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      Reader reader0 = strBuilder0.asReader();
      long long0 = reader0.skip(931L);
      assertEquals(0L, long0);
      assertEquals(0, strBuilder0.size());
      assertFalse(reader0.ready());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("6");
      strBuilder0.asTokenizer();
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, (long) 0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("NcYNC");
      strBuilder0.insert(0, 0);
      assertEquals(6, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("U;w>i,d");
      strBuilder0.insert(6, (float) (-106));
      assertEquals(13, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1756);
      // Undeclared exception!
      try { 
        strBuilder0.insert(39, (double) 39);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 39
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pS#fna)5!");
      int int0 = strBuilder0.lastIndexOf("pS#fna)5!");
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.insert(0, 'I');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("DshM0{:W [Xw@7C2qv");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("NcYNC");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(37, strBuilder0.capacity());
      assertTrue(boolean0);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("U;w>i,d");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark((-106));
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pS#fna)5!");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.append('c');
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\u0006Zja%F+-qZeIwT");
      Writer writer0 = strBuilder0.asWriter();
      writer0.write((String) null);
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[8];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pS#fna)5!");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pS#fna)5!");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 17, 1575);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 1575
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("end < start", 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-339));
      strBuilder0.setNullText("awt.toolkit");
      strBuilder0.append((StrBuilder) null, 33, 4302);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pS#fna)5!");
      StrBuilder strBuilder1 = strBuilder0.setLength(114);
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      strBuilder1.deleteAll((StrMatcher) strMatcher_TrimMatcher0);
      assertEquals(114, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-3082));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3082
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2173);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(2173, 117, 'C');
      strBuilder1.appendFixedWidthPadRight((-2054), 2173, 'B');
      strBuilder0.setLength(2173);
      assertEquals(2173, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      strBuilder0.append(stringBuffer0);
      strBuilder0.minimizeCapacity();
      assertEquals(112, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("6");
      assertEquals(33, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      assertEquals(1, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(0);
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(1, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1304));
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("w9H02`Tms|uL");
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("os.arch");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(111, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.charAt(3165);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3165
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("9\"?x9v{mp");
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-893), '(');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -893
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1304));
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(0, 'R');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-163));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -163
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt('m');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 109
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendFixedWidthPadLeft((Object) "", 270, 'm');
      strBuilder0.deleteCharAt('m');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.append('_');
      strBuilder0.toCharArray();
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-25));
      strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("DshM0{:W [Xw@7C2qv");
      char[] charArray0 = strBuilder0.toCharArray(0, 0);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      char[] charArray0 = new char[9];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-468));
      char[] charArray0 = new char[1];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, charArray1.length);
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1733);
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-1), (-1), charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(4822, 4, charArray0, 4822);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append((-512));
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(4822, 4, charArray0, 4822);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pH=Co6!i~PHXDE4khq`");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[9];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(9, int0);
      assertEquals(51, strBuilder0.capacity());
      assertEquals(19, strBuilder0.size());
      assertArrayEquals(new char[] {'p', 'H', '=', 'C', 'o', '6', '!', 'i', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.size());
      
      strBuilder0.trim();
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append((String) null, (-320), (-320));
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("", (-1), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.append(":iwd'j,UOD,X|", 47, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(31);
      Integer integer0 = new Integer(31);
      strBuilder0.appendFixedWidthPadRight((Object) integer0, 2166, 'S');
      String string0 = strBuilder0.substring(31);
      strBuilder0.append(string0, 4, 31);
      assertEquals(2197, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("", 0, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append("UoW*CCpeS'cB%.", 5, 0);
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("|ZW)^$?_E0");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2173);
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 2807, 116);
      assertEquals(2173, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("end < start");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(527);
      StringBuffer stringBuffer0 = new StringBuffer("]Zr[wsFy");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 527, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("startIndex must be valid");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 22, (-1590));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(117);
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      StringBuffer stringBuffer0 = new StringBuffer("file.separator");
      strBuilder0.append(stringBuffer0, 2, 2);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pS#fna)5!");
      strBuilder0.append(strBuilder0);
      assertEquals(18, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 15, Integer.MAX_VALUE);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2147483634
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-1068), 1086);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(39);
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 39, (-939));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("JQ4B2V7");
      StrBuilder strBuilder1 = strBuilder0.append((-1866.1456F));
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder0, 9, (-169));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, 2727);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e");
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null);
      assertEquals(1, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-3447));
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((char[]) null, (-3447), 2);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(347);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-1), 347);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 347
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[5];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-609));
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 0, (-1129));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1129
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 0, 2517);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 2517
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[9];
      strBuilder0.append(charArray0, 2, 4);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pH=Co6!i~PHXDE4khq`");
      strBuilder0.append(false);
      assertEquals(24, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1241);
      strBuilder0.append(true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "7*V3zSu{F");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      Object[] objectArray0 = new Object[2];
      strBuilder0.appendWithSeparators(objectArray0, "&");
      assertEquals(17, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(97);
      Object[] objectArray0 = new Object[1];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertEquals(97, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\u0006Zja%F+-qZeIwT");
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "m2~B<5:DO,ngsv");
      assertEquals(14, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "Invalid length: ");
      assertEquals(16, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
  }

////  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) strBuilder0);
      linkedList0.add((Object) strBuilder0);
      strBuilder0.appendWithSeparators((Collection) linkedList0, "");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "java.vendor.url");
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList0.listIterator(0);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) listIterator0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

////  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(1, 1, '\'');
      strBuilder0.insert(0, (Object) strBuilder_StrBuilderReader0);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterString("java.vendor");
      strBuilder1.appendWithSeparators((Iterator) strTokenizer0, "java.vendor");
      assertEquals(144, strBuilder0.capacity());
      assertEquals(144, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1889));
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-1889), '{');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding('~', '~');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 48, 'O');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) linkedList0, 0, 'a');
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) null, 2273, '\\');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

////  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, (int) '\"', '~');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(1323, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1323
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2173);
      strBuilder0.appendFixedWidthPadRight(2173, 117, 'C');
      strBuilder0.insert(31, (char[]) null, 2173, 2);
      assertEquals(117, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(31);
      char[] charArray0 = new char[9];
      Integer integer0 = new Integer(31);
      strBuilder0.appendFixedWidthPadRight((Object) integer0, 2166, 'S');
      strBuilder0.insert(31, charArray0);
      assertEquals(2175, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(31);
      Integer integer0 = new Integer(31);
      strBuilder0.appendFixedWidthPadRight((Object) integer0, 2148, 'S');
      strBuilder0.insert(31, (char[]) null);
      assertEquals(2148, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1241);
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0);
      assertEquals(1241, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder0.insert(9, charArray0, 31, (-482));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 31
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, (-2132), 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -2132
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) strBuilder_StrBuilderReader0);
      char[] charArray0 = strBuilder1.toCharArray(1, 2004);
      // Undeclared exception!
      try { 
        strBuilder0.insert(9, charArray0, 31, (-482));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -482
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[8];
      strBuilder0.append(charArray0);
      strBuilder0.insert(1, charArray0, 1, 1);
      assertEquals(9, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, 80);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 80
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[3];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "", 270, 'm');
      strBuilder1.insert((int) 'm', false);
      assertEquals(275, strBuilder0.size());
      assertEquals(275, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pS#fna)5!");
      strBuilder0.insert(0, true);
      assertEquals(13, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.delete(0, 985);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      strBuilder0.deleteAll('d');
      assertEquals(22, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(527);
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('*');
      assertEquals(527, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("U;w>i,d");
      assertEquals(7, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('d');
      strBuilder1.deleteFirst("U;w>i,d");
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("4");
      assertEquals(1, strBuilder0.size());
      
      strBuilder0.deleteAll("4");
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("U;w>i,d");
      strBuilder0.deleteFirst("U;w>i,d");
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrMatcher$CharSetMatcher");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(54, strBuilder1.length());
      assertEquals(86, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.version");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("java.version", "java.version");
      assertEquals(12, strBuilder1.length());
      assertEquals(44, strBuilder1.capacity());
  }

////  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder0.append((Object) strBuilder0);
      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) strBuilder_StrBuilderReader0);
      strBuilder1.replace(102, 1608, "java.vendor");
      assertEquals(128, strBuilder0.capacity());
      assertEquals(113, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replace(0, 0, (String) null);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2173);
      StrBuilder strBuilder1 = strBuilder0.replaceAll('+', '+');
      assertEquals(2173, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      StrBuilder strBuilder1 = strBuilder0.replaceAll('d', 'y');
      assertEquals(11, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('I', 'I');
      assertEquals(16, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2173);
      strBuilder0.appendFixedWidthPadRight(2173, 117, 'C');
      strBuilder0.replaceFirst('+', 'C');
      assertEquals(117, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('j', 'i');
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2568));
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.replaceAll("Duad>XYp", (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ug{KW");
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder0.replaceAll("ug{KW", "");
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(13);
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, "1qBKFq`Zi_4");
      assertEquals(13, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("=o", "user.language");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.country");
      strBuilder0.replaceFirst("user.country", (String) null);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(56, strBuilder1.length());
      assertEquals(88, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-339));
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(11, strBuilder1.size());
      assertEquals(43, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append((-512));
      strBuilder1.appendNewLine();
      strBuilder0.trim();
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(13);
      boolean boolean0 = strBuilder0.startsWith("HP-UX");
      assertFalse(boolean0);
      assertEquals(13, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

////  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(13);
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder0);
      boolean boolean0 = strBuilder1.startsWith("HP-UX");
      assertFalse(strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("h^@DNe7>HB.o<mTQbF");
      boolean boolean0 = strBuilder0.startsWith("h^@DNe7>HB.o<mTQbF");
      assertEquals(50, strBuilder0.capacity());
      assertTrue(boolean0);
      assertEquals(18, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("JQ4B2V7");
      boolean boolean0 = strBuilder0.endsWith("JQ4B2V7");
      assertEquals(39, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertEquals(8, strBuilder0.length());
      assertFalse(boolean0);
      assertEquals(40, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      boolean boolean0 = strBuilder0.endsWith("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.endsWith("4.1");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("JQ4B2V7");
      strBuilder0.append((-1866.1456F));
      boolean boolean0 = strBuilder0.endsWith("JQ4B2V7");
      assertEquals(17, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      String string0 = strBuilder0.leftString(4822);
      assertEquals("Invalid length: ", string0);
      assertEquals(48, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(97);
      strBuilder0.leftString((-479));
      assertEquals(97, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append((-512));
      strBuilder0.leftString(1);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      String string0 = strBuilder0.rightString(117);
      assertEquals("java.vendor", string0);
      assertEquals(43, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.rightString(0);
      assertEquals(32, strBuilder0.capacity());
  }

////  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder0.appendFixedWidthPadLeft((int) '6', (int) '6', '\'');
      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) strBuilder_StrBuilderReader0);
      strBuilder1.rightString(117);
      assertEquals(132, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString((-3141), (-3141));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString(1, 2415);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append("(V?U=$");
      String string0 = strBuilder1.midString(1, 2415);
      assertEquals(6, strBuilder0.length());
      assertEquals("V?U=$", string0);
  }

////  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-450));
      linkedList0.add(integer0);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "");
      String string0 = strBuilder1.midString(2, 8);
      assertFalse(strBuilder0.isEmpty());
      assertEquals("va.lang.", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      boolean boolean0 = strBuilder0.contains('e');
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      boolean boolean0 = strBuilder0.contains('d');
      assertTrue(boolean0);
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("DshM0{:W [Xw@7C2qv");
      strBuilder0.setCharAt(0, 'V');
      boolean boolean0 = strBuilder0.contains("DshM0{:W [Xw@7C2qv");
      assertFalse(boolean0);
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("DshM0{:W [Xw@7C2qv");
      boolean boolean0 = strBuilder0.contains("DshM0{:W [Xw@7C2qv");
      assertTrue(boolean0);
      assertEquals(50, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AUY7YeMcuG");
      char[] charArray0 = new char[7];
      charArray0[1] = 'u';
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf(',', (-673));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(97);
      int int0 = strBuilder0.indexOf((String) null, (-913));
      assertEquals((-1), int0);
      assertEquals(97, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2173);
      strBuilder0.appendFixedWidthPadRight(2173, 117, 'C');
      int int0 = strBuilder0.indexOf("", 114);
      assertEquals(117, strBuilder0.length());
      assertEquals(114, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      int int0 = strBuilder0.indexOf(strMatcher0, (-4538));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.contains((StrMatcher) null);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(13);
      strBuilder0.appendNewLine();
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_NoMatcher0);
      assertFalse(strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2173);
      int int0 = strBuilder0.lastIndexOf('C', 2173);
      assertEquals(2173, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2173);
      strBuilder0.appendFixedWidthPadRight(2173, 117, 'C');
      int int0 = strBuilder0.lastIndexOf('C', 2173);
      assertEquals(117, strBuilder0.length());
      assertEquals(116, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(13);
      int int0 = strBuilder0.lastIndexOf("user.timezone", 2180);
      assertEquals((-1), int0);
      assertEquals(13, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      int int0 = strBuilder0.lastIndexOf((String) null, 1908);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1325);
      strBuilder0.appendFixedWidthPadLeft((-3313), 1325, '\\');
      int int0 = strBuilder0.lastIndexOf("");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1324, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.append(917L);
      int int0 = strBuilder0.lastIndexOf("A;tuj`4", 0);
      assertEquals(3, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("6");
      int int0 = strBuilder0.lastIndexOf("6", (int) ',');
      assertEquals(33, strBuilder0.capacity());
      assertEquals(0, int0);
  }

////  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(13);
      strBuilder0.append((Object) strBuilder0);
      int int0 = strBuilder0.lastIndexOf("user.timezone", 2180);
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("U;w>i,d");
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      int int0 = strBuilder0.lastIndexOf(strMatcher0, (-106));
      assertEquals(7, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-339));
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("2uQ?6`8}");
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_NoMatcher0, 2681);
      assertEquals((-1), int0);
      assertEquals(8, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2173);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(2173, 117, 'C');
      StrBuilder strBuilder2 = new StrBuilder();
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder2);
      assertEquals(117, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-25));
      StrBuilder strBuilder1 = new StrBuilder(")");
      StrBuilder strBuilder2 = strBuilder0.append('|');
      boolean boolean0 = strBuilder2.equalsIgnoreCase(strBuilder1);
      assertEquals(1, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      StrBuilder strBuilder1 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(76, strBuilder1.capacity());
      assertTrue(boolean0);
      assertEquals(44, strBuilder1.length());
  }

////  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2390));
      StrBuilder strBuilder1 = new StrBuilder((String) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      strBuilder1.appendWithSeparators((Collection) linkedList0, (String) null);
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertFalse(strBuilder1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3393);
      StrBuilder strBuilder1 = new StrBuilder();
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(3393, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      strBuilder0.append((-1.0));
      StrBuilder strBuilder1 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      strBuilder1.append((-290L));
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(48, strBuilder1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Integer integer0 = new Integer((-1126));
      boolean boolean0 = strBuilder0.equals((Object) integer0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendFixedWidthPadRight(1091, 1091, 'R');
      strBuilder0.hashCode();
      assertEquals(1091, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e");
      // Undeclared exception!
      try { 
        strBuilder0.replace((-1622), 0, "e");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1622
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("U;w>i,d");
      // Undeclared exception!
      try { 
        strBuilder0.validateRange(102, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2390));
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert((-2390), charArray0, (-1834), (-1834));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2390
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-938));
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.reset(charArray0);
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "user.language");
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[0];
      strBuilder_StrBuilderTokenizer0.reset(charArray0);
      strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(527);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
      assertEquals(527, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-1288), 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 1634, (-1232));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 102, 108);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 1, 40);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[9];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertEquals(11, strBuilder0.length());
      assertEquals(0, int0);
      assertEquals(43, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[3];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("?&");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[5];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.skip(0L);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("?&");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip((-1185));
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(0L, long0);
      assertEquals(34, strBuilder0.capacity());
  }
}
