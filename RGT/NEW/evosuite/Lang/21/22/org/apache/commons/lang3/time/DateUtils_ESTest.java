/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 08:26:41 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.DateUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class DateUtils_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
      dateUtils_DateIterator0.hasNext();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392322881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)DateUtils.UTC_TIME_ZONE;
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) zoneInfo0);
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
      // Undeclared exception!
      try { 
        dateUtils_DateIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
      }
  }

//  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 5, 1, 0);
      Date date0 = DateUtils.addMilliseconds(mockDate0, 1);
      assertEquals("Tue Feb 05 01:00:00 GMT 1901", date0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate(5, 1001, 5, 4, 1, 5);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInHours((Date) mockDate0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 4 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Date date1 = DateUtils.setHours(date0, 0);
      assertNotSame(date0, date1);
  }

//  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 5, 1, 0);
      Date date0 = DateUtils.addHours(mockDate0, 0);
      assertEquals("Tue Feb 05 01:00:00 GMT 1901", date0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
      long long0 = DateUtils.getFragmentInSeconds((Calendar) mockGregorianCalendar0, 2);
      assertEquals(1282881L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMilliseconds((Date) null, 1001);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

//  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 5, 1, 0);
      Date date0 = DateUtils.setMonths(mockDate0, (-2552));
      assertEquals("Tue Feb 05 01:00:00 GMT 1901", date0.toString());
  }

//  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtils.addMinutes(mockDate0, 0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1711, "", 1711, 0, (-1), (-2561), 1711, 0, 215, (-1));
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMilliseconds(calendar0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 0 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

//  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      Date date0 = DateUtils.parseDateStrictly("", stringArray0);
      Date date1 = DateUtils.setMinutes(date0, 1);
      assertTrue(date1.equals((Object)date0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Calendar) null, 4014);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      long long0 = DateUtils.getFragmentInDays((Date) mockDate0, 6);
      assertEquals(0L, long0);
  }

//  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11, 11, 11, (-1), (-1));
      Date date0 = DateUtils.addYears(mockDate0, (-1573));
      assertEquals("Sun Dec 10 22:59:00 GMT 1911", date0.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-397), 0);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMinutes((Date) mockDate0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 0 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

//  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 3);
      Date date0 = DateUtils.setDays(mockDate0, 1);
      assertEquals("Mon Mar 03 00:00:00 GMT 1902", date0.toString());
  }

//  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Date date1 = DateUtils.addDays(date0, 2940);
      assertEquals("Fri Nov 02 00:00:00 GMT 1590", date1.toString());
  }

//  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Date date0 = DateUtils.addSeconds(mockDate0, 0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

//  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11, 11, 11, (-1), (-1));
      Date date0 = DateUtils.setSeconds(mockDate0, 436);
      assertEquals("Sun Dec 10 22:59:00 GMT 1911", date0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInHours(calendar0, (-2401));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment -2401 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

//  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 3, (-2582), (-1), 1209);
      long long0 = DateUtils.getFragmentInMinutes((Calendar) mockGregorianCalendar0, 14);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2582,HOUR_OF_DAY=-2582,MINUTE=-1,SECOND=1209,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 5, 1, 0);
      boolean boolean0 = DateUtils.truncatedEquals((Date) mockDate0, (Date) mockDate0, 0);
      assertTrue(boolean0);
  }

//  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 5, 1, 0);
      Date date0 = DateUtils.setYears(mockDate0, (-1864));
      assertEquals("Tue Feb 05 01:00:00 GMT 1901", date0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.isSameDay((Date) null, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 5, 1, 0);
      boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-982), (-2887), 1, 1, 1, (-982));
      Date date0 = DateUtils.ceiling((Object) mockGregorianCalendar0, 1001);
      // Undeclared exception!
      try { 
        DateUtils.isSameDay(date0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.isSameDay((Calendar) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(15, 15, 2, 526, 15, 2);
      // Undeclared exception!
      try { 
        DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1227), 500, 500, 637, 0);
      Locale locale0 = new Locale("g&4H@B%%~7");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, calendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(1844, (-2690), (-2690), 1692, (-12), 0);
      boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
      Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
      boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1388534400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.isSameInstant((Date) null, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 5, 1, 0);
      // Undeclared exception!
      try { 
        DateUtils.isSameInstant((Date) mockDate0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 101, (-3880), 9, 101, (-3880));
      boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0);
      assertTrue(boolean0);
  }

//  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 101, (-3880), 9, 101, (-3880));
      Date date0 = DateUtils.addWeeks(mockDate0, 14);
      boolean boolean0 = DateUtils.isSameInstant(date0, (Date) mockDate0);
      assertFalse(boolean0);
      assertEquals("Tue Jan 22 09:36:20 GMT 1907", date0.toString());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.isSameInstant((Calendar) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-982), (-2887), 1, 1, 1, (-982));
      boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, (-4115), 2442, 0, (-4115), 0);
      boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar1, (Calendar) mockGregorianCalendar1);
      boolean boolean1 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar1, (Calendar) mockGregorianCalendar0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      boolean boolean0 = DateUtils.isSameLocalTime(calendar0, calendar0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        DateUtils.isSameLocalTime(calendar0, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 2, 2, 2, 2);
      boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 3, (-2582), (-1), 1209);
      Calendar calendar0 = DateUtils.toCalendar(mockDate0);
      boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
      assertFalse(boolean0);
  }

//  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 12, 4, (-15), (-15));
      Calendar calendar0 = DateUtils.ceiling((Calendar) mockGregorianCalendar0, 12);
      boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61756874040000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=13,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=46,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      calendar0.set(2, 2, 2);
      boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
      assertFalse(boolean0);
  }

//  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 3, (-2582), (-1), 2);
      Calendar calendar0 = DateUtils.toCalendar(mockDate0);
      Calendar calendar1 = DateUtils.round((Calendar) mockGregorianCalendar0, 1);
      boolean boolean0 = DateUtils.isSameLocalTime(calendar0, calendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167392000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        DateUtils.parseDateStrictly((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date and Patterns must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.parseDate("Y;", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date and Patterns must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[0];
      try { 
        DateUtils.parseDate("F", stringArray0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unable to parse the date: F
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ZZ";
      // Undeclared exception!
      try { 
        DateUtils.parseDateStrictly("ZZ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        DateUtils.parseDate("lJB[", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.addMonths((Date) null, (-45));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.setMilliseconds((Date) null, 169);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

//  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      Date date0 = DateUtils.parseDateStrictly("", stringArray0);
      Date date1 = DateUtils.round((Object) date0, 1);
      assertEquals("Sat Feb 01 00:00:00 GMT 2014", date1.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.round((Date) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.round((Calendar) null, (-173));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.round((Object) null, 298);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.round((Object) "Q", 4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not round Q
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3767, (-2225), (-2932), (-2225), (-2932));
      // Undeclared exception!
      try { 
        DateUtils.round((Object) mockGregorianCalendar0, 3767);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 3767 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.truncate((Date) null, 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.truncate((Calendar) null, 2412);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

//  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11, 11, 11, (-1), (-1));
      Date date0 = DateUtils.truncate((Object) mockDate0, 11);
      assertEquals("Sun Dec 10 22:00:00 GMT 1911", date0.toString());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.truncate((Object) null, (-1279));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1045), "The fragment ");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      // Undeclared exception!
      try { 
        DateUtils.truncate((Object) mockGregorianCalendar0, 1235);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 1235 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        DateUtils.truncate(object0, 1109);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not truncate java.lang.Object@488ac847
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Date) null, (-840));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Calendar) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) null, (-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1480, 1480, 15, 30, 2285);
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) mockDate0, 1480);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 1480 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) locale0, 2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not find ceiling of for type: class java.util.Locale
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      Calendar calendar0 = DateUtils.toCalendar(date0);
      // Undeclared exception!
      try { 
        DateUtils.truncate(calendar0, 2147481972);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

//  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 101, (-3880), 9, 101, (-3880));
      Date date0 = DateUtils.round((Date) mockDate0, 14);
      assertEquals("Tue Oct 16 09:36:20 GMT 1906", date0.toString());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      System.setCurrentTimeMillis((-1));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        DateUtils.round((Calendar) mockGregorianCalendar0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -1 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

//  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 13);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

//  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2887), (-982), 1, (-982), (-2887));
      Date date0 = DateUtils.ceiling((Object) mockGregorianCalendar0, 1001);
      assertEquals("Sun Sep 01 00:00:00 GMT 244", date0.toString());
  }

//  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Calendar calendar0 = DateUtils.ceiling((Calendar) mockGregorianCalendar0, 9);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392422400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

//  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.setTimeInMillis(3600000L);
      Calendar calendar0 = DateUtils.ceiling((Calendar) mockGregorianCalendar0, 9);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=43200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2786, 5, 1001, 5, 2786, 0);
      Calendar calendar0 = DateUtils.toCalendar(mockDate0);
      boolean boolean0 = DateUtils.truncatedEquals(calendar0, calendar0, 1001);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.iterator((Date) null, 813);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.iterator((Calendar) null, 4014);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

//  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1);
      DateUtils.iterator((Object) mockGregorianCalendar0, 1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

//  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2926, 1, 3024, 2771, 2);
      DateUtils.iterator((Calendar) mockGregorianCalendar0, 3);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=30442302120000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2934,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=5,DAY_OF_YEAR=248,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=2,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

//  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
      DateUtils.iterator((Calendar) mockGregorianCalendar0, 4);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Iterator<Calendar> iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, 5);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(6, 6, 6);
      Iterator<Calendar> iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, 6);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 12, 4, (-15), (-15));
      // Undeclared exception!
      try { 
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The range style 12 is not valid.
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

//  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 12, 4, (-15), (-15));
      DateUtils.iterator((Calendar) mockGregorianCalendar0, 4);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61756874100000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=13,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=45,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.iterator((Object) null, 1507);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(6, 6, (-288), 2348, 6, 2);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Iterator<?> iterator0 = DateUtils.iterator((Object) date0, 2);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.iterator((Object) "", 11);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not iterate based on 
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

//  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Calendar calendar0 = MockCalendar.getInstance(dateUtils0.UTC_TIME_ZONE);
      long long0 = DateUtils.getFragmentInSeconds(calendar0, 1);
      assertEquals(3961281L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Date) mockDate0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 3 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2786, 5, 1001, 5, 2786, 0);
      Calendar calendar0 = DateUtils.toCalendar(mockDate0);
      long long0 = DateUtils.getFragmentInMinutes(calendar0, 5);
      assertEquals(206L, long0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Date) mockDate0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 7 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Date) mockDate0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 8 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Date) mockDate0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 9 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-480), 1764);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Date) mockDate0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 10 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11, 11, 0);
      long long0 = DateUtils.getFragmentInSeconds((Date) mockDate0, 11);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      long long0 = DateUtils.getFragmentInDays((Date) mockDate0, 12);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      long long0 = DateUtils.getFragmentInDays((Date) mockDate0, 13);
      assertEquals(0L, long0);
  }

//  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 5);
      boolean boolean0 = DateUtils.truncatedEquals((Calendar) mockGregorianCalendar0, calendar0, 5);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392422400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertFalse(boolean0);
  }

//  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 5, 1, 0);
      MockDate mockDate1 = new MockDate(1, (-2552), 1);
      boolean boolean0 = DateUtils.truncatedEquals((Date) mockDate0, (Date) mockDate1, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, calendar0);
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      
      dateUtils_DateIterator0.next();
      assertTrue(calendar0.equals((Object)mockGregorianCalendar0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        dateUtils_DateIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
      }
  }
}
