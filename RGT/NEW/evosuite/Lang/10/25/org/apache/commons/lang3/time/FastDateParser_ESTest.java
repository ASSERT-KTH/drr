/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 13:26:38 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class FastDateParser_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2144), "GMTPLT");
      FastDateParser fastDateParser0 = new FastDateParser(".\"zYP6OGa", simpleTimeZone0, locale0);
      assertEquals(".\"zYP6OGa", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "NET");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("dzI-H", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("S?hK,!Jmhc2>eypbIn", timeZone0, locale0);
      assertEquals("S?hK,!Jmhc2>eypbIn", fastDateParser0.getPattern());
  }

////  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "dLONa55.z");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("dLONa55.z", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("4uE8Q2X");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(928, "aH*,4bJE}8aC$mjn5p", (-981), 0, (-981), (-981), (-981), 0, 590, 0, 415);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("aH*,4bJE}8aC$mjn5p", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("-/n&*)^b~%p(", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[-/n&*)^b~%p(,zh_TW,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "\"'o w9;.C9\"$3");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("\"'o w9;.C9\"$3", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("\"'o w9;.C9\"$3", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2089, "1m8/}>/$M4*hb");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("1m8/}>/$M4*hb", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("1m8/}>/$M4*hb", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("%FMwQ_:$:i#B?k");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("%FMwQ_:$:i#B?k", timeZone0, locale0);
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, timeZone1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser(" ~p!iE3\u0002aXP]6wRi)", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals(" ~", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("ru!=c!,", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("%FMwQ_:$:i#B?k");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("%FMwQ_:$:i#B?k", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("<qTh,N,m:@A@[s)DTO", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTIET", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2089, "1m8}>\"/$eM4*hb");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("1m8}>\"/$eM4*hb", simpleTimeZone0, locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser1 = new FastDateParser("1m8}>\"/$eM4*hb", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("EAT");
      Locale locale0 = new Locale("EAT");
      FastDateParser fastDateParser0 = new FastDateParser("EAT", timeZone0, locale0);
      Locale locale1 = Locale.PRC;
      FastDateParser fastDateParser1 = new FastDateParser("EAT", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("%FMwQ_:$:i#B?k");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("%FMwQ_:$:i#B?k", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("GMTPST");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMTPST\" does not match %(\\p{IsNd}{1}+)(\\p{IsNd}{1}+)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

////  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(24, "GMTAET");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMTAET", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("org.apache.commons.lang3.time.FastDateParser$3");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"org.apache.commons.lang3.time.FastDateParser$3\" does not match (\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("z$RR[Z+;iQedH", timeZone0, locale0);
      assertEquals("z$RR[Z+;iQedH", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("a7]K6&`+TR", timeZone0, locale0);
      assertEquals("a7]K6&`+TR", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("(GM[+-]d{0,1}d{2|[+-]dI2}:?d{2}%", timeZone0, locale0);
      assertEquals("(GM[+-]d{0,1}d{2|[+-]dI2}:?d{2}%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("!a1+aHY@");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("!a1+aHY@", timeZone0, locale0);
      assertEquals("!a1+aHY@", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(92);
      assertEquals(1992, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "\"'o w9;.C9\"$3");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("\"'o w9;.C9\"$3", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(0);
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("#E)v,#-?E", timeZone0, locale0);
      assertEquals("#E)v,#-?E", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("/^%[XV", timeZone0, locale0);
      assertEquals("/^%[XV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("0(3&V(A%C2t.?$C", timeZone0, locale0);
      assertEquals("0(3&V(A%C2t.?$C", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("org.apache.commons.lang3.time.FastDateParser$5");
      FastDateParser fastDateParser0 = new FastDateParser("2=", timeZone0, locale0);
      assertEquals("2=", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("3PH.", timeZone0, locale0);
      assertEquals("3PH.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("y50O\"", timeZone0, locale0);
      assertEquals("y50O\"", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTCTT");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("9'}Ht1-sL5i", timeZone0, locale0);
      assertEquals("9'}Ht1-sL5i", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E;T");
      Locale locale0 = new Locale("E;T");
      FastDateParser fastDateParser0 = new FastDateParser("E;T", timeZone0, locale0);
      assertEquals("E;T", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("='S]LF\"D", timeZone0, locale0);
      assertEquals("='S]LF\"D", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("?_!k6W>85hGpE{7", timeZone0, locale0);
      assertEquals("?_!k6W>85hGpE{7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$TextStrategy");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("@4#e@]Qn;1l9jHK=c,", timeZone0, locale0);
      assertEquals("@4#e@]Qn;1l9jHK=c,", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1411), "rQ6)O!yF");
      Locale locale0 = new Locale("H^a", "", "(The ");
      FastDateParser fastDateParser0 = new FastDateParser("H^a", simpleTimeZone0, locale0);
      assertEquals("H^a", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("_WnN`eMqe:Q", timeZone0, locale0);
      assertEquals("_WnN`eMqe:Q", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("`sT@|8e*Do4[[(N7eI");
      Locale locale0 = new Locale("`sT@|8e*Do4[[(N7eI");
      FastDateParser fastDateParser0 = new FastDateParser("`sT@|8e*Do4[[(N7eI", timeZone0, locale0);
      assertEquals("`sT@|8e*Do4[[(N7eI", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(":D''Q");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(":D''Q", timeZone0, locale0);
      assertEquals(":D''Q", fastDateParser0.getPattern());
  }
}
