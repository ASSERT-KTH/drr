/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 17:39:49 GMT 2019
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class Fraction_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      int int0 = fraction0.intValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.TWO_FIFTHS.add(fraction0);
      assertEquals(1.4F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.invert();
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.invert();
      String string0 = fraction1.toProperString();
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals("2", string0);
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      double double0 = fraction0.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("1/1");
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(3687, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(4948, 640, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(1743, (-1), (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(5, (-1201), 5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1073741824), 1421, 987);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MAX_VALUE, 1385, 1385);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2603.5230460695766);
      Fraction fraction1 = fraction0.THREE_FIFTHS.reduce();
      Fraction.getFraction((-19), 3, 1413);
      fraction1.THREE_QUARTERS.multiplyBy(fraction0);
      Fraction fraction2 = fraction1.abs();
      fraction2.ZERO.add(fraction1);
      Fraction fraction3 = Fraction.getFraction((-3035), (-3035));
      Fraction fraction4 = fraction0.TWO_QUARTERS.invert();
      fraction0.toProperString();
      Fraction fraction5 = Fraction.getFraction("2603 261/499");
      Fraction fraction6 = Fraction.getReducedFraction(4, 1627);
      Fraction.getFraction(214.5456);
      fraction6.TWO_THIRDS.toString();
      Fraction fraction7 = Fraction.TWO_QUARTERS;
      fraction5.THREE_FIFTHS.toProperString();
      fraction3.compareTo(fraction7);
      fraction4.compareTo(fraction5);
      Fraction.getFraction((-798.96128));
      Fraction.getReducedFraction((-2459), 1627);
      Fraction fraction8 = Fraction.getFraction(0.0);
      fraction8.THREE_QUARTERS.hashCode();
      Fraction.getFraction((-96.99));
      // Undeclared exception!
      try { 
        fraction8.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, 1158);
      // Undeclared exception!
      try { 
        fraction0.ONE_FIFTH.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate numerator
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(13, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2214));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("qTpL!N~c=Z.rPmN");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("7 n&TNoUUe9nWW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The fraction could not be parsed as the format X Y/Z
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(37, 37);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      Fraction fraction3 = fraction2.reduce();
      assertFalse(fraction3.equals((Object)fraction0));
      assertEquals(37, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 1649);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1649, fraction0.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1.0);
      Fraction fraction1 = fraction0.TWO_QUARTERS.reduce();
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertEquals(2, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 20);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2166), 10000);
      Fraction fraction1 = fraction0.abs();
      assertEquals((-0.2166F), fraction0.floatValue(), 0.01F);
      assertEquals(0.2166F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.TWO_FIFTHS.pow(0);
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      // Undeclared exception!
      try { 
        fraction0.pow((-211));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.THREE_FIFTHS.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 1649);
      // Undeclared exception!
      try { 
        fraction0.THREE_FIFTHS.pow(1671);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2603.5230460695766);
      Fraction fraction1 = Fraction.getReducedFraction((-2147483646), (-19));
      // Undeclared exception!
      try { 
        fraction0.ONE.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MAX_VALUE, (-19));
      // Undeclared exception!
      try { 
        fraction0.ONE.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2677, 2677, 2677);
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2603.5230460695766);
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertSame(fraction1, fraction0);
      assertEquals(2603.5230460921844, fraction1.doubleValue(), 0.01);
      assertEquals(1299158, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(37, 37);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ONE_FIFTH.subtract(fraction1);
      assertEquals(37, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals((-1), fraction2.getNumerator());
      assertEquals((-0.33333334F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2147483646, (-1879048191));
      // Undeclared exception!
      try { 
        fraction0.TWO_THIRDS.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.multiplyBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1991.03));
      Fraction fraction1 = fraction0.ZERO.divideBy(fraction0);
      assertEquals(100, fraction0.getDenominator());
      assertEquals((-1991.03F), fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1321.467756766059);
      // Undeclared exception!
      try { 
        fraction0.divideBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.ONE_FIFTH.divideBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1376, 1376);
      fraction0.equals("");
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.invert();
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      fraction0.THREE_FIFTHS.hashCode();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(19, 19);
      Fraction fraction1 = Fraction.getReducedFraction(19, 19);
      fraction0.compareTo(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.ONE_THIRD;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2603.5230460695766);
      fraction0.TWO_THIRDS.toString();
      assertEquals(499, fraction0.getDenominator());
      assertEquals(2603.523F, fraction0.floatValue(), 0.01F);
      assertEquals(261, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2039.186742457));
      Fraction fraction1 = fraction0.THREE_FIFTHS.reduce();
      Fraction fraction2 = fraction0.negate();
      Fraction fraction3 = fraction2.THREE_FIFTHS.abs();
      fraction0.compareTo(fraction2);
      fraction1.ONE.add(fraction2);
      Fraction fraction4 = Fraction.getFraction(3434.843550628444);
      Fraction fraction5 = fraction3.TWO_FIFTHS.reduce();
      fraction5.THREE_QUARTERS.pow(3);
      Fraction fraction6 = fraction1.negate();
      fraction6.compareTo(fraction4);
      fraction4.TWO_QUARTERS.abs();
      fraction4.ZERO.toProperString();
      Fraction fraction7 = Fraction.getFraction((-1375.004394832));
      fraction4.negate();
      Fraction.getFraction((double) (-1));
      double double0 = 2603.5230460695766;
      Fraction fraction8 = Fraction.getFraction(2603.5230460695766);
      // Undeclared exception!
      try { 
        fraction8.multiplyBy(fraction7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(37, 37);
      String string0 = fraction0.toProperString();
      assertEquals("1", string0);
      assertEquals(37, fraction0.getNumerator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1863, 1863);
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toProperString();
      assertEquals("-1", string0);
      assertNotNull(string0);
      assertEquals(1863, fraction0.getNumerator());
      assertEquals(1863, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1615.577));
      String string0 = fraction0.toProperString();
      assertEquals("-1615 577/1000", string0);
      assertEquals((-1615.577), fraction0.doubleValue(), 0.01);
  }
}
