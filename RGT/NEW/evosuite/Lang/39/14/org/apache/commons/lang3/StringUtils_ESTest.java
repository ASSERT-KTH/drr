/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 03:38:29 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

 
public class StringUtils_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("LINE.SEPARATOR", "LINE.SEPARATOR", 0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 16);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.center("The String must not be empty", 1063);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.rightPad("|sXYGlBT", 8);
      assertEquals("|sXYGlBT", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith("", "_Gz %RKetCoG@IVn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("NoSuchFieldException occurred during 1.6 backcompat code", "1.7");
      assertEquals("NoSuchFieldException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.substringBetween("W0oQ$0XpK", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, "0");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("short");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank(":Y$R'M(0U<}cHwO\"1sT");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.trimToNull("The stripAccents(String) method is not supported until Java 1.6");
      assertEquals("The stripAccents(String) method is not supported until Java 1.6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.stripToNull("2JCP01k@skD57h_85Ty");
      assertNotNull(string0);
      assertEquals("2JCP01k@skD57h_85Ty", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "S5l&]HlvVG'^{");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "dV>;WqOuB=t|");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.stripStart("file.encoding", "java.vm.vendor");
      assertEquals("file.encoding", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.strip("uiW{moC3f$NVt $pL]%", "");
      assertEquals("uiW{moC3f$NVt $pL]%", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.stripStart("*^;U~3q<lU~D", "*^;U~3q<lU~D");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "2v_dn3`atvnry>8[");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.strip(" is less than 0: ");
      assertEquals("is less than 0:", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripEnd("+`", "O,1[p{hW51=gh3BV:o9");
      assertEquals("+`", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.stripEnd("*shu@/kNsI9y=WU!", "*shu@/kNsI9y=WU!");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "0Pwn?TU.6)M1,|j");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null, (-2481));
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = StringUtils.equals("", ".9m0r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, "java.vm.specification.name");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.swapCase("tHE STRIPaCCENTS(sTRING) METHOD IS NOT SUPPORTED UNTIL jAVA 1.6");
      assertEquals("The stripAccents(String) method is not supported until Java 1.6", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, "*m[]R=[tq6pv&'zr\"VW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "~}4&EPRWk7+y;]Ai%H+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = StringUtils.indexOf("xQIw", '8');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'N');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = StringUtils.indexOf("2", ' ', 1533);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'z', 1525);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "8@ur9A");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = StringUtils.indexOf("line.separator", "line.separator");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.indexOf(" IS LESS THAN 0: ", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, "os.version", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("pN 5n2", (String) null, 280);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("NFD", "", (-3870));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("~j", "", 63);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("G#Sj]6/j", "G#Sj]6/j", 256);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("wt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$AIXurityException occurred during 1.6 backcompat code", "wt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$}%;fu6oh8%rwt.+w#?,la]$AIXurityException occurred during 1.6 backcompat code", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "", (-3108));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf("/HjMw7@$aOvv~%=sm6:", "", 14);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf("IllegalArgumentException occurred during 1.6 backcompat code", (String) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "~qn$#K?", (-181));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf("t>orIrhU,pcA", "", 1704);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("GUa]", 'h');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, 'H');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("LINUX", 'n', (-1925));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '6', 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "java.runtime.version");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("IllegalArgumentException occurred during 1.6 backcompat code", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("<VPi2E:pvNVkz", "user.language");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "[]", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("fpizwu", "", 3);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("pSc.|7Ti", (String) null, (-624));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("Strings must not be null", 'u');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", '}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(" ", 'x');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "2Wps4xYps6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("J>inrABdb&W|P/", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("Caught a SecurityException reading the system property '", ":ny!s`Lm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "e'VtMY9r8 2L@c4UI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = StringUtils.left("~JkFVK8V}H\"2O-;(94", (-2406));
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, "IllegalArgumentException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("~KX@U6", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = StringUtils.leftPad("~JkFVK8V}H\"2O-;(94", 3484);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, "IllegalArgumentException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[7];
      int int0 = StringUtils.indexOfAny((String) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny("Solaris", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.indexOfAny(";f", "Q']hVa#X");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.indexOfAny(" is not in the range '0' - '9'", "IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.indexOfAny(":ZT", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("", "...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny("/HjMw7@$aOvv~%=sm6:", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny(":yb @937WSYyftIqJY", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsAny("Minimum abbreviation width with offset is 7", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      boolean boolean0 = StringUtils.containsAny("Minimum abbreviation width with offset is 7", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[7];
      int int0 = StringUtils.indexOfAnyBut((String) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut("d-", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly("yx[,y7", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("line.separator", "line.separator");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("t>orIrhU,pcA", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("Minimum abbreviation width with offset is 7", "/9Nd|Z' ufpE-Jo+Q_Z");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("p@&v%", "p@&v%");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("&EGjL7\"(*JJE,`Nt+", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly("", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("z/#4mg6Y^JgA}X", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((String) null, "-=s?fPIoX4BPdDfW{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly(" vs ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsNone((String) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("5.0", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("(Mf-UYr^", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("java.awt.printerjob", "t>orIrhU,pcA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("<E|VNV", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((String) null, (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = ";f";
      int int0 = StringUtils.indexOfAny("InvocationTargetException occurred during 1.6 backcompat code", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny((String) null, (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("<s*=r\"N@", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "InvocationTargetException occurred during 1.6 backcompat code";
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.substring("p", 5);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-344));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1309));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.substring("Cj4mg-FX$/&ug9", 1525, 2328);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 0, 336);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.substring("java.vendor.url", 233, (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.substring("J.Y", (-962), (-962));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.substring("short", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-4089));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.left("", 1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.left("Zd4K)X9", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.right("F", 1817);
      assertNotNull(string0);
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.right((String) null, (-3050));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.right("", (-1772));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.right("@\u0004NQm]f Qi", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.mid("'8I~$;eQ8$#<u", 3137, Integer.MAX_VALUE);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 64, (-2061));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.mid("257z6Gp", (-452), (-452));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.mid("...", 0, Integer.MAX_VALUE);
      assertNotNull(string0);
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.mid("java.awt.fonts", (-1), 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "$ }AX%z3',5h");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substringBefore("dbaBJM\"1sQF.n", "L9IIs*b;_$uzg3x0");
      assertEquals("dbaBJM\"1sQF.n", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substringBefore("d#n'", (String) null);
      assertNotNull(string0);
      assertEquals("d#n'", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substringBefore("19;", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substringBefore("short", "short");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substringAfter(".9m:g", ",6[");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substringAfter("K*y0", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substringAfter(".Zzt", ".Zzt");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, "~JkFVK8V}H\"2O-;(94");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("*m[]R=[tq6pv&'zr\"VW", "ri/%ja%\"jenf'lh's9");
      assertEquals("*m[]R=[tq6pv&'zr\"VW", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("path.separator", "");
      assertEquals("path.separator", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("U/r*lceCPQ9P", "U/r*lceCPQ9P");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("InvocationTargetException occurred during 1.6 backcompat code", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("~}4&EPRWk7+y;]Ai%H+", "$g!|<xk");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("InvocationTargetException occurred during 1.6 backcompat code", "x");
      assertEquals("ception occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringBetween(")1bc=+GT11E", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "-';US gSP !!", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringBetween("a?V8Y", "gA}X", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Caught a SecurityException reading the system property '", "Caught a SecurityException reading the system property '", "Caught a SecurityException reading the system property '");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "Minimum abbreviation width with offset is 7");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("longJ\"ttX*69Enr}M#|k[A", "", "/D;");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("2c2vC.T ", "b8|5sLp", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "X;Xv(?+q6", "Ag@K?Yx V4[hQ={L:");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.leftPad("HpZ@NLCNK<n~r", 46, "HpZ@NLCNK<n~r");
      String[] stringArray0 = StringUtils.substringsBetween(string0, "HpZ@NLCNK<n~r", "HpZ@NLCNK<n~rHpZ@NLCNK<n~rHpZHpZ@NLCNK<n~r");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(",._<!_cW", "d1#u+?(/mK:/a5u", "...");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.repeat("HpZ@NLCNK<n~rHpZ@NLCNK<n~rHpZHpZ@NLCNK<n~r", 1178);
      String[] stringArray0 = StringUtils.substringsBetween(string0, "HpZ@NLCNK<n~r", "HpZ@NLCNK<n~rHpZ@NLCNK<n~rHpZHpZ@NLCNK<n~r");
      assertEquals(589, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "java.vm.vendor");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("short", (String) null, 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("+  2+$pf:e}tMCsbFG", " ");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'Q');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'n');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("zKHY(RC:4PEjP(@DN<", 'K');
      assertNotNull(string0);
      assertEquals("HY(RC:4PEjP(@DN<Kz", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("F", "F");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("2c2vC.T ");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("+  2+$pf:e}tMCsbFG", "");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens
      assertEquals(834, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("IllegalAccessException occurred during 1.6 backcompat code", "", 3);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("h6", "B");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("B", "B");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("ul'nojtiXNVg<>~m", ">:3\"0e;dy@.]!67_");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokensoSuchFieldException occurred during 1.6 backcompat code", 841);
      assertEquals(841, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("t<84]UX{1", "t<84]UX{1");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("java.vm.version");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("java.vm.version", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: java.vm.version
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals(15, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("~./RDRtRO)fVKiyW}R");
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '6');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'N', (-1), Integer.MAX_VALUE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String string0 = StringUtils.join(objectArray0, 'L');
      assertNotNull(string0);
      assertEquals("LLLLLL", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "GUa]");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "NoSuchMethodException occurred during 1.6 backcompat code", 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = StringUtils.join(objectArray0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "B";
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string0);
      assertEquals("B", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(3137);
      String string0 = StringUtils.join((Iterable<?>) vector0, '8');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'M');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, 'f');
      assertEquals("DISPLAYfFORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(0);
      stack0.add(integer0);
      String string0 = StringUtils.join((Iterable<?>) stack0, 'R');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(3137);
      String string0 = StringUtils.join((Iterable<?>) vector0, "'KG");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("DISPLAYFORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.leftPad("AIX", 3284, "org.apache.commons.lang3.StringUtils");
      char char0 = 'R';
      StringUtils.rightPad((String) null, 811, 'R');
      StringUtils.chop((String) null);
      StringUtils.leftPad("AIX", 16, "IllegalAccessException occurred during 1.6 backcompat codeIllegalAccessException occurred during 1.6 backcompat code");
      Iterator<List<String>> iterator0 = (Iterator<List<String>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string2 = StringUtils.join(iterator0, "Minimum abbreviation width is 4");
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 's');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("', has a length less than 2");
      assertEquals("',hasalengthlessthan2", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.removeStart("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.removeStart("5<Kf<", "");
      assertEquals("5<Kf<", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.removeStart(string0, "C-[<2fK9wc");
      assertEquals("\\u0", string1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.removeStart("IllegalAccessException occurred during 1.6 backcompat code", "IllegalAccessException occurred during 1.6 backcompat code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Minimum abbreviation width is 4", "");
      assertEquals("Minimum abbreviation width is 4", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("dV>;WqOuB=t|", "dV>;WqOuB=t|");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.removeEnd("...", "");
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Wt.+w#?,lA]$}%;FU6", "O%r");
      assertEquals("Wt.+w#?,lA]$}%;FU6", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("minimum abbreviation width is 4", (String) null);
      String string1 = StringUtils.removeEndIgnoreCase((String) null, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("(Uh2.h]cZ!*I", "t>orIrhU,pcA");
      assertEquals("(Uh2.h]cZ!*I", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("0r", "0r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.remove("", "G6;IP]fn]I*");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.remove("W,$Vf(n:E/cp4*~r(", "java.runtime.version");
      assertEquals("W,$Vf(n:E/cp4*~r(", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.ClassUtils", (String) null);
      assertEquals("org.apache.commons.lang3.ClassUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, '>');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.remove("f\"&yNg:llhVt:Ug", 'k');
      assertEquals("f\"&yNg:llhVt:Ug", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.remove("<8(b}A0ehpD", 'b');
      assertEquals("<8(}A0ehpD", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "", "|/sjEgK3;$,\"F&~mc)e");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("The stripAccents(String) method is not supported until Java 1.6", (String) null, "RcM'klhq^DM");
      assertEquals("The stripAccents(String) method is not supported until Java 1.6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.replace("k=", "k=", (String) null, 1102);
      assertEquals("k=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.replace("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", "^tNuF.I>?~4f9%mc", "", 0);
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.leftPad("u5'tYfsv", 1752, string0);
      String string2 = StringUtils.replace(string1, string0, "*FtMytWMZy#+hEa^P", 32);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.replace("D{~Z9A)LNB=d{~Z9A)LnB=", "D{~Z9A)LNB=d{~Z9A)LnB=", "iOC]'ad'K{ImR", 2094);
      assertEquals("iOC]'ad'K{ImR", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.replace("0", "0", "java.lang.Object@2394049fJjava.lang.Object@3ef7bc4fJjava.lang.Object@2a1cea88Jjava.lang.Object@4dfbb467Jjava.lang.Object@4e48e1bbJjava.lang.Object@4dde29f9Jjava.lang.Object@dbc260");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("java.vm.vendor");
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.replaceEach("(NWHWyrW]wq\"sM|;", (String[]) null, (String[]) null);
      assertEquals("(NWHWyrW]wq\"sM|;", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.replaceEach("#~_i!B[Wra#Sc.:Ug", stringArray0, (String[]) null);
      assertEquals("#~_i!B[Wra#Sc.:Ug", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("java.vm.version");
      String[] stringArray1 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("java.vm.version", stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals("java.vm.version", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", "v#f'/H8paI", (-1));
      // Undeclared exception!
      try { 
        StringUtils.replaceEach(" ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 9 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("K }.?rMl3x9<W", "K }.?rMl3x9<W");
      String string0 = StringUtils.replaceEach("?O;]<:b1pgFha", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("?O;]<:b1pgFha", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("K }?rMl39<W");
      String string0 = StringUtils.replaceEach("?O;]<:b1pgFha", stringArray0, stringArray0);
      assertEquals("?O;]<:b1pgFha", string0);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"'1T";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("\"'1T", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: \"'1T
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.replaceChars("NFD", 'e', 'e');
      assertEquals("NFD", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, ')', ')');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "B", "!0");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.replaceChars("DtKl&u~IVVy", "*73(6", "2pjpuyVW");
      assertEquals("DtKl&u~IVVy", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Cannot pad a negative amount: ", (String) null, "");
      assertEquals("Cannot pad a negative amount: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.replaceChars("~./RDRtRO)fVKiyW}R", "~./RDRtRO)fVKiyW}R", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.replaceChars(", Length: 0", "hGl9-~MIc^4G", "J$qG+gZ+4s:gO");
      assertEquals(", LengtJ: 0", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "p{InCombiningDiacriticalMarks}+", (-343), (-343));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.overlay("m(eo33w", (String) null, (-343), (-343));
      assertEquals("m(eo33w", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.overlay("a*_m(U", "", 2328, Integer.MAX_VALUE);
      assertEquals("a*_m(U", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.overlay("Sxa8C1%'wkwxcX\"", "-5=aEY;3/{[aW<e", 10, (-2951));
      assertEquals("-5=aEY;3/{[aW<ewxcX\"", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.chomp("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.chomp("B");
      assertEquals("B", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.chomp("~JkFVK8V}H\"2O-;(94", "");
      assertEquals("~JkFVK8V}H\"2O-;(94", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.chomp(")J5;x54<D3uY&", (String) null);
      assertEquals(")J5;x54<D3uY&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.chomp("java.text.Normalizer$Form", "y!>!Mg,}E|)UuaSGx");
      assertEquals("java.text.Normalizer$Form", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.leftPad("~JkFVK8V}H\"2O-;(94", 3484);
      String string1 = StringUtils.chop(string0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "DtKl&u~IVVy", 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.repeat("int", (-1485));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.repeat("", 127);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.repeat("v", 10);
      assertEquals("vvvvvvvvvv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.repeat("C", 8199);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.repeat("X1", 10);
      assertNotNull(string0);
      assertEquals("X1X1X1X1X1X1X1X1X1X1", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.repeat("&5$b#R?eKd", (String) null, 58);
      assertNotNull(string0);
      assertEquals("&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd&5$b#R?eKd", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 5, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.rightPad("vU&`|bh+p|3lN^wy2vU&`|bh+p|3lN^wy2||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", 702, (String) null);
      assertNotNull(string0);
      assertEquals("vU&`|bh+p|3lN^wy2vU&`|bh+p|3lN^wy2||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.rightPad("Windows NT", 8192, "Windows NT");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.rightPad("file.separato", 19, "`D';Pn");
      assertEquals("file.separato`D';Pn", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 32, 'p');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 1, "HpZ@NLCNK<n~rHpZ@NLCNK<n~rHpZHpZ@NLCNK<n~r");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.leftPad("I7^*i", 508, (String) null);
      assertEqualsi", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.leftPad("java.vm.vendor", (-1), "8C");
      assertEquals("java.vm.vendor", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.leftPad("p", 5, "[*x");
      assertEquals("[*x[p", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = StringUtils.length("K");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      int int0 = StringUtils.length((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 48, 'S');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.center("|sXYGlBT", (-2379));
      assertEquals("|sXYGlBT", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.center("%cY=7o)<.+ b", 4, '>');
      assertEquals("%cY=7o)<.+ b", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 1525, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.center("Minimum abbreviation width is 4", (-2203), "$R7u");
      assertEquals("Minimum abbreviation width is 4", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.center("mdi?fM=n", 256, "????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????");
      assertEquals("????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????mdi?fM=n????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.center("", 4, "");
      assertEquals("    ", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.center("mdi?fM=n", 4, "????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????");
      assertEquals("mdi?fM=n", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.upperCase(" is less than 0: ");
      assertNotNull(string0);
      assertEquals(" IS LESS THAN 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String string0 = StringUtils.upperCase("F", locale0);
      assertNotNull(string0);
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String string0 = StringUtils.lowerCase("E$G", locale0);
      assertNotNull(string0);
      assertEquals("e$g", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Locale locale0 = new Locale("", "");
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.capitalize("rvAg*U3?*-X");
      assertEquals("RvAg*U3?*-X", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "                                                                                         c");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      int int0 = StringUtils.countMatches("93#HKZD#7-ve'o<NMC", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int int0 = StringUtils.countMatches(".9m:g", ".9m:g");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("iypF_$zR.~$z +Z7LMq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.leftPad("IllegalAccessException occurred during 1.6 backcompat code", 2079, 'c');
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric(")>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("K }?rMl39<W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Locale locale0 = new Locale(">7g#rCJC40p&PEF", ">7g#rCJC40p&PEF");
      String string0 = StringUtils.upperCase((String) null, locale0);
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("g ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("-=s?fPIoX4BPdDfW{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable(";^>T]K7GCQpll{KVw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("5uLr2<4_^0u1,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("6.1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("                                              ~jkfvk8v}h\"2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = StringUtils.repeat(" vs ", "'n^i~2~&7Qh|?", 64);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("char");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("ze2jMA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("+xb");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("NFD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = StringUtils.defaultString(".Zzt");
      assertEquals(".Zzt", string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = StringUtils.defaultString("...", "}AXUl0Px@=");
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "");
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "y");
      assertEquals("y", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '!');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 2114, (-3062));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("8O`w\"rm", (-107), (-107));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", 5, 19);
      assertEquals("...h and Replace...", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("h?^.RxZPF$$", 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.abbreviate("~Q[^>$<*AQ(^ir[", 53, 13);
      assertEquals("...$<*AQ(^ir[", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.difference("Cannot pad a negative amount: ", "Mcp316eyT\"-+a,Ci_");
      assertEquals("Mcp316eyT\"-+a,Ci_", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.difference("JY", (String) null);
      assertEquals("JY", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.difference("~j", "~j");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String) null, "FU6");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("1.7uchfieldexception occurred during 1.6 backcompat code", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("81*w", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.repeat("boolean", "boolean", 256);
      int int0 = StringUtils.indexOfDifference("boolean", string0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String[] stringArray0 = new String[5];
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "F";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("K }?rMl39<W");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "vU&`|bh+p|3lN^wy2vU&`|bh+p|3lN^wy";
      stringArray0[1] = "vU&`|bh+p|3lN^wy2vU&`|bh+p|3lN^wy2||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(33, int0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "user.language";
      stringArray0[1] = "user.language";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'B');
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(".sW/V", 'k');
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(".sW/V", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "IllegalArgumentException occurred during 1.6 backcompat code";
      stringArray0[1] = "IllegalArgumentException occurred during 1.6 backcompat cod";
      stringArray0[2] = "IllegalArgumentException occurred during 1.6 backcompat cod";
      stringArray0[3] = "IllegalAccessException occurred during 1.6 backcompat codeIllegalAccessException occurred during 1.6 backcompat code";
      stringArray0[4] = "IllegalAccessException occurred during 1.6 backcompat codeIllegalAccessException occurred during 1.6 backcompat code";
      stringArray0[5] = "IllegalArgumentException occurred during 1.6 backcompat cod";
      stringArray0[6] = "IllegalAccessException occurred during 1.6 backcompat codeIllegalAccessException occurred during 1.6 backcompat code";
      stringArray0[7] = "IllegalArgumentException occurred during 1.6 backcompat code";
      stringArray0[8] = "IllegalAccessException occurred during 1.6 backcompat codeIllegalAccessException occurred during 1.6 backcompat code";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("IllegalA", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((String) null, "Minimum abbreviation width is 4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("J>inrABdb&W|P/", "");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("sw", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "IllegalAccessException occurred during 1.6 backcompat code");
      assertEquals(58, int0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("19;", "|sXYGlBT");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("                                              ~jkfvk8v}h\"2o", "\"r18u]liiCT6c");
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, "BSynd-`2y(.iD)wbqJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String[] stringArray0 = new String[3];
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String[] stringArray0 = new String[12];
      boolean boolean0 = StringUtils.startsWithAny("B", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("/java.lang.Object@381bf367//", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "B";
      boolean boolean0 = StringUtils.startsWithAny("B", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase(":Ox]#NYlDnhdF!3", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, (String) null);
      assertTrue(boolean0);
  }
}
