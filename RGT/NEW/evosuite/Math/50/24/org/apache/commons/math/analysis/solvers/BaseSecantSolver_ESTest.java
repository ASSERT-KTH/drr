/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 21:13:03 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-0.048726031429842005), (-0.048726031429842005));
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      illinoisSolver0.solve(2138734124, (UnivariateRealFunction) expm1_0, (-0.048726031429842005), 0.3205307488683021, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-898.3461589029), (-898.3461589029));
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(1045, (UnivariateRealFunction) expm1_0, 0.0, 0.0, 0.0, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(737, (UnivariateRealFunction) sin0, 1.0E-6, 0.0, allowedSolution0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.5, 0.5);
      Minus minus0 = new Minus();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(995, (UnivariateRealFunction) minus0, (-1169.37154269), 0.5, allowedSolution0);
      assertEquals((-1169.37154269), pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Inverse inverse0 = new Inverse();
      double double0 = pegasusSolver0.solve(1422917758, (UnivariateRealFunction) inverse0, (-23.47988376), (double) 1422917758, (-23.47988376));
      assertEquals(1.422917758E9, pegasusSolver0.getMax(), 0.01);
      assertEquals((-3.6561435464284445E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.11107224824001775, 0.11107224824001775, 0.11107224824001775);
      Inverse inverse0 = new Inverse();
      double double0 = pegasusSolver0.solve(1422917837, (UnivariateRealFunction) inverse0, (-309.0), 1378.2, 0.5102198642947349);
      assertEquals(1378.2, pegasusSolver0.getMax(), 0.01);
      assertEquals(1069.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-0.6806480148622166), (-0.6806480148622166));
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2138734160, (UnivariateRealFunction) expm1_0, (-0.6806480148622166), 2.2250738585072014E-308, allowedSolution0);
      assertEquals((-0.3403240074311083), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.5688421924954113E-155, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-0.048726031429842005), (-0.048726031429842005));
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2138734124, (UnivariateRealFunction) expm1_0, (-0.048726031429842005), 0.3205307488683021, allowedSolution0);
      assertEquals(0.13590235871923004, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.2904693590137022E-30, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-0.048726031429842005), (-0.048726031429842005));
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2138734124, (UnivariateRealFunction) expm1_0, (-0.048726031429842005), 0.3205307488683021, allowedSolution0);
      assertEquals(0.13590235871923004, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1.493787373633613E-20), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.3658598128683955E306, (-0.1428571423679182), 76.58);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1748, (UnivariateRealFunction) tan0, (-2270.8981), (-236.67), (double) 1748, allowedSolution0);
      assertEquals((-236.67), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(209729, (UnivariateRealFunction) sin0, (-3717.723), (-134.643975104), 853.7, allowedSolution0);
      assertEquals(853.7, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-731.9910882864219), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(209729, (UnivariateRealFunction) sin0, (-3717.723), (-0.09153383459180757), 853.7, allowedSolution0);
      assertEquals(853.7, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-78.53981633974445), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(209729, (UnivariateRealFunction) sin0, (-3717.723), (-134.643975104), 853.7, allowedSolution0);
      assertEquals(853.7, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-731.9910882864219), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1279.72133024679, (-161.62));
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(7, (UnivariateRealFunction) cos0, 0.5, 2228.67912, allowedSolution0);
      assertEquals(1114.58956, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(209729, (UnivariateRealFunction) sin0, (-3717.723), (-134.643975104), 853.7, allowedSolution0);
      assertEquals(853.7, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-731.9910882864218), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(209729, (UnivariateRealFunction) sin0, (-3717.723), (-170.1003927257927), 853.7, allowedSolution0);
      assertEquals(853.7, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-172.7875959474386), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-3051.6603358702205), (-2506.5510019), 0.007025166007070077);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(426, (UnivariateRealFunction) harmonicOscillator0, (-2506.5510019), (double) Integer.MAX_VALUE, (double) Integer.MAX_VALUE, allowedSolution0);
      assertEquals(2.147483647E9, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.918690192642183E9, double0, 0.01);
  }
}
