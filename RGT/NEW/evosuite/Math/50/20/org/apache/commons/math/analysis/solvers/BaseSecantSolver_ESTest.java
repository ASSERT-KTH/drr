/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 21:04:06 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Floor;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Power;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Power power0 = new Power(0.0);
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-1), (UnivariateRealFunction) power0, 0.0, 0.0, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 5;
      doubleArray0[2] = (-2283.8);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(5, (UnivariateRealFunction) polynomialFunction0, 0.0, 5.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (5) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(3461.61792517, 0.07692307692307693, 0.07692307692307693);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(2781, (UnivariateRealFunction) harmonicOscillator0, 239.48026823, 3461.61792517, allowedSolution0);
      assertEquals(239.48026823, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(754.5530331883451, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Ceil ceil0 = new Ceil();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(12, (UnivariateRealFunction) ceil0, 0.0, (double) 12, allowedSolution0);
      assertEquals(12.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2990.0), 0.0, 0.0);
      Floor floor0 = new Floor();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(3, (UnivariateRealFunction) floor0, (-2990.0), 0.5, (-2990.0), allowedSolution0);
      assertEquals((-2990.0), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2060.001209359732));
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(38, (UnivariateRealFunction) sin0, (-2.2250738585072014E-308), (double) 38, allowedSolution0);
      assertEquals(19.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2171.827153));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(1955981937, (UnivariateRealFunction) sinc0, (-2163.612658), 2003.0, (-2171.827153), allowedSolution0);
      assertEquals((-2171.827153), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-2111.150263212341), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2171.827153));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(1955981906, (UnivariateRealFunction) sinc0, (-2163.612658), 2003.0, (-2171.827153), allowedSolution0);
      assertEquals((-2171.827153), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-2111.1502632123406), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(239.48026823);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(3461.61792517, 0.07692307692307693, 0.07692307692307693);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      regulaFalsiSolver0.solve(2793, (UnivariateRealFunction) harmonicOscillator0, 239.48026823, 3461.61792517, allowedSolution0);
      assertEquals(239.48026823, regulaFalsiSolver0.getMin(), 0.01);
      
      regulaFalsiSolver0.setup(2793, sinc0, 0.0, 2793, 0.0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(2792.8758690413692, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2171.827153));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1955981937, (UnivariateRealFunction) sinc0, (-2163.612658), 2003.0, (-2171.827153), allowedSolution0);
      assertEquals((-2171.827153), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-2111.150263212341), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2171.827153));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1955981937, (UnivariateRealFunction) sinc0, (-2111.150263212341), (double) 1955981937, (-2111.150263212341), allowedSolution0);
      assertEquals((-2111.150263212341), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.9559819158130348E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(239.48026823);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(3461.61792517, 0.07692307692307693, 0.07692307692307693);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      regulaFalsiSolver0.solve(2781, (UnivariateRealFunction) harmonicOscillator0, 239.48026823, 3461.61792517, allowedSolution0);
      assertEquals(1850.5490967, regulaFalsiSolver0.getStartValue(), 0.01);
      
      regulaFalsiSolver0.setup(2781, sinc0, 0.0, 2781, 0.0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(2780.3094984269674, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2060.001209359732));
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(33, (UnivariateRealFunction) sin0, (-0.48552599913417704), (double) 33, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (33) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(239.48026823);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(3461.61792517, 0.07692307692307693, 0.07692307692307693);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(2781, (UnivariateRealFunction) harmonicOscillator0, 239.48026823, 352.4194297776886, allowedSolution0);
      assertEquals(239.48026823, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(315.06511048423596, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(237.8982349335226);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(3461.61792517, 3461.61792517, 3461.61792517);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2757, (UnivariateRealFunction) harmonicOscillator0, 237.8982349335226, 351.326343127, allowedSolution0);
      assertEquals(237.8982349335226, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(237.8982349335226, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(239.48026823);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(3461.61792517, 0.07692307692307693, 0.07692307692307693);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2781, (UnivariateRealFunction) harmonicOscillator0, 239.48026823, 3461.61792517, allowedSolution0);
      assertEquals(1850.5490967, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(840.0884465783893, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(239.48026823);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(3461.61792517, 0.07692307692307693, 0.07692307692307693);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2781, (UnivariateRealFunction) harmonicOscillator0, 239.48026823, 351.326343127, allowedSolution0);
      assertEquals(239.48026823, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(318.62234422725425, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(239.48026823);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(3461.61792517, 0.07692307692307693, 0.07692307692307693);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2781, (UnivariateRealFunction) harmonicOscillator0, 239.48026823, 351.326343127, allowedSolution0);
      assertEquals(295.4033056785, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(351.326343127, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(239.48026823);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(3461.61792517, 0.07692307692307693, 0.07692307692307693);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(2781, (UnivariateRealFunction) harmonicOscillator0, 239.48026823, 352.4194297776886, allowedSolution0);
      assertEquals(239.48026823, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(315.06511048423596, double0, 0.01);
  }
}
