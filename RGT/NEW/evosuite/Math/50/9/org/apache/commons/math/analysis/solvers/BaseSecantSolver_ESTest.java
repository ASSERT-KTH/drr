/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:38:16 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asin;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      Asin asin0 = new Asin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      regulaFalsiSolver0.solve(5, (UnivariateRealFunction) asin0, 762.888, 0.0, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sigmoid sigmoid0 = new Sigmoid(0.0, 0.0);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(3, (UnivariateRealFunction) sigmoid0, (double) 3, (-1948.23), 0.0, allowedSolution0);
      assertEquals((-1948.23), regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-0.2554127800938517), (-1714.5876897), (-0.2554127800938517));
      Cos cos0 = new Cos();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(15, (UnivariateRealFunction) cos0, (-0.2554127800938517), 2214.944910050392, (-1714.5876897));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (15) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1835.2774618, 1024.7033453299366);
      Sinh sinh0 = new Sinh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(987315489, (UnivariateRealFunction) sinh0, (-0.5), 0.5, 4.585408088190036, allowedSolution0);
      assertEquals(4.585408088190036, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1835.2774618, 998.1063151776322);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(4.585408088190036, 987315507, (-0.5));
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(987315507, univariateRealFunction0, (-0.5), 0.5, 4.585408088190036, allowedSolution0);
      assertEquals(4.585408088190036, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.16115828824287254, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(1433, (UnivariateRealFunction) cos0, 180.65159084985, 674.913079011367, 674.913079011367, allowedSolution0);
      assertEquals(674.913079011367, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(183.78317023500293, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1030, (UnivariateRealFunction) cos0, 181.39307993772556, 674.913079011367, 674.913079011367, allowedSolution0);
      assertEquals(674.913079011367, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(240.33183799961918, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(1433, (UnivariateRealFunction) cos0, 182.7138352750318, 674.913079011367, 674.913079011367, allowedSolution0);
      assertEquals(674.913079011367, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(215.19909677090084, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(811, (UnivariateRealFunction) cos0, 182.71383527503, 675.7151976743856, 675.7151976743856, allowedSolution0);
      assertEquals(675.7151976743856, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(240.3318379996193, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1433, (UnivariateRealFunction) cos0, 182.7138352750318, 674.913079011367, 674.913079011367, allowedSolution0);
      assertEquals(215.1990965096495, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1433, (UnivariateRealFunction) cos0, 182.7138352750318, 674.913079011367, 674.913079011367, allowedSolution0);
      assertEquals(674.913079011367, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(215.1990965096495, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(1433, (UnivariateRealFunction) cos0, 1.0E-6, 674.913079011367, 674.913079011367, allowedSolution0);
      assertEquals(674.913079011367, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(7.853981633974484, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(811, (UnivariateRealFunction) cos0, 182.7138352750318, 674.913079011367, 674.913079011367, allowedSolution0);
      assertEquals(215.19909677090084, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1433, (UnivariateRealFunction) cos0, 1.0E-6, 674.913079011367, 674.913079011367, allowedSolution0);
      assertEquals(674.913079011367, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(7.853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1433, (UnivariateRealFunction) cos0, 202.59724580388206, 674.913079011367, 674.913079011367, allowedSolution0);
      assertEquals(472.80969436526385, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1835.2774618, 998.1063151776322);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(4.585408088190036, 987315489, (-0.5));
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(987315489, univariateRealFunction0, (-0.5), 0.5, 4.585408088190036, allowedSolution0);
      assertEquals(0.5, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1835.2774618, 3865.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-1155.979351695752), 987315507, (-0.5));
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(987315507, univariateRealFunction0, (-0.5), 0.5, (-1155.979351695752), allowedSolution0);
      assertEquals((-1155.979351695752), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.16115828824287254, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1835.2774618, 998.1063151776322);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(4.585408088190036, 987315507, (-0.5));
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(987315507, univariateRealFunction0, (-0.5), 0.5, 4.585408088190036, allowedSolution0);
      assertEquals(4.585408088190036, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.16115828824287254, double0, 0.01);
  }
}
