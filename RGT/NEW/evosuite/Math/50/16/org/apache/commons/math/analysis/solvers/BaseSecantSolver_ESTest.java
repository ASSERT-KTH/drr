/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:54:22 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Abs;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Floor;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1275.1313), 1.0, 1.0);
      Cbrt cbrt0 = new Cbrt();
      illinoisSolver0.solve(853, (UnivariateRealFunction) cbrt0, (-1695.5295), 2319.6026);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1275.1313));
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(859, (UnivariateRealFunction) cbrt0, (-1695.5295), 38.58492095673145, allowedSolution0);
      assertEquals((-828.4722895216344), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(4.017431658883433E-46, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Floor floor0 = new Floor();
      double double0 = illinoisSolver0.solve(2418, (UnivariateRealFunction) floor0, 0.1666666505023083, 0.1666666505023083, 0.0);
      assertEquals(0.1666666505023083, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.1666666505023083, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, (-2045.47));
      Abs abs0 = new Abs();
      double double0 = illinoisSolver0.solve(8, (UnivariateRealFunction) abs0, 2246.5455, 0.0, (-6.032174644509064E-23));
      assertEquals((-6.032174644509064E-23), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2090.7));
      Rint rint0 = new Rint();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(52, (UnivariateRealFunction) rint0, (-2090.7), (double) 52, (-2175.0), allowedSolution0);
      assertEquals((-2175.0), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.007279514699021661, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.9036209396976106, 1.0E-6, 1.0E-6);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(4600, (UnivariateRealFunction) tan0, 1494.90615655283, (double) 4600, allowedSolution0);
      assertEquals(3047.453078276415, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2689.81890204036, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1275.1313), 1.0, 1.0);
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(853, (UnivariateRealFunction) cbrt0, (-1695.5295), 38.58492095673145, allowedSolution0);
      assertEquals((-828.4722895216344), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-0.5899466655691002), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1275.1313), 1.0, 1.0);
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(853, (UnivariateRealFunction) cbrt0, (-1695.5295), 38.58492095673145, allowedSolution0);
      assertEquals((-1695.5295), illinoisSolver0.getMin(), 0.01);
      assertEquals((-0.5899466655691002), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1275.1313), 1.0, 1.0);
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(853, (UnivariateRealFunction) cbrt0, (-1695.5295), (double) 853, allowedSolution0);
      assertEquals((-1695.5295), illinoisSolver0.getMin(), 0.01);
      assertEquals(0.39428401637090177, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(954.4, 284.74);
      Inverse inverse0 = new Inverse();
      double double0 = regulaFalsiSolver0.solve(332, (UnivariateRealFunction) inverse0, (-1199.187134715), (double) 332, 1.5874010519681994);
      assertEquals(1.5874010519681994, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-867.187134715), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(418312.0372637706, (-406.95), 418312.0372637706);
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(4, (UnivariateRealFunction) cbrt0, (-406.95), 418312.0372637706, allowedSolution0);
      assertEquals(208952.5436318853, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-406.95), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(4311.0, 1.0, 1.0);
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(853, (UnivariateRealFunction) cbrt0, (-1695.5295), 4311.0, allowedSolution0);
      assertEquals(1307.7352500000002, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(844.3702282921167, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(4600, (UnivariateRealFunction) tan0, 1494.90615655283, (double) 4600, allowedSolution0);
      assertEquals(3047.453078276415, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1649.3361431346239, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(4311.0, 1.0, 1.0);
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(853, (UnivariateRealFunction) cbrt0, (-1695.5295), 38.58492095673145, allowedSolution0);
      assertEquals((-828.4722895216344), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-344.32171546403686), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(4311.0, 1.0, 1.0);
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(853, (UnivariateRealFunction) cbrt0, (-1695.5295), 38.58492095673145, allowedSolution0);
      assertEquals((-828.4722895216344), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(38.58492095673145, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2661.8517828));
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(2354, (UnivariateRealFunction) cos0, (-2661.8517828), (-170.92), (-170.92), allowedSolution0);
      assertEquals((-170.92), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-190.0663555421825), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.9036209396976106);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(4600, (UnivariateRealFunction) tan0, 1494.90615655283, (double) 4600, allowedSolution0);
      assertEquals(3047.453078276415, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1649.3921965915608, double0, 0.01);
  }
}
