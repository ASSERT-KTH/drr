/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:38:14 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

//  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2774.067064754255, 2337.74207973852);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(1.052928544526005, double0, 0.01);
      
      double double1 = fDistribution0.getNumericalVariance();
      assertEquals(1.0008562589240264, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(2774.067064754255, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0015812781882290894, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.338733196258545, 2.338733196258545, 943.85730239942);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertFalse(boolean0);
      assertEquals(2.338733196258545, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(2.338733196258545, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0, 1.0, 1.0);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(1.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2774.067064754255, 2337.74207973852);
      double double0 = fDistribution0.density(2774.067064754255);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2774.067064754255, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.0, 0.0, (-784.5762788975));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(1376.75548866, (-803.7951));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-803.795)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

//  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0, 1.0, 1.0);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(1.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(41.7720787030031, double0, 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
  }
}
