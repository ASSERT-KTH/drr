/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:46:03 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1066.50469291, 1066.50469291);
      // Undeclared exception!
      fDistribution0.sample(36);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1729L);
      FDistribution fDistribution0 = new FDistribution(well44497b0, 1729L, 1729L, 1729L);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(1729.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(1729.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(0.1905880868434906, 0.1905880868434906, 0.1905880868434906);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertFalse(boolean0);
      assertEquals(0.1905880868434906, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(0.1905880868434906, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1066.50469291, 1066.50469291);
      double double0 = fDistribution0.density(0L);
      assertEquals(1066.50469291, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1066.50469291, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-322));
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(well44497a0, (-322), 0.0, (-322));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-322)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(484.67547, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2963.92633897, 1.5346568127351796E-127);
      double double0 = fDistribution0.getNumericalMean();
      assertEquals(1.5346568127351796E-127, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(2963.92633897, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2963.92633897, 1.5346568127351796E-127);
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.5346568127351796E-127, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(2963.92633897, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }
}
