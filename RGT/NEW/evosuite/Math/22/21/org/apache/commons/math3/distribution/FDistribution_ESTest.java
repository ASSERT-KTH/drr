/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:47:55 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(0.42799586057662964, 1544.5106);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.inverseCumulativeProbability(0.42799586057662964);
      assertEquals(0.058997778298858085, double0, 0.01);
      
      double double1 = fDistribution0.getNumericalVariance();
      assertEquals(1.0012965875242608, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(4.692452131209096, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(6.493134033643613E50, 6.493134033643613E50, 6.493134033643613E50);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertFalse(boolean0);
      assertEquals(6.493134033643613E50, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(0.42799586057662964, 1544.5106);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertFalse(boolean0);
      assertEquals(0.42799586057662964, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0012965875242608, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(6.493134033643613E50, 6.493134033643613E50, 6.493134033643613E50);
      double double0 = fDistribution0.density(6.493134033643613E50);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((-2753.823), 4.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-2,753.823)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(350.13185101, (-1001.1441));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-1,001.144)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0E-9, 1.0E-9);
      double double0 = fDistribution0.getNumericalMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.0E-9, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0E-9, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1545.4132, 7.78113163345177E-20, 1545.4132);
      // Undeclared exception!
      fDistribution0.sample(1051);
  }
}
