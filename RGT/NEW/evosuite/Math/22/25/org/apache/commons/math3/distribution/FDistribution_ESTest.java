/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:50:16 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0E-9, 0.6699305772781372);
      double double0 = fDistribution0.sample();
      assertEquals(1.681278976383323E-9, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.6699305772781372, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(4503599627370495L);
      FDistribution fDistribution0 = new FDistribution(well44497b0, 4503599627370495L, 4503599627370495L, 0.0);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(4.503599627370495E15, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0000000000000004, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1390);
      FDistribution fDistribution0 = new FDistribution(well44497b0, 1390, 1390, (-4566.994046086899));
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertFalse(boolean0);
      assertEquals(1390.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0014409221902016, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, Double.NaN, 109.0);
      fDistribution0.density(0.0);
      assertEquals(Double.NaN, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((-1355.6428), (-1355.6428), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-1,355.643)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1025L);
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(well1024a0, 1025L, (-390.8512), (-390.8512));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-390.851)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1328.86229937, 1328.86229937);
      // Undeclared exception!
      fDistribution0.sample(1430);
  }
}
