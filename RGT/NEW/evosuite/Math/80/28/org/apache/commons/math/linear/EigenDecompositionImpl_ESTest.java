/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 04 06:33:03 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class EigenDecompositionImpl_ESTest {

////  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(27, 27);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1, 100.13425965461926);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.1102230246251565E-16);
      double[] doubleArray0 = eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 2726.3586723983103);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(16, 16);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 16);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(2092);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2092
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1811.564650333498;
      doubleArray0[6] = 2916.131025145131;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 2916.131025145131);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.4692225002411261E-10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-3541.966177061859));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertSame(realMatrix1, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(16, 16);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 16);
      eigenDecompositionImpl0.getSolver();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(16, 16);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 16);
      eigenDecompositionImpl0.getD();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      assertEquals(16, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(16, 16);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 16);
      eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(16, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(16, 16);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 16);
      eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(16, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3073.77));
      eigenDecompositionImpl0.getV();
      try { 
        eigenDecompositionImpl0.getEigenvector(159);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 159
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(5, 5);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 5);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3770.1706);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      assertFalse(decompositionSolver1.equals((Object)decompositionSolver0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-720.3);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[5] = 1830.9102788;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.05);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = 1830.9102788;
      doubleArray0[7] = (-0.11499845688954191);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-713.7324672011392));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = 2916.131025145131;
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.3);
      doubleArray0[1] = (-720.3);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[4] = (-306.2942051669);
      doubleArray0[5] = 1828.5690099891128;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1811.564650333498;
      doubleArray0[2] = (-720.3);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = 2916.131025145131;
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (-700.0469086115403);
      doubleArray0[1] = (-700.0469086115403);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[4] = (-0.5333291985330726);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = (-306.2942051669);
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-700.0469086115403));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-700.0469086115403));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.3);
      doubleArray0[2] = (-720.3);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = 2916.131025145131;
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (-720.3);
      doubleArray0[1] = (-1515.37957919);
      doubleArray0[3] = (-1515.37957919);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[2] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.3);
      doubleArray0[1] = (-720.3);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[4] = (-306.2942051669);
      doubleArray0[5] = 1828.5690099891128;
      doubleArray0[6] = 2916.8726380268918;
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[4] = (-1.070119079433035);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = (-306.2942051669);
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.3);
      doubleArray0[1] = 1811.564650333498;
      doubleArray0[2] = (-720.3);
      doubleArray0[3] = (-305.72405255400474);
      doubleArray0[5] = 1830.91028;
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[1] = (-687.0224719425357);
      doubleArray0[3] = (-179.088);
      doubleArray0[0] = (-0.5333291985330726);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = (-179.088);
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-687.0224719425357));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-0.5333291985330726));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.3);
      doubleArray0[1] = (-720.3);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = (-306.2942051669);
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.3);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = 2916.131025145131;
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.3);
      doubleArray0[1] = (-720.3);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[4] = (-306.2942051669);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = 2916.8726380268918;
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      assertEquals(5.441287524102885E-84, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.3);
      doubleArray0[1] = 1811.564650333498;
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = 2916.131025145131;
      doubleArray0[7] = 1811.564650333498;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.3);
      doubleArray0[1] = (-720.3);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1050.707);
      doubleArray0[1] = (-1050.707);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[4] = (-306.2942051669);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = 2916.8726380268918;
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1050.707));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1050.707));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.3);
      doubleArray0[1] = 1811.564650333498;
      doubleArray0[2] = (-720.3);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[4] = 1811.564650333498;
      doubleArray0[5] = 1830.9102788;
      doubleArray0[7] = 1035.529;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.3);
      doubleArray0[1] = 1811.564650333498;
      doubleArray0[2] = (-720.3);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[4] = 1811.564650333498;
      doubleArray0[5] = 1830.9102788;
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.3);
      doubleArray0[1] = (-720.3);
      doubleArray0[3] = (-316.44354738332464);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = 2916.131025145131;
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.3));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.3));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.35385247551);
      doubleArray0[1] = (-720.35385247551);
      doubleArray0[4] = (-720.35385247551);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = 2916.131025145131;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-720.35385247551));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-720.35385247551));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (-687.0224719425357);
      doubleArray0[1] = (-687.0224719425357);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[4] = (-0.5333291985330726);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = (-306.2942051669);
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-687.0224719425357));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-687.0224719425357));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (-687.0224719425357);
      doubleArray0[1] = (-687.0224719425357);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[4] = (-687.0224719425357);
      doubleArray0[5] = 1830.9102788;
      doubleArray0[6] = (-306.2942051669);
      doubleArray0[7] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-687.0224719425357));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-687.0224719425357));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1840.130571);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertTrue(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (-687.0224719425357);
      doubleArray0[3] = (-306.2942051669);
      doubleArray0[6] = (-306.2942051669);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-687.0224719425357));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-687.0224719425357));
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(17);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
  }
}
