/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 23:26:52 GMT 2019
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class SubLine_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      SubLine subLine0 = new SubLine(vector3D0, vector3D1);
      Line line0 = new Line(vector3D1, vector3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet(1.0, (-4532.513314010399));
      SubLine subLine1 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D2 = subLine0.intersection(subLine1, false);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double[] doubleArray0 = new double[3];
      Vector3D vector3D1 = new Vector3D(doubleArray0);
      Line line0 = new Line(vector3D0, vector3D1);
      Segment segment0 = new Segment(vector3D0, vector3D1, line0);
      SubLine subLine0 = new SubLine(segment0);
      List<Segment> list0 = subLine0.getSegments();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double[] doubleArray0 = new double[3];
      Vector3D vector3D1 = new Vector3D(doubleArray0);
      Line line0 = new Line(vector3D0, vector3D1);
      Segment segment0 = new Segment(vector3D0, vector3D1, line0);
      SubLine subLine0 = new SubLine(segment0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertNotSame(vector3D1, vector3D2);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector3D0, vector3D0);
      Vector3D vector3D1 = subLine0.intersection(subLine0, true);
      assertNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2165.70903), (-747.8659422977822), 871.23216319);
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D1, vector3D0);
      Segment segment0 = new Segment(vector3D0, vector3D1, line0);
      SubLine subLine0 = new SubLine(segment0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-163.27001257);
      Vector3D vector3D1 = new Vector3D(doubleArray0);
      Line line0 = new Line(vector3D0, vector3D1);
      Segment segment0 = new Segment(vector3D0, vector3D1, line0);
      SubLine subLine0 = new SubLine(segment0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Vector3D vector3D1 = rotationOrder0.getA3();
      Vector3D vector3D2 = vector3D1.subtract(1037.4354754340686, (Vector<Euclidean3D>) vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      IntervalsSet intervalsSet0 = new IntervalsSet(0.0, 1037.4354754340686);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D3 = new Vector3D(1037.4354754340686, vector3D2, 1037.4354754340686, vector3D0, (-1512.055983), vector3D1);
      Vector3D vector3D4 = Vector3D.ZERO;
      Line line1 = new Line(vector3D3, vector3D4);
      SubLine subLine1 = new SubLine(line1, intervalsSet0);
      Vector3D vector3D5 = subLine1.intersection(subLine0, true);
      assertNull(vector3D5);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet((-111.28732746614), 3.0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertEquals(0.0, vector3D2.getY(), 0.01);
  }
}
