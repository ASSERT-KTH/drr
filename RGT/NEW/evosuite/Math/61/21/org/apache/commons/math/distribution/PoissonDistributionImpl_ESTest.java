/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 09:11:59 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class PoissonDistributionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.3, 6.283185307179586, 3299);
      poissonDistributionImpl0.getDomainLowerBound(0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.16666666666666666);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(0.16666666666666666, double0, 0.01);
  }

//  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(49.0, 49.0, (-1));
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(51, int0);
      assertEquals(49.0, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.16666666666666666);
      int int0 = poissonDistributionImpl0.getDomainUpperBound(0.16666666666666666);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0.16666666666666666, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-2028.0), (-2028.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,028 is smaller than, or equal to, the minimum (0): mean (-2,028)
         //
         verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(632.5);
      double double0 = poissonDistributionImpl0.normalApproximateProbability(Integer.MAX_VALUE);
      assertEquals(1.0, double0, 0.01);
      assertEquals(632.5, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(6.283185307179586, 0);
      double double0 = poissonDistributionImpl0.probability((-1671));
      assertEquals(0.0, double0, 0.01);
      assertEquals(6.283185307179586, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.16666666666666666);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.16666666666666666, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 0);
      double double0 = poissonDistributionImpl0.probability(0);
      assertEquals(0.999999999999, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(958.181103583, 732);
      double double0 = poissonDistributionImpl0.probability(732);
      assertEquals(3.4429688203418685E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.16666666666666666);
      double double0 = poissonDistributionImpl0.cumulativeProbability(0.16666666666666666);
      assertEquals(0.8464817248906141, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(49.0, 49.0, (-1));
      double double0 = poissonDistributionImpl0.cumulativeProbability((-1704));
      assertEquals(0.0, double0, 0.01);
      assertEquals(49.0, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(632.5);
      double double0 = poissonDistributionImpl0.cumulativeProbability(Integer.MAX_VALUE);
      assertEquals(1.0, double0, 0.01);
      assertEquals(632.5, poissonDistributionImpl0.getMean(), 0.01);
  }
}
