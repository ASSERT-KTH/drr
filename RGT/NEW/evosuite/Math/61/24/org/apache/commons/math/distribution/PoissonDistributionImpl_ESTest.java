/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 09:13:16 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class PoissonDistributionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(33.0189705797628, 33.0189705797628);
      poissonDistributionImpl0.getDomainLowerBound((-2919.1099731594));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.5);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(1.5, double0, 0.01);
  }

//  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(3888.4758, (-1.0));
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(3888.4758, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(3901, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 154);
      int int0 = poissonDistributionImpl0.getDomainUpperBound((-111.2));
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 154);
      double double0 = poissonDistributionImpl0.normalApproximateProbability(154);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-1060.06389), (-1060.06389), 233);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,060.064 is smaller than, or equal to, the minimum (0): mean (-1,060.064)
         //
         verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(3888.4758, (-1.0));
      double double0 = poissonDistributionImpl0.probability((-1099));
      assertEquals(0.0, double0, 0.01);
      assertEquals(3888.4758, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 154);
      double double0 = poissonDistributionImpl0.probability(0.0);
      assertEquals(0.999999999999, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(33.0189705797628, 33.0189705797628);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(0.0, double0, 0.01);
      assertEquals(33.0189705797628, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 154);
      double double0 = poissonDistributionImpl0.probability(1.0);
      assertEquals(9.999999999990042E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2809.869053168143, 2809.869053168143, (-1935));
      double double0 = poissonDistributionImpl0.cumulativeProbability(0, Integer.MAX_VALUE);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2809.869053168143, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.5, 0.5, 1661);
      double double0 = poissonDistributionImpl0.cumulativeProbability(1661);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01);
  }
}
