/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 09:15:03 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class PoissonDistributionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.5, 147);
      poissonDistributionImpl0.getDomainLowerBound(147);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1688.467551816828);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(1688.467551816828, double0, 0.01);
  }

//  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1688.467551816828);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(1696, int0);
      assertEquals(1688.467551816828, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(969.003865105583, 969.003865105583);
      int int0 = poissonDistributionImpl0.getDomainUpperBound((-1));
      assertEquals(969.003865105583, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(454.33895264, 454.33895264, 0);
      double double0 = poissonDistributionImpl0.normalApproximateProbability((-288));
      assertEquals(0.0, double0, 0.01);
      assertEquals(454.33895264, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-47.045532069), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -47.046 is smaller than, or equal to, the minimum (0): mean (-47.046)
         //
         verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.9868161777724352E-8);
      double double0 = poissonDistributionImpl0.probability((-51));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.9868161777724352E-8, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1688.467551816828);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(1688.467551816828, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(454.33895264, 454.33895264, 0);
      double double0 = poissonDistributionImpl0.probability(0);
      assertEquals(4.820587327516798E-198, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(957.23122267, 957.23122267, 2959);
      double double0 = poissonDistributionImpl0.probability(2959);
      assertEquals(0.0, double0, 0.01);
      assertEquals(957.23122267, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(454.33895264, 454.33895264, 0);
      try { 
        poissonDistributionImpl0.cumulativeProbability(953.3101413981948);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of iterations (0) exceeded
         //
         verifyException("org.apache.commons.math.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(969.003865105583, 969.003865105583);
      double double0 = poissonDistributionImpl0.cumulativeProbability((-1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(969.003865105583, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(3930.2131482581, (-705.0), Integer.MAX_VALUE);
      double double0 = poissonDistributionImpl0.cumulativeProbability(Integer.MAX_VALUE);
      assertEquals(3930.2131482581, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }
}
