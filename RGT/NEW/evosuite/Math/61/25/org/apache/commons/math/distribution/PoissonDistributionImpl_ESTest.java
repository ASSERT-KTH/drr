/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 09:13:43 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class PoissonDistributionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.11113807559013367, 0.11113807559013367, Integer.MAX_VALUE);
      poissonDistributionImpl0.getDomainLowerBound(1.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.11113807559013367, 0.11113807559013367, Integer.MAX_VALUE);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(0.11113807559013367, double0, 0.01);
  }

//  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.11113807559013367, 0.11113807559013367, Integer.MAX_VALUE);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(0, int0);
      assertEquals(0.11113807559013367, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0): mean (0)
         //
         verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.11113807559013367, 0.11113807559013367, Integer.MAX_VALUE);
      int int0 = poissonDistributionImpl0.getDomainUpperBound(0.0875862700108075);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0.11113807559013367, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.2675934823758863E-8, 0);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(1.2675934823758863E-8, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(732.6925074733, (-1235.5));
      assertEquals(732.6925074733, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.11113807559013367, 0.11113807559013367, Integer.MAX_VALUE);
      double double0 = poissonDistributionImpl0.normalApproximateProbability((-1));
      assertEquals(0.11113807559013367, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.03338702641999619, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(613.98119911212, 1.0, 0);
      double double0 = poissonDistributionImpl0.probability((-126));
      assertEquals(613.98119911212, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.11113807559013367, 0.11113807559013367, Integer.MAX_VALUE);
      double double0 = poissonDistributionImpl0.probability(0.0);
      assertEquals(0.8948151882636913, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.2675934823758863E-8, 0);
      double double0 = poissonDistributionImpl0.probability(5135);
      assertEquals(1.2675934823758863E-8, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.11113807559013367, 0.11113807559013367, Integer.MAX_VALUE);
      double double0 = poissonDistributionImpl0.cumulativeProbability(Integer.MAX_VALUE);
      assertEquals(0.11113807559013367, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(613.98119911212, 1.0, 0);
      double double0 = poissonDistributionImpl0.cumulativeProbability((-1685684224));
      assertEquals(0.0, double0, 0.01);
      assertEquals(613.98119911212, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 208);
      double double0 = poissonDistributionImpl0.cumulativeProbability(208);
      assertEquals(1.0, double0, 0.01);
  }
}
