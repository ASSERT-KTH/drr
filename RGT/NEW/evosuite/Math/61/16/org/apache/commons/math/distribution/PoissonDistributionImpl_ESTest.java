/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 09:09:46 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class PoissonDistributionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1695.0);
      poissonDistributionImpl0.getDomainLowerBound(1695.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(547.734707097649, 1689.8343501);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(547.734707097649, double0, 0.01);
  }

//  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(547.734707097649, 1689.8343501);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(552, int0);
      assertEquals(547.734707097649, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(547.734707097649, 1689.8343501);
      int int0 = poissonDistributionImpl0.getDomainUpperBound((-793.727446));
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(547.734707097649, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.19999954120254515, (-1));
      double double0 = poissonDistributionImpl0.cumulativeProbability((-1));
      assertEquals(0.19999954120254515, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(547.734707097649, 1689.8343501);
      double double0 = poissonDistributionImpl0.normalApproximateProbability(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(547.734707097649, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-1027.9845449914408), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,027.985 is smaller than, or equal to, the minimum (0): mean (-1,027.985)
         //
         verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(6.283185307179586, 6.283185307179586, 193);
      double double0 = poissonDistributionImpl0.probability((-1261));
      assertEquals(0.0, double0, 0.01);
      assertEquals(6.283185307179586, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(547.734707097649, 1689.8343501);
      double double0 = poissonDistributionImpl0.probability(0);
      assertEquals(1.323851160869436E-238, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1695.0);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1695.0, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(6.283185307179586, 6.283185307179586, 193);
      double double0 = poissonDistributionImpl0.probability(193);
      assertEquals(3.0491595270501226E-208, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(547.734707097649, 1689.8343501);
      double double0 = poissonDistributionImpl0.cumulativeProbability(0.0);
      assertEquals(1.3238511608694466E-238, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(6.283185307179586);
      double double0 = poissonDistributionImpl0.cumulativeProbability(Integer.MAX_VALUE);
      assertEquals(1.0, double0, 0.01);
      assertEquals(6.283185307179586, poissonDistributionImpl0.getMean(), 0.01);
  }
}
