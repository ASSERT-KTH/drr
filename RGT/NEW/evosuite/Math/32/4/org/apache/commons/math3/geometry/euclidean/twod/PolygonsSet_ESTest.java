/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 16:23:04 GMT 2019
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.AffineTransform;
import java.text.NumberFormat;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class PolygonsSet_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(0.0, 3.444E-8, 0.0, 3.444E-8);
      polygonsSet0.computeGeometricalProperties();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      polygonsSet0.getVertices();
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(false);
      polygonsSet0.buildNew(bSPTree0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
  }

////  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet((-206.22120813941), (-206.22120813941), (-206.22120813941), (-206.22120813941));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      polygonsSet0.computeGeometricalProperties();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet((-2406.02), 0.0, (-2406.02), 0.0);
      polygonsSet0.computeGeometricalProperties();
      polygonsSet0.getVertices();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 1579.44);
      line0.translateToPoint(vector2D0);
      Line line1 = new Line(line0);
      SubLine subLine0 = line1.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      polygonsSet0.getVertices();
      polygonsSet0.computeGeometricalProperties();
      polygonsSet0.getVertices();
  }

////  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(false);
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D(0.25, vector2D0, 0.25, vector2D0, (-587.20903), vector2D0);
      vector2D1.negate();
      vector2D1.distance((Vector<Euclidean2D>) vector2D0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      vector2D1.add(Double.NaN, vector0);
      vector2D1.toString(numberFormat0);
      Line line0 = new Line(vector2D1, (-587.20903));
      Line line1 = new Line(vector2D1, vector2D0);
      Vector1D vector1D0 = new Vector1D(0.0);
      Vector2D vector2D2 = Vector2D.ZERO;
      Vector1D vector1D1 = line1.toSubSpace(vector2D2);
      vector1D0.distance1(vector1D1);
      line0.getPointAt(vector1D0, Double.NaN);
      line0.isParallelTo(line1);
      bSPTree0.insertCut(line0);
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree0);
      polygonsSet1.copySelf();
      polygonsSet0.copySelf();
      polygonsSet0.computeGeometricalProperties();
      polygonsSet0.getVertices();
      polygonsSet0.getVertices();
      polygonsSet0.getVertices();
      polygonsSet0.getVertices();
      polygonsSet0.computeGeometricalProperties();
      polygonsSet1.computeGeometricalProperties();
      polygonsSet1.buildNew(bSPTree0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = new Boolean("4/!Q:m");
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      PolygonsSet polygonsSet0 = new PolygonsSet(1505.695472922, 3932.04804461391, 3932.04804461391, 3.4028234663852886E38);
      polygonsSet0.copySelf();
      polygonsSet0.computeGeometricalProperties();
      polygonsSet0.getVertices();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(0.0, 0.0);
      Line line0 = new Line(vector2D0, 3932.04804461391);
      PolygonsSet polygonsSet0 = line0.wholeSpace();
      polygonsSet0.computeGeometricalProperties();
      Boolean boolean0 = new Boolean("4/!Q:m");
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(boolean0);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.split(subLine0);
      BSPTree<Euclidean2D> bSPTree2 = bSPTree1.copySelf();
      BSPTree<Euclidean2D> bSPTree3 = bSPTree2.getMinus();
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree3);
      polygonsSet1.computeGeometricalProperties();
  }

////  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D(0.5000000000042687, vector2D0);
      Line line0 = new Line(vector2D1, 0.5000000000042687);
      Line line1 = new Line(line0);
      IntervalsSet intervalsSet0 = new IntervalsSet(0.5000000000042687, 0.5000000000042687);
      SubLine subLine0 = new SubLine(line1, intervalsSet0);
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      Vector2D vector2D2 = Vector2D.ZERO;
      Line line2 = new Line(vector2D2, 1579.44);
      Line line3 = new Line(line2);
      SubLine subLine1 = line3.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine1);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      polygonsSet0.getVertices();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, 2495.921);
      PolygonsSet polygonsSet0 = new PolygonsSet(1.9999999999999996, 0.0, 1.9999999999999996, 0.0);
      polygonsSet0.computeGeometricalProperties();
      PolygonsSet polygonsSet1 = line0.wholeSpace();
      polygonsSet1.getVertices();
      PolygonsSet polygonsSet2 = line0.wholeSpace();
      polygonsSet2.computeGeometricalProperties();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(3.4028234663852886E38, 0.04926630427407627, 1.2683543413279226E7, 0.0067317689130277315);
      polygonsSet0.getTree(false);
      polygonsSet0.copySelf();
      polygonsSet0.computeGeometricalProperties();
      polygonsSet0.computeGeometricalProperties();
      polygonsSet0.getVertices();
      polygonsSet0.computeGeometricalProperties();
      polygonsSet0.computeGeometricalProperties();
      polygonsSet0.getVertices();
      polygonsSet0.getVertices();
      polygonsSet0.getVertices();
      polygonsSet0.getVertices();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.4028234663852886E38;
      doubleArray0[1] = 1.2683543413279226E7;
      doubleArray0[2] = 1.2683543413279226E7;
      doubleArray0[3] = 1.2683543413279226E7;
      doubleArray0[4] = 3.4028234663852886E38;
      doubleArray0[5] = 0.04926630427407627;
      doubleArray0[6] = 1.2683543413279226E7;
      AffineTransform affineTransform0 = new AffineTransform(doubleArray0);
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      polygonsSet0.applyTransform(transform0);
      polygonsSet0.computeGeometricalProperties();
      polygonsSet0.getVertices();
      polygonsSet0.computeGeometricalProperties();
      polygonsSet0.computeGeometricalProperties();
  }

////  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = new Vector2D(0.041666666666666664, 0.041666666666666664);
      Line line0 = new Line(vector2D0, vector2D0);
      line0.reset(vector2D0, (-1914.0));
      SubLine subLine0 = line0.wholeHyperplane();
      subLine0.copySelf();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      Vector2D vector2D1 = Vector2D.ZERO;
      SubLine subLine1 = new SubLine(vector2D1, vector2D1);
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine1);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      polygonsSet0.getVertices();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = new Vector2D((-1756.35427), (-2.356194490192345));
      Vector2D vector2D1 = new Vector2D(0.626601834048835, vector2D0, (-4202.2230597), vector2D0, 0.626601834048835, vector2D0, (-1756.35427), vector2D0);
      Line line0 = new Line(vector2D1, (-2.356194490192345));
      SubLine subLine0 = line0.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      Vector2D vector2D2 = new Vector2D(0.626601834048835, 0.626601834048835);
      Line line1 = new Line(vector2D2, vector2D2);
      line1.reset(vector2D2, 0.626601834048835);
      SubLine subLine1 = line1.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine1);
      SubLine subLine2 = new SubLine(vector2D2, vector2D2);
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine2);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      polygonsSet0.computeGeometricalProperties();
  }
}
