/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 01:23:10 GMT 2019
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.apache.commons.math.util.MultidimensionalCounter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;


public class MultidimensionalCounter_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2422;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      multidimensionalCounter_Iterator0.getCount();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2422;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      int[] intArray1 = multidimensionalCounter_Iterator0.getCounts();
      assertEquals((-1), multidimensionalCounter_Iterator0.getCount());
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertEquals(2422, multidimensionalCounter0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1041;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      // Undeclared exception!
      try { 
        multidimensionalCounter_Iterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2422;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      int int0 = multidimensionalCounter_Iterator0.getCount(0);
      assertEquals((-1), multidimensionalCounter_Iterator0.getCount());
      assertEquals((-1), int0);
      assertEquals(2422, multidimensionalCounter0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 300;
      intArray0[1] = (-821);
      intArray0[2] = 2493;
      intArray0[3] = 1;
      intArray0[4] = (-515);
      intArray0[5] = (-89);
      intArray0[6] = (-4136);
      intArray0[7] = 709;
      intArray0[8] = (-2073);
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      int int0 = multidimensionalCounter0.getDimension();
      assertEquals(400465632, multidimensionalCounter0.getSize());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2422;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      multidimensionalCounter0.getSizes();
      assertEquals(2422, multidimensionalCounter0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 4090;
      intArray0[1] = 710;
      intArray0[2] = (-2473);
      intArray0[3] = 20;
      intArray0[4] = 3;
      intArray0[5] = (-1779);
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      int int0 = multidimensionalCounter0.getSize();
      assertEquals(1035058992, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2422;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      multidimensionalCounter_Iterator0.forEachRemaining(consumer0);
      multidimensionalCounter_Iterator0.next();
      assertEquals(2422, multidimensionalCounter_Iterator0.getCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[1];
      MultidimensionalCounter multidimensionalCounter0 = null;
      try {
        multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-578);
      intArray0[1] = (-479);
      intArray0[2] = 1;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      // Undeclared exception!
      try { 
        multidimensionalCounter0.getCounts((-1855));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,855 out of [0, 276,862] range
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 344;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      // Undeclared exception!
      try { 
        multidimensionalCounter0.getCounts(344);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 344 out of [0, 344] range
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5700;
      intArray0[1] = 76;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      int[] intArray1 = multidimensionalCounter0.getCounts(0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(433200, multidimensionalCounter0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2422;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      String string0 = multidimensionalCounter0.toString();
      assertEquals(2422, multidimensionalCounter0.getSize());
      assertEquals("[0]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-4788);
      intArray0[1] = (-3082);
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      // Undeclared exception!
      try { 
        multidimensionalCounter0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-4496);
      intArray0[1] = (-3228);
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      try { 
        multidimensionalCounter0.getCount(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -4,496 out of [0, -4,497] range
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1145;
      intArray0[1] = 741;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      try { 
        multidimensionalCounter0.getCount(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1,145 out of [0, 1,144] range
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }
}
