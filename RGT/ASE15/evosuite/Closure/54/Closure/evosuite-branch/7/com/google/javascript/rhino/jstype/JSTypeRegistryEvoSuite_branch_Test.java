/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 02:19:55 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class JSTypeRegistryEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = " [";
      Node node0 = Node.newString(string0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertNotNull(node0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(" [", templateType0.getReferenceName());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(" [", templateType0.toString());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertNotNull(templateType0);
      
      jSTypeRegistry0.identifyNonNullableName(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) templateType0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(" [", templateType0.getReferenceName());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(" [", templateType0.toString());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertNotNull(namedType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      JSTypeRegistry.ResolveMode jSTypeRegistry_ResolveMode0 = JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
      jSTypeRegistry0.setResolveMode(jSTypeRegistry_ResolveMode0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(recordType0);
      
      String string0 = "GJw%L";
      boolean boolean0 = linkedList0.add((JSType) recordType0);
      assertTrue(boolean0);
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(1, linkedList0.size());
      assertEquals("[{}]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(83, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, linkedList0.size());
      assertEquals("[{}]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(node0);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(83, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, linkedList0.size());
      assertEquals("[{}]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unresolvedTypeExpression0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unresolvedTypeExpression0.resolveInternal(simpleErrorReporter0, recordType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node in type expression: LP
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "T6yP?*(";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      boolean boolean1 = errorFunctionType0.canAssignTo((JSType) errorFunctionType0);
      assertTrue(boolean1);
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      boolean boolean2 = jSTypeRegistry0.resetImplicitPrototype((JSType) errorFunctionType0, (ObjectType) noType0);
      assertFalse(boolean2);
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNotNull(noResolvedType0);
      
      boolean boolean0 = jSTypeRegistry0.resetImplicitPrototype((JSType) noResolvedType0, (ObjectType) noResolvedType0);
      assertTrue(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertNotNull(booleanType0);
      
      boolean boolean0 = jSTypeRegistry0.resetImplicitPrototype((JSType) booleanType0, (ObjectType) noResolvedType0);
      assertFalse(boolean0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[10];
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(47, jSTypeNativeArray0[0].ordinal());
      
      jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(47, jSTypeNativeArray0[1].ordinal());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNative0;
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(47, jSTypeNativeArray0[2].ordinal());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[2].name());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[3].name());
      assertEquals(47, jSTypeNativeArray0[3].ordinal());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[1];
      assertEquals(47, jSTypeNativeArray0[4].ordinal());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[4].name());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[4].toString());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[4];
      assertEquals(47, jSTypeNativeArray0[5].ordinal());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[5].name());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[1];
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[6].name());
      assertEquals(47, jSTypeNativeArray0[6].ordinal());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[0];
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals(47, jSTypeNativeArray0[7].ordinal());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[7].name());
      
      jSTypeNativeArray0[8] = jSTypeNative0;
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[8].name());
      assertEquals(47, jSTypeNativeArray0[8].ordinal());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[8].toString());
      
      jSTypeNativeArray0[9] = jSTypeNative0;
      assertEquals(47, jSTypeNativeArray0[9].ordinal());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[9].name());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[9].toString());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[8] = (JSType) functionType0;
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, jSTypeArray0[8].isTemplateType());
      assertEquals(false, jSTypeArray0[8].isBooleanValueType());
      assertEquals(false, jSTypeArray0[8].isNoObjectType());
      assertEquals(true, jSTypeArray0[8].isConstructor());
      assertEquals(false, jSTypeArray0[8].isAllType());
      assertEquals(true, jSTypeArray0[8].isFunctionType());
      assertEquals(false, jSTypeArray0[8].isResolved());
      assertEquals(false, jSTypeArray0[8].isNoResolvedType());
      assertEquals(false, jSTypeArray0[8].isEnumElementType());
      assertEquals(false, jSTypeArray0[8].isRecordType());
      assertEquals(false, jSTypeArray0[8].isUnionType());
      assertEquals(false, jSTypeArray0[8].isNominalType());
      assertEquals(false, jSTypeArray0[8].isInterface());
      assertEquals(false, jSTypeArray0[8].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[8].isVoidType());
      assertEquals(false, jSTypeArray0[8].isNullType());
      assertEquals(false, jSTypeArray0[8].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[8].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[8].isNoType());
      assertEquals(false, jSTypeArray0[8].isStringValueType());
      assertEquals(false, jSTypeArray0[8].isEnumType());
      assertEquals(false, jSTypeArray0[8].isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[8]);
      
      FunctionType functionType1 = jSTypeRegistry0.createConstructorType((JSType) functionType0, boolean0, jSTypeArray0);
      assertEquals(false, functionType1.isEnumType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isAllType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType0.equals((Object)functionType1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "T6yP?*(";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) errorFunctionType0);
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) noResolvedType0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "T6yP?*(";
      jSTypeRegistry0.setTemplateTypeName(string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNotNull(errorFunctionType0);
      
      int int0 = 104;
      TemplateType templateType0 = (TemplateType)jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, string0, string0, int0, int0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals("T6yP?*(", templateType0.toString());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("T6yP?*(", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNotNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals("None", noType0.toString());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      String string0 = "Function";
      jSTypeRegistry0.overwriteDeclaredType(string0, (JSType) noType0);
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals("None", noType0.toString());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "REERVED";
      int int0 = 3706;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, namedType0, namedType0);
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      // Undeclared exception!
      try {
        jSTypeRegistry0.overwriteDeclaredType(string0, (JSType) parameterizedType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals("None", noType0.toString());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNotNull(noType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals("None", noType0.toString());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNotNull(indexedType0);
      
      String string0 = "Function";
      boolean boolean0 = jSTypeRegistry0.declareType(string0, (JSType) indexedType0);
      assertFalse(boolean0);
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals("None", noType0.toString());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      jSTypeRegistry0.incrementGeneration();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      Iterable<ObjectType> iterable0 = jSTypeRegistry0.getEachReferenceTypeWithProperty(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "REERVED";
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isVoidType());
      assertNotNull(booleanType0);
      
      jSTypeRegistry0.registerPropertyOnType(string0, (JSType) booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isVoidType());
      
      Iterable<JSType> iterable0 = jSTypeRegistry0.getTypesWithProperty(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "kM";
      Iterable<JSType> iterable0 = jSTypeRegistry0.getTypesWithProperty(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "REE>O";
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertNotNull(booleanType0);
      
      jSTypeRegistry0.registerPropertyOnType(string0, (JSType) booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      
      boolean boolean0 = jSTypeRegistry0.canPropertyBeDefined((JSType) booleanType0, string0);
      assertTrue(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "case";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = jSTypeRegistry0.canPropertyBeDefined((JSType) noResolvedType0, string0);
      assertFalse(boolean1);
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "REE>O";
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(booleanType0);
      
      jSTypeRegistry0.registerPropertyOnType(string0, (JSType) booleanType0);
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType1 = (BooleanType)jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) booleanType0, string0);
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType1.matchesNumberContext());
      assertEquals(false, booleanType1.isFunctionPrototypeType());
      assertEquals(false, booleanType1.isFunctionType());
      assertEquals(false, booleanType1.isNoResolvedType());
      assertEquals(false, booleanType1.isNullable());
      assertEquals(false, booleanType1.isConstructor());
      assertEquals(false, booleanType1.isOrdinaryFunction());
      assertEquals(true, booleanType1.matchesObjectContext());
      assertEquals(false, booleanType1.isAllType());
      assertEquals(false, booleanType1.isNoObjectType());
      assertEquals("boolean", booleanType1.getDisplayName());
      assertEquals(false, booleanType1.isTemplateType());
      assertEquals(false, booleanType1.isUnionType());
      assertEquals(false, booleanType1.isRecordType());
      assertEquals(false, booleanType1.isVoidType());
      assertEquals(false, booleanType1.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType1.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType1.isEnumElementType());
      assertEquals(false, booleanType1.isNumberValueType());
      assertEquals(true, booleanType1.isBooleanValueType());
      assertEquals(false, booleanType1.isInterface());
      assertEquals(false, booleanType1.isNoType());
      assertEquals(true, booleanType1.matchesStringContext());
      assertEquals(false, booleanType1.isCheckedUnknownType());
      assertEquals(false, booleanType1.isNullType());
      assertEquals(false, booleanType1.isNominalType());
      assertEquals(false, booleanType1.isEnumType());
      assertEquals("boolean", booleanType1.toString());
      assertEquals(false, booleanType1.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(booleanType1);
      assertSame(booleanType0, booleanType1);
      assertSame(booleanType1, booleanType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals("None", noType0.toString());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isUnionType());
      assertNotNull(noType0);
      
      String string0 = "kM";
      NoType noType1 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) noType0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals("None", noType0.toString());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isNumberValueType());
      assertNull(noType1.getReferenceName());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.isNominalType());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals(true, noType1.isNoType());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, noType1.isInterface());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isRecordType());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(false, noType1.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(true, noType1.isNullable());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals("None", noType1.toString());
      assertEquals(false, noType1.isEnumType());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isResolved());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertNotNull(noType1);
      assertNotSame(noType0, noType1);
      assertNotSame(noType1, noType0);
      assertFalse(noType0.equals((Object)noType1));
      assertFalse(noType1.equals((Object)noType0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      String string0 = ")]M.y/";
      jSTypeRegistry0.unregisterPropertyOnType(string0, (JSType) noResolvedType0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(booleanType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      String string0 = null;
      jSTypeRegistry0.registerPropertyOnType(string0, (JSType) booleanType0);
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isFromExterns());
      assertEquals(83, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertNotNull(node0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isConstructor());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      boolean boolean1 = noType0.defineInferredProperty(string0, (JSType) booleanType0, node0);
      assertTrue(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isConstructor());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isFromExterns());
      assertEquals(83, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "l5b-RG.8<q5Q`SsgoA";
      int int0 = 301;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      boolean boolean0 = jSTypeRegistry0.declareType(string0, (JSType) namedType0);
      assertTrue(boolean0);
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[10];
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(47, jSTypeNativeArray0[0].ordinal());
      
      jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(47, jSTypeNativeArray0[1].ordinal());
      
      jSTypeNativeArray0[2] = jSTypeNative0;
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(47, jSTypeNativeArray0[2].ordinal());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[2].name());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.REGEXP_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[3] = jSTypeNative1;
      assertEquals("REGEXP_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals(26, jSTypeNativeArray0[3].ordinal());
      assertEquals("REGEXP_TYPE", jSTypeNativeArray0[3].name());
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "{A/rh`";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      Node node0 = noResolvedType0.getSource();
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Um!,/Vrm>3&8w'q-u&";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.getReferenceName());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isAllType());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.toString());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertNotNull(templateType0);
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.getReferenceName());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isAllType());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.toString());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isNumberValueType());
      assertNotNull(enumType0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals("None", noType0.toString());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      assertEquals("None", noType0.toString());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isAllType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertNotNull(indexedType0);
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) indexedType0, (JSType) noType0, (List<JSType>) linkedList0);
      assertEquals("None", noType0.toString());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isAllType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoObjectType());
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createAnonymousObjectType();
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(prototypeObjectType0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNullable());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.hasCachedValues());
      assertNotNull(noType0);
      
      Collection<FunctionType> collection0 = jSTypeRegistry0.getDirectImplementors((ObjectType) noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNullable());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.hasCachedValues());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isAllType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isResolved());
      assertNotNull(indexedType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionType((ObjectType) indexedType0, (JSType) noType0, (List<JSType>) linkedList0);
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isAllType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isResolved());
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertNotNull(noType0);
      
      boolean boolean1 = noType0.matchesStringContext();
      assertTrue(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      jSTypeRegistry0.setLastGeneration(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Um!,/Vrm>3&8w'q-u&";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.toString());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.getReferenceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) templateType0);
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.toString());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.getReferenceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0);
      
      TemplateType templateType1 = (TemplateType)templateType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) functionType0);
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.toString());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(true, templateType0.isResolved());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.getReferenceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType1.isFunctionPrototypeType());
      assertEquals(false, templateType1.isVoidType());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType1.toString());
      assertEquals(false, templateType1.isRecordType());
      assertEquals(true, templateType1.isResolved());
      assertEquals(true, templateType1.isTemplateType());
      assertEquals(false, templateType1.isStringValueType());
      assertEquals(false, templateType1.hasCachedValues());
      assertEquals(false, templateType1.isNullType());
      assertEquals(false, templateType1.isUnionType());
      assertEquals(false, templateType1.isEnumElementType());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType1.getReferenceName());
      assertEquals(false, templateType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType1.isAllType());
      assertEquals(false, templateType1.isFunctionType());
      assertEquals(false, templateType1.isBooleanValueType());
      assertNotNull(templateType1);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "REE>O";
      int int0 = 3691;
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createNamedType(string0, string0, int0, int0);
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertNotNull(booleanType0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertNull(functionType0);
      
      // Undeclared exception!
      try {
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, (ObjectType) functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "l5b-RG.8<q5Q`SsgoA";
      boolean boolean0 = jSTypeRegistry0.hasNamespace(string0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[13];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[3], boolean0, jSTypeArray0);
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(13, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      SimpleErrorReporter simpleErrorReporter1 = (SimpleErrorReporter)jSTypeRegistry0.getErrorReporter();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(simpleErrorReporter1);
      assertSame(simpleErrorReporter1, simpleErrorReporter0);
      assertSame(simpleErrorReporter0, simpleErrorReporter1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(booleanType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) booleanType0, (List<JSType>) linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, (JSType) booleanType0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isRecordType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(0, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
      assertTrue(functionType1.equals((Object)functionType0));
      assertTrue(functionType0.equals((Object)functionType1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "l5b-RG.8<q5Q`SsgoA";
      int int0 = 301;
      boolean boolean0 = jSTypeRegistry0.hasNamespace(string0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertNotNull(namedType0);
      
      JSType[] jSTypeArray0 = new JSType[13];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) namedType0, boolean0, jSTypeArray0);
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(13, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createNativeAnonymousObjectType();
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(prototypeObjectType0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertNotNull(booleanType0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createDefaultObjectUnion((JSType) booleanType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertNotNull(unionType0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      int int0 = 21;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Um!,/Vrm>3&8w'q-u&";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.getReferenceName());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.toString());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertNotNull(templateType0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.getReferenceName());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.toString());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertNull(functionType0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.getType((StaticScope<JSType>) functionType0, string1, string0, int0, int0);
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.getReferenceName());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.toString());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertNotNull(namedType0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.getReferenceName());
      assertEquals("Um!,/Vrm>3&8w'q-u&", templateType0.toString());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "`^mRi`";
      jSTypeRegistry0.forwardDeclareType(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(booleanType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) booleanType0, (List<JSType>) linkedList0);
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      jSTypeRegistry0.clearTemplateTypeName();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertNotNull(noType0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(true, recordType0.isRecordType());
      assertNotNull(recordType0);
      
      jSTypeRegistry0.registerTypeImplementingInterface(noType0, recordType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(true, recordType0.isRecordType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      jSTypeRegistry0.clearNamedTypes();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = " [";
      Node node0 = Node.newString(string0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) noType0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unionType0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNullType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isRecordType());
      assertNotNull(voidType0);
      
      EnumElementType enumElementType0 = voidType0.toMaybeEnumElementType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNullType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isRecordType());
      assertNull(enumElementType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) enumElementType0, (JSType) enumElementType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNullType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertNotNull(parameterizedType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType((ObjectType) parameterizedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNullType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertNotNull(prototypeObjectType0);
  }
}
