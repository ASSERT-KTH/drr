/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 03:43:33 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class JSTypeRegistryEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00() {}
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       AllType allType0 = new AllType(jSTypeRegistry0);
//       assertNotNull(allType0);
//       assertEquals(true, allType0.matchesStringContext());
//       assertEquals(true, allType0.isAllType());
//       assertEquals(false, allType0.isNominalType());
//       assertEquals("*", allType0.toString());
//       assertEquals(false, allType0.canBeCalled());
//       assertEquals(false, allType0.isUnionType());
//       assertEquals(false, allType0.isEnumType());
//       assertEquals(false, allType0.isNullType());
//       assertEquals("<Any Type>", allType0.getDisplayName());
//       assertEquals(false, allType0.isFunctionType());
//       assertEquals(false, allType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType0.isTemplateType());
//       assertEquals(false, allType0.isStringValueType());
//       assertEquals(false, allType0.isNoObjectType());
//       assertEquals(false, allType0.isOrdinaryFunction());
//       assertEquals(false, allType0.isCheckedUnknownType());
//       assertEquals(true, allType0.hasDisplayName());
//       assertEquals(false, allType0.isResolved());
//       assertEquals(false, allType0.isConstructor());
//       assertEquals(false, allType0.isNoType());
//       assertEquals(false, allType0.isInterface());
//       assertEquals(true, allType0.matchesObjectContext());
//       assertEquals(false, allType0.isRecordType());
//       assertEquals(false, allType0.isFunctionPrototypeType());
//       assertEquals(false, allType0.isNumberValueType());
//       assertEquals(false, allType0.isBooleanValueType());
//       assertEquals(false, allType0.isVoidType());
//       assertEquals(false, allType0.isEnumElementType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       EnumElementType enumElementType0 = allType0.toMaybeEnumElementType();
//       assertNull(enumElementType0);
//       assertEquals(true, allType0.matchesStringContext());
//       assertEquals(true, allType0.isAllType());
//       assertEquals(false, allType0.isNominalType());
//       assertEquals("*", allType0.toString());
//       assertEquals(false, allType0.canBeCalled());
//       assertEquals(false, allType0.isUnionType());
//       assertEquals(false, allType0.isEnumType());
//       assertEquals(false, allType0.isNullType());
//       assertEquals("<Any Type>", allType0.getDisplayName());
//       assertEquals(false, allType0.isFunctionType());
//       assertEquals(false, allType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType0.isTemplateType());
//       assertEquals(false, allType0.isStringValueType());
//       assertEquals(false, allType0.isNoObjectType());
//       assertEquals(false, allType0.isOrdinaryFunction());
//       assertEquals(false, allType0.isCheckedUnknownType());
//       assertEquals(true, allType0.hasDisplayName());
//       assertEquals(false, allType0.isResolved());
//       assertEquals(false, allType0.isConstructor());
//       assertEquals(false, allType0.isNoType());
//       assertEquals(false, allType0.isInterface());
//       assertEquals(true, allType0.matchesObjectContext());
//       assertEquals(false, allType0.isRecordType());
//       assertEquals(false, allType0.isFunctionPrototypeType());
//       assertEquals(false, allType0.isNumberValueType());
//       assertEquals(false, allType0.isBooleanValueType());
//       assertEquals(false, allType0.isVoidType());
//       assertEquals(false, allType0.isEnumElementType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       String string0 = "|ZD*dKb;x~zIz.8f<{";
//       boolean boolean0 = jSTypeRegistry0.declareType(string0, (JSType) allType0);
//       assertTrue(boolean0);
//       assertEquals(true, allType0.matchesStringContext());
//       assertEquals(true, allType0.isAllType());
//       assertEquals(false, allType0.isNominalType());
//       assertEquals("*", allType0.toString());
//       assertEquals(false, allType0.canBeCalled());
//       assertEquals(false, allType0.isUnionType());
//       assertEquals(false, allType0.isEnumType());
//       assertEquals(false, allType0.isNullType());
//       assertEquals("<Any Type>", allType0.getDisplayName());
//       assertEquals(false, allType0.isFunctionType());
//       assertEquals(false, allType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType0.isTemplateType());
//       assertEquals(false, allType0.isStringValueType());
//       assertEquals(false, allType0.isNoObjectType());
//       assertEquals(false, allType0.isOrdinaryFunction());
//       assertEquals(false, allType0.isCheckedUnknownType());
//       assertEquals(true, allType0.hasDisplayName());
//       assertEquals(false, allType0.isResolved());
//       assertEquals(false, allType0.isConstructor());
//       assertEquals(false, allType0.isNoType());
//       assertEquals(false, allType0.isInterface());
//       assertEquals(true, allType0.matchesObjectContext());
//       assertEquals(false, allType0.isRecordType());
//       assertEquals(false, allType0.isFunctionPrototypeType());
//       assertEquals(false, allType0.isNumberValueType());
//       assertEquals(false, allType0.isBooleanValueType());
//       assertEquals(false, allType0.isVoidType());
//       assertEquals(false, allType0.isEnumElementType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) enumElementType0, (JSType) allType0);
//       assertNotNull(parameterizedType0);
//       assertEquals(true, allType0.matchesStringContext());
//       assertEquals(true, allType0.isAllType());
//       assertEquals(false, allType0.isNominalType());
//       assertEquals("*", allType0.toString());
//       assertEquals(false, allType0.canBeCalled());
//       assertEquals(false, allType0.isUnionType());
//       assertEquals(false, allType0.isEnumType());
//       assertEquals(false, allType0.isNullType());
//       assertEquals("<Any Type>", allType0.getDisplayName());
//       assertEquals(false, allType0.isFunctionType());
//       assertEquals(false, allType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType0.isTemplateType());
//       assertEquals(false, allType0.isStringValueType());
//       assertEquals(false, allType0.isNoObjectType());
//       assertEquals(false, allType0.isOrdinaryFunction());
//       assertEquals(false, allType0.isCheckedUnknownType());
//       assertEquals(true, allType0.hasDisplayName());
//       assertEquals(false, allType0.isResolved());
//       assertEquals(false, allType0.isConstructor());
//       assertEquals(false, allType0.isNoType());
//       assertEquals(false, allType0.isInterface());
//       assertEquals(true, allType0.matchesObjectContext());
//       assertEquals(false, allType0.isRecordType());
//       assertEquals(false, allType0.isFunctionPrototypeType());
//       assertEquals(false, allType0.isNumberValueType());
//       assertEquals(false, allType0.isBooleanValueType());
//       assertEquals(false, allType0.isVoidType());
//       assertEquals(false, allType0.isEnumElementType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isAllType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       
//       String string1 = allType0.toDebugHashCodeString();
//       assertEquals("{259}", string1);
//       assertNotSame(string1, string0);
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string1);
//       assertEquals(true, allType0.matchesStringContext());
//       assertEquals(true, allType0.isAllType());
//       assertEquals(false, allType0.isNominalType());
//       assertEquals("*", allType0.toString());
//       assertEquals(false, allType0.canBeCalled());
//       assertEquals(false, allType0.isUnionType());
//       assertEquals(false, allType0.isEnumType());
//       assertEquals(false, allType0.isNullType());
//       assertEquals("<Any Type>", allType0.getDisplayName());
//       assertEquals(false, allType0.isFunctionType());
//       assertEquals(false, allType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType0.isTemplateType());
//       assertEquals(false, allType0.isStringValueType());
//       assertEquals(false, allType0.isNoObjectType());
//       assertEquals(false, allType0.isOrdinaryFunction());
//       assertEquals(false, allType0.isCheckedUnknownType());
//       assertEquals(true, allType0.hasDisplayName());
//       assertEquals(false, allType0.isResolved());
//       assertEquals(false, allType0.isConstructor());
//       assertEquals(false, allType0.isNoType());
//       assertEquals(false, allType0.isInterface());
//       assertEquals(true, allType0.matchesObjectContext());
//       assertEquals(false, allType0.isRecordType());
//       assertEquals(false, allType0.isFunctionPrototypeType());
//       assertEquals(false, allType0.isNumberValueType());
//       assertEquals(false, allType0.isBooleanValueType());
//       assertEquals(false, allType0.isVoidType());
//       assertEquals(false, allType0.isEnumElementType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       Node node0 = Node.newString(string0);
//       assertNotSame(string0, string1);
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(node0);
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(40, node0.getType());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertNull(node0.getSourceFileName());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(2147483647, node0.getSourceOffset());
//       
//       AllType allType1 = (AllType)jSTypeRegistry0.createFromTypeNodes(node0, string1, (StaticScope<JSType>) parameterizedType0);
//       assertSame(allType0, allType1);
//       assertNotSame(string0, string1);
//       assertSame(allType1, allType0);
//       assertNotSame(string1, string0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(allType1);
//       assertEquals(true, allType0.matchesStringContext());
//       assertEquals(true, allType0.isAllType());
//       assertEquals(false, allType0.isNominalType());
//       assertEquals("*", allType0.toString());
//       assertEquals(false, allType0.canBeCalled());
//       assertEquals(false, allType0.isUnionType());
//       assertEquals(false, allType0.isEnumType());
//       assertEquals(false, allType0.isNullType());
//       assertEquals("<Any Type>", allType0.getDisplayName());
//       assertEquals(false, allType0.isFunctionType());
//       assertEquals(false, allType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType0.isTemplateType());
//       assertEquals(false, allType0.isStringValueType());
//       assertEquals(false, allType0.isNoObjectType());
//       assertEquals(false, allType0.isOrdinaryFunction());
//       assertEquals(false, allType0.isCheckedUnknownType());
//       assertEquals(true, allType0.hasDisplayName());
//       assertEquals(false, allType0.isResolved());
//       assertEquals(false, allType0.isConstructor());
//       assertEquals(false, allType0.isNoType());
//       assertEquals(false, allType0.isInterface());
//       assertEquals(true, allType0.matchesObjectContext());
//       assertEquals(false, allType0.isRecordType());
//       assertEquals(false, allType0.isFunctionPrototypeType());
//       assertEquals(false, allType0.isNumberValueType());
//       assertEquals(false, allType0.isBooleanValueType());
//       assertEquals(false, allType0.isVoidType());
//       assertEquals(false, allType0.isEnumElementType());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(40, node0.getType());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertNull(node0.getSourceFileName());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals("*", allType1.toString());
//       assertEquals(false, allType1.isFunctionPrototypeType());
//       assertEquals(false, allType1.isUnionType());
//       assertEquals(false, allType1.canBeCalled());
//       assertEquals(false, allType1.isInterface());
//       assertEquals(false, allType1.isNoType());
//       assertEquals("<Any Type>", allType1.getDisplayName());
//       assertEquals(false, allType1.isEnumElementType());
//       assertEquals(BooleanLiteralSet.BOTH, allType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType1.isResolved());
//       assertEquals(false, allType1.isVoidType());
//       assertEquals(false, allType1.isNullType());
//       assertEquals(false, allType1.isFunctionType());
//       assertEquals(false, allType1.isNoObjectType());
//       assertEquals(true, allType1.isAllType());
//       assertEquals(false, allType1.isBooleanValueType());
//       assertEquals(false, allType1.isEnumType());
//       assertEquals(false, allType1.isTemplateType());
//       assertEquals(false, allType1.isCheckedUnknownType());
//       assertEquals(true, allType1.matchesStringContext());
//       assertEquals(false, allType1.isRecordType());
//       assertEquals(false, allType1.isNumberValueType());
//       assertEquals(false, allType1.isNoResolvedType());
//       assertEquals(false, allType1.isConstructor());
//       assertEquals(true, allType1.matchesObjectContext());
//       assertEquals(true, allType1.hasDisplayName());
//       assertEquals(false, allType1.isOrdinaryFunction());
//       assertEquals(false, allType1.isNominalType());
//       assertEquals(false, allType1.isStringValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isAllType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//   }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 304;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(304, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1245488, node0.getSourcePosition());
      assertEquals(-2147483344, node0.getSourceOffset());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(304, node0.getType());
      assertEquals(304, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      
      String string0 = "com.google.javascript.rhino.jstype.JSTypeRegistry";
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isNominalType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isAllType());
      
      UnknownType unknownType0 = (UnknownType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) noObjectType0);
      assertNotNull(unknownType0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(304, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1245488, node0.getSourcePosition());
      assertEquals(-2147483344, node0.getSourceOffset());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(304, node0.getType());
      assertEquals(304, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("?", unknownType0.toString());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isNominalType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 302;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(302, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(302, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1237294, node0.getSourcePosition());
      assertEquals(302, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-2147483346, node0.getSourceOffset());
      
      String string0 = "com.google.javascript.rhino.jstype.JSTypeRegistr_";
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isUnionType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.canBeCalled());
      
      AllType allType0 = (AllType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) noObjectType0);
      assertNotNull(allType0);
      assertEquals(302, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(302, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1237294, node0.getSourcePosition());
      assertEquals(302, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-2147483346, node0.getSourceOffset());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isUnionType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.canBeCalled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 81;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(81, node0.getType());
      assertEquals(81, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(331857, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-2147483567, node0.getSourceOffset());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLength());
      assertEquals(81, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      String string0 = "com.google.javascript.rhino.jstype.JSTypeRegistry";
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isVoidType());
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) noObjectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = " ])kBB,)48@";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      
      JSTypeRegistry.ResolveMode jSTypeRegistry_ResolveMode0 = JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
      jSTypeRegistry0.setResolveMode(jSTypeRegistry_ResolveMode0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = errorFunctionType0.getParametersNode();
      assertNotNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) errorFunctionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node in type expression: LP
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createOptionalNullableType((JSType) prototypeObjectType0);
      assertNotNull(unionType0);
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = jSTypeRegistry0.resetImplicitPrototype((JSType) prototypeObjectType0, (ObjectType) prototypeObjectType0);
      assertFalse(boolean0);
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      
      boolean boolean0 = jSTypeRegistry0.resetImplicitPrototype((JSType) noResolvedType0, (ObjectType) noResolvedType0);
      assertTrue(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      EnumElementType enumElementType0 = allType0.toMaybeEnumElementType();
      assertNull(enumElementType0);
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) enumElementType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = jSTypeRegistry0.resetImplicitPrototype((JSType) allType0, (ObjectType) functionType0);
      assertFalse(boolean0);
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "rNA&b!etSB";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("rNA&b!etSB", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isResolved());
      assertEquals("rNA&b!etSB", templateType0.toString());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createOptionalType((JSType) templateType0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("rNA&b!etSB", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isResolved());
      assertEquals("rNA&b!etSB", templateType0.toString());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionType());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)noResolvedType0.getPrototype();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(true, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionType());
      
      jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(true, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.canBeCalled());
      
      ObjectType objectType0 = allType0.toObjectType();
      assertNull(objectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.canBeCalled());
      
      jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) objectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.canBeCalled());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      jSTypeRegistry0.setTemplateTypeName(string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)numberType0.dereference();
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 486;
      TemplateType templateType0 = (TemplateType)jSTypeRegistry0.getType((StaticScope<JSType>) instanceObjectType0, string0, string0, int0, int0);
      assertNotNull(templateType0);
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("", templateType0.toString());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test12() {}
//   @Test(timeout = 4000)
//   public void test12()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       AllType allType0 = new AllType(jSTypeRegistry0);
//       assertNotNull(allType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals("*", allType0.toString());
//       assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType0.isFunctionPrototypeType());
//       assertEquals(false, allType0.isRecordType());
//       assertEquals(false, allType0.isConstructor());
//       assertEquals(false, allType0.isUnionType());
//       assertEquals(false, allType0.isNumberValueType());
//       assertEquals(false, allType0.isResolved());
//       assertEquals(true, allType0.hasDisplayName());
//       assertEquals("<Any Type>", allType0.getDisplayName());
//       assertEquals(false, allType0.isInterface());
//       assertEquals(false, allType0.isNoType());
//       assertEquals(false, allType0.isStringValueType());
//       assertEquals(true, allType0.isAllType());
//       assertEquals(true, allType0.matchesStringContext());
//       assertEquals(false, allType0.isNominalType());
//       assertEquals(false, allType0.isFunctionType());
//       assertEquals(false, allType0.isNoObjectType());
//       assertEquals(false, allType0.canBeCalled());
//       assertEquals(false, allType0.isEnumType());
//       assertEquals(true, allType0.matchesObjectContext());
//       assertEquals(false, allType0.isNullType());
//       assertEquals(false, allType0.isNoResolvedType());
//       assertEquals(false, allType0.isOrdinaryFunction());
//       assertEquals(false, allType0.isTemplateType());
//       assertEquals(false, allType0.isCheckedUnknownType());
//       assertEquals(false, allType0.isBooleanValueType());
//       assertEquals(false, allType0.isVoidType());
//       assertEquals(false, allType0.isEnumElementType());
//       
//       String string0 = allType0.toDebugHashCodeString();
//       assertEquals("{259}", string0);
//       assertNotNull(string0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals("*", allType0.toString());
//       assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType0.isFunctionPrototypeType());
//       assertEquals(false, allType0.isRecordType());
//       assertEquals(false, allType0.isConstructor());
//       assertEquals(false, allType0.isUnionType());
//       assertEquals(false, allType0.isNumberValueType());
//       assertEquals(false, allType0.isResolved());
//       assertEquals(true, allType0.hasDisplayName());
//       assertEquals("<Any Type>", allType0.getDisplayName());
//       assertEquals(false, allType0.isInterface());
//       assertEquals(false, allType0.isNoType());
//       assertEquals(false, allType0.isStringValueType());
//       assertEquals(true, allType0.isAllType());
//       assertEquals(true, allType0.matchesStringContext());
//       assertEquals(false, allType0.isNominalType());
//       assertEquals(false, allType0.isFunctionType());
//       assertEquals(false, allType0.isNoObjectType());
//       assertEquals(false, allType0.canBeCalled());
//       assertEquals(false, allType0.isEnumType());
//       assertEquals(true, allType0.matchesObjectContext());
//       assertEquals(false, allType0.isNullType());
//       assertEquals(false, allType0.isNoResolvedType());
//       assertEquals(false, allType0.isOrdinaryFunction());
//       assertEquals(false, allType0.isTemplateType());
//       assertEquals(false, allType0.isCheckedUnknownType());
//       assertEquals(false, allType0.isBooleanValueType());
//       assertEquals(false, allType0.isVoidType());
//       assertEquals(false, allType0.isEnumElementType());
//       
//       boolean boolean0 = jSTypeRegistry0.hasNamespace(string0);
//       assertFalse(boolean0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals("*", allType0.toString());
//       assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType0.isFunctionPrototypeType());
//       assertEquals(false, allType0.isRecordType());
//       assertEquals(false, allType0.isConstructor());
//       assertEquals(false, allType0.isUnionType());
//       assertEquals(false, allType0.isNumberValueType());
//       assertEquals(false, allType0.isResolved());
//       assertEquals(true, allType0.hasDisplayName());
//       assertEquals("<Any Type>", allType0.getDisplayName());
//       assertEquals(false, allType0.isInterface());
//       assertEquals(false, allType0.isNoType());
//       assertEquals(false, allType0.isStringValueType());
//       assertEquals(true, allType0.isAllType());
//       assertEquals(true, allType0.matchesStringContext());
//       assertEquals(false, allType0.isNominalType());
//       assertEquals(false, allType0.isFunctionType());
//       assertEquals(false, allType0.isNoObjectType());
//       assertEquals(false, allType0.canBeCalled());
//       assertEquals(false, allType0.isEnumType());
//       assertEquals(true, allType0.matchesObjectContext());
//       assertEquals(false, allType0.isNullType());
//       assertEquals(false, allType0.isNoResolvedType());
//       assertEquals(false, allType0.isOrdinaryFunction());
//       assertEquals(false, allType0.isTemplateType());
//       assertEquals(false, allType0.isCheckedUnknownType());
//       assertEquals(false, allType0.isBooleanValueType());
//       assertEquals(false, allType0.isVoidType());
//       assertEquals(false, allType0.isEnumElementType());
//   }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "rY//jcQ}ae";
      int int0 = 301;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-2147483347, node0.getSourceOffset());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1233197, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getCharno());
      assertEquals(301, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      
      jSTypeRegistry0.forwardDeclareType(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-2147483347, node0.getSourceOffset());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1233197, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getCharno());
      assertEquals(301, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      
      UnionType unionType0 = (UnionType)unresolvedTypeExpression0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) unresolvedTypeExpression0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(true, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-2147483347, node0.getSourceOffset());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1233197, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getCharno());
      assertEquals(301, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      
      String string0 = "Function";
      jSTypeRegistry0.overwriteDeclaredType(string0, (JSType) prototypeObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "svP>[m6y_";
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isVoidType());
      
      EnumElementType enumElementType0 = stringType0.toMaybeEnumElementType();
      assertNull(enumElementType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isVoidType());
      
      // Undeclared exception!
      try {
        jSTypeRegistry0.overwriteDeclaredType(string0, (JSType) enumElementType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "Null";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      
      boolean boolean1 = jSTypeRegistry0.declareType(string0, (JSType) noResolvedType0);
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.incrementGeneration();
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "prototype";
      Iterable<ObjectType> iterable0 = jSTypeRegistry0.getEachReferenceTypeWithProperty(string0);
      assertNotNull(iterable0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      Iterable<ObjectType> iterable0 = jSTypeRegistry0.getEachReferenceTypeWithProperty(string0);
      assertNotNull(iterable0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "prototype";
      Iterable<JSType> iterable0 = jSTypeRegistry0.getTypesWithProperty(string0);
      assertNotNull(iterable0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "O/bmE:\"5X~kq";
      Iterable<JSType> iterable0 = jSTypeRegistry0.getTypesWithProperty(string0);
      assertNotNull(iterable0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoResolvedType());
      
      String string0 = "com.google.common.collect.Lists$2";
      jSTypeRegistry0.registerPropertyOnType(string0, (JSType) booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoResolvedType());
      
      boolean boolean0 = jSTypeRegistry0.canPropertyBeDefined((JSType) booleanType0, string0);
      assertTrue(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "rNA&b!etSB";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals("rNA&b!etSB", templateType0.toString());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("rNA&b!etSB", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      
      boolean boolean1 = jSTypeRegistry0.canPropertyBeDefined((JSType) templateType0, string0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals("rNA&b!etSB", templateType0.toString());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("rNA&b!etSB", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "rNA&b!etSB";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("rNA&b!etSB", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("rNA&b!etSB", templateType0.toString());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isStringValueType());
      
      jSTypeRegistry0.registerPropertyOnType(string0, (JSType) templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("rNA&b!etSB", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("rNA&b!etSB", templateType0.toString());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isStringValueType());
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) templateType0, string0);
      assertSame(templateType1, templateType0);
      assertSame(templateType0, templateType1);
      assertNotNull(templateType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType1.isVoidType());
      assertEquals(false, templateType1.isResolved());
      assertEquals(false, templateType1.isRecordType());
      assertEquals(false, templateType1.isFunctionPrototypeType());
      assertEquals(false, templateType1.isEnumElementType());
      assertEquals("rNA&b!etSB", templateType1.getReferenceName());
      assertEquals("rNA&b!etSB", templateType1.toString());
      assertEquals(false, templateType1.isFunctionType());
      assertEquals(false, templateType1.isStringValueType());
      assertEquals(false, templateType1.isNullType());
      assertEquals(false, templateType1.isAllType());
      assertEquals(false, templateType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType1.hasCachedValues());
      assertEquals(false, templateType1.isBooleanValueType());
      assertEquals(true, templateType1.isTemplateType());
      assertEquals(false, templateType1.isUnionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("rNA&b!etSB", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("rNA&b!etSB", templateType0.toString());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "rNA&b!etSB";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals("rNA&b!etSB", templateType0.toString());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("rNA&b!etSB", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) templateType0, string0);
      assertNotNull(noType0);
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals("rNA&b!etSB", templateType0.toString());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("rNA&b!etSB", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = null;
      FunctionType functionType0 = null;
      jSTypeRegistry0.unregisterPropertyOnType(string0, (JSType) functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      String string0 = "O/bmE:\"5X~kq";
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("FUNCTION_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("FUNCTION_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(12, jSTypeNativeArray0[0].ordinal());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[1] = jSTypeNative1;
      assertEquals("STRING_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("STRING_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(40, jSTypeNativeArray0[1].ordinal());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      
      jSTypeRegistry0.registerPropertyOnType(string0, (JSType) unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "com.google.common.collect.Lists$2";
      jSTypeRegistry0.registerPropertyOnType(string0, (JSType) booleanType0);
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.registerPropertyOnType(string0, (JSType) booleanType0);
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("FUNCTION_INSTANCE_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("FUNCTION_INSTANCE_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(13, jSTypeNativeArray0[0].ordinal());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[1] = jSTypeNative1;
      assertEquals("TOP_LEVEL_PROTOTYPE", jSTypeNativeArray0[1].name());
      assertEquals("TOP_LEVEL_PROTOTYPE", jSTypeNativeArray0[1].toString());
      assertEquals(39, jSTypeNativeArray0[1].ordinal());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(true, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "svP>[m6y_";
      int int0 = (-2287);
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(-2287, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(2147483647, node0.getSourceOffset());
      
      // Undeclared exception!
      try {
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "2[bU";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) voidType0);
      assertNotNull(enumType0);
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) recordType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Collection<FunctionType> collection0 = jSTypeRegistry0.getDirectImplementors((ObjectType) noResolvedType0);
      assertNotNull(collection0);
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.setLastGeneration(boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isInterface());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)numberType0.dereference();
      assertNotNull(instanceObjectType0);
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isInterface());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[7];
      // Undeclared exception!
      try {
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) instanceObjectType0, boolean0, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      int int0 = 486;
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createNamedType(string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isNominalType());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType((FunctionType) noObjectType0, (ObjectType) noObjectType0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Vjx@+lX";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      
      boolean boolean0 = false;
      JSType[] jSTypeArray0 = new JSType[8];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, boolean0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(8, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorReporter errorReporter1 = jSTypeRegistry0.getErrorReporter();
      assertNull(errorReporter1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isAllType());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType((FunctionType) noType0, (JSType) noType0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNullType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isResolved());
      
      boolean boolean1 = false;
      JSType[] jSTypeArray0 = new JSType[7];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) numberType0, boolean1, jSTypeArray0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(7, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNullType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "rY//jcQ}ae";
      int int0 = 301;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1233197, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(301, node0.getLineno());
      assertEquals(301, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2147483347, node0.getSourceOffset());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1233197, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(301, node0.getLineno());
      assertEquals(301, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2147483347, node0.getSourceOffset());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      
      UnknownType unknownType0 = (UnknownType)unresolvedTypeExpression0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) unresolvedTypeExpression0);
      assertNotNull(unknownType0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1233197, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(301, node0.getLineno());
      assertEquals(301, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2147483347, node0.getSourceOffset());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isResolved());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(true, unresolvedTypeExpression0.isResolved());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createNativeAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "_*g#f71Wks\\pkkqqH";
      int int0 = 114;
      NamedType namedType0 = (NamedType)jSTypeRegistry0.getType((StaticScope<JSType>) noResolvedType0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) noResolvedType0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      
      EnumElementType enumElementType0 = allType0.toMaybeEnumElementType();
      assertNull(enumElementType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) enumElementType0, (JSType) allType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionType((ObjectType) parameterizedType0, (JSType) enumElementType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.clearTemplateTypeName();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "rY//jcQ}ae";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.identifyNonNullableName(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isRecordType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = allType0.toObjectType();
      assertNull(objectType0);
      assertEquals(false, allType0.isRecordType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = null;
      // Undeclared exception!
      try {
        jSTypeRegistry0.registerTypeImplementingInterface(functionType0, objectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.clearNamedTypes();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Stinj";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLength());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLength());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      
      UnionType unionType0 = (UnionType)unresolvedTypeExpression0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) recordType0);
      assertNotNull(unionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLength());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(true, unresolvedTypeExpression0.isResolved());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = allType0.toObjectType();
      assertNull(objectType0);
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType(objectType0);
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }
}
