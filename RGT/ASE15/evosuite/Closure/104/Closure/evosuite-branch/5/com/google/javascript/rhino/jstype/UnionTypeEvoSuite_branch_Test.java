/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:06:47 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class UnionTypeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      String string0 = "";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isEmptyType());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType1);
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) enumType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(1, hashSet0.size());
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isEmptyType());
      assertTrue(boolean0);
      assertTrue(unionType0.equals((Object)unionType1));
      assertNotSame(unionType0, unionType1);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType2 = (UnionType)unionType1.resolveInternal(simpleErrorReporter0, emptyScope0);
      assertNotNull(unionType2);
      assertEquals(false, unionType2.isStringValueType());
      assertEquals(false, unionType2.isEmptyType());
      assertEquals(false, unionType2.isAllType());
      assertEquals(false, unionType2.isNamedType());
      assertEquals(false, unionType2.isBooleanValueType());
      assertEquals(false, unionType2.isVoidType());
      assertEquals(false, unionType2.isRecordType());
      assertEquals(false, unionType2.isNumberValueType());
      assertEquals(false, unionType2.isNoObjectType());
      assertEquals(false, unionType2.isNullType());
      assertEquals(true, unionType2.isResolved());
      assertEquals(false, unionType2.isTemplateType());
      assertEquals(true, unionType2.isUnionType());
      assertEquals(false, unionType2.isNoType());
      assertEquals(false, unionType2.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(1, hashSet0.size());
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertTrue(unionType2.equals((Object)unionType0));
      assertTrue(unionType1.equals((Object)unionType0));
      assertSame(unionType2, unionType1);
      assertNotSame(unionType2, unionType0);
      assertSame(unionType1, unionType2);
      assertNotSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\" ?amE(|o#3Jen";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(1, hashSet0.size());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(1, hashSet0.size());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      JSType.TypePair jSType_TypePair0 = unionType1.getTypesUnderShallowInequality((JSType) unionType1);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(1, hashSet0.size());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = unionType0.isRecordType();
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertFalse(boolean0);
      
      String string0 = "bi&:e}0[ LoYQY5L";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      NoType noType0 = (NoType)enumType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      boolean boolean1 = hashSet0.add((JSType) noType0);
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(1, hashSet0.size());
      assertEquals("[None]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) noType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(1, hashSet0.size());
      assertEquals("[None]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      
      String string0 = "bi&:e}0[ LoYQY5L";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      
      boolean boolean0 = hashSet0.add((JSType) enumType0);
      assertEquals("[enum{bi&:e}0[ LoYQY5L}]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertTrue(boolean0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) unionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals("[enum{bi&:e}0[ LoYQY5L}]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\" ?amE(|o#3Jen";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(-1, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(-1, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(-1, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      
      JSType.TypePair jSType_TypePair0 = unionType1.getTypesUnderEquality((JSType) instanceObjectType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\" ?amE(|o#3Jen";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(unionType0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      BooleanLiteralSet booleanLiteralSet0 = unionType1.getPossibleToBooleanOutcomes();
      assertEquals("BOTH", booleanLiteralSet0.name());
      assertEquals(3, booleanLiteralSet0.ordinal());
      assertEquals("BOTH", booleanLiteralSet0.toString());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      
      String string0 = "bi&:e}0[ LoYQY5L";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      
      boolean boolean0 = hashSet0.add((JSType) enumType0);
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[enum{bi&:e}0[ LoYQY5L}]", hashSet0.toString());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertTrue(boolean0);
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[enum{bi&:e}0[ LoYQY5L}]", hashSet0.toString());
      assertEquals("TRUE", booleanLiteralSet0.name());
      assertEquals(1, booleanLiteralSet0.ordinal());
      assertEquals("TRUE", booleanLiteralSet0.toString());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ")";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      
      boolean boolean0 = hashSet0.add((JSType) enumType0);
      assertEquals("[enum{)}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertTrue(boolean0);
      
      EnumType enumType1 = (EnumType)unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
      assertNotNull(enumType1);
      assertEquals("[enum{)}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, enumType1.isResolved());
      assertEquals(true, enumType1.matchesStringContext());
      assertEquals(true, enumType1.matchesObjectContext());
      assertEquals(true, enumType1.isObject());
      assertEquals(false, enumType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType1.isVoidType());
      assertEquals(false, enumType1.isNoObjectType());
      assertEquals(false, enumType1.matchesNumberContext());
      assertEquals(false, enumType1.isNumberValueType());
      assertEquals(false, enumType1.isEmptyType());
      assertEquals(false, enumType1.isAllType());
      assertEquals(false, enumType1.isRecordType());
      assertEquals(false, enumType1.isNamedType());
      assertEquals(false, enumType1.isFunctionType());
      assertEquals(false, enumType1.isUnionType());
      assertEquals(false, enumType1.isTemplateType());
      assertEquals(false, enumType1.isBooleanValueType());
      assertEquals(false, enumType1.isNullType());
      assertEquals(false, enumType1.isNoType());
      assertEquals(true, enumType1.isEnumType());
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      
      String string0 = "";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      
      int int0 = (-789);
      boolean boolean0 = hashSet0.add((JSType) enumType0);
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertTrue(boolean0);
      
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, unionType0);
      assertNotNull(arrowType0);
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isNamedType());
      assertEquals(false, arrowType0.isObject());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isVoidType());
      
      ArrowType arrowType1 = (ArrowType)arrowType0.restrictByNotNullOrUndefined();
      assertNotNull(arrowType1);
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, arrowType1.isResolved());
      assertEquals(false, arrowType1.isAllType());
      assertEquals(false, arrowType1.isUnionType());
      assertEquals(false, arrowType1.isTemplateType());
      assertEquals(false, arrowType1.isRecordType());
      assertEquals(false, arrowType1.isNumberValueType());
      assertEquals(false, arrowType1.isNullType());
      assertEquals(false, arrowType1.isNoObjectType());
      assertEquals(false, arrowType1.isNamedType());
      assertEquals(false, arrowType1.isObject());
      assertEquals(false, arrowType1.isBooleanValueType());
      assertEquals(false, arrowType1.isEmptyType());
      assertEquals(false, arrowType1.isFunctionType());
      assertEquals(false, arrowType1.isStringValueType());
      assertEquals(false, arrowType1.isVoidType());
      assertEquals(false, arrowType1.isNoType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isNamedType());
      assertEquals(false, arrowType0.isObject());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isVoidType());
      assertSame(arrowType1, arrowType0);
      assertSame(arrowType0, arrowType1);
      
      EnumType enumType1 = (EnumType)unionType0.getRestrictedUnion((JSType) arrowType1);
      assertNotNull(enumType1);
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, arrowType1.isResolved());
      assertEquals(false, arrowType1.isAllType());
      assertEquals(false, arrowType1.isUnionType());
      assertEquals(false, arrowType1.isTemplateType());
      assertEquals(false, arrowType1.isRecordType());
      assertEquals(false, arrowType1.isNumberValueType());
      assertEquals(false, arrowType1.isNullType());
      assertEquals(false, arrowType1.isNoObjectType());
      assertEquals(false, arrowType1.isNamedType());
      assertEquals(false, arrowType1.isObject());
      assertEquals(false, arrowType1.isBooleanValueType());
      assertEquals(false, arrowType1.isEmptyType());
      assertEquals(false, arrowType1.isFunctionType());
      assertEquals(false, arrowType1.isStringValueType());
      assertEquals(false, arrowType1.isVoidType());
      assertEquals(false, arrowType1.isNoType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, enumType1.isEnumType());
      assertEquals(false, enumType1.isNamedType());
      assertEquals(false, enumType1.isNoType());
      assertEquals(false, enumType1.isUnionType());
      assertEquals(false, enumType1.isResolved());
      assertEquals(false, enumType1.isNoObjectType());
      assertEquals(false, enumType1.isNumberValueType());
      assertEquals(true, enumType1.isObject());
      assertEquals(false, enumType1.isTemplateType());
      assertEquals(false, enumType1.isBooleanValueType());
      assertEquals(false, enumType1.matchesNumberContext());
      assertEquals(true, enumType1.matchesStringContext());
      assertEquals(false, enumType1.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType1.isStringValueType());
      assertEquals(true, enumType1.matchesObjectContext());
      assertEquals(false, enumType1.isNullType());
      assertEquals(false, enumType1.isEmptyType());
      assertEquals(false, enumType1.isFunctionType());
      assertEquals(false, enumType1.isAllType());
      assertEquals(false, enumType1.isVoidType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isNamedType());
      assertEquals(false, arrowType0.isObject());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isVoidType());
      assertSame(arrowType1, arrowType0);
      assertSame(enumType1, enumType0);
      assertSame(arrowType0, arrowType1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\" ?amE(|o#3Jen";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(unionType0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isEmptyType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesStringContext());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isEmptyType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesStringContext());
      
      UnionType unionType2 = (UnionType)unionType1.getRestrictedUnion((JSType) instanceObjectType0);
      assertNotNull(unionType2);
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isEmptyType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType2.isResolved());
      assertEquals(true, unionType2.isUnionType());
      assertEquals(false, unionType2.isBooleanValueType());
      assertEquals(false, unionType2.isVoidType());
      assertEquals(false, unionType2.isRecordType());
      assertEquals(false, unionType2.isTemplateType());
      assertEquals(false, unionType2.isEmptyType());
      assertEquals(false, unionType2.isFunctionType());
      assertEquals(false, unionType2.isNoObjectType());
      assertEquals(false, unionType2.isNamedType());
      assertEquals(false, unionType2.isNumberValueType());
      assertEquals(false, unionType2.isStringValueType());
      assertEquals(false, unionType2.isNullType());
      assertEquals(false, unionType2.isNoType());
      assertEquals(false, unionType2.isAllType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertFalse(unionType1.equals((Object)unionType2));
      assertFalse(unionType1.equals((Object)unionType0));
      assertTrue(unionType2.equals((Object)unionType0));
      assertFalse(unionType2.equals((Object)unionType1));
      assertNotSame(unionType1, unionType2);
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType2, unionType1);
      assertNotSame(unionType2, unionType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      String string0 = "";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.isObject());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add((JSType) enumType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.isObject());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertTrue(boolean0);
      
      NoType noType0 = (NoType)unionType0.getRestrictedUnion((JSType) unionType0);
      assertNotNull(noType0);
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNullType());
      assertEquals("None", noType0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNamedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesNumberContext());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNamedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesNumberContext());
      
      boolean boolean0 = hashSet0.add((JSType) instanceObjectType0);
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNamedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesNumberContext());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.contains((JSType) instanceObjectType0);
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNamedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = unionType0.contains((JSType) unionType0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\" ?amE(|o#3Jen";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(unionType0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isNullType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      UnionType unionType2 = (UnionType)unionType1.getGreatestSubtype((JSType) unionType1);
      assertNotNull(unionType2);
      assertEquals(false, unionType2.isBooleanValueType());
      assertEquals(false, unionType2.isStringValueType());
      assertEquals(false, unionType2.isVoidType());
      assertEquals(true, unionType2.isUnionType());
      assertEquals(false, unionType2.isNamedType());
      assertEquals(false, unionType2.isEmptyType());
      assertEquals(false, unionType2.isNoType());
      assertEquals(false, unionType2.isRecordType());
      assertEquals(false, unionType2.isNoObjectType());
      assertEquals(false, unionType2.isResolved());
      assertEquals(false, unionType2.isTemplateType());
      assertEquals(false, unionType2.isNullType());
      assertEquals(false, unionType2.isNumberValueType());
      assertEquals(false, unionType2.isAllType());
      assertEquals(false, unionType2.isFunctionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType2.equals((Object)unionType0));
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType2, unionType0);
      assertSame(unionType2, unionType1);
      assertNotSame(unionType1, unionType0);
      assertSame(unionType1, unionType2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\" ?amE(|o#3Jen";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(unionType0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType1);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNamedType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      
      NoType noType1 = (NoType)unionType1.meet(noType0);
      assertNotNull(noType1);
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNamedType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertNull(noType1.getReferenceName());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals(true, noType1.isEmptyType());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(false, noType1.isAllType());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(false, noType1.isNullType());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isInterface());
      assertEquals(false, noType1.isRecordType());
      assertEquals(true, noType1.isNullable());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isNamedType());
      assertEquals(false, noType1.isUnionType());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(true, noType1.isObject());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals("None", noType1.toString());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noType1.isResolved());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isBooleanValueType());
      assertFalse(noType0.equals((Object)noType1));
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(noType1.equals((Object)noType0));
      assertNotSame(noType0, noType1);
      assertNotSame(unionType1, unionType0);
      assertNotSame(noType1, noType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isObject());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(noType0);
      assertNotNull(noObjectType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isObject());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isUnionType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isVoidType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesNumberContext());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ")";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add((JSType) enumType0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals("[enum{)}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      
      UnionType unionType1 = (UnionType)unionType0.getLeastSupertype((JSType) errorFunctionType0);
      assertNotNull(unionType1);
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals("[enum{)}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType1, unionType0);
      
      EnumType enumType1 = (EnumType)unionType0.meet(unionType1);
      assertNotNull(enumType1);
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, enumType1.isBooleanValueType());
      assertEquals(false, enumType1.isNamedType());
      assertEquals(true, enumType1.matchesStringContext());
      assertEquals(false, enumType1.isTemplateType());
      assertEquals(false, enumType1.isNoObjectType());
      assertEquals(true, enumType1.matchesObjectContext());
      assertEquals(false, enumType1.isStringValueType());
      assertEquals(false, enumType1.isRecordType());
      assertEquals(false, enumType1.isFunctionType());
      assertEquals(false, enumType1.isResolved());
      assertEquals(true, enumType1.isObject());
      assertEquals(false, enumType1.isUnionType());
      assertEquals(true, enumType1.isEnumType());
      assertEquals(false, enumType1.isNoType());
      assertEquals(false, enumType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType1.isVoidType());
      assertEquals(false, enumType1.isNullType());
      assertEquals(false, enumType1.isEmptyType());
      assertEquals(false, enumType1.isAllType());
      assertEquals(false, enumType1.matchesNumberContext());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals("[enum{)}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType0, unionType1);
      assertSame(enumType1, enumType0);
      assertNotSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      String string0 = "";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add((JSType) enumType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(1, hashSet0.size());
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertTrue(boolean0);
      
      UnionType unionType1 = (UnionType)unionType0.getLeastSupertype((JSType) unionType0);
      assertNotNull(unionType1);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(1, hashSet0.size());
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertSame(unionType0, unionType1);
      assertSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      
      String string0 = "EKro";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNamedType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("EKro", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNoType());
      assertEquals("EKro", templateType0.toString());
      assertEquals(true, templateType0.isObject());
      assertEquals(false, templateType0.isAllType());
      
      TemplateType templateType1 = (TemplateType)unionType0.getLeastSupertype((JSType) templateType0);
      assertNotNull(templateType1);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNamedType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("EKro", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNoType());
      assertEquals("EKro", templateType0.toString());
      assertEquals(true, templateType0.isObject());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType1.isVoidType());
      assertEquals(true, templateType1.isTemplateType());
      assertEquals(false, templateType1.isNoObjectType());
      assertEquals(false, templateType1.isEmptyType());
      assertEquals(false, templateType1.isNumberValueType());
      assertEquals(false, templateType1.isNullType());
      assertEquals(false, templateType1.isResolved());
      assertEquals(false, templateType1.isNamedType());
      assertEquals(false, templateType1.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType1.isAllType());
      assertEquals(false, templateType1.isUnionType());
      assertEquals(false, templateType1.isFunctionType());
      assertEquals(false, templateType1.isBooleanValueType());
      assertEquals(false, templateType1.isRecordType());
      assertEquals(true, templateType1.isObject());
      assertEquals(false, templateType1.hasCachedValues());
      assertEquals(false, templateType1.isNoType());
      assertEquals("EKro", templateType1.toString());
      assertEquals("EKro", templateType1.getReferenceName());
      assertEquals(false, templateType1.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isObject());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      
      FunctionType functionType0 = noType0.getSuperClassConstructor();
      assertNotNull(functionType0);
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isObject());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      
      boolean boolean0 = hashSet0.add((JSType) functionType0);
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isObject());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals("[function (this:Object, *): ?]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.isNullable();
      assertEquals("[function (this:Object, *): ?]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\" ?amE(|o#3Jen";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      boolean boolean1 = unionType1.isNullable();
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertTrue(boolean1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test21() {}
//   @Test(timeout = 4000)
//   public void test21()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       
//       String string0 = "\" ?amE(|o#3Jen";
//       HashSet<JSType> hashSet0 = new HashSet<JSType>();
//       assertNotNull(hashSet0);
//       assertEquals(0, hashSet0.size());
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(true, hashSet0.isEmpty());
//       
//       Node node0 = Node.newString(string0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(40, node0.getType());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       
//       EmptyScope emptyScope0 = new EmptyScope();
//       assertNotNull(emptyScope0);
//       
//       UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) emptyScope0);
//       assertNotNull(unionType0);
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(40, node0.getType());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       
//       boolean boolean0 = hashSet0.add((JSType) unionType0);
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(1, hashSet0.size());
//       assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(40, node0.getType());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       assertTrue(boolean0);
//       
//       UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
//       assertNotNull(unionType1);
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(1, hashSet0.size());
//       assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
//       assertEquals(false, unionType1.isNullType());
//       assertEquals(false, unionType1.isNamedType());
//       assertEquals(false, unionType1.isVoidType());
//       assertEquals(false, unionType1.isNoObjectType());
//       assertEquals(false, unionType1.isFunctionType());
//       assertEquals(true, unionType1.isUnionType());
//       assertEquals(false, unionType1.isRecordType());
//       assertEquals(false, unionType1.isAllType());
//       assertEquals(false, unionType1.isEmptyType());
//       assertEquals(false, unionType1.isBooleanValueType());
//       assertEquals(false, unionType1.isResolved());
//       assertEquals(false, unionType1.isStringValueType());
//       assertEquals(false, unionType1.isTemplateType());
//       assertEquals(false, unionType1.isNoType());
//       assertEquals(false, unionType1.isNumberValueType());
//       assertFalse(unionType1.equals((Object)unionType0));
//       assertNotSame(unionType1, unionType0);
//       
//       NoType noType0 = new NoType(jSTypeRegistry0);
//       assertNotNull(noType0);
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(false, noType0.isNamedType());
//       assertEquals(true, noType0.matchesStringContext());
//       assertNull(noType0.getTemplateTypeName());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertEquals(false, noType0.isStringValueType());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(true, noType0.isObject());
//       assertEquals(true, noType0.canBeCalled());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals(false, noType0.isAllType());
//       assertEquals("None", noType0.toString());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(false, noType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noType0.isNullType());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(true, noType0.isEmptyType());
//       assertNull(noType0.getReferenceName());
//       assertEquals(false, noType0.isUnionType());
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertEquals(false, noType0.isTemplateType());
//       
//       boolean boolean1 = hashSet0.add((JSType) noType0);
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[(\" ?amE(|o#3Jen|null), None]", hashSet0.toString());
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(false, noType0.isNamedType());
//       assertEquals(true, noType0.matchesStringContext());
//       assertNull(noType0.getTemplateTypeName());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertEquals(false, noType0.isStringValueType());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(true, noType0.isObject());
//       assertEquals(true, noType0.canBeCalled());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals(false, noType0.isAllType());
//       assertEquals("None", noType0.toString());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(false, noType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noType0.isNullType());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(true, noType0.isEmptyType());
//       assertNull(noType0.getReferenceName());
//       assertEquals(false, noType0.isUnionType());
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertEquals(false, noType0.isTemplateType());
//       assertTrue(boolean1);
//       assertTrue(boolean1 == boolean0);
//       
//       TernaryValue ternaryValue0 = unionType1.testForEquality((JSType) noType0);
//       assertEquals(2, ternaryValue0.ordinal());
//       assertEquals("unknown", ternaryValue0.toString());
//       assertEquals("UNKNOWN", ternaryValue0.name());
//       assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[(\" ?amE(|o#3Jen|null), None]", hashSet0.toString());
//       assertEquals(false, unionType1.isNullType());
//       assertEquals(false, unionType1.isNamedType());
//       assertEquals(false, unionType1.isVoidType());
//       assertEquals(false, unionType1.isNoObjectType());
//       assertEquals(false, unionType1.isFunctionType());
//       assertEquals(true, unionType1.isUnionType());
//       assertEquals(false, unionType1.isRecordType());
//       assertEquals(false, unionType1.isAllType());
//       assertEquals(false, unionType1.isEmptyType());
//       assertEquals(false, unionType1.isBooleanValueType());
//       assertEquals(false, unionType1.isResolved());
//       assertEquals(false, unionType1.isStringValueType());
//       assertEquals(false, unionType1.isTemplateType());
//       assertEquals(false, unionType1.isNoType());
//       assertEquals(false, unionType1.isNumberValueType());
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(false, noType0.isNamedType());
//       assertEquals(true, noType0.matchesStringContext());
//       assertNull(noType0.getTemplateTypeName());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertEquals(false, noType0.isStringValueType());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(true, noType0.isObject());
//       assertEquals(true, noType0.canBeCalled());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals(false, noType0.isAllType());
//       assertEquals("None", noType0.toString());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(false, noType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noType0.isNullType());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(true, noType0.isEmptyType());
//       assertNull(noType0.getReferenceName());
//       assertEquals(false, noType0.isUnionType());
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertEquals(false, noType0.isTemplateType());
//       assertFalse(unionType1.equals((Object)unionType0));
//       assertNotSame(unionType1, unionType0);
//   }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\" ?amE(|o#3Jen";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(unionType0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      NamedType namedType0 = (NamedType)unionType1.restrictByNotNullOrUndefined();
      assertNotNull(namedType0);
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(true, namedType0.isObject());
      assertEquals("\" ?amE(|o#3Jen", namedType0.getReferenceName());
      assertEquals(false, namedType0.isResolved());
      assertEquals("\" ?amE(|o#3Jen", namedType0.toString());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[]", treeSet0.toString());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[]", treeSet0.toString());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType1);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEmptyType());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      boolean boolean1 = unionType1.canBeCalled();
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEmptyType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNumberValueType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add((JSType) nullType0);
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.canBeCalled();
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\" ?amE(|o#3Jen";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(unionType0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType1);
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNamedType());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isVoidType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isObject());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isVoidType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isObject());
      
      boolean boolean1 = unionType1.canAssignTo((JSType) instanceObjectType0);
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isVoidType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isObject());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNamedType());
      assertTrue(boolean1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      
      String string0 = "";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals(false, enumType0.isVoidType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      
      boolean boolean0 = hashSet0.add((JSType) enumType0);
      assertEquals(false, enumType0.isVoidType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[enum{}]", hashSet0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.canAssignTo((JSType) unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[enum{}]", hashSet0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test27() {}
//   @Test(timeout = 4000)
//   public void test27()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       
//       String string0 = "\" ?amE(|o#3Jen";
//       HashSet<JSType> hashSet0 = new HashSet<JSType>();
//       assertNotNull(hashSet0);
//       assertEquals(true, hashSet0.isEmpty());
//       assertEquals(0, hashSet0.size());
//       assertEquals("[]", hashSet0.toString());
//       
//       Node node0 = Node.newString(string0);
//       assertNotNull(node0);
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(40, node0.getType());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasChildren());
//       
//       EmptyScope emptyScope0 = new EmptyScope();
//       assertNotNull(emptyScope0);
//       
//       UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) emptyScope0);
//       assertNotNull(unionType0);
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(40, node0.getType());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isRecordType());
//       
//       boolean boolean0 = hashSet0.add((JSType) unionType0);
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(40, node0.getType());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(1, hashSet0.size());
//       assertTrue(boolean0);
//       
//       UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
//       assertNotNull(unionType1);
//       assertEquals(false, unionType1.isRecordType());
//       assertEquals(false, unionType1.isNoType());
//       assertEquals(false, unionType1.isNullType());
//       assertEquals(true, unionType1.isUnionType());
//       assertEquals(false, unionType1.isTemplateType());
//       assertEquals(false, unionType1.isAllType());
//       assertEquals(false, unionType1.isVoidType());
//       assertEquals(false, unionType1.isEmptyType());
//       assertEquals(false, unionType1.isResolved());
//       assertEquals(false, unionType1.isNumberValueType());
//       assertEquals(false, unionType1.isStringValueType());
//       assertEquals(false, unionType1.isFunctionType());
//       assertEquals(false, unionType1.isNoObjectType());
//       assertEquals(false, unionType1.isBooleanValueType());
//       assertEquals(false, unionType1.isNamedType());
//       assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(1, hashSet0.size());
//       assertFalse(unionType1.equals((Object)unionType0));
//       assertNotSame(unionType1, unionType0);
//       
//       NoType noType0 = new NoType(jSTypeRegistry0);
//       assertNotNull(noType0);
//       assertEquals("None", noType0.toString());
//       assertEquals(false, noType0.isUnionType());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals(false, noType0.isAllType());
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(false, noType0.isTemplateType());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(true, noType0.matchesStringContext());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(false, noType0.isNullType());
//       assertEquals(true, noType0.isObject());
//       assertNull(noType0.getReferenceName());
//       assertEquals(false, noType0.isStringValueType());
//       assertEquals(true, noType0.isEmptyType());
//       assertEquals(false, noType0.isNamedType());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertNull(noType0.getTemplateTypeName());
//       assertEquals(true, noType0.canBeCalled());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertEquals(false, noType0.isBooleanValueType());
//       
//       boolean boolean1 = hashSet0.add((JSType) noType0);
//       assertEquals("None", noType0.toString());
//       assertEquals(false, noType0.isUnionType());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals(false, noType0.isAllType());
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(false, noType0.isTemplateType());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(true, noType0.matchesStringContext());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(false, noType0.isNullType());
//       assertEquals(true, noType0.isObject());
//       assertNull(noType0.getReferenceName());
//       assertEquals(false, noType0.isStringValueType());
//       assertEquals(true, noType0.isEmptyType());
//       assertEquals(false, noType0.isNamedType());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertNull(noType0.getTemplateTypeName());
//       assertEquals(true, noType0.canBeCalled());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertEquals(false, noType0.isBooleanValueType());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals("[(\" ?amE(|o#3Jen|null), None]", hashSet0.toString());
//       assertEquals(2, hashSet0.size());
//       assertTrue(boolean1);
//       assertTrue(boolean1 == boolean0);
//       
//       String string1 = unionType1.toString();
//       assertNotNull(string1);
//       assertEquals(false, unionType1.isRecordType());
//       assertEquals(false, unionType1.isNoType());
//       assertEquals(false, unionType1.isNullType());
//       assertEquals(true, unionType1.isUnionType());
//       assertEquals(false, unionType1.isTemplateType());
//       assertEquals(false, unionType1.isAllType());
//       assertEquals(false, unionType1.isVoidType());
//       assertEquals(false, unionType1.isEmptyType());
//       assertEquals(false, unionType1.isResolved());
//       assertEquals(false, unionType1.isNumberValueType());
//       assertEquals(false, unionType1.isStringValueType());
//       assertEquals(false, unionType1.isFunctionType());
//       assertEquals(false, unionType1.isNoObjectType());
//       assertEquals(false, unionType1.isBooleanValueType());
//       assertEquals(false, unionType1.isNamedType());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals("[(\" ?amE(|o#3Jen|null), None]", hashSet0.toString());
//       assertEquals(2, hashSet0.size());
//       assertEquals("((\" ?amE(|o#3Jen|null)|None)", string1);
//       assertFalse(unionType1.equals((Object)unionType0));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(unionType1, unionType0);
//       assertNotSame(string1, string0);
//       
//       UnknownType unknownType0 = (UnknownType)unionType1.findPropertyType(string1);
//       assertNotNull(unknownType0);
//       assertEquals(false, unionType1.isRecordType());
//       assertEquals(false, unionType1.isNoType());
//       assertEquals(false, unionType1.isNullType());
//       assertEquals(true, unionType1.isUnionType());
//       assertEquals(false, unionType1.isTemplateType());
//       assertEquals(false, unionType1.isAllType());
//       assertEquals(false, unionType1.isVoidType());
//       assertEquals(false, unionType1.isEmptyType());
//       assertEquals(false, unionType1.isResolved());
//       assertEquals(false, unionType1.isNumberValueType());
//       assertEquals(false, unionType1.isStringValueType());
//       assertEquals(false, unionType1.isFunctionType());
//       assertEquals(false, unionType1.isNoObjectType());
//       assertEquals(false, unionType1.isBooleanValueType());
//       assertEquals(false, unionType1.isNamedType());
//       assertEquals("?", unknownType0.toString());
//       assertEquals(false, unknownType0.isNullType());
//       assertEquals(false, unknownType0.isUnionType());
//       assertEquals(false, unknownType0.isStringValueType());
//       assertEquals(true, unknownType0.matchesNumberContext());
//       assertEquals(false, unknownType0.hasCachedValues());
//       assertEquals(false, unknownType0.isFunctionType());
//       assertEquals(true, unknownType0.isUnknownType());
//       assertEquals(false, unknownType0.isTemplateType());
//       assertEquals(false, unknownType0.isNamedType());
//       assertEquals(true, unknownType0.isNullable());
//       assertEquals(true, unknownType0.matchesObjectContext());
//       assertEquals(false, unknownType0.isRecordType());
//       assertEquals(false, unknownType0.isNumberValueType());
//       assertEquals(false, unknownType0.isNoObjectType());
//       assertEquals(false, unknownType0.isNativeObjectType());
//       assertEquals(false, unknownType0.isResolved());
//       assertEquals(false, unknownType0.isCheckedUnknownType());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, unknownType0.isObject());
//       assertEquals(false, unknownType0.isVoidType());
//       assertEquals(2147483647, unknownType0.getPropertiesCount());
//       assertEquals(true, unknownType0.matchesStringContext());
//       assertEquals("?", unknownType0.getReferenceName());
//       assertEquals(false, unknownType0.isEmptyType());
//       assertEquals(false, unknownType0.isBooleanValueType());
//       assertEquals(false, unknownType0.isAllType());
//       assertEquals(false, unknownType0.isNoType());
//       assertEquals(false, unknownType0.hasReferenceName());
//       assertEquals(true, unknownType0.canBeCalled());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals("[(\" ?amE(|o#3Jen|null), None]", hashSet0.toString());
//       assertEquals(2, hashSet0.size());
//       assertFalse(unionType1.equals((Object)unionType0));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(unionType1, unionType0);
//       assertNotSame(string1, string0);
//   }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      
      FunctionType functionType0 = noType0.getSuperClassConstructor();
      assertNotNull(functionType0);
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNamedType());
      
      boolean boolean0 = hashSet0.add((JSType) functionType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[function (this:Object, *): ?]", hashSet0.toString());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNamedType());
      assertTrue(boolean0);
      
      String string0 = unionType0.toString();
      assertNotNull(string0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[function (this:Object, *): ?]", hashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("(function (this:Object, *): ?)", string0);
      
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertNull(jSType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[function (this:Object, *): ?]", hashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\" ?amE(|o#3Jen";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(unionType0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      boolean boolean1 = unionType1.matchesObjectContext();
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals("[(\" ?amE(|o#3Jen|null)]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType1);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      boolean boolean1 = unionType1.matchesObjectContext();
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertFalse(boolean1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      String string0 = "bi&:e}0[ LoYQY5L";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isStringValueType());
      
      boolean boolean0 = hashSet0.add((JSType) enumType0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[enum{bi&:e}0[ LoYQY5L}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isStringValueType());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.matchesStringContext();
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[enum{bi&:e}0[ LoYQY5L}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType1);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isTemplateType());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      boolean boolean1 = unionType1.matchesStringContext();
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isTemplateType());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isObject());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add((JSType) nullType0);
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isObject());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.matchesNumberContext();
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      
      String string0 = "";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      
      boolean boolean0 = hashSet0.add((JSType) enumType0);
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.matchesUint32Context();
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNamedType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isRecordType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = linkedHashSet0.add((JSType) nullType0);
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNamedType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      unionType0.forgiveUnknownNames();
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isAllType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(true, noObjectType0.matchesNumberContext());
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowEquality((JSType) noObjectType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isAllType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      
      String string0 = "";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      
      int int0 = (-789);
      boolean boolean0 = hashSet0.add((JSType) enumType0);
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(1, hashSet0.size());
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertTrue(boolean0);
      
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, unionType0);
      assertNotNull(arrowType0);
      assertEquals(1, hashSet0.size());
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isObject());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNamedType());
      assertEquals(false, arrowType0.isNoType());
      
      NoType noType0 = (NoType)unionType0.getGreatestSubtype((JSType) arrowType0);
      assertNotNull(noType0);
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(1, hashSet0.size());
      assertEquals("[enum{}]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isObject());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNamedType());
      assertEquals(false, arrowType0.isNoType());
  }
}
