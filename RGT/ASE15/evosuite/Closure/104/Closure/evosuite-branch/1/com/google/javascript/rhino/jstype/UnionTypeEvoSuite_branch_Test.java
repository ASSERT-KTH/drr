/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:23:52 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.EvaluatorException;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.SimpleSlot;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class UnionTypeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNullable());
      assertNotNull(booleanType0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNamedType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesStringContext());
      assertNotNull(noType0);
      
      booleanType0.setResolvedTypeInternal(noType0);
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNamedType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesStringContext());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType1 = (UnionType)unionType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) emptyScope0);
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertSame(unionType1, unionType0);
      assertSame(unionType0, unionType1);
      assertNotNull(unionType1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertNotNull(booleanType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertTrue(boolean0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType1 = (UnionType)unionType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) emptyScope0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertSame(unionType0, unionType1);
      assertSame(unionType1, unionType0);
      assertNotNull(unionType1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      ArrayDeque<ArrowType> arrayDeque0 = new ArrayDeque<ArrowType>();
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>((Collection<? extends JSType>) arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertNotNull(unionType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isUnionType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertNotNull(nullType0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isUnionType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertTrue(boolean0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) unionType0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      ArrayDeque<ArrowType> arrayDeque0 = new ArrayDeque<ArrowType>();
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>((Collection<? extends JSType>) arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertNotNull(unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertTrue(boolean0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isObject());
      assertNotNull(nullType0);
      
      // Undeclared exception!
      try {
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) nullType0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isObject());
      assertNotNull(booleanType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertNotNull(unionType0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertTrue(unionType1.equals((Object)unionType0));
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType1);
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      
      NoType noType0 = (NoType)unionType1.getRestrictedUnion((JSType) booleanType0);
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isStringValueType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isObject());
      assertNotSame(unionType1, unionType0);
      assertNotNull(noType0);
      assertFalse(unionType1.equals((Object)unionType0));
      
      boolean boolean1 = hashSet0.add((JSType) noType0);
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isStringValueType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals("[None]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isObject());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertTrue(boolean1 == boolean0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) unionType1);
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isRecordType());
      assertEquals("[None]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(None)]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertNotNull(jSType_TypePair0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals("boolean", booleanType0.toString());
      assertNotNull(booleanType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals("boolean", booleanType0.toString());
      assertTrue(boolean0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) unionType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      ArrayDeque<ArrowType> arrayDeque0 = new ArrayDeque<ArrowType>();
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertNotNull(arrayDeque0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>((Collection<? extends JSType>) arrayDeque0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isDateType();
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertFalse(boolean0);
      
      String string0 = "uhxB]p7/Knk";
      int int0 = (-2182);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals("uhxB]p7/Knk", namedType0.toString());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isAllType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isFunctionType());
      assertNotNull(namedType0);
      
      SimpleSlot simpleSlot0 = new SimpleSlot(string0, (JSType) namedType0, boolean0);
      assertEquals(false, simpleSlot0.isTypeInferred());
      assertEquals("uhxB]p7/Knk", simpleSlot0.getName());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals("uhxB]p7/Knk", namedType0.toString());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isAllType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertNotNull(simpleSlot0);
      
      NamedType namedType1 = (NamedType)namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, string0);
      assertEquals(false, simpleSlot0.isTypeInferred());
      assertEquals("uhxB]p7/Knk", simpleSlot0.getName());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals("uhxB]p7/Knk", namedType0.toString());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isAllType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("uhxB]p7/Knk", namedType1.getReferenceName());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(true, namedType1.hasReferenceName());
      assertEquals(false, namedType1.isEmptyType());
      assertEquals("uhxB]p7/Knk", namedType1.toString());
      assertEquals(true, namedType1.isNamedType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(true, namedType1.isNominalType());
      assertEquals(true, namedType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isNoType());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(false, namedType1.isAllType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertSame(namedType0, namedType1);
      assertSame(namedType1, namedType0);
      assertNotNull(namedType1);
      
      boolean boolean1 = hashSet0.add((JSType) namedType1);
      assertEquals(false, simpleSlot0.isTypeInferred());
      assertEquals("uhxB]p7/Knk", simpleSlot0.getName());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals("uhxB]p7/Knk", namedType0.toString());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isAllType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[uhxB]p7/Knk]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals("uhxB]p7/Knk", namedType1.getReferenceName());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(true, namedType1.hasReferenceName());
      assertEquals(false, namedType1.isEmptyType());
      assertEquals("uhxB]p7/Knk", namedType1.toString());
      assertEquals(true, namedType1.isNamedType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(true, namedType1.isNominalType());
      assertEquals(true, namedType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isNoType());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(false, namedType1.isAllType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertSame(namedType0, namedType1);
      assertSame(namedType1, namedType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality((JSType) namedType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals("uhxB]p7/Knk", namedType0.toString());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isAllType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[uhxB]p7/Knk]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertSame(namedType0, namedType1);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertNotNull(booleanType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertNotNull(unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) booleanType0);
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals("BOTH", booleanLiteralSet0.name());
      assertEquals("BOTH", booleanLiteralSet0.toString());
      assertEquals(3, booleanLiteralSet0.ordinal());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertNotNull(unionType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(true, unionType1.isUnionType());
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertTrue(unionType1.equals((Object)unionType0));
      
      boolean boolean0 = hashSet0.add((JSType) unionType1);
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(true, unionType1.isUnionType());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals("EMPTY", booleanLiteralSet0.name());
      assertEquals("EMPTY", booleanLiteralSet0.toString());
      assertEquals(0, booleanLiteralSet0.ordinal());
      assertNotSame(unionType0, unionType1);
      assertEquals(BooleanLiteralSet.EMPTY, booleanLiteralSet0);
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isVoidType());
      assertNotNull(booleanType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      BooleanType booleanType1 = (BooleanType)unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType1.isBooleanValueType());
      assertEquals(false, booleanType1.isStringValueType());
      assertEquals(false, booleanType1.isNullType());
      assertEquals(false, booleanType1.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType1.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType1.isObject());
      assertEquals(false, booleanType1.isNumberValueType());
      assertEquals(false, booleanType1.isRecordType());
      assertEquals(false, booleanType1.isUnionType());
      assertEquals(false, booleanType1.isNamedType());
      assertEquals(false, booleanType1.isResolved());
      assertEquals("boolean", booleanType1.toString());
      assertEquals(false, booleanType1.isNullable());
      assertEquals(false, booleanType1.isFunctionType());
      assertEquals(false, booleanType1.isNoType());
      assertEquals(false, booleanType1.isTemplateType());
      assertEquals(true, booleanType1.matchesNumberContext());
      assertEquals(false, booleanType1.isNoObjectType());
      assertEquals(false, booleanType1.isEmptyType());
      assertEquals(true, booleanType1.matchesObjectContext());
      assertEquals(true, booleanType1.matchesStringContext());
      assertEquals(false, booleanType1.isAllType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertSame(booleanType0, booleanType1);
      assertSame(booleanType1, booleanType0);
      assertNotNull(booleanType1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesStringContext());
      assertNotNull(booleanType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      
      boolean boolean1 = linkedHashSet0.add((JSType) unionType1);
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals("[boolean, ()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertTrue(boolean1 == boolean0);
      
      String string0 = unionType0.toString();
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[boolean, ()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertNotSame(unionType0, unionType1);
      assertNotNull(string0);
      assertEquals("(()|boolean)", string0);
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertNotNull(booleanType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      NoType noType0 = (NoType)unionType0.getRestrictedUnion((JSType) booleanType0);
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertNotNull(noType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = " qjBb:g_;|.V&mbfl0";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertNotNull(booleanType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      Node node0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.canBeCalled());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertNotNull(functionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      BooleanType booleanType1 = (BooleanType)unionType0.getRestrictedUnion((JSType) functionType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, booleanType1.isUnionType());
      assertEquals(true, booleanType1.matchesObjectContext());
      assertEquals(true, booleanType1.matchesNumberContext());
      assertEquals(false, booleanType1.isStringValueType());
      assertEquals(false, booleanType1.isNoObjectType());
      assertEquals(false, booleanType1.isTemplateType());
      assertEquals(false, booleanType1.isNamedType());
      assertEquals(false, booleanType1.isResolved());
      assertEquals(false, booleanType1.isNumberValueType());
      assertEquals(false, booleanType1.isFunctionType());
      assertEquals("boolean", booleanType1.toString());
      assertEquals(true, booleanType1.isBooleanValueType());
      assertEquals(false, booleanType1.isNullable());
      assertEquals(false, booleanType1.isAllType());
      assertEquals(false, booleanType1.isVoidType());
      assertEquals(false, booleanType1.isRecordType());
      assertEquals(false, booleanType1.isNoType());
      assertEquals(false, booleanType1.isNullType());
      assertEquals(true, booleanType1.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType1.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType1.isEmptyType());
      assertEquals(false, booleanType1.isObject());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.canBeCalled());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertSame(booleanType1, booleanType0);
      assertNotNull(booleanType1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "C(}#fRYs^)RA;c";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNotNull(errorFunctionType0);
      
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertNotNull(unionType0);
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(errorFunctionType0);
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isEmptyType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNotNull(noObjectType0);
  }

  //@Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertNotNull(booleanType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      
      NoType noType0 = (NoType)unionType1.meet(unionType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isObject());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertNotNull(noType0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEmptyType());
      assertNotNull(booleanType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEmptyType());
      assertTrue(boolean0);
      
      BooleanType booleanType1 = (BooleanType)unionType0.meet(unionType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, booleanType1.isNamedType());
      assertEquals(false, booleanType1.isNoObjectType());
      assertEquals(true, booleanType1.matchesNumberContext());
      assertEquals(false, booleanType1.isResolved());
      assertEquals(false, booleanType1.isNoType());
      assertEquals(false, booleanType1.isVoidType());
      assertEquals(false, booleanType1.isNumberValueType());
      assertEquals(false, booleanType1.isTemplateType());
      assertEquals(false, booleanType1.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType1.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType1.isNullType());
      assertEquals(false, booleanType1.isFunctionType());
      assertEquals(true, booleanType1.isBooleanValueType());
      assertEquals(false, booleanType1.isNullable());
      assertEquals(true, booleanType1.matchesStringContext());
      assertEquals(false, booleanType1.isUnionType());
      assertEquals(false, booleanType1.isObject());
      assertEquals("boolean", booleanType1.toString());
      assertEquals(false, booleanType1.isAllType());
      assertEquals(false, booleanType1.isRecordType());
      assertEquals(false, booleanType1.isStringValueType());
      assertEquals(true, booleanType1.matchesObjectContext());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertSame(booleanType1, booleanType0);
      assertNotNull(booleanType1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertNotNull(unionType0);
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(unionType0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertNotNull(noObjectType0);
      
      NoObjectType noObjectType1 = (NoObjectType)unionType0.meet(noObjectType0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType1.isObject());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals("NoObject", noObjectType1.toString());
      assertEquals(false, noObjectType1.isStringValueType());
      assertEquals(true, noObjectType1.isEmptyType());
      assertNull(noObjectType1.getTemplateTypeName());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertNull(noObjectType1.getReferenceName());
      assertEquals(false, noObjectType1.isNamedType());
      assertEquals(false, noObjectType1.isAllType());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(true, noObjectType1.hasCachedValues());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(false, noObjectType1.isRecordType());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertSame(noObjectType1, noObjectType0);
      assertSame(noObjectType0, noObjectType1);
      assertNotNull(noObjectType1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(unionType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEmptyType());
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertTrue(unionType1.equals((Object)unionType0));
      
      boolean boolean0 = hashSet0.add((JSType) unionType1);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(unionType1);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNullType());
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType1, unionType0);
      assertNotNull(noObjectType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType1.equals((Object)unionType0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isTemplateType());
      assertNotNull(booleanType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertTrue(unionType1.equals((Object)unionType0));
      
      boolean boolean0 = hashSet0.add((JSType) booleanType0);
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[boolean]", hashSet0.toString());
      assertTrue(boolean0);
      
      NoType noType0 = (NoType)unionType0.meet(unionType1);
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNamedType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType1, unionType0);
      assertNotNull(noType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType1.equals((Object)unionType0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.meet(unionType0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      int int0 = 4507;
      EvaluatorException evaluatorException0 = simpleErrorReporter0.runtimeError(string0, string0, int0, string0, int0);
      assertEquals("", evaluatorException0.lineSource());
      assertEquals(4507, evaluatorException0.columnNumber());
      assertEquals("", evaluatorException0.sourceName());
      assertEquals(4507, evaluatorException0.lineNumber());
      assertNotNull(evaluatorException0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertNotNull(booleanType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertNotNull(unionType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertTrue(unionType1.equals((Object)unionType0));
      
      boolean boolean0 = hashSet0.add((JSType) unionType1);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      
      boolean boolean1 = hashSet0.add((JSType) booleanType0);
      assertEquals(2, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(), boolean]", hashSet0.toString());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      UnionType unionType2 = (UnionType)unionType0.getLeastSupertype((JSType) unionType0);
      assertEquals(2, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(), boolean]", hashSet0.toString());
      assertEquals(false, unionType2.isNoType());
      assertEquals(false, unionType2.isNoObjectType());
      assertEquals(false, unionType2.isNumberValueType());
      assertEquals(false, unionType2.isRecordType());
      assertEquals(false, unionType2.isResolved());
      assertEquals(false, unionType2.isFunctionType());
      assertEquals(false, unionType2.isAllType());
      assertEquals(false, unionType2.isEmptyType());
      assertEquals(true, unionType2.isUnionType());
      assertEquals(false, unionType2.isBooleanValueType());
      assertEquals(false, unionType2.isStringValueType());
      assertEquals(false, unionType2.isTemplateType());
      assertEquals(false, unionType2.isNamedType());
      assertEquals(false, unionType2.isNullType());
      assertEquals(false, unionType2.isVoidType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertNotSame(unionType2, unionType1);
      assertSame(unionType2, unionType0);
      assertNotSame(unionType0, unionType1);
      assertSame(unionType0, unionType2);
      assertNotNull(unionType2);
      assertFalse(unionType2.equals((Object)unionType1));
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<ProxyObjectType> linkedHashSet0 = new LinkedHashSet<ProxyObjectType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>((Collection<? extends JSType>) linkedHashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(hashSet0);
      
      String string0 = "";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNoType());
      assertEquals("", templateType0.toString());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, templateType0.isObject());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNamedType());
      assertNotNull(templateType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      TemplateType templateType1 = (TemplateType)unionType0.getLeastSupertype((JSType) templateType0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, templateType1.isEmptyType());
      assertEquals(false, templateType1.isBooleanValueType());
      assertEquals(false, templateType1.isNoType());
      assertEquals(false, templateType1.isNumberValueType());
      assertEquals(false, templateType1.isRecordType());
      assertEquals(true, templateType1.isTemplateType());
      assertEquals(false, templateType1.isFunctionType());
      assertEquals("", templateType1.toString());
      assertEquals(false, templateType1.isNamedType());
      assertEquals("", templateType1.getReferenceName());
      assertEquals(false, templateType1.isNativeObjectType());
      assertEquals(false, templateType1.hasCachedValues());
      assertEquals(false, templateType1.isNullType());
      assertEquals(true, templateType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType1.isVoidType());
      assertEquals(false, templateType1.isStringValueType());
      assertEquals(false, templateType1.isUnionType());
      assertEquals(false, templateType1.isAllType());
      assertEquals(false, templateType1.isResolved());
      assertEquals(false, templateType1.isNoObjectType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNoType());
      assertEquals("", templateType0.toString());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, templateType0.isObject());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNamedType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertSame(templateType1, templateType0);
      assertSame(templateType0, templateType1);
      assertNotNull(templateType1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      ArrayDeque<ArrowType> arrayDeque0 = new ArrayDeque<ArrowType>();
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>((Collection<? extends JSType>) arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isDateType();
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertFalse(boolean0);
      
      String string0 = "uhxB]p7/Knk";
      int int0 = (-2182);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals("uhxB]p7/Knk", namedType0.toString());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isResolved());
      assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNativeObjectType());
      assertNotNull(namedType0);
      
      SimpleSlot simpleSlot0 = new SimpleSlot(string0, (JSType) namedType0, boolean0);
      assertEquals(false, simpleSlot0.isTypeInferred());
      assertEquals("uhxB]p7/Knk", simpleSlot0.getName());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals("uhxB]p7/Knk", namedType0.toString());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isResolved());
      assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(simpleSlot0);
      
      NamedType namedType1 = (NamedType)namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, string0);
      assertEquals(false, simpleSlot0.isTypeInferred());
      assertEquals("uhxB]p7/Knk", simpleSlot0.getName());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(true, namedType1.hasReferenceName());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals("uhxB]p7/Knk", namedType1.getReferenceName());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(true, namedType1.isNominalType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(true, namedType1.isNamedType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isNoType());
      assertEquals(false, namedType1.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isAllType());
      assertEquals("uhxB]p7/Knk", namedType1.toString());
      assertEquals(false, namedType1.isResolved());
      assertEquals(true, namedType1.isObject());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals("uhxB]p7/Knk", namedType0.toString());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isResolved());
      assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertSame(namedType1, namedType0);
      assertSame(namedType0, namedType1);
      assertNotNull(namedType1);
      
      boolean boolean1 = hashSet0.add((JSType) namedType1);
      assertEquals(false, simpleSlot0.isTypeInferred());
      assertEquals("uhxB]p7/Knk", simpleSlot0.getName());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(true, namedType1.hasReferenceName());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals("uhxB]p7/Knk", namedType1.getReferenceName());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(true, namedType1.isNominalType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(true, namedType1.isNamedType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isNoType());
      assertEquals(false, namedType1.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isAllType());
      assertEquals("uhxB]p7/Knk", namedType1.toString());
      assertEquals(false, namedType1.isResolved());
      assertEquals(true, namedType1.isObject());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals("uhxB]p7/Knk", namedType0.toString());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isResolved());
      assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals("[uhxB]p7/Knk]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertSame(namedType1, namedType0);
      assertSame(namedType0, namedType1);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) unionType0, (List<JSType>) arrayList0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, functionType0.isObject());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals("[uhxB]p7/Knk]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertNotNull(functionType0);
      
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, functionType0, functionType0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(true, functionPrototypeType0.isObject());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isNamedType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(true, functionType0.isObject());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals("[uhxB]p7/Knk]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertNotNull(functionPrototypeType0);
      
      UnknownType unknownType0 = (UnknownType)unionType0.getGreatestSubtype((JSType) functionPrototypeType0);
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(true, functionPrototypeType0.isObject());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isNamedType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(true, functionType0.isObject());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals("[uhxB]p7/Knk]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertNotNull(unknownType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertNotNull(booleanType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertTrue(boolean0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality((JSType) booleanType0);
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullable());
      assertNotNull(booleanType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertNotNull(unionType0);
      
      NoType noType0 = (NoType)unionType0.getRestrictedUnion((JSType) booleanType0);
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isObject());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertNotNull(noType0);
      
      boolean boolean0 = hashSet0.add((JSType) noType0);
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[None]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isObject());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.isNullable();
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[None]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isStringValueType());
      assertNotNull(booleanType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isStringValueType());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.isNullable();
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test26() {}
//   @Test(timeout = 4000)
//   public void test26()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       
//       ArrayDeque<ArrowType> arrayDeque0 = new ArrayDeque<ArrowType>();
//       assertEquals(0, arrayDeque0.size());
//       assertEquals(true, arrayDeque0.isEmpty());
//       assertEquals("[]", arrayDeque0.toString());
//       assertNotNull(arrayDeque0);
//       
//       HashSet<JSType> hashSet0 = new HashSet<JSType>((Collection<? extends JSType>) arrayDeque0);
//       assertEquals(0, arrayDeque0.size());
//       assertEquals(true, arrayDeque0.isEmpty());
//       assertEquals("[]", arrayDeque0.toString());
//       assertEquals(0, hashSet0.size());
//       assertEquals(true, hashSet0.isEmpty());
//       assertEquals("[]", hashSet0.toString());
//       assertNotNull(hashSet0);
//       
//       UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
//       assertEquals(0, arrayDeque0.size());
//       assertEquals(true, arrayDeque0.isEmpty());
//       assertEquals("[]", arrayDeque0.toString());
//       assertEquals(0, hashSet0.size());
//       assertEquals(true, hashSet0.isEmpty());
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isStringValueType());
//       assertNotNull(unionType0);
//       
//       String string0 = "uhxB]p7/Knk";
//       int int0 = (-2182);
//       NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
//       assertEquals(true, namedType0.isNominalType());
//       assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
//       assertEquals(false, namedType0.isBooleanValueType());
//       assertEquals(false, namedType0.isNativeObjectType());
//       assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, namedType0.isNoType());
//       assertEquals("uhxB]p7/Knk", namedType0.toString());
//       assertEquals(false, namedType0.isFunctionType());
//       assertEquals(false, namedType0.isEmptyType());
//       assertEquals(false, namedType0.isNoObjectType());
//       assertEquals(true, namedType0.isNamedType());
//       assertEquals(false, namedType0.isNumberValueType());
//       assertEquals(true, namedType0.hasReferenceName());
//       assertEquals(false, namedType0.isUnionType());
//       assertEquals(false, namedType0.isTemplateType());
//       assertEquals(false, namedType0.isNullType());
//       assertEquals(true, namedType0.isObject());
//       assertEquals(false, namedType0.isAllType());
//       assertEquals(false, namedType0.isStringValueType());
//       assertEquals(false, namedType0.isRecordType());
//       assertEquals(false, namedType0.hasCachedValues());
//       assertEquals(false, namedType0.isResolved());
//       assertEquals(false, namedType0.isVoidType());
//       assertNotNull(namedType0);
//       
//       boolean boolean0 = hashSet0.add((JSType) namedType0);
//       assertEquals(0, arrayDeque0.size());
//       assertEquals(true, arrayDeque0.isEmpty());
//       assertEquals("[]", arrayDeque0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals("[uhxB]p7/Knk]", hashSet0.toString());
//       assertEquals(1, hashSet0.size());
//       assertEquals(true, namedType0.isNominalType());
//       assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
//       assertEquals(false, namedType0.isBooleanValueType());
//       assertEquals(false, namedType0.isNativeObjectType());
//       assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, namedType0.isNoType());
//       assertEquals("uhxB]p7/Knk", namedType0.toString());
//       assertEquals(false, namedType0.isFunctionType());
//       assertEquals(false, namedType0.isEmptyType());
//       assertEquals(false, namedType0.isNoObjectType());
//       assertEquals(true, namedType0.isNamedType());
//       assertEquals(false, namedType0.isNumberValueType());
//       assertEquals(true, namedType0.hasReferenceName());
//       assertEquals(false, namedType0.isUnionType());
//       assertEquals(false, namedType0.isTemplateType());
//       assertEquals(false, namedType0.isNullType());
//       assertEquals(true, namedType0.isObject());
//       assertEquals(false, namedType0.isAllType());
//       assertEquals(false, namedType0.isStringValueType());
//       assertEquals(false, namedType0.isRecordType());
//       assertEquals(false, namedType0.hasCachedValues());
//       assertEquals(false, namedType0.isResolved());
//       assertEquals(false, namedType0.isVoidType());
//       assertTrue(boolean0);
//       
//       NoType noType0 = new NoType(jSTypeRegistry0);
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertNull(noType0.getReferenceName());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals(true, noType0.canBeCalled());
//       assertEquals(true, noType0.matchesStringContext());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(true, noType0.isEmptyType());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertEquals(false, noType0.isTemplateType());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(false, noType0.isNamedType());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals("None", noType0.toString());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(false, noType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertNull(noType0.getTemplateTypeName());
//       assertEquals(false, noType0.isAllType());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(false, noType0.isNullType());
//       assertEquals(false, noType0.isBooleanValueType());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(true, noType0.isObject());
//       assertEquals(false, noType0.isUnionType());
//       assertNotNull(noType0);
//       
//       boolean boolean1 = hashSet0.add((JSType) noType0);
//       assertEquals(0, arrayDeque0.size());
//       assertEquals(true, arrayDeque0.isEmpty());
//       assertEquals("[]", arrayDeque0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[None, uhxB]p7/Knk]", hashSet0.toString());
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertNull(noType0.getReferenceName());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals(true, noType0.canBeCalled());
//       assertEquals(true, noType0.matchesStringContext());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(true, noType0.isEmptyType());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertEquals(false, noType0.isTemplateType());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(false, noType0.isNamedType());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals("None", noType0.toString());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(false, noType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertNull(noType0.getTemplateTypeName());
//       assertEquals(false, noType0.isAllType());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(false, noType0.isNullType());
//       assertEquals(false, noType0.isBooleanValueType());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(true, noType0.isObject());
//       assertEquals(false, noType0.isUnionType());
//       assertTrue(boolean1);
//       assertTrue(boolean1 == boolean0);
//       
//       boolean boolean2 = unionType0.canTestForEqualityWith((JSType) noType0);
//       assertEquals(0, arrayDeque0.size());
//       assertEquals(true, arrayDeque0.isEmpty());
//       assertEquals("[]", arrayDeque0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[None, uhxB]p7/Knk]", hashSet0.toString());
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertNull(noType0.getReferenceName());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals(true, noType0.canBeCalled());
//       assertEquals(true, noType0.matchesStringContext());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(true, noType0.isEmptyType());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertEquals(false, noType0.isTemplateType());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(false, noType0.isNamedType());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals("None", noType0.toString());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(false, noType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertNull(noType0.getTemplateTypeName());
//       assertEquals(false, noType0.isAllType());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(false, noType0.isNullType());
//       assertEquals(false, noType0.isBooleanValueType());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(true, noType0.isObject());
//       assertEquals(false, noType0.isUnionType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isStringValueType());
//       assertTrue(boolean2);
//       assertTrue(boolean2 == boolean0);
//       assertTrue(boolean2 == boolean1);
//   }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      ArrayDeque<ArrowType> arrayDeque0 = new ArrayDeque<ArrowType>();
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>((Collection<? extends JSType>) arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      String string0 = "uhxB]p7/Knk";
      int int0 = (-2182);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isAllType());
      assertEquals(true, namedType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(true, namedType0.isNominalType());
      assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals("uhxB]p7/Knk", namedType0.toString());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNullType());
      assertNotNull(namedType0);
      
      boolean boolean0 = hashSet0.add((JSType) namedType0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isAllType());
      assertEquals(true, namedType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(true, namedType0.isNominalType());
      assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals("uhxB]p7/Knk", namedType0.toString());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[uhxB]p7/Knk]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) unionType0, (List<JSType>) arrayList0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[uhxB]p7/Knk]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isAllType());
      assertNotNull(functionType0);
      
      boolean boolean1 = hashSet0.add((JSType) functionType0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isAllType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNamedType());
      assertNotNull(noType0);
      
      boolean boolean2 = unionType0.canTestForEqualityWith((JSType) noType0);
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNamedType());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertNotNull(booleanType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)unionType0.dereference();
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(instanceObjectType0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertNotNull(booleanType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertNotNull(unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) booleanType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.canBeCalled();
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertNotNull(unionType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertTrue(unionType1.equals((Object)unionType0));
      
      boolean boolean0 = hashSet0.add((JSType) unionType1);
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      
      boolean boolean1 = unionType0.canBeCalled();
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertNotSame(unionType0, unionType1);
      assertTrue(boolean1);
      assertFalse(unionType0.equals((Object)unionType1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertNotNull(booleanType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.canAssignTo((JSType) booleanType0);
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      ArrayDeque<ArrowType> arrayDeque0 = new ArrayDeque<ArrowType>();
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>((Collection<? extends JSType>) arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertNotNull(unionType0);
      
      String string0 = "uhxB]p7/Knk";
      int int0 = (-2182);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals("uhxB]p7/Knk", namedType0.toString());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, namedType0.isObject());
      assertEquals(true, namedType0.isNominalType());
      assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertNotNull(namedType0);
      
      boolean boolean0 = hashSet0.add((JSType) namedType0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[uhxB]p7/Knk]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals("uhxB]p7/Knk", namedType0.toString());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, namedType0.isObject());
      assertEquals(true, namedType0.isNominalType());
      assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.canAssignTo((JSType) unionType0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[uhxB]p7/Knk]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test33() {}
//   @Test(timeout = 4000)
//   public void test33()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       
//       ArrayDeque<ArrowType> arrayDeque0 = new ArrayDeque<ArrowType>();
//       assertEquals(true, arrayDeque0.isEmpty());
//       assertEquals("[]", arrayDeque0.toString());
//       assertEquals(0, arrayDeque0.size());
//       assertNotNull(arrayDeque0);
//       
//       HashSet<JSType> hashSet0 = new HashSet<JSType>((Collection<? extends JSType>) arrayDeque0);
//       assertEquals(true, arrayDeque0.isEmpty());
//       assertEquals("[]", arrayDeque0.toString());
//       assertEquals(0, arrayDeque0.size());
//       assertEquals(true, hashSet0.isEmpty());
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(0, hashSet0.size());
//       assertNotNull(hashSet0);
//       
//       UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(true, arrayDeque0.isEmpty());
//       assertEquals("[]", arrayDeque0.toString());
//       assertEquals(0, arrayDeque0.size());
//       assertEquals(true, hashSet0.isEmpty());
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(0, hashSet0.size());
//       assertNotNull(unionType0);
//       
//       String string0 = "uhxB]p7/Knk";
//       int int0 = (-2182);
//       NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
//       assertEquals(false, namedType0.isNoObjectType());
//       assertEquals(true, namedType0.hasReferenceName());
//       assertEquals(false, namedType0.isAllType());
//       assertEquals("uhxB]p7/Knk", namedType0.toString());
//       assertEquals(false, namedType0.isStringValueType());
//       assertEquals(false, namedType0.isEmptyType());
//       assertEquals(true, namedType0.isNominalType());
//       assertEquals(true, namedType0.isNamedType());
//       assertEquals(false, namedType0.isUnionType());
//       assertEquals(false, namedType0.isTemplateType());
//       assertEquals(false, namedType0.isFunctionType());
//       assertEquals(false, namedType0.isNullType());
//       assertEquals(true, namedType0.isObject());
//       assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
//       assertEquals(false, namedType0.isNativeObjectType());
//       assertEquals(false, namedType0.isResolved());
//       assertEquals(false, namedType0.isRecordType());
//       assertEquals(false, namedType0.isVoidType());
//       assertEquals(false, namedType0.isNoType());
//       assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, namedType0.isNumberValueType());
//       assertEquals(false, namedType0.isBooleanValueType());
//       assertEquals(false, namedType0.hasCachedValues());
//       assertNotNull(namedType0);
//       
//       boolean boolean0 = hashSet0.add((JSType) namedType0);
//       assertEquals(false, namedType0.isNoObjectType());
//       assertEquals(true, namedType0.hasReferenceName());
//       assertEquals(false, namedType0.isAllType());
//       assertEquals("uhxB]p7/Knk", namedType0.toString());
//       assertEquals(false, namedType0.isStringValueType());
//       assertEquals(false, namedType0.isEmptyType());
//       assertEquals(true, namedType0.isNominalType());
//       assertEquals(true, namedType0.isNamedType());
//       assertEquals(false, namedType0.isUnionType());
//       assertEquals(false, namedType0.isTemplateType());
//       assertEquals(false, namedType0.isFunctionType());
//       assertEquals(false, namedType0.isNullType());
//       assertEquals(true, namedType0.isObject());
//       assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
//       assertEquals(false, namedType0.isNativeObjectType());
//       assertEquals(false, namedType0.isResolved());
//       assertEquals(false, namedType0.isRecordType());
//       assertEquals(false, namedType0.isVoidType());
//       assertEquals(false, namedType0.isNoType());
//       assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, namedType0.isNumberValueType());
//       assertEquals(false, namedType0.isBooleanValueType());
//       assertEquals(false, namedType0.hasCachedValues());
//       assertEquals(true, arrayDeque0.isEmpty());
//       assertEquals("[]", arrayDeque0.toString());
//       assertEquals(0, arrayDeque0.size());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals("[uhxB]p7/Knk]", hashSet0.toString());
//       assertEquals(1, hashSet0.size());
//       assertTrue(boolean0);
//       
//       EmptyScope emptyScope0 = new EmptyScope();
//       assertNotNull(emptyScope0);
//       
//       UnknownType unknownType0 = (UnknownType)namedType0.resolveInternal(simpleErrorReporter0, emptyScope0);
//       assertEquals(false, namedType0.isNoObjectType());
//       assertEquals(true, namedType0.hasReferenceName());
//       assertEquals(false, namedType0.isAllType());
//       assertEquals("uhxB]p7/Knk", namedType0.toString());
//       assertEquals(false, namedType0.isStringValueType());
//       assertEquals(false, namedType0.isEmptyType());
//       assertEquals(true, namedType0.isNominalType());
//       assertEquals(true, namedType0.isNamedType());
//       assertEquals(false, namedType0.isUnionType());
//       assertEquals(false, namedType0.isTemplateType());
//       assertEquals(true, namedType0.isResolved());
//       assertEquals(false, namedType0.isFunctionType());
//       assertEquals(false, namedType0.isNullType());
//       assertEquals(true, namedType0.isObject());
//       assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
//       assertEquals(false, namedType0.isNativeObjectType());
//       assertEquals(false, namedType0.isRecordType());
//       assertEquals(false, namedType0.isVoidType());
//       assertEquals(false, namedType0.isNoType());
//       assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, namedType0.isNumberValueType());
//       assertEquals(false, namedType0.isBooleanValueType());
//       assertEquals(false, namedType0.hasCachedValues());
//       assertEquals(true, unknownType0.matchesStringContext());
//       assertEquals(false, unknownType0.isNamedType());
//       assertEquals(false, unknownType0.hasCachedValues());
//       assertEquals(true, unknownType0.isUnknownType());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, unknownType0.canBeCalled());
//       assertEquals(false, unknownType0.isTemplateType());
//       assertEquals(false, unknownType0.isBooleanValueType());
//       assertEquals(false, unknownType0.isCheckedUnknownType());
//       assertEquals(true, unknownType0.matchesObjectContext());
//       assertEquals(false, unknownType0.hasReferenceName());
//       assertEquals(false, unknownType0.isFunctionType());
//       assertEquals(true, unknownType0.isResolved());
//       assertEquals("?", unknownType0.toString());
//       assertEquals(false, unknownType0.isEmptyType());
//       assertEquals(false, unknownType0.isAllType());
//       assertEquals(false, unknownType0.isStringValueType());
//       assertEquals(false, unknownType0.isNumberValueType());
//       assertEquals(true, unknownType0.matchesNumberContext());
//       assertEquals(2147483647, unknownType0.getPropertiesCount());
//       assertEquals(true, unknownType0.isNullable());
//       assertEquals(false, unknownType0.isNoObjectType());
//       assertEquals(false, unknownType0.isNativeObjectType());
//       assertEquals(false, unknownType0.isVoidType());
//       assertEquals(true, unknownType0.isObject());
//       assertEquals("?", unknownType0.getReferenceName());
//       assertEquals(false, unknownType0.isUnionType());
//       assertEquals(false, unknownType0.isRecordType());
//       assertEquals(false, unknownType0.isNullType());
//       assertEquals(false, unknownType0.isNoType());
//       assertNotNull(unknownType0);
//       
//       boolean boolean1 = hashSet0.add((JSType) unknownType0);
//       assertEquals(false, namedType0.isNoObjectType());
//       assertEquals(true, namedType0.hasReferenceName());
//       assertEquals(false, namedType0.isAllType());
//       assertEquals("uhxB]p7/Knk", namedType0.toString());
//       assertEquals(false, namedType0.isStringValueType());
//       assertEquals(false, namedType0.isEmptyType());
//       assertEquals(true, namedType0.isNominalType());
//       assertEquals(true, namedType0.isNamedType());
//       assertEquals(false, namedType0.isUnionType());
//       assertEquals(false, namedType0.isTemplateType());
//       assertEquals(true, namedType0.isResolved());
//       assertEquals(false, namedType0.isFunctionType());
//       assertEquals(false, namedType0.isNullType());
//       assertEquals(true, namedType0.isObject());
//       assertEquals("uhxB]p7/Knk", namedType0.getReferenceName());
//       assertEquals(false, namedType0.isNativeObjectType());
//       assertEquals(false, namedType0.isRecordType());
//       assertEquals(false, namedType0.isVoidType());
//       assertEquals(false, namedType0.isNoType());
//       assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, namedType0.isNumberValueType());
//       assertEquals(false, namedType0.isBooleanValueType());
//       assertEquals(false, namedType0.hasCachedValues());
//       assertEquals(true, unknownType0.matchesStringContext());
//       assertEquals(false, unknownType0.isNamedType());
//       assertEquals(false, unknownType0.hasCachedValues());
//       assertEquals(true, unknownType0.isUnknownType());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, unknownType0.canBeCalled());
//       assertEquals(false, unknownType0.isTemplateType());
//       assertEquals(false, unknownType0.isBooleanValueType());
//       assertEquals(false, unknownType0.isCheckedUnknownType());
//       assertEquals(true, unknownType0.matchesObjectContext());
//       assertEquals(false, unknownType0.hasReferenceName());
//       assertEquals(false, unknownType0.isFunctionType());
//       assertEquals(true, unknownType0.isResolved());
//       assertEquals("?", unknownType0.toString());
//       assertEquals(false, unknownType0.isEmptyType());
//       assertEquals(false, unknownType0.isAllType());
//       assertEquals(false, unknownType0.isStringValueType());
//       assertEquals(false, unknownType0.isNumberValueType());
//       assertEquals(true, unknownType0.matchesNumberContext());
//       assertEquals(2147483647, unknownType0.getPropertiesCount());
//       assertEquals(true, unknownType0.isNullable());
//       assertEquals(false, unknownType0.isNoObjectType());
//       assertEquals(false, unknownType0.isNativeObjectType());
//       assertEquals(false, unknownType0.isVoidType());
//       assertEquals(true, unknownType0.isObject());
//       assertEquals("?", unknownType0.getReferenceName());
//       assertEquals(false, unknownType0.isUnionType());
//       assertEquals(false, unknownType0.isRecordType());
//       assertEquals(false, unknownType0.isNullType());
//       assertEquals(false, unknownType0.isNoType());
//       assertEquals(true, arrayDeque0.isEmpty());
//       assertEquals("[]", arrayDeque0.toString());
//       assertEquals(0, arrayDeque0.size());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals("[uhxB]p7/Knk, ?]", hashSet0.toString());
//       assertEquals(2, hashSet0.size());
//       assertTrue(boolean1);
//       assertTrue(boolean1 == boolean0);
//       
//       UnknownType unknownType1 = (UnknownType)unionType0.findPropertyType(string0);
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unknownType1.isNativeObjectType());
//       assertEquals(false, unknownType1.isRecordType());
//       assertEquals(false, unknownType1.isNamedType());
//       assertEquals(false, unknownType1.isVoidType());
//       assertEquals(false, unknownType1.isFunctionType());
//       assertEquals(false, unknownType1.isAllType());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
//       assertEquals(true, unknownType1.isNullable());
//       assertEquals(false, unknownType1.isNoType());
//       assertEquals(false, unknownType1.isNumberValueType());
//       assertEquals(false, unknownType1.isUnionType());
//       assertEquals(false, unknownType1.isCheckedUnknownType());
//       assertEquals(true, unknownType1.isResolved());
//       assertEquals(false, unknownType1.isNoObjectType());
//       assertEquals(true, unknownType1.isObject());
//       assertEquals(false, unknownType1.isStringValueType());
//       assertEquals(false, unknownType1.hasCachedValues());
//       assertEquals(false, unknownType1.isEmptyType());
//       assertEquals(true, unknownType1.matchesObjectContext());
//       assertEquals(false, unknownType1.isBooleanValueType());
//       assertEquals(false, unknownType1.hasReferenceName());
//       assertEquals("?", unknownType1.getReferenceName());
//       assertEquals(false, unknownType1.isNullType());
//       assertEquals(true, unknownType1.canBeCalled());
//       assertEquals(2147483647, unknownType1.getPropertiesCount());
//       assertEquals(false, unknownType1.isTemplateType());
//       assertEquals(true, unknownType1.matchesNumberContext());
//       assertEquals(true, unknownType1.isUnknownType());
//       assertEquals("?", unknownType1.toString());
//       assertEquals(true, unknownType1.matchesStringContext());
//       assertEquals(true, arrayDeque0.isEmpty());
//       assertEquals("[]", arrayDeque0.toString());
//       assertEquals(0, arrayDeque0.size());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals("[uhxB]p7/Knk, ?]", hashSet0.toString());
//       assertEquals(2, hashSet0.size());
//       assertSame(unknownType1, unknownType0);
//       assertNotNull(unknownType1);
//   }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = " qjBb:g_;|.V&mbfl0";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertNotNull(booleanType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertTrue(boolean0);
      
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      ArrayDeque<ArrowType> arrayDeque0 = new ArrayDeque<ArrowType>();
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>((Collection<? extends JSType>) arrayDeque0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertNotNull(unionType0);
      
      String string0 = "uhxB]p7/Knk";
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(true, nullType0.isNullType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isObject());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertNotNull(nullType0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertEquals(true, nullType0.isNullType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isObject());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertTrue(boolean0);
      
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isTemplateType());
      assertNotNull(booleanType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) booleanType0);
      assertEquals(1, hashSet0.size());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isTemplateType());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.matchesObjectContext();
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(1, hashSet0.size());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(unionType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertTrue(unionType1.equals((Object)unionType0));
      
      boolean boolean0 = hashSet0.add((JSType) unionType1);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      
      boolean boolean1 = unionType0.matchesObjectContext();
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertNotSame(unionType0, unionType1);
      assertFalse(boolean1);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertNotNull(booleanType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) booleanType0);
      assertEquals(1, hashSet0.size());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.matchesStringContext();
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(1, hashSet0.size());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(unionType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertTrue(unionType1.equals((Object)unionType0));
      
      boolean boolean0 = hashSet0.add((JSType) unionType1);
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      
      boolean boolean1 = unionType0.matchesStringContext();
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertNotSame(unionType0, unionType1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertNotNull(booleanType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) booleanType0);
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.matchesInt32Context();
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(unionType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNamedType());
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertTrue(unionType1.equals((Object)unionType0));
      
      boolean boolean0 = hashSet0.add((JSType) unionType1);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      
      boolean boolean1 = unionType0.matchesInt32Context();
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertNotSame(unionType0, unionType1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNamedType());
      assertNotNull(booleanType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertTrue(boolean0);
      
      unionType0.forgiveUnknownNames();
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(unionType0);
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(unionType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertNotNull(noObjectType0);
      
      NoObjectType noObjectType1 = (NoObjectType)unionType0.getLeastSupertype((JSType) noObjectType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(true, noObjectType1.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(true, noObjectType1.hasCachedValues());
      assertEquals(false, noObjectType1.isRecordType());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertEquals("NoObject", noObjectType1.toString());
      assertEquals(true, noObjectType1.isObject());
      assertEquals(false, noObjectType1.isStringValueType());
      assertNull(noObjectType1.getReferenceName());
      assertEquals(false, noObjectType1.isAllType());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(false, noObjectType1.isNamedType());
      assertEquals(false, noObjectType1.isInterface());
      assertNull(noObjectType1.getTemplateTypeName());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertSame(noObjectType1, noObjectType0);
      assertSame(noObjectType0, noObjectType1);
      assertNotNull(noObjectType1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isUnionType();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertTrue(boolean0);
  }
}
