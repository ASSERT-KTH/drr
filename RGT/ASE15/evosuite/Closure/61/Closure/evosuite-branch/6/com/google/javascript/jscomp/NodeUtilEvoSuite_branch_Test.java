/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:25:40 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.DefinitionsRemover;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.TernaryValue;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockError;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class NodeUtilEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "gAx}h/y,z";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      
      String string1 = NodeUtil.getSourceName(node0);
      assertNotNull(string1);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(" [testcode] ", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 2381;
      int int1 = 12;
      String string0 = NodeUtil.opToStr(int1);
      assertNotNull(string0);
      assertEquals("==", string0);
      assertFalse(int1 == int0);
      
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(2381, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2381, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(9754957, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        JSDocInfo jSDocInfo0 = NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      String string0 = "To> gh$B%z";
      Stack<Node> stack0 = new Stack<Node>();
      assertNotNull(stack0);
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      int int0 = (-9);
      Node node1 = NodeUtil.newFunctionNode(string0, (List<Node>) stack0, node0, int0, int0);
      assertNotNull(node1);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(3, node1.getChildCount());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getLineno());
      assertEquals(105, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = null;
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "XaXY=1";
      int int0 = (-850);
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-850, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getFunctionParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-392);
      String string0 = "[{2cKTAP6N&[}}K";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-392, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "G|u$ycIXV<Qt";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 2636;
      Integer integer0 = new Integer(int0);
      assertEquals(2636, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      
      String string0 = "Hj@j.Wp+";
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, string0, (int) integer0, int0);
      assertNotNull(node0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(10799692, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(33, node0.getType());
      assertEquals(2636, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2, node0.getChildCount());
      assertEquals(2636, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(10799692, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(33, node0.getType());
      assertEquals(2636, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2, node0.getChildCount());
      assertEquals(2636, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertFalse(boolean0);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 15;
      String string0 = "vY6KS";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(15, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(15, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(15, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      boolean boolean0 = NodeUtil.containsType(node0, int0);
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(15, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(15, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(15, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = 2.0;
      String string0 = NodeUtil.getStringValue(double0);
      assertNotNull(string0);
      assertEquals("2", string0);
      
      int int0 = 0;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      
      Node node1 = NodeUtil.newVarNode(string0, node0);
      assertNotNull(node1);
      assertEquals(118, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(true, node1.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasOneChild());
      assertEquals(0, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      assertNotNull(nodeUtil_MatchShallowStatement0);
      
      boolean boolean0 = NodeUtil.isNameReferenced(node0, string0, nodeUtil_MatchShallowStatement0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertNotSame(node0, node1);
      assertFalse(boolean0);
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      assertNotNull(nodeUtil_MatchShallowStatement0);
      
      int int0 = 109;
      String string0 = "search";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(446573, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(109, node0.getLineno());
      assertEquals(109, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(109, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(446573, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(109, node0.getLineno());
      assertEquals(109, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(109, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      String string0 = "YPEOYNAME";
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      assertNotNull(nodeUtil_MatchDeclaration0);
      
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 1427;
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      assertNotNull(nodeUtil_BooleanResultPredicate0);
      
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1427, node0.getType());
      assertEquals(1427, node0.getCharno());
      assertEquals(1427, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(5846419, node0.getSourcePosition());
      
      int int1 = NodeUtil.getNodeTypeReferenceCount(node0, int0, nodeUtil_BooleanResultPredicate0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1427, node0.getType());
      assertEquals(1427, node0.getCharno());
      assertEquals(1427, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(5846419, node0.getSourcePosition());
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 2618;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      String string0 = "Hj@Wp+";
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2618, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(2618, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(38, node0.getType());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(10725946, node0.getSourcePosition());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      String string1 = "JSC_INVALID_GETELEM_INDEX_ERROR";
      assertNotSame(string1, string0);
      
      int int1 = NodeUtil.getNameReferenceCount(node0, string1);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2618, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(2618, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(38, node0.getType());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(10725946, node0.getSourcePosition());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = compiler0.toSource(node0);
      assertNotNull(string0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals("0", string0);
      
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      Node node1 = NodeUtil.newVarNode(compilerOptions0.appNameStr, node0);
      assertNotNull(node1);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals(true, node1.hasOneChild());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 2381;
      int int1 = 12;
      String string0 = NodeUtil.opToStr(int1);
      assertNotNull(string0);
      assertEquals("==", string0);
      assertFalse(int1 == int0);
      
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(2381, node0.getCharno());
      assertEquals(9754957, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(2381, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Node node1 = node0.getParent();
      assertNull(node1);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(2381, node0.getCharno());
      assertEquals(9754957, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(2381, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Node node2 = NodeUtil.newVarNode(string0, node1);
      assertNotNull(node2);
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(118, node2.getType());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(1, node2.getChildCount());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(2381, node0.getCharno());
      assertEquals(9754957, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(2381, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertNotSame(node2, node0);
      assertNotSame(node0, node2);
      assertFalse(int0 == int1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = null;
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertNotNull(node1);
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(122, node1.getType());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = (-863.043558229665);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      String string0 = closureCodingConvention0.getGlobalObject();
      assertNotNull(string0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", string0);
      
      int int0 = 10;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(10, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40970, node0.getSourcePosition());
      assertEquals(10, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(10, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      
      Node node1 = NodeUtil.newName(closureCodingConvention0, string0, node0, string0);
      assertNotNull(node1);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(10, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40970, node0.getSourcePosition());
      assertEquals(10, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(10, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(40970, node1.getSourcePosition());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(10, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(10, node1.getCharno());
      assertEquals(38, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(true, node1.isQualifiedName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(10, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40970, node0.getSourcePosition());
      assertEquals(10, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(10, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(40970, node1.getSourcePosition());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(10, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(10, node1.getCharno());
      assertEquals(38, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(true, node1.isQualifiedName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "D%Pk]QO~GW$L";
      boolean boolean0 = NodeUtil.isValidPropertyName(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "JSC_INEXISTANT_PARAM";
      boolean boolean0 = NodeUtil.isValidPropertyName(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = (-2278.8703864877975);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = 1399.61585;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 10;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(10, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(40970, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(10, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(10, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(10, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(40970, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(10, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(10, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 122;
      String string0 = NodeUtil.opToStrNoFail(int0);
      assertNotNull(string0);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 113;
      // Undeclared exception!
      try {
        String string0 = NodeUtil.opToStrNoFail(int0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 113: WHILE
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 101;
      String string0 = NodeUtil.opToStrNoFail(int0);
      assertNotNull(string0);
      assertEquals("&&", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 86;
      String string0 = NodeUtil.opToStr(int0);
      assertNotNull(string0);
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 65;
      String string0 = NodeUtil.opToStr(int0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 54;
      String string0 = NodeUtil.opToStr(int0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 36;
      // Undeclared exception!
      try {
        String string0 = NodeUtil.opToStrNoFail(int0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 36: SETELEM
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 20;
      String string0 = NodeUtil.opToStr(int0);
      assertNotNull(string0);
      assertEquals(">>>", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 2618;
      Integer integer0 = new Integer(int0);
      assertEquals(2618, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = NodeUtil.opToStr((int) integer0);
      assertNull(string0);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = null;
      JSType jSType0 = null;
      JSType jSType1 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, jSType0);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 2618;
      Integer integer0 = new Integer(int0);
      assertEquals(2618, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      
      String string0 = "Hj@Wqp+";
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, string0, int0, (int) integer0);
      assertNotNull(node0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(2618, node0.getCharno());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(2618, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(10725946, node0.getSourcePosition());
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try {
        String string1 = NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: NAME Hj@Wqp+ 2618
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "aXC&NjiBzG";
      int int0 = 72;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(72, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(294984, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(72, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "JSC_INEXISTANT_PARAM";
      int int0 = 64;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(262208, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(64, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(64, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(262208, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(64, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(64, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "JSC_INEXISTANT_PARAM";
      int int0 = 64;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(262208, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(64, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(64, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(262208, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(64, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(64, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "JSC_INEXISTANT_PARAM";
      int int0 = 64;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(262208, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(64, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(64, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(262208, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(64, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(64, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 78;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(78, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(78, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(78, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(319566, node0.getSourcePosition());
      
      boolean boolean0 = NodeUtil.isArrayLiteral(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(78, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(78, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(78, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(319566, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "gAx}h/y,z";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      String string1 = "nS";
      assertNotSame(string1, string0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string1, string0);
      assertNotNull(node0);
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 15;
      String string0 = "vY6KS";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(15, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(15, node0.getLineno());
      assertEquals(15, node0.getCharno());
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      Node node1 = NodeUtil.newExpr(node0);
      assertNotNull(node1);
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(15, node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertEquals(130, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(15, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(61455, node1.getSourcePosition());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(15, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(15, node0.getLineno());
      assertEquals(15, node0.getCharno());
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      boolean boolean0 = NodeUtil.isTryCatchNodeContainer(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(15, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(15, node0.getLineno());
      assertEquals(15, node0.getCharno());
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotSame(node0, node1);
      assertFalse(boolean0);
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 127;
      String string0 = "search";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(520319, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(127, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(127, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(127, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      // Undeclared exception!
      try {
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getType());
      
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = null;
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "msg.extra.trailing.comma";
      int int0 = 0;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      String string0 = "YPEOYNAME";
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 287;
      String string0 = NodeUtil.getStringValue(int0);
      assertNotNull(string0);
      assertEquals("287", string0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SCRIPT 1 [sourcename:  [testcode] ] [synthetic: 1] does not have a condition.
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 111;
      String string0 = "com.google.javascript.jscomp.JsMessageVisitor$MalformedException";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(111, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(111, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 10;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(10, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(10, node0.getLineno());
      assertEquals(40970, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(10, node0.getCharno());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 109;
      String string0 = "search";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(109, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(446573, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(109, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(109, node0.getType());
      assertEquals(false, node0.isQuotedString());
      
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(109, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(446573, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(109, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(109, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      String string0 = "*0j";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getType());
      assertEquals(-1, node0.getCharno());
      
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 4956;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(4956, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      
      boolean boolean0 = false;
      DefinitionsRemover.AssignmentDefinition definitionsRemover_AssignmentDefinition0 = null;
      try {
        definitionsRemover_AssignmentDefinition0 = new DefinitionsRemover.AssignmentDefinition(node0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = (-863.043558229665);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.toString());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.name());
      assertEquals(1, sourceMap_DetailLevel0.ordinal());
      
      boolean boolean0 = NodeUtil.has(node0, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.toString());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.name());
      assertEquals(1, sourceMap_DetailLevel0.ordinal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 111;
      String string0 = "com.google.javascript.jscomp.JsMessageVisitor$MalformedException";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(111, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      
      boolean boolean0 = NodeUtil.isVar(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(111, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertNotNull(arrayList0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 109;
      String string0 = "search";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(109, node0.getType());
      assertEquals(109, node0.getLineno());
      assertEquals(109, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(446573, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(109, node0.getType());
      assertEquals(109, node0.getLineno());
      assertEquals(109, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(446573, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "";
      Double double0 = NodeUtil.getStringNumberValue(string0);
      assertEquals(0.0, (double)double0, 0.01D);
      
      Node node0 = Node.newNumber((double) double0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      
      // Undeclared exception!
      try {
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 26;
      boolean boolean0 = NodeUtil.isCommutative(int0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 10;
      boolean boolean0 = NodeUtil.isCommutative(int0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-850);
      boolean boolean0 = NodeUtil.isAssociative(int0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "|";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertNotNull(node1);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getLineno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasOneChild());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getLineno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasOneChild());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(boolean0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "Z+@{P6:*|8\\YN";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 2636;
      Integer integer0 = new Integer(int0);
      assertEquals(2636, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      String string0 = "Hj@j.Wp+";
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, string0, (int) integer0, int0);
      assertNotNull(node0);
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(33, node0.getType());
      assertEquals(2636, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(10799692, node0.getSourcePosition());
      assertEquals(2636, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertTrue(integer0.equals((Object)int0));
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      assertNotNull(nodeUtil_MayBeStringResultPredicate0);
      
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(33, node0.getType());
      assertEquals(2636, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(10799692, node0.getSourcePosition());
      assertEquals(2636, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      Node node1 = node0.cloneNode();
      assertNotNull(node1);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertEquals(-1, node1.getCharno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      int int0 = 26;
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(39, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(false, nodeArray0[0].isLocalResultCall());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(-1, nodeArray0[0].getSourcePosition());
      assertEquals(false, nodeArray0[0].isOnlyModifiesThisCall());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(0, nodeArray0[0].getSideEffectFlags());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(-1, nodeArray0[0].getLineno());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertEquals(-1, node1.getCharno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].isOnlyModifiesThisCall());
      assertEquals(39, nodeArray0[1].getType());
      assertEquals(-1, nodeArray0[1].getCharno());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(-1, nodeArray0[1].getSourcePosition());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(-1, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(0, nodeArray0[1].getSideEffectFlags());
      assertEquals(false, nodeArray0[1].isLocalResultCall());
      assertEquals(false, nodeArray0[1].isVarArgs());
      
      Node node2 = new Node(int0, nodeArray0);
      assertNotNull(node2);
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(0, node2.getSourcePosition());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(0, node2.getCharno());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(26, node2.getType());
      assertEquals(false, node2.isQuotedString());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(0, node2.getLineno());
      assertEquals(true, node2.hasChildren());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      
      boolean boolean0 = NodeUtil.isBooleanResult(node2);
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(0, node2.getSourcePosition());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(0, node2.getCharno());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(26, node2.getType());
      assertEquals(false, node2.isQuotedString());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(0, node2.getLineno());
      assertEquals(true, node2.hasChildren());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertTrue(boolean0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 15;
      String string0 = "vY6KS";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(15, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(15, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(15, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(15, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(15, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(15, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 13;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(13, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(13, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, compiler0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.mayBeString(node0, boolean0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 111;
      // Undeclared exception!
      try {
        int int1 = NodeUtil.precedence(int0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for case (type 111)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 48;
      // Undeclared exception!
      try {
        int int1 = NodeUtil.precedence(int0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for bindname (type 48)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 101;
      int int1 = NodeUtil.precedence(int0);
      assertEquals(4, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 9;
      int int1 = NodeUtil.precedence(int0);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = 2.1474836572771406E9;
      int int0 = (-3165);
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 2636;
      Integer integer0 = new Integer(int0);
      assertEquals(2636, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      String string0 = "Hj@j.Wp+";
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, string0, (int) integer0, (int) integer0);
      assertNotNull(node0);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(10799692, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(33, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(2636, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(2636, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 15;
      String string0 = "vY6KS";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(15, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(15, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(15, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      
      Node node1 = NodeUtil.newExpr(node0);
      assertNotNull(node1);
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(130, node1.getType());
      assertEquals(15, node1.getCharno());
      assertEquals(61455, node1.getSourcePosition());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(15, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQuotedString());
      assertEquals(15, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(15, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(15, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      node0.addChildrenToBack(node1);
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(130, node1.getType());
      assertEquals(15, node1.getCharno());
      assertEquals(61455, node1.getSourcePosition());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(15, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQuotedString());
      assertEquals(15, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(15, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(15, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "|";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertNotNull(node1);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1, compiler0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(boolean0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 111;
      String string0 = "com.google.javascript.jscomp.JsMessageVisitor$MalformedException";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(111, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(111, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 109;
      String string0 = "search";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(446573, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(109, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(109, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(109, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      
      AbstractCompiler abstractCompiler0 = null;
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(446573, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(109, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(109, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(109, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 78;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(78, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(78, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(319566, node0.getSourcePosition());
      assertEquals(78, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSEMI 78
         //  parent:null
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 64;
      boolean boolean0 = NodeUtil.isSimpleOperatorType(int0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 46;
      boolean boolean0 = NodeUtil.isSimpleOperatorType(int0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 13;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(13, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(13, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 34;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(34, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(34, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 13;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(13, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      String string0 = "YPEOYNAME";
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertNotNull(arrayList0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      assertNotNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      
      boolean boolean1 = NodeUtil.isLiteralValue(node0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "Z+@{P6:*|8\\YN";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "|";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertNotNull(node1);
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasOneChild());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      boolean boolean0 = NodeUtil.isImmutableValue(node1);
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasOneChild());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertTrue(boolean0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test101() {}
//   @Test(timeout = 4000)
//   public void test101()  throws Throwable  {
//       int int0 = 2618;
//       NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(int0);
//       assertNotNull(nodeUtil_MatchNodeType0);
//       
//       ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
//       assertNotNull(closureCodingConvention0);
//       assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
//       assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
//       assertNull(closureCodingConvention0.getDelegateSuperclassName());
//       assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
//       assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
//       
//       String string0 = "Hj@Wp+";
//       Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, string0, int0, int0);
//       assertNotNull(node0);
//       assertEquals(2618, node0.getCharno());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(true, node0.isQualifiedName());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(true, node0.isUnscopedQualifiedName());
//       assertEquals(10725946, node0.getSourcePosition());
//       assertEquals(2618, node0.getLineno());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(38, node0.getType());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
//       assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
//       assertNull(closureCodingConvention0.getDelegateSuperclassName());
//       assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
//       assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
//       
//       boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
//       assertEquals(2618, node0.getCharno());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(true, node0.isQualifiedName());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(true, node0.isUnscopedQualifiedName());
//       assertEquals(10725946, node0.getSourcePosition());
//       assertEquals(2618, node0.getLineno());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(38, node0.getType());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
//       assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
//       assertNull(closureCodingConvention0.getDelegateSuperclassName());
//       assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
//       assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      
      Double double0 = NodeUtil.getStringNumberValue(compilerOptions0.inputDelimiter);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(Double.NaN, (double)double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "aS";
      Double double0 = NodeUtil.getStringNumberValue(string0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 15;
      String string0 = "vY6KS";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(15, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(15, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(15, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(15, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(15, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(15, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      
      Double double1 = NodeUtil.getNumberValue(node0);
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      
      String string0 = "To> gh$B%z";
      Stack<Node> stack0 = new Stack<Node>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      
      int int0 = (-9);
      Node node1 = NodeUtil.newFunctionNode(string0, (List<Node>) stack0, node0, int0, int0);
      assertNotNull(node1);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(3, node1.getChildCount());
      assertEquals(-1, node1.getCharno());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(105, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      String string1 = NodeUtil.arrayToString(node1);
      assertNull(string1);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(3, node1.getChildCount());
      assertEquals(-1, node1.getCharno());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(105, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertNotNull(node1);
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(1, node1.getChildCount());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      String string0 = NodeUtil.arrayToString(node1);
      assertNotNull(string0);
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(1, node1.getChildCount());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertEquals("0", string0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = 768.2734548362179;
      String string0 = NodeUtil.getStringValue(double0);
      assertNotNull(string0);
      assertEquals("768.2734548362179", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertNotNull(node1);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      String string0 = NodeUtil.getStringValue(node1);
      assertNotNull(string0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("undefined", string0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "Z+@{P6:*|8\\YN";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      
      String string1 = NodeUtil.getStringValue(node0);
      assertNotNull(string1);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("Z+@{P6:*|8\\YN", string1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
      
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertNull(string0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "";
      int int0 = 64;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(64, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(262208, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(64, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      
      TernaryValue ternaryValue0 = NodeUtil.getImpureBooleanValue(node0);
      assertEquals(0, ternaryValue0.ordinal());
      assertEquals("false", ternaryValue0.toString());
      assertEquals("FALSE", ternaryValue0.name());
      assertEquals(TernaryValue.TRUE, ternaryValue0.not());
      assertEquals(64, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(262208, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(64, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      
      TernaryValue ternaryValue0 = NodeUtil.getImpureBooleanValue(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(TernaryValue.TRUE, ternaryValue0.not());
      assertEquals("FALSE", ternaryValue0.name());
      assertEquals(0, ternaryValue0.ordinal());
      assertEquals("false", ternaryValue0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "JSC_INEXISTANT_PARAM";
      int int0 = 64;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(262208, node0.getSourcePosition());
      assertEquals(64, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(64, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      
      TernaryValue ternaryValue0 = NodeUtil.getImpureBooleanValue(node0);
      assertEquals(TernaryValue.FALSE, ternaryValue0.not());
      assertEquals("TRUE", ternaryValue0.name());
      assertEquals("true", ternaryValue0.toString());
      assertEquals(1, ternaryValue0.ordinal());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(262208, node0.getSourcePosition());
      assertEquals(64, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(64, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      assertNotNull(nodeUtil_NumbericResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      assertNotNull(nodeUtil_MatchNotFunction0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 2618;
      Integer integer0 = new Integer(int0);
      assertEquals(2618, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      
      String string0 = "Hj@Wp+";
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, string0, (int) integer0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2618, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(2618, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(10725946, node0.getSourcePosition());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = NodeUtil.getNameReferenceCount(node0, string0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2618, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(2618, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(10725946, node0.getSourcePosition());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      String string0 = "YPEOYNAME";
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 2618;
      Integer integer0 = new Integer(int0);
      assertEquals(2618, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      String string0 = "Hj@Wqp+";
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, string0, (int) integer0, (int) integer0);
      assertNotNull(node0);
      assertEquals(38, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(10725946, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(2618, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(2618, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertTrue(integer0.equals((Object)int0));
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      assertNotNull(nodeUtil_MayBeStringResultPredicate0);
      
      int int1 = NodeUtil.getNodeTypeReferenceCount(node0, int0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(38, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(10725946, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(2618, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(2618, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 2636;
      Integer integer0 = new Integer(int0);
      assertEquals(2636, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      String string0 = "Hj@j.Wp+";
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, string0, int0, (int) integer0);
      assertNotNull(node0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2636, node0.getLineno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(2636, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(10799692, node0.getSourcePosition());
      assertEquals(33, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(2, node0.getChildCount());
      assertEquals(true, node0.isQualifiedName());
      assertTrue(integer0.equals((Object)int0));
      
      Collection<Node> collection0 = NodeUtil.getVarsDeclaredInBranch(node0);
      assertNotNull(collection0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2636, node0.getLineno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(2636, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(10799692, node0.getSourcePosition());
      assertEquals(33, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(2, node0.getChildCount());
      assertEquals(true, node0.isQualifiedName());
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "XaXY=1";
      int int0 = (-850);
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-850, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-850, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 13;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(13, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got NE
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      String string0 = "YPEOYNAME";
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getSourcePosition());
      
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      String string0 = "com.google.javascript.jscomp.mozilla.rhino.NativeArray";
      int int0 = (-2887);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(2, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(33, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getArgumentForCallOrNew(node0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try {
        String string0 = NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "JSC_INEXISTANT_PARAM";
      int int0 = 64;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(64, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(64, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(262208, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.isStatement(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "msg.extra.trailing.comma";
      int int0 = 0;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getArgumentForFunction(node0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertNotNull(arrayList0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(83, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(83, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 109;
      String string0 = "search";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(109, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(109, node0.getLineno());
      assertEquals(446573, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(109, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got ELSE
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 78;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(319566, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(78, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(78, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(78, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      
      boolean boolean0 = NodeUtil.isConstantName(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(319566, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(78, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(78, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(78, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "|";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(125, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(125, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = null;
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      assertNotNull(defaultCodingConvention0);
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      
      String string0 = "\"Y0]kVk|<r";
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, string0, node0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = (-2278.8703864877975);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      
      String string0 = "<=";
      boolean boolean0 = NodeUtil.isNameReferenced(node0, string0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLP
         //  parent:null
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "Sv[ith59Jy>@u'Eun";
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      assertNotNull(nodeUtil_BooleanResultPredicate0);
      
      boolean boolean0 = NodeUtil.isNameReferenced(node0, string0, nodeUtil_BooleanResultPredicate0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertFalse(boolean0);
  }
}
