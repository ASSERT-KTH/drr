/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:41:55 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.Block;
import com.google.javascript.rhino.head.ast.BreakStatement;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)58;
      String string0 = "cl,;ass";
      AstRoot astRoot0 = new AstRoot((int) byte0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(58, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(58, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertNotNull(astRoot0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Name name0 = new Name((int) byte0, string0);
      assertEquals(39, name0.getType());
      assertEquals(58, name0.getAbsolutePosition());
      assertEquals(false, name0.hasChildren());
      assertEquals(58, name0.getPosition());
      assertEquals("cl,;ass", name0.getString());
      assertEquals("cl,;ass", name0.getIdentifier());
      assertEquals("39", name0.toString());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.depth());
      assertEquals(-1, name0.getLineno());
      assertEquals(7, name0.getLength());
      assertEquals(7, name0.length());
      assertNotNull(name0);
      
      astRoot0.addChildrenToFront((Node) name0);
      assertEquals(39, name0.getType());
      assertEquals(58, name0.getAbsolutePosition());
      assertEquals(false, name0.hasChildren());
      assertEquals(58, name0.getPosition());
      assertEquals("cl,;ass", name0.getString());
      assertEquals("cl,;ass", name0.getIdentifier());
      assertEquals("39", name0.toString());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.depth());
      assertEquals(-1, name0.getLineno());
      assertEquals(7, name0.getLength());
      assertEquals(7, name0.length());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(58, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(58, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("cl,;ass", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("cl,;ass", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("cl,;ass", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("cl,;ass", simpleSourceFile0.getName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(58, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(58, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNot());
      assertEquals("cl,;ass", node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCast());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isStringKey());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(1, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDo());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAdd());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte byte0 = (byte)58;
      String string0 = "class";
      AstRoot astRoot0 = new AstRoot((int) byte0);
      //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
      //  // Unstable assertion: assertEquals(58, astRoot0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
      //  // Unstable assertion: assertEquals(136, astRoot0.getType());
      //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
      //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
      //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
      //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
      //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
      //  // Unstable assertion: assertNull(astRoot0.getSourceName());
      //  // Unstable assertion: assertEquals(58, astRoot0.getPosition());
      //  // Unstable assertion: assertEquals(0, astRoot0.depth());
      //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
      //  // Unstable assertion: assertEquals("136", astRoot0.toString());
      //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
      //  // Unstable assertion: assertNotNull(astRoot0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      
      BreakStatement breakStatement0 = new BreakStatement((int) byte0, (int) byte0);
      //  // Unstable assertion: assertEquals(0, breakStatement0.depth());
      //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
      //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
      //  // Unstable assertion: assertEquals(58, breakStatement0.getLength());
      //  // Unstable assertion: assertEquals(58, breakStatement0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
      //  // Unstable assertion: assertEquals(58, breakStatement0.getPosition());
      //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
      //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
      //  // Unstable assertion: assertNotNull(breakStatement0);
      
      astRoot0.addChild((AstNode) breakStatement0);
      //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
      //  // Unstable assertion: assertEquals(58, astRoot0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
      //  // Unstable assertion: assertEquals(136, astRoot0.getType());
      //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
      //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
      //  // Unstable assertion: assertEquals(58, astRoot0.getLength());
      //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
      //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
      //  // Unstable assertion: assertNull(astRoot0.getSourceName());
      //  // Unstable assertion: assertEquals(58, astRoot0.getPosition());
      //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
      //  // Unstable assertion: assertEquals(0, astRoot0.depth());
      //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
      //  // Unstable assertion: assertEquals("136", astRoot0.toString());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
      //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
      //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
      //  // Unstable assertion: assertEquals(58, breakStatement0.getLength());
      //  // Unstable assertion: assertEquals(58, breakStatement0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
      //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
      //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
      //  // Unstable assertion: assertEquals(1, breakStatement0.depth());
      //  // Unstable assertion: assertEquals(0, breakStatement0.getPosition());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertNotNull(toolErrorReporter0);
      
      Name name0 = new Name((int) byte0, string0);
      //  // Unstable assertion: assertEquals(58, name0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1, name0.getLineno());
      //  // Unstable assertion: assertNull(name0.getJsDoc());
      //  // Unstable assertion: assertEquals(0, name0.depth());
      //  // Unstable assertion: assertEquals("class", name0.getIdentifier());
      //  // Unstable assertion: assertEquals(false, name0.hasChildren());
      //  // Unstable assertion: assertEquals(58, name0.getPosition());
      //  // Unstable assertion: assertEquals(5, name0.length());
      //  // Unstable assertion: assertEquals(5, name0.getLength());
      //  // Unstable assertion: assertEquals("39", name0.toString());
      //  // Unstable assertion: assertEquals(39, name0.getType());
      //  // Unstable assertion: assertEquals("class", name0.getString());
      //  // Unstable assertion: assertNotNull(name0);
      
      breakStatement0.setBreakLabel(name0);
      //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
      //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
      //  // Unstable assertion: assertEquals(58, breakStatement0.getLength());
      //  // Unstable assertion: assertEquals(58, breakStatement0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
      //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
      //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
      //  // Unstable assertion: assertEquals(1, breakStatement0.depth());
      //  // Unstable assertion: assertEquals(0, breakStatement0.getPosition());
      //  // Unstable assertion: assertEquals(-1, name0.getLineno());
      //  // Unstable assertion: assertNull(name0.getJsDoc());
      //  // Unstable assertion: assertEquals("class", name0.getIdentifier());
      //  // Unstable assertion: assertEquals(false, name0.hasChildren());
      //  // Unstable assertion: assertEquals(58, name0.getPosition());
      //  // Unstable assertion: assertEquals(5, name0.length());
      //  // Unstable assertion: assertEquals(116, name0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(5, name0.getLength());
      //  // Unstable assertion: assertEquals(2, name0.depth());
      //  // Unstable assertion: assertEquals("39", name0.toString());
      //  // Unstable assertion: assertEquals(39, name0.getType());
      //  // Unstable assertion: assertEquals("class", name0.getString());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      //  // Unstable assertion: assertEquals(true, simpleSourceFile0.isExtern());
      //  // Unstable assertion: assertEquals("class", simpleSourceFile0.toString());
      //  // Unstable assertion: assertEquals("class", simpleSourceFile0.getName());
      //  // Unstable assertion: assertNotNull(simpleSourceFile0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(true, simpleSourceFile0.isExtern());
      //  // Unstable assertion: assertEquals("class", simpleSourceFile0.toString());
      //  // Unstable assertion: assertEquals("class", simpleSourceFile0.getName());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(false, node0.isStringKey());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(false, node0.isCast());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals("class", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(58, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isString());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertEquals(true, node0.isScript());
      //  // Unstable assertion: assertEquals(1, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(true, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
      //  // Unstable assertion: assertEquals(58, astRoot0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
      //  // Unstable assertion: assertEquals(136, astRoot0.getType());
      //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
      //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
      //  // Unstable assertion: assertEquals(58, astRoot0.getLength());
      //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
      //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
      //  // Unstable assertion: assertNull(astRoot0.getSourceName());
      //  // Unstable assertion: assertEquals(58, astRoot0.getPosition());
      //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
      //  // Unstable assertion: assertEquals(0, astRoot0.depth());
      //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
      //  // Unstable assertion: assertEquals("136", astRoot0.toString());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
      //  // Unstable assertion: assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)23;
      String string0 = "X";
      AstRoot astRoot0 = new AstRoot((int) byte0);
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(23, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(23, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertNotNull(astRoot0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      BreakStatement breakStatement0 = new BreakStatement((int) byte0, (int) byte0);
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(23, breakStatement0.getLength());
      assertEquals(23, breakStatement0.getAbsolutePosition());
      assertEquals(0, breakStatement0.depth());
      assertEquals(120, breakStatement0.getType());
      assertEquals("120", breakStatement0.toString());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(23, breakStatement0.getPosition());
      assertEquals(false, breakStatement0.hasChildren());
      assertNotNull(breakStatement0);
      
      astRoot0.addChild((AstNode) breakStatement0);
      assertEquals(1, breakStatement0.depth());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(0, breakStatement0.getPosition());
      assertEquals(23, breakStatement0.getLength());
      assertEquals(23, breakStatement0.getAbsolutePosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals("120", breakStatement0.toString());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(23, astRoot0.getAbsolutePosition());
      assertEquals(23, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(23, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      StaticSourceFile staticSourceFile0 = null;
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVar());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCast());
      assertEquals(23, node0.getLength());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(23, astRoot0.getAbsolutePosition());
      assertEquals(23, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(23, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)23;
      String string0 = "X";
      AstRoot astRoot0 = new AstRoot((int) byte0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(23, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(23, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNotNull(astRoot0);
      
      Block block0 = new Block();
      assertEquals(false, block0.hasChildren());
      assertEquals(0, block0.depth());
      assertEquals("129", block0.toString());
      assertEquals(1, block0.getLength());
      assertEquals(-1, block0.getAbsolutePosition());
      assertEquals(129, block0.getType());
      assertEquals(-1, block0.getPosition());
      assertEquals(-1, block0.getLineno());
      assertNull(block0.getJsDoc());
      assertNotNull(block0);
      
      Block block1 = (Block)block0.getLastSibling();
      assertEquals(129, block1.getType());
      assertEquals(-1, block1.getPosition());
      assertEquals(0, block1.depth());
      assertEquals(-1, block1.getAbsolutePosition());
      assertEquals("129", block1.toString());
      assertEquals(-1, block1.getLineno());
      assertEquals(1, block1.getLength());
      assertEquals(false, block1.hasChildren());
      assertNull(block1.getJsDoc());
      assertEquals(false, block0.hasChildren());
      assertEquals(0, block0.depth());
      assertEquals("129", block0.toString());
      assertEquals(1, block0.getLength());
      assertEquals(-1, block0.getAbsolutePosition());
      assertEquals(129, block0.getType());
      assertEquals(-1, block0.getPosition());
      assertEquals(-1, block0.getLineno());
      assertNull(block0.getJsDoc());
      assertSame(block1, block0);
      assertSame(block0, block1);
      assertNotNull(block1);
      
      astRoot0.addChildrenToBack((Node) block1);
      assertEquals(129, block1.getType());
      assertEquals(-1, block1.getPosition());
      assertEquals(0, block1.depth());
      assertEquals(-1, block1.getAbsolutePosition());
      assertEquals("129", block1.toString());
      assertEquals(-1, block1.getLineno());
      assertEquals(1, block1.getLength());
      assertEquals(false, block1.hasChildren());
      assertNull(block1.getJsDoc());
      assertEquals(false, block0.hasChildren());
      assertEquals(0, block0.depth());
      assertEquals("129", block0.toString());
      assertEquals(1, block0.getLength());
      assertEquals(-1, block0.getAbsolutePosition());
      assertEquals(129, block0.getType());
      assertEquals(-1, block0.getPosition());
      assertEquals(-1, block0.getLineno());
      assertNull(block0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(23, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(23, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertSame(block1, block0);
      assertSame(block0, block1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      block0.addChildrenToFront((Node) block1);
      assertEquals(129, block1.getType());
      assertEquals(-1, block1.getPosition());
      assertEquals(0, block1.depth());
      assertEquals(true, block1.hasChildren());
      assertEquals(-1, block1.getAbsolutePosition());
      assertEquals("129", block1.toString());
      assertEquals(-1, block1.getLineno());
      assertEquals(1, block1.getLength());
      assertNull(block1.getJsDoc());
      assertEquals(0, block0.depth());
      assertEquals("129", block0.toString());
      assertEquals(1, block0.getLength());
      assertEquals(-1, block0.getAbsolutePosition());
      assertEquals(129, block0.getType());
      assertEquals(true, block0.hasChildren());
      assertEquals(-1, block0.getPosition());
      assertEquals(-1, block0.getLineno());
      assertNull(block0.getJsDoc());
      assertSame(block1, block0);
      assertSame(block0, block1);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      StaticSourceFile staticSourceFile0 = null;
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)23;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = "X";
      AstRoot astRoot0 = new AstRoot((int) byte0);
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(23, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertEquals(23, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertNotNull(astRoot0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean1, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean1);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      assertFalse(boolean1 == boolean0);
      
      StaticSourceFile staticSourceFile0 = null;
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCast());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(23, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertEquals(23, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte) (-105);
      String string0 = "cl,;ass";
      AstRoot astRoot0 = new AstRoot((int) byte0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-105, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-105, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertNotNull(astRoot0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      Name name0 = new Name((int) byte0, string0);
      assertEquals("cl,;ass", name0.getString());
      assertEquals(false, name0.hasChildren());
      assertEquals(39, name0.getType());
      assertEquals("cl,;ass", name0.getIdentifier());
      assertEquals(-105, name0.getAbsolutePosition());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.depth());
      assertEquals(7, name0.getLength());
      assertEquals(-105, name0.getPosition());
      assertEquals(-1, name0.getLineno());
      assertEquals(7, name0.length());
      assertEquals("39", name0.toString());
      assertNotNull(name0);
      
      astRoot0.addChildrenToFront((Node) name0);
      assertEquals("cl,;ass", name0.getString());
      assertEquals(false, name0.hasChildren());
      assertEquals(39, name0.getType());
      assertEquals("cl,;ass", name0.getIdentifier());
      assertEquals(-105, name0.getAbsolutePosition());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.depth());
      assertEquals(7, name0.getLength());
      assertEquals(-105, name0.getPosition());
      assertEquals(-1, name0.getLineno());
      assertEquals(7, name0.length());
      assertEquals("39", name0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-105, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-105, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("cl,;ass", simpleSourceFile0.getName());
      assertEquals("cl,;ass", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-105, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-105, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("cl,;ass", simpleSourceFile0.getName());
      assertEquals("cl,;ass", simpleSourceFile0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isName());
      assertEquals("cl,;ass", node0.getSourceFileName());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDec());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)23;
      String string0 = "X";
      AstRoot astRoot0 = new AstRoot((int) byte0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(23, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(23, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNotNull(astRoot0);
      
      Block block0 = new Block();
      assertNull(block0.getJsDoc());
      assertEquals(-1, block0.getLineno());
      assertEquals(-1, block0.getAbsolutePosition());
      assertEquals(0, block0.depth());
      assertEquals(false, block0.hasChildren());
      assertEquals("129", block0.toString());
      assertEquals(-1, block0.getPosition());
      assertEquals(1, block0.getLength());
      assertEquals(129, block0.getType());
      assertNotNull(block0);
      
      Block block1 = (Block)block0.getLastSibling();
      assertNull(block0.getJsDoc());
      assertEquals(-1, block0.getLineno());
      assertEquals(-1, block0.getAbsolutePosition());
      assertEquals(0, block0.depth());
      assertEquals(false, block0.hasChildren());
      assertEquals("129", block0.toString());
      assertEquals(-1, block0.getPosition());
      assertEquals(1, block0.getLength());
      assertEquals(129, block0.getType());
      assertEquals(-1, block1.getAbsolutePosition());
      assertEquals(129, block1.getType());
      assertEquals(-1, block1.getPosition());
      assertEquals(false, block1.hasChildren());
      assertEquals(-1, block1.getLineno());
      assertEquals(1, block1.getLength());
      assertEquals(0, block1.depth());
      assertEquals("129", block1.toString());
      assertNull(block1.getJsDoc());
      assertSame(block0, block1);
      assertSame(block1, block0);
      assertNotNull(block1);
      
      astRoot0.addChildrenToBack((Node) block1);
      assertNull(block0.getJsDoc());
      assertEquals(-1, block0.getLineno());
      assertEquals(-1, block0.getAbsolutePosition());
      assertEquals(0, block0.depth());
      assertEquals(false, block0.hasChildren());
      assertEquals("129", block0.toString());
      assertEquals(-1, block0.getPosition());
      assertEquals(1, block0.getLength());
      assertEquals(129, block0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(23, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(23, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, block1.getAbsolutePosition());
      assertEquals(129, block1.getType());
      assertEquals(-1, block1.getPosition());
      assertEquals(false, block1.hasChildren());
      assertEquals(-1, block1.getLineno());
      assertEquals(1, block1.getLength());
      assertEquals(0, block1.depth());
      assertEquals("129", block1.toString());
      assertNull(block1.getJsDoc());
      assertSame(block0, block1);
      assertSame(block1, block0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      StaticSourceFile staticSourceFile0 = null;
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(23, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(23, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSwitch());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.isScript());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getLineno());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte byte0 = (byte) (-16);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "Catch clauses are not supported";
      AstRoot astRoot0 = new AstRoot((int) byte0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-16, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-16, astRoot0.getAbsolutePosition());
      assertNotNull(astRoot0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      StaticSourceFile staticSourceFile0 = null;
      AstRoot astRoot1 = (AstRoot)astRoot0.setType((int) byte0);
      assertEquals(-1, astRoot1.getLineno());
      assertEquals(-1, astRoot1.getEncodedSourceStart());
      assertEquals(1, astRoot1.getLength());
      assertEquals(0, astRoot1.getFunctionCount());
      assertEquals(-16, astRoot1.getPosition());
      assertEquals(-1, astRoot1.getEndLineno());
      assertNull(astRoot1.getSourceName());
      assertEquals(0, astRoot1.depth());
      assertEquals(-16, astRoot1.getAbsolutePosition());
      assertEquals(-1, astRoot1.getBaseLineno());
      assertEquals("-16", astRoot1.toString());
      assertEquals(-1, astRoot1.getEncodedSourceEnd());
      assertEquals(0, astRoot1.getParamCount());
      assertEquals(0, astRoot1.getRegexpCount());
      assertEquals(-16, astRoot1.getType());
      assertEquals(false, astRoot1.isInStrictMode());
      assertNull(astRoot1.getEncodedSource());
      assertNull(astRoot1.getJsDoc());
      assertEquals(false, astRoot1.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals("-16", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-16, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-16, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-16, astRoot0.getAbsolutePosition());
      assertSame(astRoot1, astRoot0);
      assertSame(astRoot0, astRoot1);
      assertNotNull(astRoot1);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -16
         //
      }
  }
}
