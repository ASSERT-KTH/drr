/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:21:42 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.ArrayComprehension;
import com.google.javascript.rhino.head.ast.Assignment;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.EmptyExpression;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.ExpressionStatement;
import com.google.javascript.rhino.head.ast.LetNode;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.XmlDotQuery;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

 
public class JsDocInfoParserEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "{9FwN;>8";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "[:YdCUx";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "n,y`, !4]2T<TK=";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      
      boolean boolean0 = node0.hasOneChild();
      assertFalse(boolean0);
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0, int0);
      assertNotNull(xmlDotQuery0);
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals("146", xmlDotQuery0.toString());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(-1, xmlDotQuery0.getRp());
      
      Comment comment0 = xmlDotQuery0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals("146", xmlDotQuery0.toString());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(-1, xmlDotQuery0.getRp());
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("n,y`, !4]2t<tk=", locale0.getLanguage());
      assertEquals("n,y`, !4]2t<tk=", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("n,y`, !4]2t<tk=", locale0.getLanguage());
      assertEquals("n,y`, !4]2t<tk=", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("n,y`, !4]2t<tk=", locale0.getLanguage());
      assertEquals("n,y`, !4]2t<tk=", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("n,y`, !4]2t<tk=", locale0.getLanguage());
      assertEquals("n,y`, !4]2t<tk=", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals("146", xmlDotQuery0.toString());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(-1, xmlDotQuery0.getRp());
      
      JsDocToken jsDocToken0 = JsDocToken.LB;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isFalse());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isAssign());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isCast());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isComma());
      assertEquals(0, node1.getLength());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(3, node1.getChildCount());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isThrow());
      assertEquals(308, node1.getType());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isDelProp());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isFor());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOr());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isStringKey());
      assertEquals("n,y`, !4]2t<tk=", locale0.getLanguage());
      assertEquals("n,y`, !4]2t<tk=", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals("146", xmlDotQuery0.toString());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(-1, xmlDotQuery0.getRp());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "({FN,";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(9, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCast());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVar());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAdd());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isScript());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFalse());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(4, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isArrayLit());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = ".#--P+?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFalse());
      assertEquals(6, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      
      boolean boolean0 = node0.hasOneChild();
      assertTrue(boolean0);
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFalse());
      assertEquals(6, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0, int0);
      assertNotNull(xmlDotQuery0);
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(146, xmlDotQuery0.getType());
      
      Comment comment0 = xmlDotQuery0.getJsDocNode();
      assertNull(comment0);
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(146, xmlDotQuery0.getType());
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(".#--p+?", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".#--p+?", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(".#--p+?", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".#--p+?", locale0.getLanguage());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(".#--p+?", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".#--p+?", locale0.getLanguage());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFalse());
      assertEquals(6, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(".#--p+?", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".#--p+?", locale0.getLanguage());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFalse());
      assertEquals(6, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocToken jsDocToken0 = JsDocToken.LB;
      // Undeclared exception!
      try {
        Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "Lbmc!#!o*gRB8";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(306, node0.getType());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isObjectLit());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(4, node0.getSourcePosition());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "!";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "(wi#gK|mUyk5Z ,?|bN";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "XRDrnQ-|O4&\"EE";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(8, node0.getCharno());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNull());
      assertEquals(8, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isComma());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "*X";
      boolean boolean0 = true;
      int int0 = (-42);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ArrayComprehension arrayComprehension0 = new ArrayComprehension();
      assertNotNull(arrayComprehension0);
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getPosition());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals(157, arrayComprehension0.getType());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(1, arrayComprehension0.getLength());
      assertEquals(-1, arrayComprehension0.getAbsolutePosition());
      
      Comment comment0 = arrayComprehension0.getJsDocNode();
      assertNull(comment0);
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getPosition());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals(157, arrayComprehension0.getType());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(1, arrayComprehension0.getLength());
      assertEquals(-1, arrayComprehension0.getAbsolutePosition());
      
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isStringKey());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isStringKey());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getPosition());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals(157, arrayComprehension0.getType());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(1, arrayComprehension0.getLength());
      assertEquals(-1, arrayComprehension0.getAbsolutePosition());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isStringKey());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getPosition());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals(157, arrayComprehension0.getType());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(1, arrayComprehension0.getLength());
      assertEquals(-1, arrayComprehension0.getAbsolutePosition());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = null;
      String string0 = "}?D8";
      int int0 = 2052;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, string0);
      assertNotNull(numberLiteral0);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(2052, numberLiteral0.getAbsolutePosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(2052, numberLiteral0.getPosition());
      assertEquals(4, numberLiteral0.getLength());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("}?D8", numberLiteral0.getValue());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      
      Comment comment0 = numberLiteral0.getJsDocNode();
      assertNull(comment0);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(2052, numberLiteral0.getAbsolutePosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(2052, numberLiteral0.getPosition());
      assertEquals(4, numberLiteral0.getLength());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("}?D8", numberLiteral0.getValue());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(2052, numberLiteral0.getAbsolutePosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(2052, numberLiteral0.getPosition());
      assertEquals(4, numberLiteral0.getLength());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("}?D8", numberLiteral0.getValue());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "|Ct<BJeR5\"4v0=e@me";
      boolean boolean0 = true;
      int int0 = (-42);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ArrayComprehension arrayComprehension0 = new ArrayComprehension();
      assertNotNull(arrayComprehension0);
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertEquals(157, arrayComprehension0.getType());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getPosition());
      assertEquals(1, arrayComprehension0.getLength());
      assertEquals(-1, arrayComprehension0.getAbsolutePosition());
      
      Comment comment0 = arrayComprehension0.getJsDocNode();
      assertNull(comment0);
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertEquals(157, arrayComprehension0.getType());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getPosition());
      assertEquals(1, arrayComprehension0.getLength());
      assertEquals(-1, arrayComprehension0.getAbsolutePosition());
      
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertEquals(157, arrayComprehension0.getType());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getPosition());
      assertEquals(1, arrayComprehension0.getLength());
      assertEquals(-1, arrayComprehension0.getAbsolutePosition());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertEquals(157, arrayComprehension0.getType());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getPosition());
      assertEquals(1, arrayComprehension0.getLength());
      assertEquals(-1, arrayComprehension0.getAbsolutePosition());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
  }

  @Test(timeout = 4000)
  public void test15() {}
//   @Test(timeout = 4000)
//   public void test15()  throws Throwable  {
//       String string0 = "";
//       Node node0 = JsDocInfoParser.parseTypeString(string0);
//       assertNull(node0);
//       
//       String string1 = "!4(1ioH5(oY^W0";
//       assertNotSame(string1, string0);
//       
//       int int0 = 2898;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0, int0);
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       assertNotNull(jsDocTokenStream0);
//       
//       NumberLiteral numberLiteral0 = new NumberLiteral(int0, string1);
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       assertNotNull(numberLiteral0);
//       assertEquals(2898, numberLiteral0.getAbsolutePosition());
//       assertEquals(-1, numberLiteral0.getLineno());
//       assertEquals(0, numberLiteral0.depth());
//       assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
//       assertEquals("!4(1ioH5(oY^W0", numberLiteral0.getValue());
//       assertEquals(false, numberLiteral0.hasChildren());
//       assertEquals(40, numberLiteral0.getType());
//       assertEquals("40", numberLiteral0.toString());
//       assertEquals(14, numberLiteral0.getLength());
//       assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
//       assertNull(numberLiteral0.getJsDoc());
//       assertEquals(2898, numberLiteral0.getPosition());
//       
//       Comment comment0 = numberLiteral0.getJsDocNode();
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       assertNull(comment0);
//       assertEquals(2898, numberLiteral0.getAbsolutePosition());
//       assertEquals(-1, numberLiteral0.getLineno());
//       assertEquals(0, numberLiteral0.depth());
//       assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
//       assertEquals("!4(1ioH5(oY^W0", numberLiteral0.getValue());
//       assertEquals(false, numberLiteral0.hasChildren());
//       assertEquals(40, numberLiteral0.getType());
//       assertEquals("40", numberLiteral0.toString());
//       assertEquals(14, numberLiteral0.getLength());
//       assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
//       assertNull(numberLiteral0.getJsDoc());
//       assertEquals(2898, numberLiteral0.getPosition());
//       
//       Locale locale0 = Locale.JAPANESE;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleKeys();
//       assertNotNull(set0);
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       assertNotNull(config0);
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       
//       Context context0 = Context.getCurrentContext();
//       assertFalse(context0.generateObserverCount);
//       assertNotNull(context0);
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       assertFalse(context0.generateObserverCount);
//       assertNotNull(toolErrorReporter0);
//       assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertFalse(context0.generateObserverCount);
//       assertNotNull(jsDocInfoParser0);
//       assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals(2898, numberLiteral0.getAbsolutePosition());
//       assertEquals(-1, numberLiteral0.getLineno());
//       assertEquals(0, numberLiteral0.depth());
//       assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
//       assertEquals("!4(1ioH5(oY^W0", numberLiteral0.getValue());
//       assertEquals(false, numberLiteral0.hasChildren());
//       assertEquals(40, numberLiteral0.getType());
//       assertEquals("40", numberLiteral0.toString());
//       assertEquals(14, numberLiteral0.getLength());
//       assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
//       assertNull(numberLiteral0.getJsDoc());
//       assertEquals(2898, numberLiteral0.getPosition());
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       assertFalse(boolean1 == boolean0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(boolean0 == boolean1);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertFalse(context0.generateObserverCount);
//       assertFalse(boolean1);
//       assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals(2898, numberLiteral0.getAbsolutePosition());
//       assertEquals(-1, numberLiteral0.getLineno());
//       assertEquals(0, numberLiteral0.depth());
//       assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
//       assertEquals("!4(1ioH5(oY^W0", numberLiteral0.getValue());
//       assertEquals(false, numberLiteral0.hasChildren());
//       assertEquals(40, numberLiteral0.getType());
//       assertEquals("40", numberLiteral0.toString());
//       assertEquals(14, numberLiteral0.getLength());
//       assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
//       assertNull(numberLiteral0.getJsDoc());
//       assertEquals(2898, numberLiteral0.getPosition());
//   }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "*X";
      boolean boolean0 = false;
      int int0 = (-42);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ArrayComprehension arrayComprehension0 = new ArrayComprehension();
      assertNotNull(arrayComprehension0);
      assertEquals(0, arrayComprehension0.depth());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(-1, arrayComprehension0.getAbsolutePosition());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals(157, arrayComprehension0.getType());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(-1, arrayComprehension0.getPosition());
      assertEquals(1, arrayComprehension0.getLength());
      
      Comment comment0 = arrayComprehension0.getJsDocNode();
      assertNull(comment0);
      assertEquals(0, arrayComprehension0.depth());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(-1, arrayComprehension0.getAbsolutePosition());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals(157, arrayComprehension0.getType());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(-1, arrayComprehension0.getPosition());
      assertEquals(1, arrayComprehension0.getLength());
      
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, arrayComprehension0.depth());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(-1, arrayComprehension0.getAbsolutePosition());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals(157, arrayComprehension0.getType());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(-1, arrayComprehension0.getPosition());
      assertEquals(1, arrayComprehension0.getLength());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, arrayComprehension0.depth());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(-1, arrayComprehension0.getAbsolutePosition());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals(157, arrayComprehension0.getType());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(-1, arrayComprehension0.getPosition());
      assertEquals(1, arrayComprehension0.getLength());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "@{#n};Sq";
      int int0 = 468;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Assignment assignment0 = new Assignment(int0);
      assertNotNull(assignment0);
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(468, assignment0.getPosition());
      assertEquals(0, assignment0.depth());
      assertNull(assignment0.getJsDoc());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getType());
      assertEquals(1, assignment0.getLength());
      assertEquals("-1", assignment0.toString());
      assertEquals(468, assignment0.getAbsolutePosition());
      
      boolean boolean0 = false;
      ExpressionStatement expressionStatement0 = new ExpressionStatement((AstNode) assignment0, boolean0);
      assertNotNull(expressionStatement0);
      assertEquals("133", expressionStatement0.toString());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(468, expressionStatement0.getPosition());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(468, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(0, assignment0.getPosition());
      assertEquals(1, assignment0.depth());
      assertNull(assignment0.getJsDoc());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getType());
      assertEquals(1, assignment0.getLength());
      assertEquals("-1", assignment0.toString());
      assertEquals(468, assignment0.getAbsolutePosition());
      
      Comment comment0 = expressionStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals("133", expressionStatement0.toString());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(468, expressionStatement0.getPosition());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(468, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(0, assignment0.getPosition());
      assertEquals(1, assignment0.depth());
      assertNull(assignment0.getJsDoc());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getType());
      assertEquals(1, assignment0.getLength());
      assertEquals("-1", assignment0.toString());
      assertEquals(468, assignment0.getAbsolutePosition());
      
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(468, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOptionalArg());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      boolean boolean1 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean1, config_LanguageMode0, boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(jsDocInfoParser0);
      assertEquals("133", expressionStatement0.toString());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(468, expressionStatement0.getPosition());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(468, expressionStatement0.getAbsolutePosition());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(468, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(0, assignment0.getPosition());
      assertEquals(1, assignment0.depth());
      assertNull(assignment0.getJsDoc());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getType());
      assertEquals(1, assignment0.getLength());
      assertEquals("-1", assignment0.toString());
      assertEquals(468, assignment0.getAbsolutePosition());
      
      boolean boolean2 = jsDocInfoParser0.parse();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean2);
      assertEquals("133", expressionStatement0.toString());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(468, expressionStatement0.getPosition());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(468, expressionStatement0.getAbsolutePosition());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(468, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(0, assignment0.getPosition());
      assertEquals(1, assignment0.depth());
      assertNull(assignment0.getJsDoc());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getType());
      assertEquals(1, assignment0.getLength());
      assertEquals("-1", assignment0.toString());
      assertEquals(468, assignment0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "qgpkGnA5%MRPh";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(13, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isScript());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      int int0 = 701;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      LetNode letNode0 = new LetNode(int0, int0);
      assertNotNull(letNode0);
      assertNull(letNode0.getJsDoc());
      assertEquals(701, letNode0.getLength());
      assertEquals(158, letNode0.getType());
      assertEquals(0, letNode0.depth());
      assertEquals("158", letNode0.toString());
      assertEquals(-1, letNode0.getLp());
      assertEquals(701, letNode0.getPosition());
      assertEquals(701, letNode0.getAbsolutePosition());
      assertEquals(false, letNode0.hasChildren());
      assertEquals(-1, letNode0.getRp());
      assertEquals(-1, letNode0.getLineno());
      
      Comment comment0 = letNode0.getJsDocNode();
      assertNull(comment0);
      assertNull(letNode0.getJsDoc());
      assertEquals(701, letNode0.getLength());
      assertEquals(158, letNode0.getType());
      assertEquals(0, letNode0.depth());
      assertEquals("158", letNode0.toString());
      assertEquals(-1, letNode0.getLp());
      assertEquals(701, letNode0.getPosition());
      assertEquals(701, letNode0.getAbsolutePosition());
      assertEquals(false, letNode0.hasChildren());
      assertEquals(-1, letNode0.getRp());
      assertEquals(-1, letNode0.getLineno());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      assertNull(letNode0.getJsDoc());
      assertEquals(701, letNode0.getLength());
      assertEquals(158, letNode0.getType());
      assertEquals(0, letNode0.depth());
      assertEquals("158", letNode0.toString());
      assertEquals(-1, letNode0.getLp());
      assertEquals(701, letNode0.getPosition());
      assertEquals(701, letNode0.getAbsolutePosition());
      assertEquals(false, letNode0.hasChildren());
      assertEquals(-1, letNode0.getRp());
      assertEquals(-1, letNode0.getLineno());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(13, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isScript());
      
      JsDocToken jsDocToken0 = JsDocToken.LP;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertEquals("[]", treeSet0.toString());
      assertNull(letNode0.getJsDoc());
      assertEquals(701, letNode0.getLength());
      assertEquals(158, letNode0.getType());
      assertEquals(0, letNode0.depth());
      assertEquals("158", letNode0.toString());
      assertEquals(-1, letNode0.getLp());
      assertEquals(701, letNode0.getPosition());
      assertEquals(701, letNode0.getAbsolutePosition());
      assertEquals(false, letNode0.hasChildren());
      assertEquals(-1, letNode0.getRp());
      assertEquals(-1, letNode0.getLineno());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(13, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isScript());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNull(jSDocInfo0);
      assertEquals("[]", treeSet0.toString());
      assertNull(letNode0.getJsDoc());
      assertEquals(701, letNode0.getLength());
      assertEquals(158, letNode0.getType());
      assertEquals(0, letNode0.depth());
      assertEquals("158", letNode0.toString());
      assertEquals(-1, letNode0.getLp());
      assertEquals(701, letNode0.getPosition());
      assertEquals(701, letNode0.getAbsolutePosition());
      assertEquals(false, letNode0.hasChildren());
      assertEquals(-1, letNode0.getRp());
      assertEquals(-1, letNode0.getLineno());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(13, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isScript());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "com.google.javascript.rhino.head.NativeNumber";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(45, node0.getLength());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.isString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-95);
      EmptyExpression emptyExpression0 = new EmptyExpression(int0);
      assertNotNull(emptyExpression0);
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(128, emptyExpression0.getType());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-95, emptyExpression0.getPosition());
      assertEquals(-95, emptyExpression0.getAbsolutePosition());
      
      Comment comment0 = emptyExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(128, emptyExpression0.getType());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-95, emptyExpression0.getPosition());
      assertEquals(-95, emptyExpression0.getAbsolutePosition());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      node0.setSourceFileForTesting(string0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals("com.google.javascript.rhino.head.NativeNumber", node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(45, node0.getLength());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(128, emptyExpression0.getType());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-95, emptyExpression0.getPosition());
      assertEquals(-95, emptyExpression0.getAbsolutePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals("com.google.javascript.rhino.head.NativeNumber", node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(45, node0.getLength());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertNotNull(jSTypeExpression0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(128, emptyExpression0.getType());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-95, emptyExpression0.getPosition());
      assertEquals(-95, emptyExpression0.getAbsolutePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals("com.google.javascript.rhino.head.NativeNumber", node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(45, node0.getLength());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "F;e5TT&{2+b\\HGC_";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(7, node0.getLength());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCall());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      int int0 = 124;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(124, (int)integer0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, (int) integer0, int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((int) integer0, (int) integer0, token_CommentType0, string0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(comment0);
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(124, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("F;e5TT&{2+b\\HGC_", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(124, comment0.getPosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-1, comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(124, comment0.getLength());
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("f;e5tt&{2+b\\hgc__F;E5TT&{2+B\\HGC__F;e5TT&{2+b\\HGC_", locale0.toString());
      assertEquals("F;E5TT&{2+B\\HGC_", locale0.getCountry());
      assertEquals("F;e5TT&{2+b\\HGC_", locale0.getVariant());
      assertEquals("f;e5tt&{2+b\\hgc_", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("f;e5tt&{2+b\\hgc__F;E5TT&{2+B\\HGC__F;e5TT&{2+b\\HGC_", locale0.toString());
      assertEquals("F;E5TT&{2+B\\HGC_", locale0.getCountry());
      assertEquals("F;e5TT&{2+b\\HGC_", locale0.getVariant());
      assertEquals("f;e5tt&{2+b\\hgc_", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("f;e5tt&{2+b\\hgc__F;E5TT&{2+B\\HGC__F;e5TT&{2+b\\HGC_", locale0.toString());
      assertEquals("F;E5TT&{2+B\\HGC_", locale0.getCountry());
      assertEquals("F;e5TT&{2+b\\HGC_", locale0.getVariant());
      assertEquals("f;e5tt&{2+b\\hgc_", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(context0.generateObserverCount);
      assertNotNull(jsDocInfoParser0);
      assertEquals("f;e5tt&{2+b\\hgc__F;E5TT&{2+B\\HGC__F;e5TT&{2+b\\HGC_", locale0.toString());
      assertEquals("F;E5TT&{2+B\\HGC_", locale0.getCountry());
      assertEquals("F;e5TT&{2+b\\HGC_", locale0.getVariant());
      assertEquals("f;e5tt&{2+b\\hgc_", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(7, node0.getLength());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCall());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(124, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("F;e5TT&{2+b\\HGC_", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(124, comment0.getPosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-1, comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(124, comment0.getLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "msg.jsdoc.missing.rb";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      int int0 = 1987;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ArrayComprehension arrayComprehension0 = new ArrayComprehension(int0, int0);
      assertNotNull(arrayComprehension0);
      assertEquals(1987, arrayComprehension0.getLength());
      assertEquals(1987, arrayComprehension0.getPosition());
      assertEquals("157", arrayComprehension0.toString());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(1987, arrayComprehension0.getAbsolutePosition());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals(157, arrayComprehension0.getType());
      
      Comment comment0 = arrayComprehension0.getJsDocNode();
      assertNull(comment0);
      assertEquals(1987, arrayComprehension0.getLength());
      assertEquals(1987, arrayComprehension0.getPosition());
      assertEquals("157", arrayComprehension0.toString());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(1987, arrayComprehension0.getAbsolutePosition());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals(157, arrayComprehension0.getType());
      
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(1987, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(8140739, node0.getSourcePosition());
      assertEquals(1987, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1987, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssignAdd());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(int0);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(1987, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(8140739, node0.getSourcePosition());
      assertEquals(1987, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1987, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(1987, arrayComprehension0.getLength());
      assertEquals(1987, arrayComprehension0.getPosition());
      assertEquals("157", arrayComprehension0.toString());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(1987, arrayComprehension0.getAbsolutePosition());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals(157, arrayComprehension0.getType());
      
      JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(1987, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(8140739, node0.getSourcePosition());
      assertEquals(1987, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1987, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssignAdd());
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(1987, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(8140739, node0.getSourcePosition());
      assertEquals(1987, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1987, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(1987, arrayComprehension0.getLength());
      assertEquals(1987, arrayComprehension0.getPosition());
      assertEquals("157", arrayComprehension0.toString());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(1987, arrayComprehension0.getAbsolutePosition());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertEquals(157, arrayComprehension0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "(a3XCHA)?mn|-#6uCH";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNE());
      assertEquals(8, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(8, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSetterDef());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "{#n};Sq";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetterDef());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFromExterns());
      assertEquals(309, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCase());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "JavaAdapter can not subclass methods with more then 64 arguments.";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(11, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-68);
      EmptyExpression emptyExpression0 = new EmptyExpression(int0);
      assertNotNull(emptyExpression0);
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-68, emptyExpression0.getAbsolutePosition());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(-68, emptyExpression0.getPosition());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(0, emptyExpression0.depth());
      
      Comment comment0 = emptyExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-68, emptyExpression0.getAbsolutePosition());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(-68, emptyExpression0.getPosition());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(0, emptyExpression0.depth());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(11, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-68, emptyExpression0.getAbsolutePosition());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(-68, emptyExpression0.getPosition());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(0, emptyExpression0.depth());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(11, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-68, emptyExpression0.getAbsolutePosition());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(-68, emptyExpression0.getPosition());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(0, emptyExpression0.depth());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(true, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(true, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isNgInject());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "JavaAdapter can not subclass methods with more then 64 arguments.";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isRegExp());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCast());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      assertEquals(11, node0.getLength());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-68);
      EmptyExpression emptyExpression0 = new EmptyExpression(int0);
      assertNotNull(emptyExpression0);
      assertEquals(-68, emptyExpression0.getAbsolutePosition());
      assertEquals(1, emptyExpression0.getLength());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(-68, emptyExpression0.getPosition());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(0, emptyExpression0.depth());
      assertEquals("128", emptyExpression0.toString());
      
      Comment comment0 = emptyExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-68, emptyExpression0.getAbsolutePosition());
      assertEquals(1, emptyExpression0.getLength());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(-68, emptyExpression0.getPosition());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(0, emptyExpression0.depth());
      assertEquals("128", emptyExpression0.toString());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, node0.isRegExp());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCast());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      assertEquals(11, node0.getLength());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(-68, emptyExpression0.getAbsolutePosition());
      assertEquals(1, emptyExpression0.getLength());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(-68, emptyExpression0.getPosition());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(0, emptyExpression0.depth());
      assertEquals("128", emptyExpression0.toString());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(false, node0.isRegExp());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCast());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      assertEquals(11, node0.getLength());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(-68, emptyExpression0.getAbsolutePosition());
      assertEquals(1, emptyExpression0.getLength());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(-68, emptyExpression0.getPosition());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(0, emptyExpression0.depth());
      assertEquals("128", emptyExpression0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "com.google.javascript.rhino.head.NativeNumber";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isScript());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(45, node0.getLength());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isScript());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(45, node0.getLength());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-95);
      EmptyExpression emptyExpression0 = new EmptyExpression(int0);
      assertNotNull(emptyExpression0);
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-95, emptyExpression0.getAbsolutePosition());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-95, emptyExpression0.getPosition());
      assertEquals(false, emptyExpression0.hasChildren());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(0, emptyExpression0.depth());
      
      Comment comment0 = emptyExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-95, emptyExpression0.getAbsolutePosition());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-95, emptyExpression0.getPosition());
      assertEquals(false, emptyExpression0.hasChildren());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(0, emptyExpression0.depth());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-95, emptyExpression0.getAbsolutePosition());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-95, emptyExpression0.getPosition());
      assertEquals(false, emptyExpression0.hasChildren());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isScript());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(45, node0.getLength());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-95, emptyExpression0.getAbsolutePosition());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-95, emptyExpression0.getPosition());
      assertEquals(false, emptyExpression0.hasChildren());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isScript());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(45, node0.getLength());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = ".#--P+?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(6, node0.getCharno());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTry());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      
      boolean boolean0 = node0.hasOneChild();
      assertTrue(boolean0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(6, node0.getCharno());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTry());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0, int0);
      assertNotNull(xmlDotQuery0);
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertNull(xmlDotQuery0.getJsDoc());
      
      Comment comment0 = xmlDotQuery0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertNull(xmlDotQuery0.getJsDoc());
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals(".#--p+?", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(".#--p+?", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals(".#--p+?", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(".#--p+?", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals(".#--p+?", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(".#--p+?", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(6, node0.getCharno());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTry());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("", locale0.getVariant());
      assertEquals(".#--p+?", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(".#--p+?", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(6, node0.getCharno());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTry());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals("", locale0.getVariant());
      assertEquals(".#--p+?", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(".#--p+?", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(6, node0.getCharno());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTry());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "@{#n};Sq";
      int int0 = 468;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Assignment assignment0 = new Assignment(int0);
      assertNotNull(assignment0);
      assertEquals("-1", assignment0.toString());
      assertEquals(1, assignment0.getLength());
      assertEquals(468, assignment0.getAbsolutePosition());
      assertNull(assignment0.getJsDoc());
      assertEquals(468, assignment0.getPosition());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-1, assignment0.getType());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(0, assignment0.depth());
      
      boolean boolean0 = false;
      ExpressionStatement expressionStatement0 = new ExpressionStatement((AstNode) assignment0, boolean0);
      assertNotNull(expressionStatement0);
      assertEquals(133, expressionStatement0.getType());
      assertEquals(0, expressionStatement0.depth());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(468, expressionStatement0.getPosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(468, expressionStatement0.getAbsolutePosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals("133", expressionStatement0.toString());
      assertEquals("-1", assignment0.toString());
      assertEquals(1, assignment0.getLength());
      assertEquals(468, assignment0.getAbsolutePosition());
      assertNull(assignment0.getJsDoc());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(0, assignment0.getPosition());
      assertEquals(-1, assignment0.getType());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(1, assignment0.depth());
      
      Comment comment0 = expressionStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(133, expressionStatement0.getType());
      assertEquals(0, expressionStatement0.depth());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(468, expressionStatement0.getPosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(468, expressionStatement0.getAbsolutePosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals("133", expressionStatement0.toString());
      assertEquals("-1", assignment0.toString());
      assertEquals(1, assignment0.getLength());
      assertEquals(468, assignment0.getAbsolutePosition());
      assertNull(assignment0.getJsDoc());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(0, assignment0.getPosition());
      assertEquals(-1, assignment0.getType());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(1, assignment0.depth());
      
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVar());
      assertEquals(468, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(133, expressionStatement0.getType());
      assertEquals(0, expressionStatement0.depth());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(468, expressionStatement0.getPosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(468, expressionStatement0.getAbsolutePosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals("133", expressionStatement0.toString());
      assertEquals("-1", assignment0.toString());
      assertEquals(1, assignment0.getLength());
      assertEquals(468, assignment0.getAbsolutePosition());
      assertNull(assignment0.getJsDoc());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(0, assignment0.getPosition());
      assertEquals(-1, assignment0.getType());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(1, assignment0.depth());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVar());
      assertEquals(468, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(133, expressionStatement0.getType());
      assertEquals(0, expressionStatement0.depth());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(468, expressionStatement0.getPosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(468, expressionStatement0.getAbsolutePosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals("133", expressionStatement0.toString());
      assertEquals("-1", assignment0.toString());
      assertEquals(1, assignment0.getLength());
      assertEquals(468, assignment0.getAbsolutePosition());
      assertNull(assignment0.getJsDoc());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(0, assignment0.getPosition());
      assertEquals(-1, assignment0.getType());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(1, assignment0.depth());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVar());
      assertEquals(468, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = null;
      String string0 = ":u1DrDMK7*wMnGMU8.l";
      int int0 = 2058;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, string0);
      assertNotNull(numberLiteral0);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(":u1DrDMK7*wMnGMU8.l", numberLiteral0.getValue());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(2058, numberLiteral0.getPosition());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(19, numberLiteral0.getLength());
      assertEquals(2058, numberLiteral0.getAbsolutePosition());
      
      Comment comment0 = numberLiteral0.getJsDocNode();
      assertNull(comment0);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(":u1DrDMK7*wMnGMU8.l", numberLiteral0.getValue());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(2058, numberLiteral0.getPosition());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(19, numberLiteral0.getLength());
      assertEquals(2058, numberLiteral0.getAbsolutePosition());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(":u1DrDMK7*wMnGMU8.l", numberLiteral0.getValue());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(2058, numberLiteral0.getPosition());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(19, numberLiteral0.getLength());
      assertEquals(2058, numberLiteral0.getAbsolutePosition());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
