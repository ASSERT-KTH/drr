/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 08:56:49 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Tracer;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class TracerEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "$q$nE1S";
      Tracer.ThreadTrace tracer_ThreadTrace0 = new Tracer.ThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      tracer_ThreadTrace0.truncateEvents();
      tracer_ThreadTrace0.truncateOutstandingEvents();
      Tracer.enableTypeMaps();
      Tracer tracer0 = Tracer.shortName(tracer_ThreadTrace0, string0);
      assertNotNull(tracer0);
      
      Tracer.Stat tracer_Stat0 = new Tracer.Stat();
      assertNotNull(tracer_Stat0);
      
      int int0 = tracer_Stat0.getTotalTime();
      assertEquals(0, int0);
      
      tracer_ThreadTrace0.endEvent(tracer0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "$q$nE1S";
      Tracer tracer0 = new Tracer(string0);
      assertNotNull(tracer0);
      
      Tracer.ThreadTrace tracer_ThreadTrace0 = new Tracer.ThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      tracer_ThreadTrace0.truncateEvents();
      tracer_ThreadTrace0.truncateOutstandingEvents();
      Tracer.Stat tracer_Stat0 = new Tracer.Stat();
      assertNotNull(tracer_Stat0);
      
      int int0 = tracer_Stat0.getTotalTime();
      assertEquals(0, int0);
      
      tracer_ThreadTrace0.endEvent(tracer0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "$q$nE1S";
      Tracer tracer0 = new Tracer(string0);
      assertNotNull(tracer0);
      
      Tracer.ThreadTrace tracer_ThreadTrace0 = new Tracer.ThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      tracer_ThreadTrace0.truncateOutstandingEvents();
      Tracer.Stat tracer_Stat0 = new Tracer.Stat();
      assertNotNull(tracer_Stat0);
      
      int int0 = tracer_Stat0.getTotalTime();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try {
        tracer_ThreadTrace0.endEvent(tracer0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tracer.ThreadTrace tracer_ThreadTrace0 = new Tracer.ThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      String string0 = tracer_ThreadTrace0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      
      Tracer tracer0 = new Tracer(string0);
      assertNotNull(tracer0);
      
      int int0 = (-107);
      // Undeclared exception!
      try {
        tracer_ThreadTrace0.endEvent(tracer0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Map<String, Long> map0 = Tracer.getTypeToTimeMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Map<String, Long> map0 = Tracer.getTypeToSilentMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tracer.enableTypeMaps();
      Tracer.enableTypeMaps();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tracer.logCurrentThreadTrace();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 0L;
      Long long1 = new Long(long0);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      String string0 = null;
      Tracer tracer0 = Tracer.shortName(long1, string0);
      assertNotNull(tracer0);
      assertTrue(long1.equals((Object)long0));
      
      int int0 = (-14);
      long long2 = tracer0.stop(int0);
      assertTrue(long0 == long2);
      assertTrue(long1.equals((Object)long0));
      assertTrue(long1.equals((Object)long2));
      assertTrue(long2 == long0);
      assertEquals(0L, long2);
      
      Tracer tracer1 = Tracer.shortName(long1, string0);
      assertNotNull(tracer1);
      assertTrue(long0 == long2);
      assertTrue(long1.equals((Object)long0));
      assertTrue(long1.equals((Object)long2));
      assertFalse(tracer1.equals((Object)tracer0));
      assertNotSame(tracer1, tracer0);
      
      Tracer.clearTracingStatisticsTestingOnly();
      long long3 = tracer1.stop();
      assertTrue(long0 == long2);
      assertTrue(long0 == long3);
      assertTrue(long1.equals((Object)long3));
      assertTrue(long1.equals((Object)long0));
      assertTrue(long1.equals((Object)long2));
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      assertFalse(tracer1.equals((Object)tracer0));
      assertNotSame(tracer1, tracer0);
      assertEquals(0L, long3);
      
      Tracer.ThreadTrace tracer_ThreadTrace0 = Tracer.getThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      Map<String, Long> map0 = Tracer.getTypeToCountMap();
      assertNull(map0);
      
      tracer_ThreadTrace0.startEvent(tracer0);
      assertTrue(long0 == long2);
      assertTrue(long0 == long3);
      assertTrue(long1.equals((Object)long3));
      assertTrue(long1.equals((Object)long0));
      assertTrue(long1.equals((Object)long2));
      assertFalse(tracer0.equals((Object)tracer1));
      assertNotSame(tracer0, tracer1);
      
      tracer_ThreadTrace0.truncateEvents();
      boolean boolean0 = tracer_ThreadTrace0.isEmpty();
      assertFalse(boolean0);
      
      Tracer.logAndClearCurrentThreadTrace();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      long long0 = 0L;
      Tracer.Stat tracer_Stat0 = Tracer.getStatsForType(string0);
      assertNotNull(tracer_Stat0);
      
      int int0 = tracer_Stat0.getSilentCount();
      assertEquals(0, int0);
      
      Long long1 = Long.getLong(string0, long0);
      assertEquals(0L, (long)long1);
      
      Tracer tracer0 = Tracer.shortName(long1, string0);
      assertNotNull(tracer0);
      
      long long2 = tracer0.stop(int0);
      assertTrue(long0 == long2);
      assertTrue(long2 == long0);
      assertTrue(long1.equals((Object)long2));
      assertEquals(0L, long2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 668;
      Tracer.appendSpaces(stringBuilder0, int0);
      assertEquals("                ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = null;
      Tracer tracer0 = Tracer.shortName(string0, string0);
      assertNotNull(tracer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tracer.clearCurrentThreadTrace();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tracer.ThreadTrace tracer_ThreadTrace0 = Tracer.getThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      boolean boolean0 = tracer_ThreadTrace0.isEmpty();
      assertTrue(boolean0);
      
      Tracer.setPrettyPrint(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tracer.enableTypeMaps();
      int int0 = 295;
      Tracer.initCurrentThreadTrace(int0);
      Map<String, Long> map0 = Tracer.getTypeToCountMap();
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
      assertNotNull(map0);
      
      Map<String, Long> map1 = Tracer.getTypeToSilentMap();
      assertEquals(0, map1.size());
      assertEquals(true, map1.isEmpty());
      assertNotNull(map1);
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tracer.enableTypeMaps();
      Map<String, Long> map0 = Tracer.getTypeToTimeMap();
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
      assertNotNull(map0);
  }
}
