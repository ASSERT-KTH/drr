/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:26:04 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

 
public class ProcessClosurePrimitivesEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      PreprocessorSymbolTable preprocessorSymbolTable0 = defaultPassConfig0.getPreprocessorSymbolTable();
      assertNull(preprocessorSymbolTable0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      CheckLevel checkLevel0 = CheckLevel.OFF;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
      assertNotNull(processClosurePrimitives0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "e3s=kJ{a=.}9vh'";
      int int0 = 86;
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertNull(node0.getSourceFileName());
      assertEquals(86, node0.getType());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isAssign());
      assertEquals(false, node0.isEmpty());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDec());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) processClosurePrimitives0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      processClosurePrimitives0.visit(nodeTraversal0, node0, node0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNull(node0.getSourceFileName());
      assertEquals(86, node0.getType());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isAssign());
      assertEquals(false, node0.isEmpty());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDec());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      PreprocessorSymbolTable preprocessorSymbolTable0 = defaultPassConfig0.getPreprocessorSymbolTable();
      assertNull(preprocessorSymbolTable0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
      assertNotNull(processClosurePrimitives0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      int int0 = 33;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVarArgs());
      assertEquals(33, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFor());
      
      // Undeclared exception!
      try {
        processClosurePrimitives0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test2() {}
//   @Test(timeout = 4000)
//   public void test2()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
//       assertNotNull(defaultPassConfig0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       PreprocessorSymbolTable preprocessorSymbolTable0 = defaultPassConfig0.getPreprocessorSymbolTable();
//       assertNull(preprocessorSymbolTable0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       CheckLevel checkLevel0 = CheckLevel.WARNING;
//       ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
//       assertNotNull(processClosurePrimitives0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "UD";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isIf());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isParamList());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isTrue());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isCatch());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isWith());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isDec());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getErrorCount());
//       
//       processClosurePrimitives0.process(node0, node0);
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isIf());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isParamList());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isTrue());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isCatch());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isWith());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isDec());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getErrorCount());
//   }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      PreprocessorSymbolTable preprocessorSymbolTable0 = defaultPassConfig0.getPreprocessorSymbolTable();
      assertNull(preprocessorSymbolTable0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
      assertNotNull(processClosurePrimitives0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      double double0 = (-3250.74);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(39, node0.getType());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTry());
      
      // Undeclared exception!
      try {
        processClosurePrimitives0.hotSwapScript(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      PreprocessorSymbolTable preprocessorSymbolTable0 = defaultPassConfig0.getPreprocessorSymbolTable();
      assertNull(preprocessorSymbolTable0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      CheckLevel checkLevel0 = CheckLevel.OFF;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
      assertNotNull(processClosurePrimitives0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Set<String> set0 = processClosurePrimitives0.getExportedVariableNames();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }
}
