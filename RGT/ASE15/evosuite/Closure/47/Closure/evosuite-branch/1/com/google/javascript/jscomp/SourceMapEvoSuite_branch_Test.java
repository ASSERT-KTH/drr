/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:21:09 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.debugging.sourcemap.FilePosition;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.io.StringWriter;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

 
public class SourceMapEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      SourceMap.Format sourceMap_Format0 = SourceMap.Format.V3;
      SourceMap sourceMap0 = sourceMap_Format0.getInstance();
      assertNotNull(sourceMap0);
      
      int int0 = 1516;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1516, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(2147483647, node0.getSourceOffset());
      
      String string0 = "stringV1";
      node0.setSourceEncodedPosition(int0);
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1516, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(1516, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-2147482132, node0.getSourceOffset());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAdd());
      assertEquals(1516, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      
      LinkedList<SourceMap.LocationMapping> linkedList0 = new LinkedList<SourceMap.LocationMapping>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string1 = "1CW~9+<sH~)Z]d[m%";
      assertNotSame(string1, string0);
      
      SourceMap.LocationMapping sourceMap_LocationMapping0 = new SourceMap.LocationMapping(string1, string0);
      assertNotNull(sourceMap_LocationMapping0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = linkedList0.add(sourceMap_LocationMapping0);
      assertTrue(boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      sourceMap0.setPrefixMappings((List<SourceMap.LocationMapping>) linkedList0);
      assertEquals(1, linkedList0.size());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertNotSame(string0, string1);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("stringV1", simpleSourceFile0.toString());
      assertEquals("stringV1", simpleSourceFile0.getName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      
      node0.setStaticSourceFile((StaticSourceFile) simpleSourceFile0);
      assertNotSame(string0, string1);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("stringV1", simpleSourceFile0.toString());
      assertEquals("stringV1", simpleSourceFile0.getName());
      assertEquals(false, node0.isSetterDef());
      assertEquals("stringV1", node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1516, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(1516, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-2147482132, node0.getSourceOffset());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAdd());
      assertEquals(1516, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      
      FilePosition filePosition0 = new FilePosition(int0, int0);
      assertNotNull(filePosition0);
      assertEquals(1516, filePosition0.getLine());
      assertEquals(1516, filePosition0.getColumn());
      
      sourceMap0.addMapping(node0, filePosition0, filePosition0);
      assertEquals(false, node0.isSetterDef());
      assertEquals("stringV1", node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1516, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(1516, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-2147482132, node0.getSourceOffset());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAdd());
      assertEquals(1516, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(1516, filePosition0.getLine());
      assertEquals(1516, filePosition0.getColumn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      SourceMap.Format sourceMap_Format0 = SourceMap.Format.V1;
      SourceMap sourceMap0 = sourceMap_Format0.getInstance();
      assertNotNull(sourceMap0);
      
      int int0 = 1559;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(1559, node0.getType());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabelName());
      
      String string0 = "Cz~9+<J)Z]d[m]";
      node0.setSourceEncodedPosition(int0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(-2147482089, node0.getSourceOffset());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(1559, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(1559, node0.getType());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1559, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabelName());
      
      LinkedList<SourceMap.LocationMapping> linkedList0 = new LinkedList<SourceMap.LocationMapping>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SourceMap.LocationMapping sourceMap_LocationMapping0 = new SourceMap.LocationMapping(string0, string0);
      assertNotNull(sourceMap_LocationMapping0);
      
      boolean boolean1 = linkedList0.add(sourceMap_LocationMapping0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      
      sourceMap0.setPrefixMappings((List<SourceMap.LocationMapping>) linkedList0);
      assertEquals(1, linkedList0.size());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("Cz~9+<J)Z]d[m]", simpleSourceFile0.toString());
      assertEquals("Cz~9+<J)Z]d[m]", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertFalse(boolean0 == boolean1);
      
      node0.setStaticSourceFile((StaticSourceFile) simpleSourceFile0);
      assertEquals("Cz~9+<J)Z]d[m]", simpleSourceFile0.toString());
      assertEquals("Cz~9+<J)Z]d[m]", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(-2147482089, node0.getSourceOffset());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(1559, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(1559, node0.getType());
      assertEquals("Cz~9+<J)Z]d[m]", node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1559, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabelName());
      assertFalse(boolean0 == boolean1);
      
      FilePosition filePosition0 = new FilePosition(int0, int0);
      assertNotNull(filePosition0);
      assertEquals(1559, filePosition0.getLine());
      assertEquals(1559, filePosition0.getColumn());
      
      sourceMap0.addMapping(node0, filePosition0, filePosition0);
      assertEquals(1559, filePosition0.getLine());
      assertEquals(1559, filePosition0.getColumn());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(-2147482089, node0.getSourceOffset());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(1559, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(1559, node0.getType());
      assertEquals("Cz~9+<J)Z]d[m]", node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1559, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabelName());
      
      sourceMap0.addMapping(node0, filePosition0, filePosition0);
      assertEquals(1559, filePosition0.getLine());
      assertEquals(1559, filePosition0.getColumn());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(-2147482089, node0.getSourceOffset());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(1559, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(1559, node0.getType());
      assertEquals("Cz~9+<J)Z]d[m]", node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1559, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabelName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      SourceMap.Format sourceMap_Format0 = SourceMap.Format.V3;
      SourceMap sourceMap0 = sourceMap_Format0.getInstance();
      assertNotNull(sourceMap0);
      
      int int0 = 1516;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNull());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(1516, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isArrayLit());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNot());
      
      String string0 = "stringV1";
      node0.setSourceEncodedPosition(int0);
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(1516, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDo());
      assertEquals(1516, node0.getCharno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(1516, node0.getSourcePosition());
      assertEquals(-2147482132, node0.getSourceOffset());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNot());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("stringV1", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("stringV1", simpleSourceFile0.getName());
      
      node0.setStaticSourceFile((StaticSourceFile) simpleSourceFile0);
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isName());
      assertEquals(1516, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDo());
      assertEquals(1516, node0.getCharno());
      assertEquals(false, node0.isThrow());
      assertEquals("stringV1", node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(1516, node0.getSourcePosition());
      assertEquals(-2147482132, node0.getSourceOffset());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNot());
      assertEquals("stringV1", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("stringV1", simpleSourceFile0.getName());
      
      FilePosition filePosition0 = new FilePosition(int0, int0);
      assertNotNull(filePosition0);
      assertEquals(1516, filePosition0.getColumn());
      assertEquals(1516, filePosition0.getLine());
      
      sourceMap0.addMapping(node0, filePosition0, filePosition0);
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isName());
      assertEquals(1516, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDo());
      assertEquals(1516, node0.getCharno());
      assertEquals(false, node0.isThrow());
      assertEquals("stringV1", node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(1516, node0.getSourcePosition());
      assertEquals(-2147482132, node0.getSourceOffset());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNot());
      assertEquals(1516, filePosition0.getColumn());
      assertEquals(1516, filePosition0.getLine());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SourceMap.Format sourceMap_Format0 = SourceMap.Format.V2;
      byte byte0 = (byte) (-63);
      SourceMap sourceMap0 = sourceMap_Format0.getInstance();
      assertNotNull(sourceMap0);
      
      Node node0 = new Node((int) byte0);
      assertNotNull(node0);
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isString());
      assertEquals(-63, node0.getType());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      
      String string0 = "wpW>\\Qg~05c@u4Qk7=P";
      boolean boolean0 = node0.isString();
      assertFalse(boolean0);
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isString());
      assertEquals(-63, node0.getType());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      
      node0.setSourceEncodedPosition((int) byte0);
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(-2147479615, node0.getSourceOffset());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(4033, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isString());
      assertEquals(-63, node0.getType());
      assertEquals(false, node0.isFor());
      assertEquals(1048575, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(-63, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("wpW>\\Qg~05c@u4Qk7=P", simpleSourceFile0.toString());
      assertEquals("wpW>\\Qg~05c@u4Qk7=P", simpleSourceFile0.getName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(-2147479615, node0.getSourceOffset());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(4033, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isString());
      assertEquals(-63, node0.getType());
      assertEquals(false, node0.isFor());
      assertEquals(1048575, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(-63, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      
      node0.setStaticSourceFile((StaticSourceFile) simpleSourceFile0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("wpW>\\Qg~05c@u4Qk7=P", simpleSourceFile0.toString());
      assertEquals("wpW>\\Qg~05c@u4Qk7=P", simpleSourceFile0.getName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(-2147479615, node0.getSourceOffset());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(4033, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals("wpW>\\Qg~05c@u4Qk7=P", node0.getSourceFileName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isString());
      assertEquals(-63, node0.getType());
      assertEquals(false, node0.isFor());
      assertEquals(1048575, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(-63, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      
      FilePosition filePosition0 = new FilePosition((int) byte0, (int) byte0);
      assertNotNull(filePosition0);
      assertEquals(-63, filePosition0.getColumn());
      assertEquals(-63, filePosition0.getLine());
      
      sourceMap0.addMapping(node0, filePosition0, filePosition0);
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(-2147479615, node0.getSourceOffset());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(4033, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals("wpW>\\Qg~05c@u4Qk7=P", node0.getSourceFileName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isString());
      assertEquals(-63, node0.getType());
      assertEquals(false, node0.isFor());
      assertEquals(1048575, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(-63, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-63, filePosition0.getColumn());
      assertEquals(-63, filePosition0.getLine());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SourceMap.Format sourceMap_Format0 = SourceMap.Format.V2;
      byte byte0 = (byte) (-63);
      SourceMap sourceMap0 = sourceMap_Format0.getInstance();
      assertNotNull(sourceMap0);
      
      Node node0 = new Node((int) byte0);
      assertNotNull(node0);
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(-63, node0.getType());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      
      String string0 = "wpW>\\Qg~05c@u4Qk7=P";
      boolean boolean0 = node0.isString();
      assertFalse(boolean0);
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(-63, node0.getType());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(-63, node0.getType());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals("wpW>\\Qg~05c@u4Qk7=P", simpleSourceFile0.toString());
      assertEquals("wpW>\\Qg~05c@u4Qk7=P", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      
      node0.setStaticSourceFile((StaticSourceFile) simpleSourceFile0);
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIf());
      assertEquals("wpW>\\Qg~05c@u4Qk7=P", node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(-63, node0.getType());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals("wpW>\\Qg~05c@u4Qk7=P", simpleSourceFile0.toString());
      assertEquals("wpW>\\Qg~05c@u4Qk7=P", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      
      FilePosition filePosition0 = new FilePosition((int) byte0, (int) byte0);
      assertNotNull(filePosition0);
      assertEquals(-63, filePosition0.getLine());
      assertEquals(-63, filePosition0.getColumn());
      
      sourceMap0.addMapping(node0, filePosition0, filePosition0);
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIf());
      assertEquals("wpW>\\Qg~05c@u4Qk7=P", node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(-63, node0.getType());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(-63, filePosition0.getLine());
      assertEquals(-63, filePosition0.getColumn());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SourceMap.Format sourceMap_Format0 = SourceMap.Format.V2;
      SourceMap sourceMap0 = sourceMap_Format0.getInstance();
      assertNotNull(sourceMap0);
      
      double double0 = 2423.2105207659833;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDec());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(2147483647, node0.getSourceOffset());
      
      int int0 = (-697);
      FilePosition filePosition0 = new FilePosition(int0, int0);
      assertNotNull(filePosition0);
      assertEquals(-697, filePosition0.getColumn());
      assertEquals(-697, filePosition0.getLine());
      
      sourceMap0.addMapping(node0, filePosition0, filePosition0);
      assertEquals(-697, filePosition0.getColumn());
      assertEquals(-697, filePosition0.getLine());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDec());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(2147483647, node0.getSourceOffset());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)33;
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.name());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.toString());
      assertEquals(1, sourceMap_DetailLevel0.ordinal());
      
      String string0 = "`*LFD";
      Node node0 = Node.newString(string0, (int) byteArray0[0], (int) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabelName());
      assertEquals(-2147483648, node0.getSourceOffset());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasChildren());
      
      Node node1 = new Node((int) byte0, node0, node0, node0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(node1);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isGetElem());
      assertNull(node1.getSourceFileName());
      assertEquals(true, node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(2147483647, node1.getSourceOffset());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isVar());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isTrue());
      assertEquals(33, node1.getType());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isScript());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isGetterDef());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(true, node1.isGetProp());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabelName());
      assertEquals(-2147483648, node0.getSourceOffset());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasChildren());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      boolean boolean0 = sourceMap_DetailLevel0.apply(node0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(node0, node1);
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.name());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.toString());
      assertEquals(1, sourceMap_DetailLevel0.ordinal());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabelName());
      assertEquals(-2147483648, node0.getSourceOffset());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasChildren());
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byte byte0 = (byte)0;
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      assertEquals(1, sourceMap_DetailLevel0.ordinal());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.name());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.toString());
      
      String string0 = "\"q ^44M(0@3aO";
      Node node0 = Node.newString(string0, (int) byteArray0[0], (int) byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(node0);
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNumber());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-2147483648, node0.getSourceOffset());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      
      Node node1 = new Node((int) byte0, node0, node0, node0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNumber());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-2147483648, node0.getSourceOffset());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(-1, node1.getLineno());
      assertEquals(2147483647, node1.getSourceOffset());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getType());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isCase());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isSwitch());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isGetProp());
      assertEquals(1, node1.getChildCount());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isNot());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isAdd());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isSyntheticBlock());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      boolean boolean0 = sourceMap_DetailLevel0.apply(node0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(node0, node1);
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNumber());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-2147483648, node0.getSourceOffset());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(1, sourceMap_DetailLevel0.ordinal());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.name());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.toString());
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte byte0 = (byte)33;
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.name());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.toString());
      assertEquals(1, sourceMap_DetailLevel0.ordinal());
      
      String string0 = "`*LFD";
      Node node0 = Node.newString((int) byte0, string0, (int) byte0, (int) byte0);
      assertNotNull(node0);
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(-2147483615, node0.getSourceOffset());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(33, node0.getCharno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(33, node0.getType());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNot());
      assertEquals(33, node0.getLineno());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isGetProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(135201, node0.getSourcePosition());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isScript());
      
      boolean boolean0 = sourceMap_DetailLevel0.apply(node0);
      assertTrue(boolean0);
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(-2147483615, node0.getSourceOffset());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(33, node0.getCharno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(33, node0.getType());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNot());
      assertEquals(33, node0.getLineno());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isGetProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(135201, node0.getSourcePosition());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isScript());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.name());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.toString());
      assertEquals(1, sourceMap_DetailLevel0.ordinal());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.name());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.toString());
      assertEquals(1, sourceMap_DetailLevel0.ordinal());
      
      double double0 = 2423.2105207659833;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVar());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAnd());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      
      boolean boolean0 = sourceMap_DetailLevel0.apply(node0);
      assertFalse(boolean0);
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.name());
      assertEquals("SYMBOLS", sourceMap_DetailLevel0.toString());
      assertEquals(1, sourceMap_DetailLevel0.ordinal());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVar());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAnd());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SourceMap.Format sourceMap_Format0 = SourceMap.Format.DEFAULT;
      SourceMap sourceMap0 = sourceMap_Format0.getInstance();
      assertNotNull(sourceMap0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = JSType.EMPTY_TYPE_COMPONENT;
      assertEquals("Named type with empty name component", string0);
      assertNotNull(string0);
      
      sourceMap0.appendTo((Appendable) stringWriter0, string0);
      assertEquals("{\n\"version\":2,\n\"file\":\"Named type with empty name component\",\n\"lineCount\":1,\n\"lineMaps\":[\"\"],\n\"mappings\":[],\n\"sources\":[],\n\"names\":[]\n}\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SourceMap.Format sourceMap_Format0 = SourceMap.Format.V2;
      SourceMap sourceMap0 = sourceMap_Format0.getInstance();
      assertNotNull(sourceMap0);
      
      int int0 = 1546;
      sourceMap0.setStartingPosition(int0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      SourceMap.Format sourceMap_Format0 = SourceMap.Format.V3;
      SourceMap sourceMap0 = sourceMap_Format0.getInstance();
      assertNotNull(sourceMap0);
      
      sourceMap0.validate(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SourceMap.Format sourceMap_Format0 = SourceMap.Format.DEFAULT;
      SourceMap sourceMap0 = sourceMap_Format0.getInstance();
      assertNotNull(sourceMap0);
      
      String string0 = JSType.EMPTY_TYPE_COMPONENT;
      assertEquals("Named type with empty name component", string0);
      assertNotNull(string0);
      
      sourceMap0.setWrapperPrefix(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SourceMap.Format sourceMap_Format0 = SourceMap.Format.DEFAULT;
      SourceMap sourceMap0 = sourceMap_Format0.getInstance();
      assertNotNull(sourceMap0);
      
      sourceMap0.reset();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1516;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isParamList());
      assertEquals(1516, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSwitch());
      
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      assertEquals("ALL", sourceMap_DetailLevel0.toString());
      assertEquals(0, sourceMap_DetailLevel0.ordinal());
      assertEquals("ALL", sourceMap_DetailLevel0.name());
      
      boolean boolean0 = sourceMap_DetailLevel0.apply(node0);
      assertTrue(boolean0);
      assertEquals("ALL", sourceMap_DetailLevel0.toString());
      assertEquals(0, sourceMap_DetailLevel0.ordinal());
      assertEquals("ALL", sourceMap_DetailLevel0.name());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isParamList());
      assertEquals(1516, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSwitch());
  }
}
