/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:26:25 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.BreakStatement;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.DoLoop;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.ForInLoop;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.PropertyGet;
import com.google.javascript.rhino.head.ast.StringLiteral;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  //@Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 104;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(104, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(104, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNotNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      PropertyGet propertyGet0 = new PropertyGet(int0, int0);
      assertEquals(104, propertyGet0.getLength());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(104, propertyGet0.getPosition());
      assertEquals(104, propertyGet0.getAbsolutePosition());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals(33, propertyGet0.getType());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals("33", propertyGet0.toString());
      assertEquals(0, propertyGet0.depth());
      assertNotNull(propertyGet0);
      
      PropertyGet propertyGet1 = (PropertyGet)propertyGet0.setType(int0);
      assertSame(propertyGet0, propertyGet1);
      assertSame(propertyGet1, propertyGet0);
      assertEquals(104, propertyGet0.getLength());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals("104", propertyGet0.toString());
      assertEquals(104, propertyGet0.getPosition());
      assertEquals(104, propertyGet0.getAbsolutePosition());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals(104, propertyGet0.getType());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(0, propertyGet0.depth());
      assertEquals(104, propertyGet1.getType());
      assertEquals(104, propertyGet1.getLength());
      assertNull(propertyGet1.getJsDoc());
      assertEquals("104", propertyGet1.toString());
      assertEquals(-1, propertyGet1.getOperatorPosition());
      assertEquals(104, propertyGet1.getAbsolutePosition());
      assertEquals(0, propertyGet1.depth());
      assertEquals(false, propertyGet1.hasChildren());
      assertEquals(104, propertyGet1.getPosition());
      assertEquals(-1, propertyGet1.getLineno());
      assertNotNull(propertyGet1);
      
      astRoot0.addChildToFront((Node) propertyGet1);
      assertSame(propertyGet0, propertyGet1);
      assertSame(propertyGet1, propertyGet0);
      assertEquals(104, propertyGet0.getLength());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals("104", propertyGet0.toString());
      assertEquals(104, propertyGet0.getPosition());
      assertEquals(104, propertyGet0.getAbsolutePosition());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals(104, propertyGet0.getType());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(0, propertyGet0.depth());
      assertEquals(104, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(104, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(104, propertyGet1.getType());
      assertEquals(104, propertyGet1.getLength());
      assertNull(propertyGet1.getJsDoc());
      assertEquals("104", propertyGet1.toString());
      assertEquals(-1, propertyGet1.getOperatorPosition());
      assertEquals(104, propertyGet1.getAbsolutePosition());
      assertEquals(0, propertyGet1.depth());
      assertEquals(false, propertyGet1.hasChildren());
      assertEquals(104, propertyGet1.getPosition());
      assertEquals(-1, propertyGet1.getLineno());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      String string0 = "5LJheADv:~E";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean1, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      assertFalse(boolean0 == boolean1);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 53;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getEncodedSource());
      assertEquals(53, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(53, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNotNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      PropertyGet propertyGet0 = new PropertyGet(int0, int0);
      assertEquals(53, propertyGet0.getPosition());
      assertEquals("33", propertyGet0.toString());
      assertEquals(53, propertyGet0.getLength());
      assertEquals(0, propertyGet0.depth());
      assertEquals(33, propertyGet0.getType());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals(53, propertyGet0.getAbsolutePosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(-1, propertyGet0.getLineno());
      assertNotNull(propertyGet0);
      
      PropertyGet propertyGet1 = (PropertyGet)propertyGet0.setType(int0);
      assertSame(propertyGet0, propertyGet1);
      assertSame(propertyGet1, propertyGet0);
      assertEquals(53, propertyGet0.getPosition());
      assertEquals(53, propertyGet0.getLength());
      assertEquals("53", propertyGet0.toString());
      assertEquals(0, propertyGet0.depth());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals(53, propertyGet0.getType());
      assertEquals(53, propertyGet0.getAbsolutePosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals("53", propertyGet1.toString());
      assertEquals(false, propertyGet1.hasChildren());
      assertEquals(-1, propertyGet1.getOperatorPosition());
      assertEquals(-1, propertyGet1.getLineno());
      assertNull(propertyGet1.getJsDoc());
      assertEquals(53, propertyGet1.getType());
      assertEquals(53, propertyGet1.getPosition());
      assertEquals(53, propertyGet1.getAbsolutePosition());
      assertEquals(53, propertyGet1.getLength());
      assertEquals(0, propertyGet1.depth());
      assertNotNull(propertyGet1);
      
      astRoot0.addChildToFront((Node) propertyGet1);
      assertSame(propertyGet0, propertyGet1);
      assertSame(propertyGet1, propertyGet0);
      assertEquals(53, propertyGet0.getPosition());
      assertEquals(53, propertyGet0.getLength());
      assertEquals("53", propertyGet0.toString());
      assertEquals(0, propertyGet0.depth());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals(53, propertyGet0.getType());
      assertEquals(53, propertyGet0.getAbsolutePosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(-1, propertyGet0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(53, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(53, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("53", propertyGet1.toString());
      assertEquals(false, propertyGet1.hasChildren());
      assertEquals(-1, propertyGet1.getOperatorPosition());
      assertEquals(-1, propertyGet1.getLineno());
      assertNull(propertyGet1.getJsDoc());
      assertEquals(53, propertyGet1.getType());
      assertEquals(53, propertyGet1.getPosition());
      assertEquals(53, propertyGet1.getAbsolutePosition());
      assertEquals(53, propertyGet1.getLength());
      assertEquals(0, propertyGet1.depth());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      String string0 = "see";
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 46;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(46, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(46, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      PropertyGet propertyGet0 = new PropertyGet(int0, int0);
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(46, propertyGet0.getPosition());
      assertEquals("33", propertyGet0.toString());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(46, propertyGet0.getAbsolutePosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(33, propertyGet0.getType());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals(0, propertyGet0.depth());
      assertEquals(46, propertyGet0.getLength());
      assertNotNull(propertyGet0);
      
      PropertyGet propertyGet1 = (PropertyGet)propertyGet0.setType(int0);
      assertSame(propertyGet0, propertyGet1);
      assertSame(propertyGet1, propertyGet0);
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(46, propertyGet0.getPosition());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(46, propertyGet0.getAbsolutePosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals("46", propertyGet0.toString());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals(0, propertyGet0.depth());
      assertEquals(46, propertyGet0.getType());
      assertEquals(46, propertyGet0.getLength());
      assertEquals(46, propertyGet1.getPosition());
      assertNull(propertyGet1.getJsDoc());
      assertEquals(46, propertyGet1.getAbsolutePosition());
      assertEquals(-1, propertyGet1.getOperatorPosition());
      assertEquals(false, propertyGet1.hasChildren());
      assertEquals("46", propertyGet1.toString());
      assertEquals(46, propertyGet1.getLength());
      assertEquals(0, propertyGet1.depth());
      assertEquals(46, propertyGet1.getType());
      assertEquals(-1, propertyGet1.getLineno());
      assertNotNull(propertyGet1);
      
      astRoot0.addChildToFront((Node) propertyGet1);
      assertSame(propertyGet0, propertyGet1);
      assertSame(propertyGet1, propertyGet0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(46, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(46, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(46, propertyGet0.getPosition());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(46, propertyGet0.getAbsolutePosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals("46", propertyGet0.toString());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals(0, propertyGet0.depth());
      assertEquals(46, propertyGet0.getType());
      assertEquals(46, propertyGet0.getLength());
      assertEquals(46, propertyGet1.getPosition());
      assertNull(propertyGet1.getJsDoc());
      assertEquals(46, propertyGet1.getAbsolutePosition());
      assertEquals(-1, propertyGet1.getOperatorPosition());
      assertEquals(false, propertyGet1.hasChildren());
      assertEquals("46", propertyGet1.toString());
      assertEquals(46, propertyGet1.getLength());
      assertEquals(0, propertyGet1.depth());
      assertEquals(46, propertyGet1.getType());
      assertEquals(-1, propertyGet1.getLineno());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      String string0 = "2";
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 10;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(10, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(10, astRoot0.getPosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNotNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      PropertyGet propertyGet0 = new PropertyGet(int0, int0);
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(33, propertyGet0.getType());
      assertEquals(10, propertyGet0.getAbsolutePosition());
      assertEquals(10, propertyGet0.getPosition());
      assertEquals(10, propertyGet0.getLength());
      assertEquals(0, propertyGet0.depth());
      assertNull(propertyGet0.getJsDoc());
      assertEquals("33", propertyGet0.toString());
      assertNotNull(propertyGet0);
      
      PropertyGet propertyGet1 = (PropertyGet)propertyGet0.setType(int0);
      assertSame(propertyGet0, propertyGet1);
      assertSame(propertyGet1, propertyGet0);
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(10, propertyGet0.getType());
      assertEquals(10, propertyGet0.getAbsolutePosition());
      assertEquals(10, propertyGet0.getPosition());
      assertEquals(10, propertyGet0.getLength());
      assertEquals(0, propertyGet0.depth());
      assertNull(propertyGet0.getJsDoc());
      assertEquals("10", propertyGet0.toString());
      assertEquals(-1, propertyGet1.getLineno());
      assertEquals(10, propertyGet1.getAbsolutePosition());
      assertEquals(10, propertyGet1.getType());
      assertEquals(-1, propertyGet1.getOperatorPosition());
      assertEquals(10, propertyGet1.getLength());
      assertEquals(0, propertyGet1.depth());
      assertNull(propertyGet1.getJsDoc());
      assertEquals(false, propertyGet1.hasChildren());
      assertEquals(10, propertyGet1.getPosition());
      assertEquals("10", propertyGet1.toString());
      assertNotNull(propertyGet1);
      
      astRoot0.addChildToFront((Node) propertyGet1);
      assertSame(propertyGet0, propertyGet1);
      assertSame(propertyGet1, propertyGet0);
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(10, propertyGet0.getType());
      assertEquals(10, propertyGet0.getAbsolutePosition());
      assertEquals(10, propertyGet0.getPosition());
      assertEquals(10, propertyGet0.getLength());
      assertEquals(0, propertyGet0.depth());
      assertNull(propertyGet0.getJsDoc());
      assertEquals("10", propertyGet0.toString());
      assertEquals(-1, propertyGet1.getLineno());
      assertEquals(10, propertyGet1.getAbsolutePosition());
      assertEquals(10, propertyGet1.getType());
      assertEquals(-1, propertyGet1.getOperatorPosition());
      assertEquals(10, propertyGet1.getLength());
      assertEquals(0, propertyGet1.depth());
      assertNull(propertyGet1.getJsDoc());
      assertEquals(false, propertyGet1.hasChildren());
      assertEquals(10, propertyGet1.getPosition());
      assertEquals("10", propertyGet1.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(10, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(10, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      String string0 = "/VQ#kum8&U7Pr5zQ;`";
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 69;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(69, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(69, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      ForInLoop forInLoop0 = new ForInLoop();
      assertEquals(1, forInLoop0.getLength());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals("119", forInLoop0.toString());
      assertEquals(0, forInLoop0.depth());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getInPosition());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getPosition());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-1, forInLoop0.getRp());
      assertNotNull(forInLoop0);
      
      StaticSourceFile staticSourceFile0 = null;
      astRoot0.addChildrenToBack((Node) forInLoop0);
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(69, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(69, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals("119", forInLoop0.toString());
      assertEquals(0, forInLoop0.depth());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getInPosition());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getPosition());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-1, forInLoop0.getRp());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      String string0 = "8c]f6Ox NLk1eO@y6R,";
      boolean boolean1 = linkedHashSet0.add(string0);
      assertEquals("[8c]f6Ox NLk1eO@y6R,]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean1);
      assertEquals("[8c]f6Ox NLk1eO@y6R,]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(config0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 112;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(112, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(112, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNotNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      BreakStatement breakStatement0 = new BreakStatement(int0, int0);
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(112, breakStatement0.getAbsolutePosition());
      assertEquals(112, breakStatement0.getPosition());
      assertEquals(112, breakStatement0.getLength());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(120, breakStatement0.getType());
      assertEquals(0, breakStatement0.depth());
      assertEquals("120", breakStatement0.toString());
      assertEquals(false, breakStatement0.hasChildren());
      assertNotNull(breakStatement0);
      
      astRoot0.addChildToFront((Node) breakStatement0);
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(112, breakStatement0.getAbsolutePosition());
      assertEquals(112, breakStatement0.getPosition());
      assertEquals(112, breakStatement0.getLength());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(120, breakStatement0.getType());
      assertEquals(0, breakStatement0.depth());
      assertEquals("120", breakStatement0.toString());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(112, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(112, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      String string0 = "2QtxrMs";
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.isScript());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(112, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(112, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 10;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(10, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(10, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertNotNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      String string0 = "/VQ#kum8&U7Pr5zQ;`";
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(10, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(10, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isComma());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetProp());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = ";}Fs[vFF=u1\\7*";
      StringLiteral stringLiteral0 = new StringLiteral();
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(-1, stringLiteral0.getPosition());
      assertEquals(-1, stringLiteral0.getAbsolutePosition());
      assertEquals(41, stringLiteral0.getType());
      assertEquals("41", stringLiteral0.toString());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(1, stringLiteral0.getLength());
      assertNull(stringLiteral0.getValue());
      assertEquals(0, stringLiteral0.depth());
      assertNotNull(stringLiteral0);
      
      AstRoot astRoot0 = stringLiteral0.getAstRoot();
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(-1, stringLiteral0.getPosition());
      assertEquals(-1, stringLiteral0.getAbsolutePosition());
      assertEquals(41, stringLiteral0.getType());
      assertEquals("41", stringLiteral0.toString());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(1, stringLiteral0.getLength());
      assertNull(stringLiteral0.getValue());
      assertEquals(0, stringLiteral0.depth());
      assertNull(astRoot0);
      
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(";}Fs[vFF=u1\\7*", simpleSourceFile0.getName());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals(";}Fs[vFF=u1\\7*", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 49;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(49, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(49, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertNotNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      NumberLiteral numberLiteral0 = (NumberLiteral)Node.newNumber((double) int0);
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(49.0, numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getJsDoc());
      assertNull(numberLiteral0.getValue());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(49.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(1, numberLiteral0.getLength());
      assertNotNull(numberLiteral0);
      
      astRoot0.addChildrenToBack((Node) numberLiteral0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(49, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(49, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(49.0, numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getJsDoc());
      assertNull(numberLiteral0.getValue());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(49.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(1, numberLiteral0.getLength());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      String string0 = "k";
      boolean boolean1 = linkedHashSet0.add(string0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[k]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(-1, comment0.getLineno());
      assertEquals("k", comment0.getValue());
      assertEquals(49, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals(false, comment0.hasChildren());
      assertEquals(49, comment0.getLength());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(49, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertNotNull(comment0);
      
      numberLiteral0.setJsDocNode(comment0);
      assertEquals(-1, comment0.getLineno());
      assertEquals("k", comment0.getValue());
      assertEquals(49, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals(false, comment0.hasChildren());
      assertEquals(49, comment0.getLength());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(49, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(49.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("k", numberLiteral0.getJsDoc());
      assertNull(numberLiteral0.getValue());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(49.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(1, numberLiteral0.getLength());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean1);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[k]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(config0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 112;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(112, astRoot0.getAbsolutePosition());
      assertEquals(112, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertNotNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      BreakStatement breakStatement0 = new BreakStatement(int0, int0);
      assertEquals(112, breakStatement0.getPosition());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals("120", breakStatement0.toString());
      assertEquals(120, breakStatement0.getType());
      assertEquals(0, breakStatement0.depth());
      assertEquals(112, breakStatement0.getAbsolutePosition());
      assertEquals(112, breakStatement0.getLength());
      assertEquals(-1, breakStatement0.getLineno());
      assertNotNull(breakStatement0);
      
      astRoot0.addChildToFront((Node) breakStatement0);
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(112, astRoot0.getAbsolutePosition());
      assertEquals(112, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(112, breakStatement0.getPosition());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals("120", breakStatement0.toString());
      assertEquals(120, breakStatement0.getType());
      assertEquals(0, breakStatement0.depth());
      assertEquals(112, breakStatement0.getAbsolutePosition());
      assertEquals(112, breakStatement0.getLength());
      assertEquals(-1, breakStatement0.getLineno());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      Name name0 = new Name(int0);
      assertNull(name0.getIdentifier());
      assertEquals(-1, name0.getLineno());
      assertEquals(1, name0.getLength());
      assertNull(name0.getJsDoc());
      assertEquals("39", name0.toString());
      assertEquals(39, name0.getType());
      assertEquals(112, name0.getAbsolutePosition());
      assertEquals(false, name0.hasChildren());
      assertNull(name0.getString());
      assertEquals(112, name0.getPosition());
      assertEquals(0, name0.depth());
      assertEquals(0, name0.length());
      assertNotNull(name0);
      
      breakStatement0.setBreakLabel(name0);
      assertEquals(112, breakStatement0.getPosition());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals("120", breakStatement0.toString());
      assertEquals(120, breakStatement0.getType());
      assertEquals(0, breakStatement0.depth());
      assertEquals(112, breakStatement0.getAbsolutePosition());
      assertEquals(112, breakStatement0.getLength());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(1, name0.depth());
      assertNull(name0.getIdentifier());
      assertEquals(-1, name0.getLineno());
      assertEquals(1, name0.getLength());
      assertNull(name0.getJsDoc());
      assertEquals("39", name0.toString());
      assertEquals(39, name0.getType());
      assertEquals(112, name0.getAbsolutePosition());
      assertEquals(false, name0.hasChildren());
      assertNull(name0.getString());
      assertEquals(0, name0.getPosition());
      assertEquals(0, name0.length());
      
      String string0 = "?d\\";
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 59;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(59, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(59, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNotNull(astRoot0);
      
      AstRoot astRoot1 = (AstRoot)astRoot0.setType(int0);
      assertSame(astRoot0, astRoot1);
      assertSame(astRoot1, astRoot0);
      assertEquals(59, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(59, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(59, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("59", astRoot0.toString());
      assertNull(astRoot1.getJsDoc());
      assertEquals(false, astRoot1.isInStrictMode());
      assertEquals(59, astRoot1.getPosition());
      assertEquals(1, astRoot1.getLength());
      assertEquals(-1, astRoot1.getEndLineno());
      assertEquals(0, astRoot1.getFunctionCount());
      assertEquals(59, astRoot1.getAbsolutePosition());
      assertEquals(0, astRoot1.getParamCount());
      assertEquals(-1, astRoot1.getEncodedSourceStart());
      assertEquals(false, astRoot1.hasChildren());
      assertEquals(0, astRoot1.depth());
      assertEquals(-1, astRoot1.getLineno());
      assertEquals(-1, astRoot1.getEncodedSourceEnd());
      assertEquals(59, astRoot1.getType());
      assertNull(astRoot1.getEncodedSource());
      assertEquals(0, astRoot1.getRegexpCount());
      assertEquals("59", astRoot1.toString());
      assertEquals(-1, astRoot1.getBaseLineno());
      assertNull(astRoot1.getSourceName());
      assertNotNull(astRoot1);
      
      StaticSourceFile staticSourceFile0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      String string0 = "\n * @";
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertSame(astRoot0, astRoot1);
      assertEquals(59, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(59, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(59, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("59", astRoot0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDo());
      assertEquals(124, node0.getType());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCatch());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSetterDef());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(true, node0.isEmpty());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(astRoot0);
      
      DoLoop doLoop0 = new DoLoop(int0, int0);
      assertEquals(0, doLoop0.getLength());
      assertEquals(0, doLoop0.getPosition());
      assertEquals(-1, doLoop0.getLineno());
      assertEquals(-1, doLoop0.getRp());
      assertEquals(0, doLoop0.getAbsolutePosition());
      assertEquals(0, doLoop0.depth());
      assertNull(doLoop0.getJsDoc());
      assertEquals(-1, doLoop0.getWhilePosition());
      assertEquals("118", doLoop0.toString());
      assertEquals(-1, doLoop0.getLp());
      assertEquals(false, doLoop0.hasChildren());
      assertEquals(118, doLoop0.getType());
      assertNotNull(doLoop0);
      
      astRoot0.addChildrenToFront((Node) doLoop0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, doLoop0.getLength());
      assertEquals(0, doLoop0.getPosition());
      assertEquals(-1, doLoop0.getLineno());
      assertEquals(-1, doLoop0.getRp());
      assertEquals(0, doLoop0.getAbsolutePosition());
      assertEquals(0, doLoop0.depth());
      assertNull(doLoop0.getJsDoc());
      assertEquals(-1, doLoop0.getWhilePosition());
      assertEquals("118", doLoop0.toString());
      assertEquals(-1, doLoop0.getLp());
      assertEquals(false, doLoop0.hasChildren());
      assertEquals(118, doLoop0.getType());
      
      StaticSourceFile staticSourceFile0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      String string0 = "8";
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-1463);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1463, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1463, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      PropertyGet propertyGet0 = new PropertyGet(int0, int0);
      assertEquals(-1463, propertyGet0.getLength());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertNull(propertyGet0.getJsDoc());
      assertEquals("33", propertyGet0.toString());
      assertEquals(33, propertyGet0.getType());
      assertEquals(0, propertyGet0.depth());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(-1463, propertyGet0.getAbsolutePosition());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(-1463, propertyGet0.getPosition());
      assertNotNull(propertyGet0);
      
      int int1 = 24;
      PropertyGet propertyGet1 = (PropertyGet)propertyGet0.setType(int1);
      assertSame(propertyGet1, propertyGet0);
      assertSame(propertyGet0, propertyGet1);
      assertEquals(0, propertyGet1.depth());
      assertEquals(-1463, propertyGet1.getPosition());
      assertEquals(-1463, propertyGet1.getAbsolutePosition());
      assertEquals(-1, propertyGet1.getOperatorPosition());
      assertNull(propertyGet1.getJsDoc());
      assertEquals(24, propertyGet1.getType());
      assertEquals(-1463, propertyGet1.getLength());
      assertEquals(-1, propertyGet1.getLineno());
      assertEquals("24", propertyGet1.toString());
      assertEquals(false, propertyGet1.hasChildren());
      assertEquals(-1463, propertyGet0.getLength());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertNull(propertyGet0.getJsDoc());
      assertEquals("24", propertyGet0.toString());
      assertEquals(0, propertyGet0.depth());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(-1463, propertyGet0.getAbsolutePosition());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(24, propertyGet0.getType());
      assertEquals(-1463, propertyGet0.getPosition());
      assertNotNull(propertyGet1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      astRoot0.addChildToFront((Node) propertyGet1);
      assertSame(propertyGet1, propertyGet0);
      assertSame(propertyGet0, propertyGet1);
      assertEquals(0, propertyGet1.depth());
      assertEquals(-1463, propertyGet1.getPosition());
      assertEquals(-1463, propertyGet1.getAbsolutePosition());
      assertEquals(-1, propertyGet1.getOperatorPosition());
      assertNull(propertyGet1.getJsDoc());
      assertEquals(24, propertyGet1.getType());
      assertEquals(-1463, propertyGet1.getLength());
      assertEquals(-1, propertyGet1.getLineno());
      assertEquals("24", propertyGet1.toString());
      assertEquals(false, propertyGet1.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1463, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1463, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1463, propertyGet0.getLength());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertNull(propertyGet0.getJsDoc());
      assertEquals("24", propertyGet0.toString());
      assertEquals(0, propertyGet0.depth());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(-1463, propertyGet0.getAbsolutePosition());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(24, propertyGet0.getType());
      assertEquals(-1463, propertyGet0.getPosition());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String string0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
