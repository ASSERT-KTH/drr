/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 05:20:25 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class ProxyObjectTypeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isResolved());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createNativeAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, prototypeObjectType0, numberType0);
      assertNotNull(indexedType0);
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isResolved());
      
      ObjectType objectType0 = indexedType0.getTypeOfThis();
      assertNull(objectType0);
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      
      ObjectType objectType0 = proxyObjectType0.getTypeOfThis();
      assertNull(objectType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noResolvedType0, (JSType) noResolvedType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      EnumType enumType0 = noResolvedType0.toMaybeEnumType();
      assertNull(enumType0);
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType1 = jSTypeRegistry0.createParameterizedType((ObjectType) enumType0, (JSType) parameterizedType0);
      assertNotNull(parameterizedType1);
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(parameterizedType0, parameterizedType1);
      assertFalse(parameterizedType0.equals((Object)parameterizedType1));
      
      JSType jSType0 = parameterizedType1.getIndexType();
      assertNull(jSType0);
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(parameterizedType0, parameterizedType1);
      assertFalse(parameterizedType0.equals((Object)parameterizedType1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "vWL|+@]WaNztu.k";
      int int0 = 22;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = namedType0.getIndexType();
      assertNull(jSType0);
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "vWL|+@]WaNztu.k";
      int int0 = 22;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = namedType0.getParentScope();
      assertNull(objectType0);
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNullType());
      
      JSType jSType0 = indexedType0.getParameterType();
      assertNull(jSType0);
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "RANGE_ERROR_FUNCTION_TYPE";
      int int0 = (-14);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = namedType0.getParameterType();
      assertNull(jSType0);
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = proxyObjectType0.getConstructor();
      assertNull(functionType0);
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "cs!x]H";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("cs!x]H", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      
      FunctionType functionType0 = templateType0.getConstructor();
      assertNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("cs!x]H", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      
      Set<String> set0 = proxyObjectType0.getOwnPropertyNames();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "cs!x]H";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("cs!x]H", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Set<String> set0 = templateType0.getOwnPropertyNames();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("cs!x]H", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      String string0 = "UxIfvs!";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      
      ObjectType.Property objectType_Property0 = proxyObjectType0.getOwnSlot(string0);
      assertNull(objectType_Property0);
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createNativeAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, prototypeObjectType0, numberType0);
      assertNotNull(indexedType0);
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      
      String string0 = "^*O>L5Ip9W";
      JSDocInfo jSDocInfo0 = numberType0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      indexedType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      String string0 = "UxIfvs!";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      proxyObjectType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "c57";
      int int0 = (-35);
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, proxyObjectType0, proxyObjectType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      
      JSDocInfo jSDocInfo0 = parameterizedType0.getOwnPropertyJSDocInfo(string0);
      assertNull(jSDocInfo0);
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      
      namedType0.setJSDocInfo(jSDocInfo0);
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("<Any Type>", allType0.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      proxyObjectType0.setJSDocInfo(jSDocInfo0);
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      String string0 = "8|azTay";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)proxyObjectType0.getPropertyType(string0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "c57";
      int int0 = (-35);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Set<String> set0 = noType0.getPropertyNames();
      assertNotNull(set0);
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      namedType0.collectPropertyNames(set0);
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, (JSType) objectType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      
      Set<String> set0 = parameterizedType0.getPropertyNames();
      assertNotNull(set0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, (JSType) objectType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      
      int int0 = parameterizedType0.getPropertiesCount();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "RANGE_ERROR_FUNCTION_TYPE";
      int int0 = (-14);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      
      int int1 = namedType0.getPropertiesCount();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      String string0 = "8|azTay";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      
      boolean boolean1 = proxyObjectType0.isPropertyInExterns(string0);
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEnumType());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createNativeAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, prototypeObjectType0, numberType0);
      assertNotNull(indexedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      
      String string0 = "^*O>L5Ip9W";
      boolean boolean0 = indexedType0.isPropertyInExterns(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      String string0 = "}";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.isAllType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.isAllType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = proxyObjectType0.isPropertyTypeInferred(string0);
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.isAllType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "ALWAYS_TRUE";
      int int0 = 20;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = namedType0.isPropertyTypeInferred(string0);
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noResolvedType0, (JSType) noResolvedType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      EnumType enumType0 = noResolvedType0.toMaybeEnumType();
      assertNull(enumType0);
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType1 = jSTypeRegistry0.createParameterizedType((ObjectType) enumType0, (JSType) parameterizedType0);
      assertNotNull(parameterizedType1);
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(parameterizedType0, parameterizedType1);
      assertFalse(parameterizedType0.equals((Object)parameterizedType1));
      
      String string0 = "\"/l3";
      Node node0 = parameterizedType1.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(parameterizedType0, parameterizedType1);
      assertFalse(parameterizedType0.equals((Object)parameterizedType1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "Wr&8wpeC*kti@c";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals("Wr&8wpeC*kti@c", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = templateType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals("Wr&8wpeC*kti@c", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "c57";
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      
      boolean boolean0 = proxyObjectType0.isPropertyTypeDeclared(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "Wr&8wpeC*kti@c";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("Wr&8wpeC*kti@c", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      
      boolean boolean1 = templateType0.hasOwnDeclaredProperty(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("Wr&8wpeC*kti@c", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      String string0 = "}";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      
      boolean boolean1 = proxyObjectType0.removeProperty(string0);
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "ALWAYS_TRUE";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("ALWAYS_TRUE", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      
      boolean boolean0 = templateType0.removeProperty(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("ALWAYS_TRUE", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      
      ObjectType objectType0 = noType0.getImplicitPrototype();
      assertNull(objectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, noType0);
      assertNotNull(indexedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      
      ObjectType objectType1 = indexedType0.getParentScope();
      assertNull(objectType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      
      ProxyObjectType proxyObjectType1 = (ProxyObjectType)JSType.getGreatestSubtype(proxyObjectType0, allType0);
      assertNotNull(proxyObjectType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType1.isStringValueType());
      assertEquals(false, proxyObjectType1.isNullType());
      assertEquals(false, proxyObjectType1.isNumberValueType());
      assertEquals(false, proxyObjectType1.isRecordType());
      assertEquals(false, proxyObjectType1.isUnionType());
      assertEquals(false, proxyObjectType1.hasCachedValues());
      assertEquals(false, proxyObjectType1.isEnumElementType());
      assertEquals(false, proxyObjectType1.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType1.isNominalConstructor());
      assertEquals(false, proxyObjectType1.isBooleanValueType());
      assertEquals(false, proxyObjectType1.isFunctionType());
      assertEquals(false, proxyObjectType1.isEnumType());
      assertEquals(false, proxyObjectType1.isVoidType());
      assertEquals(false, proxyObjectType1.isResolved());
      assertEquals(false, proxyObjectType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType1.getPossibleToBooleanOutcomes());
      assertSame(proxyObjectType0, proxyObjectType1);
      assertSame(proxyObjectType1, proxyObjectType0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      
      Iterable<ObjectType> iterable0 = proxyObjectType0.getCtorImplementedInterfaces();
      assertNotNull(iterable0);
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "RANGE_ERROR_FUNCTION_TYPE";
      int int0 = (-14);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      
      Iterable<ObjectType> iterable0 = namedType0.getCtorImplementedInterfaces();
      assertNotNull(iterable0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = proxyObjectType0.isFunctionPrototypeType();
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "vWL|+@]WaNztu.k";
      int int0 = 22;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = namedType0.isFunctionPrototypeType();
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumElementType());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumElementType());
      
      boolean boolean1 = proxyObjectType0.isNativeObjectType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumElementType());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "ALWAYS_TRUE";
      int int0 = 20;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = namedType0.isNativeObjectType();
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      String string0 = "UxIfvs!";
      int int0 = 65139;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabelName());
      assertEquals(65139, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isArrayLit());
      assertEquals(266813439, node0.getSourcePosition());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetterDef());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isCatch());
      assertEquals(65139, node0.getLineno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      
      // Undeclared exception!
      try {
        boolean boolean1 = proxyObjectType0.defineInferredProperty(string0, (JSType) stringType0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "vWL|+@]WaNztu.k";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noResolvedType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = errorFunctionType0.getRootNode();
      assertNull(node0);
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = proxyObjectType0.defineInferredProperty(string0, (JSType) proxyObjectType0, node0);
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, (JSType) objectType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      
      String string0 = parameterizedType0.getNormalizedReferenceName();
      assertNotNull(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      String string0 = "UxIfvs!";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isRecordType());
      
      ObjectType.Property objectType_Property0 = proxyObjectType0.getSlot(string0);
      assertNull(objectType_Property0);
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isRecordType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, (JSType) objectType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        boolean boolean0 = parameterizedType0.isOrdinaryFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "a<!";
      int int0 = (-13);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSDocInfo jSDocInfo0 = namedType0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      
      String string0 = "cs!x]H";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("cs!x]H", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      
      JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderEquality((JSType) noType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("cs!x]H", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNullType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNullType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType1 = (StringType)stringType0.getGreatestSubtype((JSType) proxyObjectType0);
      assertNotNull(stringType1);
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType1.isNullType());
      assertEquals(true, stringType1.matchesObjectContext());
      assertEquals(false, stringType1.isNumberValueType());
      assertEquals(false, stringType1.isBooleanValueType());
      assertEquals(false, stringType1.isTemplateType());
      assertEquals(false, stringType1.isVoidType());
      assertEquals(false, stringType1.isNominalConstructor());
      assertEquals(false, stringType1.isCheckedUnknownType());
      assertEquals(true, stringType1.matchesNumberContext());
      assertEquals(false, stringType1.isNoResolvedType());
      assertEquals(false, stringType1.isNoObjectType());
      assertEquals(false, stringType1.isAllType());
      assertEquals(true, stringType1.matchesStringContext());
      assertEquals(false, stringType1.isFunctionPrototypeType());
      assertEquals(false, stringType1.isNominalType());
      assertEquals(false, stringType1.isInterface());
      assertEquals(false, stringType1.isResolved());
      assertEquals("string", stringType1.getDisplayName());
      assertEquals(false, stringType1.isUnionType());
      assertEquals(false, stringType1.isOrdinaryFunction());
      assertEquals(false, stringType1.isEnumElementType());
      assertEquals(false, stringType1.isEnumType());
      assertEquals(false, stringType1.isRecordType());
      assertEquals(false, stringType1.isConstructor());
      assertEquals(false, stringType1.isNoType());
      assertEquals(true, stringType1.isStringValueType());
      assertEquals(false, stringType1.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType1.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNullType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertSame(stringType0, stringType1);
      assertSame(stringType1, stringType0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noResolvedType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      
      String string0 = proxyObjectType0.toString();
      assertNotNull(string0);
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals("NoResolvedType", string0);
  }

  @Test(timeout = 4000)
  public void test47() {}
//   @Test(timeout = 4000)
//   public void test47()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       String string0 = "cs!x]H";
//       TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
//       assertNotNull(templateType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, templateType0.isBooleanValueType());
//       assertEquals(false, templateType0.isNumberValueType());
//       assertEquals(false, templateType0.isResolved());
//       assertEquals(false, templateType0.isVoidType());
//       assertEquals(false, templateType0.isNominalConstructor());
//       assertEquals(false, templateType0.hasCachedValues());
//       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
//       assertEquals("cs!x]H", templateType0.getReferenceName());
//       assertEquals(false, templateType0.isEnumElementType());
//       assertEquals(false, templateType0.isRecordType());
//       assertEquals(false, templateType0.isFunctionType());
//       assertEquals(false, templateType0.isUnionType());
//       assertEquals(false, templateType0.isStringValueType());
//       assertEquals(false, templateType0.isEnumType());
//       assertEquals(true, templateType0.isTemplateType());
//       assertEquals(false, templateType0.isFunctionPrototypeType());
//       assertEquals(false, templateType0.isNullType());
//       
//       int int0 = templateType0.hashCode();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, templateType0.isBooleanValueType());
//       assertEquals(false, templateType0.isNumberValueType());
//       assertEquals(false, templateType0.isResolved());
//       assertEquals(false, templateType0.isVoidType());
//       assertEquals(false, templateType0.isNominalConstructor());
//       assertEquals(false, templateType0.hasCachedValues());
//       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
//       assertEquals("cs!x]H", templateType0.getReferenceName());
//       assertEquals(false, templateType0.isEnumElementType());
//       assertEquals(false, templateType0.isRecordType());
//       assertEquals(false, templateType0.isFunctionType());
//       assertEquals(false, templateType0.isUnionType());
//       assertEquals(false, templateType0.isStringValueType());
//       assertEquals(false, templateType0.isEnumType());
//       assertEquals(true, templateType0.isTemplateType());
//       assertEquals(false, templateType0.isFunctionPrototypeType());
//       assertEquals(false, templateType0.isNullType());
//       assertEquals(9, int0);
//   }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createNativeAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, prototypeObjectType0, numberType0);
      assertNotNull(indexedType0);
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      IndexedType indexedType1 = (IndexedType)indexedType0.collapseUnion();
      assertNotNull(indexedType1);
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType1.isFunctionType());
      assertEquals(false, indexedType1.isNullType());
      assertEquals(false, indexedType1.isStringValueType());
      assertEquals(false, indexedType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType1.isEnumElementType());
      assertEquals(false, indexedType1.isUnionType());
      assertEquals(false, indexedType1.isEnumType());
      assertEquals(false, indexedType1.hasCachedValues());
      assertEquals(false, indexedType1.isNumberValueType());
      assertEquals(false, indexedType1.isResolved());
      assertEquals(false, indexedType1.isRecordType());
      assertEquals(false, indexedType1.isFunctionPrototypeType());
      assertEquals(false, indexedType1.isVoidType());
      assertEquals(false, indexedType1.isNominalConstructor());
      assertEquals(false, indexedType1.isTemplateType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertSame(indexedType0, indexedType1);
      assertSame(indexedType1, indexedType0);
      
      boolean boolean0 = indexedType1.canAssignTo((JSType) prototypeObjectType0);
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType1.isFunctionType());
      assertEquals(false, indexedType1.isNullType());
      assertEquals(false, indexedType1.isStringValueType());
      assertEquals(false, indexedType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType1.isEnumElementType());
      assertEquals(false, indexedType1.isUnionType());
      assertEquals(false, indexedType1.isEnumType());
      assertEquals(false, indexedType1.hasCachedValues());
      assertEquals(false, indexedType1.isNumberValueType());
      assertEquals(false, indexedType1.isResolved());
      assertEquals(false, indexedType1.isRecordType());
      assertEquals(false, indexedType1.isFunctionPrototypeType());
      assertEquals(false, indexedType1.isVoidType());
      assertEquals(false, indexedType1.isNominalConstructor());
      assertEquals(false, indexedType1.isTemplateType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
      assertSame(indexedType0, indexedType1);
      assertSame(indexedType1, indexedType0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "Wr&8wpeC*kti@c";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("Wr&8wpeC*kti@c", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = templateType0.matchesNumberContext();
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("Wr&8wpeC*kti@c", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "RANGE_ERROR_FUNCTION_TYPE";
      int int0 = (-14);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = namedType0.matchesStringContext();
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalType());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createNativeAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, prototypeObjectType0, numberType0);
      assertNotNull(indexedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      
      boolean boolean0 = indexedType0.isEnumElementType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "vWL|+@]WaNztu.k";
      int int0 = 22;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      EnumType enumType0 = namedType0.toMaybeEnumType();
      assertNull(enumType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "vWL|+@]WaNztu.k";
      int int0 = 22;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = namedType0.canBeCalled();
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "a<!";
      int int0 = (-13);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = namedType0.isInstanceType();
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, (JSType) objectType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      
      // Undeclared exception!
      try {
        boolean boolean0 = parameterizedType0.isNullable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "vWL|+@]WaNztu.k";
      int int0 = 22;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, namedType0, namedType0);
      assertNotNull(indexedType0);
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNullType());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = indexedType0.isSubtype((JSType) noResolvedType0);
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNullType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57() {}
//   @Test(timeout = 4000)
//   public void test57()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       String string0 = "vWL|+@]WaNztu.k";
//       int int0 = 22;
//       NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
//       assertNotNull(namedType0);
//       assertEquals(false, namedType0.hasCachedValues());
//       assertEquals(false, namedType0.isNominalConstructor());
//       assertEquals(false, namedType0.isEnumType());
//       assertEquals(false, namedType0.isFunctionPrototypeType());
//       assertEquals(false, namedType0.isResolved());
//       assertEquals(false, namedType0.isNumberValueType());
//       assertEquals(false, namedType0.isUnionType());
//       assertEquals(false, namedType0.isTemplateType());
//       assertEquals(false, namedType0.isBooleanValueType());
//       assertEquals(false, namedType0.isRecordType());
//       assertEquals(false, namedType0.isEnumElementType());
//       assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, namedType0.isFunctionType());
//       assertEquals(false, namedType0.isVoidType());
//       assertEquals(false, namedType0.isStringValueType());
//       assertEquals(false, namedType0.isNullType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       String string1 = namedType0.toDebugHashCodeString();
//       assertNotNull(string1);
//       assertEquals(false, namedType0.hasCachedValues());
//       assertEquals(false, namedType0.isNominalConstructor());
//       assertEquals(false, namedType0.isEnumType());
//       assertEquals(false, namedType0.isFunctionPrototypeType());
//       assertEquals(false, namedType0.isResolved());
//       assertEquals(false, namedType0.isNumberValueType());
//       assertEquals(false, namedType0.isUnionType());
//       assertEquals(false, namedType0.isTemplateType());
//       assertEquals(false, namedType0.isBooleanValueType());
//       assertEquals(false, namedType0.isRecordType());
//       assertEquals(false, namedType0.isEnumElementType());
//       assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, namedType0.isFunctionType());
//       assertEquals(false, namedType0.isVoidType());
//       assertEquals(false, namedType0.isStringValueType());
//       assertEquals(false, namedType0.isNullType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals("{proxy:{9}}", string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//   }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "vWL|+@]WaNztu.k";
      int int0 = 22;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, namedType0, namedType0);
      assertNotNull(indexedType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = indexedType0.isCheckedUnknownType();
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      
      boolean boolean1 = proxyObjectType0.matchesObjectContext();
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      String string0 = "8|azTay";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isStringValueType());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isStringValueType());
      
      JSType jSType0 = proxyObjectType0.findPropertyType(string0);
      assertNull(jSType0);
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "RANGE_ERROR_FUNCTION_TYPE";
      int int0 = (-14);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, namedType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType1 = (NamedType)namedType0.getLeastSupertype((JSType) proxyObjectType0);
      assertNotNull(namedType1);
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(false, namedType1.isEnumElementType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isResolved());
      assertSame(namedType0, namedType1);
      assertSame(namedType1, namedType0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createNativeAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, prototypeObjectType0, numberType0);
      assertNotNull(indexedType0);
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = indexedType0.isRecordType();
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "ALWAYS_TRUE";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("ALWAYS_TRUE", templateType0.getReferenceName());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isBooleanValueType());
      
      EnumType enumType0 = null;
      templateType0.matchConstraint((ObjectType) enumType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("ALWAYS_TRUE", templateType0.getReferenceName());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "vWL|+@]WaNztu.k";
      int int0 = 22;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = namedType0.isNominalConstructor();
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "vWL|+@]WaNztu.k";
      int int0 = 22;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)namedType0.resolveInternal(simpleErrorReporter0, namedType0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isResolved());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createNativeAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, prototypeObjectType0, numberType0);
      assertNotNull(indexedType0);
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = indexedType0.isEmptyType();
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }
}
