/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:49:28 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.Block;
import com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Label;
import com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Name;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.Scope;
import com.google.javascript.jscomp.mozilla.rhino.ast.ThrowStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.TryStatement;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.Node;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getPosition());
      
      int int0 = 697;
      Block block0 = new Block(int0, int0);
      assertNotNull(block0);
      assertEquals(697, block0.getAbsolutePosition());
      assertEquals(-1, block0.getLineno());
      assertEquals("129", block0.toString());
      assertEquals(697, block0.getPosition());
      assertEquals(0, block0.depth());
      assertEquals(false, block0.hasChildren());
      assertEquals(697, block0.getLength());
      assertNull(block0.getJsDoc());
      assertEquals(129, block0.getType());
      
      String string0 = block0.toSource();
      assertNotNull(string0);
      assertEquals(697, block0.getAbsolutePosition());
      assertEquals(-1, block0.getLineno());
      assertEquals("129", block0.toString());
      assertEquals(697, block0.getPosition());
      assertEquals(0, block0.depth());
      assertEquals(false, block0.hasChildren());
      assertEquals(697, block0.getLength());
      assertNull(block0.getJsDoc());
      assertEquals(129, block0.getType());
      assertEquals("{\n}\n", string0);
      
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      LabeledStatement labeledStatement0 = new LabeledStatement(int0, int0);
      assertNotNull(labeledStatement0);
      assertEquals(0, labeledStatement0.depth());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(697, labeledStatement0.getLength());
      assertEquals(133, labeledStatement0.getType());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(697, labeledStatement0.getAbsolutePosition());
      assertEquals(697, labeledStatement0.getPosition());
      
      astRoot0.addChild((AstNode) labeledStatement0);
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1395, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(1, labeledStatement0.depth());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(697, labeledStatement0.getLength());
      assertEquals(133, labeledStatement0.getType());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(697, labeledStatement0.getAbsolutePosition());
      assertEquals(698, labeledStatement0.getPosition());
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1871;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1871, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(1871, astRoot0.getAbsolutePosition());
      
      String string0 = "t^\\d{SM";
      BreakStatement breakStatement0 = new BreakStatement();
      assertNotNull(breakStatement0);
      assertNull(breakStatement0.getJsDoc());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(0, breakStatement0.depth());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getPosition());
      
      astRoot0.addChildToFront((com.google.javascript.jscomp.mozilla.rhino.Node) breakStatement0);
      assertNull(breakStatement0.getJsDoc());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(0, breakStatement0.depth());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1871, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(1871, astRoot0.getAbsolutePosition());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = false;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1871, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(1871, astRoot0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      
      String string0 = "[ykAq)pIOR";
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1871;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(1871, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(1871, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.hasChildren());
      
      String string0 = "t^\\d{SM";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = false;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(int0, int0);
      assertNotNull(arrayLiteral0);
      assertEquals(1871, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(1871, arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(1871, arrayLiteral0.getLength());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(65, arrayLiteral0.getType());
      
      astRoot0.addChild((AstNode) arrayLiteral0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1871, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(1871, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(1871, astRoot0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(1871, arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(1871, arrayLiteral0.getLength());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertEquals(0, arrayLiteral0.getPosition());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(1, arrayLiteral0.depth());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1871, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(1871, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(1871, astRoot0.getAbsolutePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals("[]", treeSet0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      
      TryStatement tryStatement0 = new TryStatement();
      assertNotNull(tryStatement0);
      assertEquals(1, tryStatement0.getLength());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals("81", tryStatement0.toString());
      assertEquals(81, tryStatement0.getType());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(0, tryStatement0.depth());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      
      astRoot0.addChildToFront((com.google.javascript.jscomp.mozilla.rhino.Node) tryStatement0);
      assertEquals(1, tryStatement0.getLength());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals("81", tryStatement0.toString());
      assertEquals(81, tryStatement0.getType());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(0, tryStatement0.depth());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      
      ContinueStatement continueStatement0 = new ContinueStatement();
      assertNotNull(continueStatement0);
      assertEquals(-1, continueStatement0.getPosition());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-1, continueStatement0.getAbsolutePosition());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals("121", continueStatement0.toString());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(1, continueStatement0.getLength());
      
      tryStatement0.setTryBlock((AstNode) continueStatement0);
      assertEquals(-1, continueStatement0.getAbsolutePosition());
      assertEquals(0, continueStatement0.getPosition());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(1, continueStatement0.depth());
      assertEquals(121, continueStatement0.getType());
      assertEquals("121", continueStatement0.toString());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(1, continueStatement0.getLength());
      assertEquals(1, tryStatement0.getLength());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals("81", tryStatement0.toString());
      assertEquals(81, tryStatement0.getType());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(0, tryStatement0.depth());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      
      String string0 = "CouPd not access field ";
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      
      String string0 = "&2,";
      int int0 = 0;
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals(false, comment0.isParsed());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.getLength());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals(-1, comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.getPosition());
      assertEquals("&2,", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.hasChildren());
      
      astRoot0.setJsDocNode(comment0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("&2,", astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, comment0.isParsed());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.getLength());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals(-1, comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.getPosition());
      assertEquals("&2,", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.hasChildren());
      
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      
      String string0 = "3oud ntaccess field ";
      int int0 = (-4096);
      ExpressionStatement expressionStatement0 = new ExpressionStatement(int0, int0);
      assertNotNull(expressionStatement0);
      assertEquals(133, expressionStatement0.getType());
      assertEquals(-4096, expressionStatement0.getLength());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-4096, expressionStatement0.getPosition());
      assertEquals(-4096, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertNull(expressionStatement0.getJsDoc());
      
      astRoot0.addChild((AstNode) expressionStatement0);
      assertEquals(133, expressionStatement0.getType());
      assertEquals(1, expressionStatement0.depth());
      assertEquals(-4096, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-4096, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(-4095, expressionStatement0.getPosition());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-8191, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      
      int int0 = 697;
      Block block0 = new Block(int0, int0);
      assertNotNull(block0);
      assertEquals(-1, block0.getLineno());
      assertEquals("129", block0.toString());
      assertEquals(697, block0.getAbsolutePosition());
      assertEquals(129, block0.getType());
      assertEquals(697, block0.getPosition());
      assertEquals(697, block0.getLength());
      assertNull(block0.getJsDoc());
      assertEquals(0, block0.depth());
      assertEquals(false, block0.hasChildren());
      
      String string0 = block0.toSource();
      assertNotNull(string0);
      assertEquals(-1, block0.getLineno());
      assertEquals("129", block0.toString());
      assertEquals(697, block0.getAbsolutePosition());
      assertEquals(129, block0.getType());
      assertEquals(697, block0.getPosition());
      assertEquals(697, block0.getLength());
      assertNull(block0.getJsDoc());
      assertEquals(0, block0.depth());
      assertEquals(false, block0.hasChildren());
      assertEquals("{\n}\n", string0);
      
      astRoot0.addChildToBack((com.google.javascript.jscomp.mozilla.rhino.Node) block0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, block0.getLineno());
      assertEquals("129", block0.toString());
      assertEquals(697, block0.getAbsolutePosition());
      assertEquals(129, block0.getType());
      assertEquals(697, block0.getPosition());
      assertEquals(697, block0.getLength());
      assertNull(block0.getJsDoc());
      assertEquals(0, block0.depth());
      assertEquals(false, block0.hasChildren());
      
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, block0.getLineno());
      assertEquals("129", block0.toString());
      assertEquals(697, block0.getAbsolutePosition());
      assertEquals(129, block0.getType());
      assertEquals(697, block0.getPosition());
      assertEquals(697, block0.getLength());
      assertNull(block0.getJsDoc());
      assertEquals(0, block0.depth());
      assertEquals(false, block0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1871;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(1871, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1871, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      
      String string0 = "t^\\d{SM";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = false;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, string0);
      assertNotNull(numberLiteral0);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(7, numberLiteral0.getLength());
      assertEquals(1871, numberLiteral0.getAbsolutePosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(1871, numberLiteral0.getPosition());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(40, numberLiteral0.getType());
      assertEquals("t^\\d{SM", numberLiteral0.getValue());
      
      astRoot0.addChildrenToBack((com.google.javascript.jscomp.mozilla.rhino.Node) numberLiteral0);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(7, numberLiteral0.getLength());
      assertEquals(1871, numberLiteral0.getAbsolutePosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(1871, numberLiteral0.getPosition());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(40, numberLiteral0.getType());
      assertEquals("t^\\d{SM", numberLiteral0.getValue());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(1871, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1871, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(1871, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1871, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1871;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1871, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(1871, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      
      String string0 = "t^\\d{SM";
      BreakStatement breakStatement0 = new BreakStatement();
      assertNotNull(breakStatement0);
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(0, breakStatement0.depth());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertNull(breakStatement0.getJsDoc());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1, breakStatement0.getLineno());
      
      astRoot0.addChildToFront((com.google.javascript.jscomp.mozilla.rhino.Node) breakStatement0);
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(0, breakStatement0.depth());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertNull(breakStatement0.getJsDoc());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1871, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(1871, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = false;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Name name0 = new Name(int0, int0, string0);
      assertNotNull(name0);
      assertEquals("t^\\d{SM", name0.getIdentifier());
      assertEquals(false, name0.hasChildren());
      assertEquals("39", name0.toString());
      assertEquals(7, name0.length());
      assertNull(name0.getJsDoc());
      assertEquals(7, name0.getLength());
      assertEquals(1871, name0.getPosition());
      assertEquals(1871, name0.getAbsolutePosition());
      assertEquals(-1, name0.getLineno());
      assertEquals(39, name0.getType());
      assertEquals("t^\\d{SM", name0.getString());
      assertEquals(0, name0.depth());
      
      breakStatement0.setBreakLabel(name0);
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(0, breakStatement0.depth());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertNull(breakStatement0.getJsDoc());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals("t^\\d{SM", name0.getIdentifier());
      assertEquals(false, name0.hasChildren());
      assertEquals("39", name0.toString());
      assertEquals(7, name0.length());
      assertNull(name0.getJsDoc());
      assertEquals(7, name0.getLength());
      assertEquals(1, name0.depth());
      assertEquals(1872, name0.getPosition());
      assertEquals(1871, name0.getAbsolutePosition());
      assertEquals(-1, name0.getLineno());
      assertEquals(39, name0.getType());
      assertEquals("t^\\d{SM", name0.getString());
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1871, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(1871, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      
      String string0 = "\"";
      int int0 = 131;
      ConditionalExpression conditionalExpression0 = new ConditionalExpression(int0);
      assertNotNull(conditionalExpression0);
      assertEquals("102", conditionalExpression0.toString());
      assertEquals(131, conditionalExpression0.getAbsolutePosition());
      assertEquals(-1, conditionalExpression0.getQuestionMarkPosition());
      assertEquals(false, conditionalExpression0.hasChildren());
      assertEquals(1, conditionalExpression0.getLength());
      assertEquals(-1, conditionalExpression0.getLineno());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals(131, conditionalExpression0.getPosition());
      assertEquals(102, conditionalExpression0.getType());
      assertEquals(-1, conditionalExpression0.getColonPosition());
      assertEquals(0, conditionalExpression0.depth());
      
      astRoot0.addChildrenToBack((com.google.javascript.jscomp.mozilla.rhino.Node) conditionalExpression0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("102", conditionalExpression0.toString());
      assertEquals(131, conditionalExpression0.getAbsolutePosition());
      assertEquals(-1, conditionalExpression0.getQuestionMarkPosition());
      assertEquals(false, conditionalExpression0.hasChildren());
      assertEquals(1, conditionalExpression0.getLength());
      assertEquals(-1, conditionalExpression0.getLineno());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals(131, conditionalExpression0.getPosition());
      assertEquals(102, conditionalExpression0.getType());
      assertEquals(-1, conditionalExpression0.getColonPosition());
      assertEquals(0, conditionalExpression0.depth());
      
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      
      Scope scope0 = new Scope();
      assertNotNull(scope0);
      assertEquals(-1, scope0.getLineno());
      assertEquals(129, scope0.getType());
      assertEquals(0, scope0.depth());
      assertEquals(-1, scope0.getAbsolutePosition());
      assertEquals(1, scope0.getLength());
      assertNull(scope0.getJsDoc());
      assertEquals("129", scope0.toString());
      assertEquals(false, scope0.hasChildren());
      assertEquals(-1, scope0.getPosition());
      
      astRoot0.addChildrenToBack((com.google.javascript.jscomp.mozilla.rhino.Node) scope0);
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, scope0.getLineno());
      assertEquals(129, scope0.getType());
      assertEquals(0, scope0.depth());
      assertEquals(-1, scope0.getAbsolutePosition());
      assertEquals(1, scope0.getLength());
      assertNull(scope0.getJsDoc());
      assertEquals("129", scope0.toString());
      assertEquals(false, scope0.hasChildren());
      assertEquals(-1, scope0.getPosition());
      
      String string0 = "U5ck]k'B|GxJh'";
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getChildCount());
  }

  //@Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte byte0 = (byte) (-84);
      String string0 = "2~UH";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      AstRoot astRoot0 = new AstRoot((int) byte0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-84, astRoot0.getPosition());
      assertEquals(-84, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      AstRoot astRoot1 = (AstRoot)astRoot0.setType((int) byte0);
      assertNotNull(astRoot1);
      assertSame(astRoot0, astRoot1);
      assertSame(astRoot1, astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-84, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-84, astRoot0.getPosition());
      assertEquals(-84, astRoot0.getAbsolutePosition());
      assertEquals("-84", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals("-84", astRoot1.toString());
      assertEquals(-1, astRoot1.getLineno());
      assertNull(astRoot1.getEncodedSource());
      assertEquals(-84, astRoot1.getType());
      assertEquals(-1, astRoot1.getEncodedSourceStart());
      assertEquals(-1, astRoot1.getEndLineno());
      assertEquals(0, astRoot1.getFunctionCount());
      assertEquals(false, astRoot1.hasChildren());
      assertEquals(-84, astRoot1.getPosition());
      assertNull(astRoot1.getJsDoc());
      assertEquals(1, astRoot1.getLength());
      assertNull(astRoot1.getSourceName());
      assertEquals(-1, astRoot1.getEncodedSourceEnd());
      assertEquals(-1, astRoot1.getBaseLineno());
      assertEquals(-84, astRoot1.getAbsolutePosition());
      assertEquals(false, astRoot1.isInStrictMode());
      assertEquals(0, astRoot1.depth());
      assertEquals(0, astRoot1.getRegexpCount());
      assertEquals(0, astRoot1.getParamCount());
      
      ErrorReporter errorReporter0 = null;
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -84
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      
      String string0 = "";
      Config config0 = null;
      int int0 = 0;
      ThrowStatement throwStatement0 = new ThrowStatement(int0);
      assertNotNull(throwStatement0);
      assertEquals(false, throwStatement0.hasChildren());
      assertEquals("50", throwStatement0.toString());
      assertEquals(-1, throwStatement0.getLineno());
      assertEquals(0, throwStatement0.getPosition());
      assertEquals(0, throwStatement0.getAbsolutePosition());
      assertEquals(50, throwStatement0.getType());
      assertEquals(0, throwStatement0.depth());
      assertNull(throwStatement0.getJsDoc());
      assertEquals(1, throwStatement0.getLength());
      
      astRoot0.addChildrenToFront((com.google.javascript.jscomp.mozilla.rhino.Node) throwStatement0);
      assertEquals(false, throwStatement0.hasChildren());
      assertEquals("50", throwStatement0.toString());
      assertEquals(-1, throwStatement0.getLineno());
      assertEquals(0, throwStatement0.getPosition());
      assertEquals(0, throwStatement0.getAbsolutePosition());
      assertEquals(50, throwStatement0.getType());
      assertEquals(0, throwStatement0.depth());
      assertNull(throwStatement0.getJsDoc());
      assertEquals(1, throwStatement0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      
      String string0 = "Could ntaccess field ";
      Config config0 = null;
      int int0 = 0;
      LabeledStatement labeledStatement0 = new LabeledStatement(int0, int0);
      assertNotNull(labeledStatement0);
      assertEquals(0, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.getAbsolutePosition());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(0, labeledStatement0.getPosition());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(133, labeledStatement0.getType());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(-1, labeledStatement0.getLineno());
      
      astRoot0.addChild((AstNode) labeledStatement0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, labeledStatement0.getPosition());
      assertEquals(0, labeledStatement0.getLength());
      assertEquals(1, labeledStatement0.depth());
      assertEquals(0, labeledStatement0.getAbsolutePosition());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(133, labeledStatement0.getType());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(-1, labeledStatement0.getLineno());
      
      Label label0 = new Label(int0, int0);
      assertNotNull(label0);
      assertEquals(false, label0.hasChildren());
      assertEquals(0, label0.getPosition());
      assertEquals(0, label0.getLength());
      assertEquals(0, label0.getAbsolutePosition());
      assertEquals(-1, label0.getLineno());
      assertEquals("130", label0.toString());
      assertEquals(0, label0.depth());
      assertNull(label0.getName());
      assertEquals(130, label0.getType());
      assertNull(label0.getJsDoc());
      
      labeledStatement0.addLabel(label0);
      assertEquals(false, label0.hasChildren());
      assertEquals(-1, label0.getPosition());
      assertEquals(0, label0.getLength());
      assertEquals(2, label0.depth());
      assertEquals(-1, label0.getAbsolutePosition());
      assertEquals(-1, label0.getLineno());
      assertEquals("130", label0.toString());
      assertNull(label0.getName());
      assertEquals(130, label0.getType());
      assertNull(label0.getJsDoc());
      assertEquals(1, labeledStatement0.getPosition());
      assertEquals(0, labeledStatement0.getLength());
      assertEquals(1, labeledStatement0.depth());
      assertEquals(0, labeledStatement0.getAbsolutePosition());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(133, labeledStatement0.getType());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(-1, labeledStatement0.getLineno());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
      }
  }
}
