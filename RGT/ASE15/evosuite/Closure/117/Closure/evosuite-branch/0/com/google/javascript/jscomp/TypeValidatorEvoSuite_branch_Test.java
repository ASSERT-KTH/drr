/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:17:24 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CoverageInstrumentationCallback;
import com.google.javascript.jscomp.CoverageInstrumentationPass;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FileInstrumentationData;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class TypeValidatorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JSType jSType0 = null;
      JSError jSError0 = null;
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      assertNotNull(typeValidator_TypeMismatch0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) typeValidator_TypeMismatch0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSType jSType0 = null;
      JSError jSError0 = null;
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      assertNotNull(typeValidator_TypeMismatch0);
      
      boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) jSType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2() {}
//   @Test(timeout = 4000)
//   public void test2()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(compiler0);
//       
//       double double0 = compiler0.getProgress();
//       assertEquals(0.0, double0, 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       
//       LoggerErrorManager loggerErrorManager1 = (LoggerErrorManager)compiler0.getErrorManager();
//       assertSame(loggerErrorManager1, loggerErrorManager0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(0.0, loggerErrorManager1.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager1.getWarningCount());
//       assertEquals(0, loggerErrorManager1.getErrorCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(loggerErrorManager1);
//       
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(typeValidator0);
//       
//       int int0 = (-303);
//       boolean boolean0 = false;
//       typeValidator0.setShouldReport(boolean0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       
//       Node node0 = Node.newNumber(double0, int0, int0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, node0.isParamList());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isInc());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isTrue());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isLabel());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isAnd());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDec());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isCatch());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isIn());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(node0);
//       
//       HashMap<String, FileInstrumentationData> hashMap0 = new HashMap<String, FileInstrumentationData>();
//       assertEquals(0, hashMap0.size());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(true, hashMap0.isEmpty());
//       assertNotNull(hashMap0);
//       
//       CoverageInstrumentationPass.CoverageReach coverageInstrumentationPass_CoverageReach0 = CoverageInstrumentationPass.CoverageReach.CONDITIONAL;
//       CoverageInstrumentationCallback coverageInstrumentationCallback0 = new CoverageInstrumentationCallback((Map<String, FileInstrumentationData>) hashMap0, coverageInstrumentationPass_CoverageReach0);
//       assertEquals(0, hashMap0.size());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(true, hashMap0.isEmpty());
//       assertNotNull(coverageInstrumentationCallback0);
//       
//       DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(defaultPassConfig0);
//       
//       MemoizedScopeCreator memoizedScopeCreator0 = defaultPassConfig0.getTypedScopeCreator();
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(memoizedScopeCreator0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) coverageInstrumentationCallback0, (ScopeCreator) memoizedScopeCreator0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(0, hashMap0.size());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(nodeTraversal0);
//       
//       String string0 = "";
//       typeValidator0.expectValidTypeofName(nodeTraversal0, node0, string0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(0, hashMap0.size());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, node0.isParamList());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isInc());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isTrue());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isLabel());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isAnd());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDec());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isCatch());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isIn());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//   }

  @Test(timeout = 4000)
  public void test3() {}
//   @Test(timeout = 4000)
//   public void test3()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNotNull(compiler0);
//       
//       double double0 = compiler0.getProgress();
//       assertEquals(0.0, double0, 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       
//       LoggerErrorManager loggerErrorManager1 = (LoggerErrorManager)compiler0.getErrorManager();
//       assertSame(loggerErrorManager1, loggerErrorManager0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(0.0, loggerErrorManager1.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager1.getErrorCount());
//       assertEquals(0, loggerErrorManager1.getWarningCount());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNotNull(loggerErrorManager1);
//       
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNotNull(typeValidator0);
//       
//       int int0 = (-303);
//       Node node0 = Node.newNumber(double0, int0, int0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isDec());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isTry());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isAssign());
//       assertEquals(39, node0.getType());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNotNull(node0);
//       
//       boolean boolean0 = true;
//       String string0 = typeValidator0.getReadableJSTypeName(node0, boolean0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals("?", string0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isDec());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isTry());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isAssign());
//       assertEquals(39, node0.getType());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNotNull(string0);
//   }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSType jSType0 = null;
      JSError jSError0 = null;
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      assertNotNull(typeValidator_TypeMismatch0);
      
      String string0 = typeValidator_TypeMismatch0.toString();
      assertEquals("(null, null)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test5() {}
//   @Test(timeout = 4000)
//   public void test5()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertNotNull(compiler0);
//       
//       LoggerErrorManager loggerErrorManager1 = (LoggerErrorManager)compiler0.getErrorManager();
//       assertSame(loggerErrorManager1, loggerErrorManager0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(0, loggerErrorManager1.getErrorCount());
//       assertEquals(0.0, loggerErrorManager1.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager1.getWarningCount());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertNotNull(loggerErrorManager1);
//       
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertNotNull(typeValidator0);
//       
//       Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertNotNull(iterable0);
//   }

  @Test(timeout = 4000)
  public void test6() {}
//   @Test(timeout = 4000)
//   public void test6()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(compiler0);
//       
//       double double0 = compiler0.getProgress();
//       assertEquals(0.0, double0, 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       
//       LoggerErrorManager loggerErrorManager1 = (LoggerErrorManager)compiler0.getErrorManager();
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertSame(loggerErrorManager1, loggerErrorManager0);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, loggerErrorManager1.getErrorCount());
//       assertEquals(0, loggerErrorManager1.getWarningCount());
//       assertEquals(0.0, loggerErrorManager1.getTypedPercent(), 0.01D);
//       assertNotNull(loggerErrorManager1);
//       
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(typeValidator0);
//       
//       int int0 = (-303);
//       Node node0 = Node.newNumber(double0, int0, int0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isCall());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isWhile());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isBreak());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isScript());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDo());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertNull(node0.getSourceFileName());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isThrow());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNot());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(node0);
//       
//       HashMap<String, FileInstrumentationData> hashMap0 = new HashMap<String, FileInstrumentationData>();
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals(0, hashMap0.size());
//       assertEquals("{}", hashMap0.toString());
//       assertNotNull(hashMap0);
//       
//       CoverageInstrumentationPass.CoverageReach coverageInstrumentationPass_CoverageReach0 = CoverageInstrumentationPass.CoverageReach.CONDITIONAL;
//       CoverageInstrumentationCallback coverageInstrumentationCallback0 = new CoverageInstrumentationCallback((Map<String, FileInstrumentationData>) hashMap0, coverageInstrumentationPass_CoverageReach0);
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals(0, hashMap0.size());
//       assertEquals("{}", hashMap0.toString());
//       assertNotNull(coverageInstrumentationCallback0);
//       
//       DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(defaultPassConfig0);
//       
//       MemoizedScopeCreator memoizedScopeCreator0 = defaultPassConfig0.getTypedScopeCreator();
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNull(memoizedScopeCreator0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) coverageInstrumentationCallback0, (ScopeCreator) memoizedScopeCreator0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals(0, hashMap0.size());
//       assertEquals("{}", hashMap0.toString());
//       assertNotNull(nodeTraversal0);
//       
//       String string0 = "";
//       typeValidator0.expectValidTypeofName(nodeTraversal0, node0, string0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(1, loggerErrorManager0.getWarningCount());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isCall());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isWhile());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isBreak());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isScript());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDo());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertNull(node0.getSourceFileName());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isThrow());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNot());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals(0, hashMap0.size());
//       assertEquals("{}", hashMap0.toString());
//   }

  @Test(timeout = 4000)
  public void test7() {}
//   @Test(timeout = 4000)
//   public void test7()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(compiler0);
//       
//       double double0 = compiler0.getProgress();
//       assertEquals(0.0, double0, 0.01D);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       
//       LoggerErrorManager loggerErrorManager1 = (LoggerErrorManager)compiler0.getErrorManager();
//       assertSame(loggerErrorManager1, loggerErrorManager0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager1.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager1.getWarningCount());
//       assertEquals(0, loggerErrorManager1.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(loggerErrorManager1);
//       
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(typeValidator0);
//       
//       int int0 = (-303);
//       Node node0 = Node.newNumber(double0, int0, int0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isBreak());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isNull());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTypeOf());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isName());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isDec());
//       assertNotNull(node0);
//       
//       boolean boolean0 = false;
//       String string0 = typeValidator0.getReadableJSTypeName(node0, boolean0);
//       assertSame(loggerErrorManager0, loggerErrorManager1);
//       assertEquals("?", string0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isBreak());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isNull());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTypeOf());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isName());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isDec());
//       assertNotNull(string0);
//   }
}
