/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:35:08 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CombinedCompilerPass;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ExternExportsPass;
import com.google.javascript.jscomp.FoldConstants;
import com.google.javascript.jscomp.MinimizeExitPoints;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.OptimizeArgumentsArray;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.File;
import java.io.PrintStream;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockError;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

 
public class FoldConstantsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      String string0 = "rEF^sgh1dYgE";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      
      // Undeclared exception!
      try {
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FoldConstants foldConstants0 = new FoldConstants(abstractCompiler0);
      assertNotNull(foldConstants0);
      
      NodeTraversal nodeTraversal0 = null;
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      String string0 = "rEF^sgh1dYgE";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldDo(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FoldConstants foldConstants0 = new FoldConstants(abstractCompiler0);
      assertNotNull(foldConstants0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(abstractCompiler0);
      assertNotNull(syntacticScopeCreator0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0, (ScopeCreator) syntacticScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldFor(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      String string0 = "r]EF^sgh1dYgE";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldWhile(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "ength";
      boolean boolean0 = FoldConstants.containsUnicodeEscape(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      
      String string0 = "gHG;9+-qK4m";
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode(string0);
      assertNotNull(scriptOrFnNode0);
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(true, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.hasOneChild());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(2, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, scriptOrFnNode0, scriptOrFnNode0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(true, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.hasOneChild());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(2, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      int int0 = 0;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      
      Node node1 = new Node(int0, node0, node0, node0, int0, int0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(0, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(0, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getLineno());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      assertNotNull(minimizeExitPoints0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) minimizeExitPoints0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      String string0 = "length";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldGetProp(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FoldConstants foldConstants0 = new FoldConstants(abstractCompiler0);
      assertNotNull(foldConstants0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      double double0 = (-1189.1002737);
      int int0 = (-354);
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      
      foldConstants0.tryFoldGetProp(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      String string0 = "e";
      int int0 = 16;
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(16, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(16, node0.getCharno());
      
      foldConstants0.tryFoldGetElem(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(16, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(16, node0.getCharno());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FoldConstants foldConstants0 = new FoldConstants(abstractCompiler0);
      assertNotNull(foldConstants0);
      
      double double0 = 9.007199254740992E15;
      int int0 = 159;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(159, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(159, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      foldConstants0.tryFoldStringJoin(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(159, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(159, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      String string0 = "e";
      int int0 = 16;
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(16, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(16, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      foldConstants0.tryFoldStringIndexOf(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(16, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(16, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      String string0 = "e";
      int int0 = 16;
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(16, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(16, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      Node node1 = Node.newNumber((double) int0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(39, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getCharno());
      
      foldConstants0.tryFoldComparison(nodeTraversal0, node1, node1, node0, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertEquals(39, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getCharno());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(16, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(16, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      ExternExportsPass externExportsPass0 = new ExternExportsPass(compiler0);
      assertNotNull(externExportsPass0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertNotNull(typedScopeCreator0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) externExportsPass0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      String string0 = "JSC_REDECL_NOSHADOW_VARIABLE";
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(scriptOrFnNode0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      
      foldConstants0.tryFoldComparison(nodeTraversal0, scriptOrFnNode0, scriptOrFnNode0, scriptOrFnNode0, scriptOrFnNode0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
      assertNotNull(optimizeArgumentsArray0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) optimizeArgumentsArray0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 122;
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      ExternExportsPass externExportsPass0 = new ExternExportsPass(compiler0);
      assertNotNull(externExportsPass0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertNotNull(typedScopeCreator0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) externExportsPass0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      String string0 = "JSC_REDECL_NOSHADOW_VARIABLE";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FoldConstants foldConstants0 = new FoldConstants(abstractCompiler0);
      assertNotNull(foldConstants0);
      
      double double0 = 9.007199254740992E15;
      int int0 = 159;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(159, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(159, node0.getLineno());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, node0.hasChildren());
      assertEquals(159, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(159, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FoldConstants foldConstants0 = new FoldConstants(abstractCompiler0);
      assertNotNull(foldConstants0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Unknown shift operator: number
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      int int0 = (-1040);
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertNotNull(node0);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      int int0 = (-1040);
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      
      String string0 = "NaN";
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(scriptOrFnNode0);
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, scriptOrFnNode0, scriptOrFnNode0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FoldConstants foldConstants0 = new FoldConstants(abstractCompiler0);
      assertNotNull(foldConstants0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      int int0 = (-354);
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-354, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-354, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      int int0 = (-1040);
      double double0 = (-2130.6);
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FoldConstants foldConstants0 = new FoldConstants(abstractCompiler0);
      assertNotNull(foldConstants0);
      
      double double0 = 9.007199254740992E15;
      int int0 = 159;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(159, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(159, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(159, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(159, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      int int0 = 246;
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      
      Node node1 = new Node(int0, node0, node0, int0, int0);
      assertNotNull(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(246, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(246, node1.getType());
      assertEquals(246, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node1, node0, node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(246, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(246, node1.getType());
      assertEquals(246, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FoldConstants foldConstants0 = new FoldConstants(abstractCompiler0);
      assertNotNull(foldConstants0);
      
      int int0 = 86;
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown bitwise operator
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal.Callback[] nodeTraversal_CallbackArray0 = new NodeTraversal.Callback[8];
      CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, nodeTraversal_CallbackArray0);
      assertNotNull(combinedCompilerPass0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) combinedCompilerPass0, scopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      int int0 = 33;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(33, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(33, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      int int0 = (-1040);
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      
      String string0 = "NaN";
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(scriptOrFnNode0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      
      foldConstants0.tryFoldArithmetic(nodeTraversal0, node0, node0, scriptOrFnNode0, node0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = ".=s(L(H`mG4989s";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertNotNull(typedScopeCreator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      int int0 = 129;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(129, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(129, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(129, node0.getType());
      
      foldConstants0.tryFoldArithmetic(nodeTraversal0, node0, node0, node0, node0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(129, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(129, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(129, node0.getType());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FoldConstants foldConstants0 = new FoldConstants(abstractCompiler0);
      assertNotNull(foldConstants0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      double double0 = (-1189.1002737);
      int int0 = (-354);
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown arithmetic operator
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      String string0 = "com.google.common.base.Predicates$InPredicate";
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode(string0);
      assertNotNull(scriptOrFnNode0);
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldAdd(nodeTraversal0, scriptOrFnNode0, node0, node0, scriptOrFnNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      String string0 = "e";
      int int0 = 16;
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(16, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(16, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      
      Node node1 = Node.newNumber((double) int0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(-1, node1.getCharno());
      assertEquals(-1, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(39, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      
      foldConstants0.tryFoldLeftChildAdd(nodeTraversal0, node1, node0, node1, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(16, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(16, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(-1, node1.getCharno());
      assertEquals(-1, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(39, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "com.google.protobuf.TextFormat$InvalidEscapeSequenceException";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      double double0 = 1124.0;
      int int0 = (-2005);
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      int int1 = 1303;
      Vector<JSType> vector0 = new Vector<JSType>(int1, int0);
      assertNotNull(vector0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(1303, vector0.capacity());
      
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(node1, node0);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(83, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(1303, vector0.capacity());
      
      foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node1, node0, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(int0 == int1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(int1 == int0);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(83, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(1303, vector0.capacity());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
      assertNotNull(optimizeArgumentsArray0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) optimizeArgumentsArray0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      int int0 = (-1040);
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      String string0 = "r]EF^sgh1dYgE";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      
      foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      String string0 = "gHG;9+-qK4m";
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode(string0);
      assertNotNull(scriptOrFnNode0);
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(2, scriptOrFnNode0.getChildCount());
      assertEquals(true, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      foldConstants0.tryMinimizeIf(nodeTraversal0, scriptOrFnNode0, scriptOrFnNode0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(2, scriptOrFnNode0.getChildCount());
      assertEquals(true, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      
      String string0 = "gHG;+9+-K4m";
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode(string0);
      assertNotNull(scriptOrFnNode0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(true, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(2, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.hasOneChild());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      
      scriptOrFnNode0.addChildToBack((Node) scriptOrFnNode0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(true, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(false, scriptOrFnNode0.hasOneChild());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(3, scriptOrFnNode0.getChildCount());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      
      // Undeclared exception!
      try {
        foldConstants0.tryMinimizeIf(nodeTraversal0, scriptOrFnNode0, scriptOrFnNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      ExternExportsPass externExportsPass0 = new ExternExportsPass(compiler0);
      assertNotNull(externExportsPass0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertNotNull(typedScopeCreator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) externExportsPass0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      String string0 = "JSC_REDECL_NOSHADOW_VARIABLE";
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(scriptOrFnNode0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      
      foldConstants0.tryFoldBlock(nodeTraversal0, scriptOrFnNode0, scriptOrFnNode0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(0, scriptOrFnNode0.getChildCount());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.hasOneChild());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(false, scriptOrFnNode0.hasChildren());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = ".=s(L(H`mG4989s";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertNotNull(typedScopeCreator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      int int0 = 129;
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(125, node0.getType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      
      Node node1 = new Node(int0, node0, node0, int0, int0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertEquals(false, node1.isVarArgs());
      assertEquals(129, node1.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(129, node1.getLineno());
      assertEquals(129, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(125, node0.getType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldBlock(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = ".=s(L(H`mG4989s";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertNotNull(typedScopeCreator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) foldConstants0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      int int0 = 129;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(129, node0.getType());
      assertEquals(129, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(129, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      
      Node node1 = new Node(int0, node0, node0, int0, int0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertEquals(false, node1.isVarArgs());
      assertEquals(129, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(129, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(129, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(129, node0.getType());
      assertEquals(129, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(129, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldBlock(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      String string0 = "gHG;9+-qK4m";
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode(string0);
      assertNotNull(scriptOrFnNode0);
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(true, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(2, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      foldConstants0.process((Node) scriptOrFnNode0, (Node) scriptOrFnNode0);
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(true, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(2, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      String string0 = "com.google.common.base.Predicates$InPredicate";
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode(string0);
      assertNotNull(scriptOrFnNode0);
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      foldConstants0.process((Node) scriptOrFnNode0, (Node) scriptOrFnNode0);
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      assertNotNull(foldConstants0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      String string0 = "gH^;+9-K4m";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      foldConstants0.process(node0, node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FoldConstants foldConstants0 = new FoldConstants(abstractCompiler0);
      assertNotNull(foldConstants0);
      
      double double0 = 9.007199254740992E15;
      int int0 = 159;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(159, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(159, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      
      boolean boolean0 = foldConstants0.hasBreakOrContinue(node0);
      assertFalse(boolean0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(159, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(159, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FoldConstants foldConstants0 = new FoldConstants(abstractCompiler0);
      assertNotNull(foldConstants0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) foldConstants0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      double double0 = 38.28629446627971;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      
      // Undeclared exception!
      try {
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
