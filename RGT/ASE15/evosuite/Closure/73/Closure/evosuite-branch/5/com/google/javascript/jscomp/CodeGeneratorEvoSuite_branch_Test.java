/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:23:57 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

 
public class CodeGeneratorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "\n\ndeprecated\u0018\u0003\u0001(\b:\u0005false\u0012\u001C\n\u0014experimentalZmap_ey\u0018\t \u0001(\t\u0012C\n\u0014ninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protouf.UninterpretedOption\"/\n\u0005CType\u0012\n\n\u0006STRING\u0010\u0000\u0012\b\n\u0004CORD\u0010\u0001\u0012\u0010\n\fSTRING_PIECE\u0010\u0002*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002]\n\u000BEnumOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"b\n\u0010EnumValueOptions\u0012C\n\u0014uninterpreted_opton\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"`\n\u000EServiceOptions\u0012C\n";
      char char0 = '?';
      CharsetEncoder charsetEncoder0 = null;
      String string1 = CodeGenerator.strEscape(string0, char0, string0, string0, string0, charsetEncoder0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("?\\n\\ndeprecated\\u0018\\u0003\\u0001(\\u0008:\\u0005false\\u0012\\u001c\\n\\u0014experimentalZmap_ey\\u0018\\t \\u0001(\\t\\u0012C\\n\\u0014ninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protouf.UninterpretedOption\n\ndeprecated\u0018\u0003\u0001(\b:\u0005false\u0012\u001C\n\u0014experimentalZmap_ey\u0018\t \u0001(\t\u0012C\n\u0014ninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protouf.UninterpretedOption\"/\n\u0005CType\u0012\n\n\u0006STRING\u0010\u0000\u0012\b\n\u0004CORD\u0010\u0001\u0012\u0010\n\fSTRING_PIECE\u0010\u0002*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002]\n\u000BEnumOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"b\n\u0010EnumValueOptions\u0012C\n\u0014uninterpreted_opton\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"`\n\u000EServiceOptions\u0012C\n/\\n\\u0005CType\\u0012\\n\\n\\u0006STRING\\u0010\\0\\u0012\\u0008\\n\\u0004CORD\\u0010\\u0001\\u0012\\u0010\\n\\u000cSTRING_PIECE\\u0010\\u0002*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002]\\n\\u000bEnumOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterpretedOption*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\n\ndeprecated\u0018\u0003\u0001(\b:\u0005false\u0012\u001C\n\u0014experimentalZmap_ey\u0018\t \u0001(\t\u0012C\n\u0014ninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protouf.UninterpretedOption\"/\n\u0005CType\u0012\n\n\u0006STRING\u0010\u0000\u0012\b\n\u0004CORD\u0010\u0001\u0012\u0010\n\fSTRING_PIECE\u0010\u0002*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002]\n\u000BEnumOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"b\n\u0010EnumValueOptions\u0012C\n\u0014uninterpreted_opton\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"`\n\u000EServiceOptions\u0012C\nb\\n\\u0010EnumValueOptions\\u0012C\\n\\u0014uninterpreted_opton\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterretedOption*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\n\ndeprecated\u0018\u0003\u0001(\b:\u0005false\u0012\u001C\n\u0014experimentalZmap_ey\u0018\t \u0001(\t\u0012C\n\u0014ninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protouf.UninterpretedOption\"/\n\u0005CType\u0012\n\n\u0006STRING\u0010\u0000\u0012\b\n\u0004CORD\u0010\u0001\u0012\u0010\n\fSTRING_PIECE\u0010\u0002*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002]\n\u000BEnumOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"b\n\u0010EnumValueOptions\u0012C\n\u0014uninterpreted_opton\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"`\n\u000EServiceOptions\u0012C\n`\\n\\u000eServiceOptions\\u0012C\\n?", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "\\{2?<!--SX>u'}S\"[";
      CharsetEncoder charsetEncoder0 = null;
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("\"\\\\{2?<\\!--SX>u'}S\\\"[\"", string1);
      
      String string2 = CodeGenerator.regexpEscape(string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertEquals("/\"\\\\{2?<\\!--SX>u'}S\\\"[\"/", string2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "^]>}T$b";
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("\"^]>}T$b\"", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "=R!-->n{;}9";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("\"=R!--\\>n{;}9\"", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "\r";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("/\\r/", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "US-ASCII";
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.forName(string0);
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals(true, uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals(true, uS_ASCII0.canEncode());
      assertNotNull(uS_ASCII0);
      
      String string1 = "\n\ndeprecated\u0018\u0003\u0001(\b:\u0005false\u0012\u001C\n\u0014experimentalZmap_ey\u0018\t \u0001(\t\u0012C\n\u0014ninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protouf.UninterpretedOption\"/\n\u0005CType\u0012\n\n\u0006STRING\u0010\u0000\u0012\b\n\u0004CORD\u0010\u0001\u0012\u0010\n\fSTRING_PIECE\u0010\u0002*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002]\n\u000BEnumOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.Uninterprete@Option*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"b\n\u0010EnumValueOptions\u0012C\n\u0014uninterpreted_opton\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"`\n\u000ES<!--ceOptions\u0012C\n";
      assertNotSame(string1, string0);
      
      CharsetEncoder charsetEncoder0 = uS_ASCII0.newEncoder();
      assertFalse(string0.equals((Object)string1));
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals(true, uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals(true, uS_ASCII0.canEncode());
      assertNotSame(string0, string1);
      assertNotNull(charsetEncoder0);
      
      String string2 = CodeGenerator.regexpEscape(string1, charsetEncoder0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals(true, uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals(true, uS_ASCII0.canEncode());
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertEquals("/\\n\\ndeprecated\u0018\u0003\u0001(\b:\u0005false\u0012\u001C\\n\u0014experimentalZmap_ey\u0018\\t \u0001(\\t\u0012C\\n\u0014ninterpreted_option\u0018\\u00e7\u0007 \u0003(\u000B2$.google.protouf.UninterpretedOption\"/\\n\u0005CType\u0012\\n\\n\u0006STRING\u0010\\0\u0012\b\\n\u0004CORD\u0010\u0001\u0012\u0010\\n\fSTRING_PIECE\u0010\u0002*\\t\b\\u00e8\u0007\u0010\\u0080\\u0080\\u0080\\u0080\u0002]\\n\u000BEnumOptions\u0012C\\n\u0014uninterpreted_option\u0018\\u00e7\u0007 \u0003(\u000B2$.google.protobuf.Uninterprete@Option*\\t\b\\u00e8\u0007\u0010\\u0080\\u0080\\u0080\\u0080\u0002\"b\\n\u0010EnumValueOptions\u0012C\\n\u0014uninterpreted_opton\u0018\\u00e7\u0007 \u0003(\u000B2$.google.protobuf.UninterretedOption*\\t\b\\u00e8\u0007\u0010\\u0080\\u0080\\u0080\\u0080\u0002\"`\\n\u000ES<\\!--ceOptions\u0012C\\n/", string2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "\"\\\\2}?</scriptuOs\\A\"";
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertNotNull(charsetEncoder0);
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("'\"\\\\\\\\2}?<\\/scriptuOs\\\\A\"'", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = ">#Y";
      CharsetEncoder charsetEncoder0 = null;
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("\">#Y\"", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ">#Y";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals(">#Y", string1);
      
      boolean boolean0 = CodeGenerator.isSimpleNumber(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "-tip";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "2";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(2.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = ".n$q%*nW]i/->#q";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("\".n$q%*nW]i/->#q\"", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = " \u0001(\t\u00128\n\u0005value\u0018\u0002 \u0003(\u000B2).google.probobuf.EnumValueDescriptorProto\u0012-\n\u0007options\u0018\u0003 \u0001(\u000B2\u001C.google.protobuf.EnumOptions\"l\n\u0018EnumOaluPDescriptorProto\u0012\f\n\u0004name\u0018\u0001 a(\t\u0012%\n\u0006number\u0018\u0002 \u0001(\u0005\u00122\n\u0007options\u0018\u0003 \u0001(\u000B2!.gooe.protobuf.EnumValueOptions\"\u0090\u0001\n\u0016ServiceDescriptorProto\u0012\f\n\u0004name\u0018\u0001 \u0001(\t\u00126\n\u0006mehod\u0018\u0002 \u0003(\u000B2&.google.protobuf.MethodDescriptorProto\u00120\n\u0007options\u0018\u0003 \u0001(\u000B2\u001F.g(gle.protobuf.ServiIeOptions\"\n\u0015MethodDescriptorProto\u0012\f\n\u0004name\u0018";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(" \\u0001(\\u0009\\u00128\\u000a\\u0005value\\u0018\\u0002 \\u0003(\\u000b2).google.probobuf.EnumValueDescriptorProto\\u0012-\\u000a\\u0007options\\u0018\\u0003 \\u0001(\\u000b2\\u001c.google.protobuf.EnumOptions\"l\\u000a\\u0018EnumOaluPDescriptorProto\\u0012\\u000c\\u000a\\u0004name\\u0018\\u0001 a(\\u0009\\u0012%\\u000a\\u0006number\\u0018\\u0002 \\u0001(\\u0005\\u00122\\u000a\\u0007options\\u0018\\u0003 \\u0001(\\u000b2!.gooe.protobuf.EnumValueOptions\"\\u0090\\u0001\\u000a\\u0016ServiceDescriptorProto\\u0012\\u000c\\u000a\\u0004name\\u0018\\u0001 \\u0001(\\u0009\\u00126\\u000a\\u0006mehod\\u0018\\u0002 \\u0003(\\u000b2&.google.protobuf.MethodDescriptorProto\\u00120\\u000a\\u0007options\\u0018\\u0003 \\u0001(\\u000b2\\u001f.g(gle.protobuf.ServiIeOptions\"\\u000a\\u0015MethodDescriptorProto\\u0012\\u000c\\u000a\\u0004name\\u0018", string1);
  }
}
