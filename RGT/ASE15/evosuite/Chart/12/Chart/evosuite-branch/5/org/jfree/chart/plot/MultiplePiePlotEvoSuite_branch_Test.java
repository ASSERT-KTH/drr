/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:30:56 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.image.BufferedImage;
import java.util.EventListener;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

 
public class MultiplePiePlotEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "-Y(;SJ";
      CategoryAxis categoryAxis0 = new CategoryAxis(string0);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("-Y(;SJ", categoryAxis0.getLabel());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNotNull(categoryAxis0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("-Y(;SJ", categoryAxis0.getLabel());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset();
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("-Y(;SJ", categoryAxis0.getLabel());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryDataset0);
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot(categoryDataset0);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("-Y(;SJ", categoryAxis0.getLabel());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot1);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      
      boolean boolean0 = multiplePiePlot1.equals((Object) multiplePiePlot0);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("-Y(;SJ", categoryAxis0.getLabel());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertTrue(boolean0);
      assertTrue(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNotNull(multiplePiePlot0);
      
      Color color0 = (Color)multiplePiePlot0.getNoDataMessagePaint();
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNotNull(color0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number[][] numberArray0 = new Number[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertNotNull(multiplePiePlot1);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      
      multiplePiePlot0.setDataset((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertTrue(multiplePiePlot0.equals((Object)multiplePiePlot1));
      
      multiplePiePlot1.setAggregatedItemsPaint((Paint) color0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      
      multiplePiePlot1.setDataset((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "-Y(;SD";
      CategoryAxis categoryAxis0 = new CategoryAxis(string0);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertNotNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 3338;
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset(int0);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(categoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(multiplePiePlot0);
      
      boolean boolean0 = categoryAxis0.hasListener((EventListener) multiplePiePlot0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertNotNull(multiplePiePlot1);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      
      float float0 = 1.0F;
      multiplePiePlot0.setBackgroundImageAlpha(float0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      
      boolean boolean0 = multiplePiePlot0.equals((Object) multiplePiePlot1);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertFalse(boolean0);
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(multiplePiePlot0);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(spiderWebPlot0);
      
      TableOrder tableOrder0 = spiderWebPlot0.getDataExtractOrder();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(tableOrder0);
      
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      
      String string0 = "";
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(defaultCategoryItemRenderer0);
      
      int int0 = 2157;
      Font font0 = defaultCategoryItemRenderer0.getItemLabelFont(int0, int0);
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10, font0.getSize());
      assertEquals(true, font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(font0);
      
      boolean boolean0 = true;
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10, font0.getSize());
      assertEquals(true, font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10, font0.getSize());
      assertEquals(true, font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(2157, bufferedImage0.getTileWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2157, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2157, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2157, bufferedImage0.getTileHeight());
      assertNotNull(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertNotNull(multiplePiePlot0);
      
      String string0 = "U";
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Plot) multiplePiePlot0);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertNotNull(jFreeChart0);
      
      int int0 = 64;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(64, bufferedImage0.getTileHeight());
      assertEquals(64, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(64, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(64, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertNotNull(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      double double0 = 0.0;
      defaultCategoryDataset0.addValue(double0, (Comparable) double0, (Comparable) double0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      
      int int0 = SwingConstants.SOUTH_EAST;
      assertEquals(4, int0);
      
      String string0 = "";
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertNotNull(defaultCategoryItemRenderer0);
      
      Font font0 = defaultCategoryItemRenderer0.getItemLabelFont(int0, int0);
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isTransformed());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(0, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertNotNull(font0);
      
      boolean boolean0 = false;
      multiplePiePlot0.setLimit((double) int0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(4.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isTransformed());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(0, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(4.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isTransformed());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(0, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(4, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(4, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(4, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(4, bufferedImage0.getTileHeight());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(4.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertNotNull(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test07() {}
//   @Test(timeout = 4000)
//   public void test07()  throws Throwable  {
//       DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
//       assertEquals(0, defaultCategoryDataset0.getRowCount());
//       assertEquals(0, defaultCategoryDataset0.getColumnCount());
//       assertNotNull(defaultCategoryDataset0);
//       
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultCategoryDataset0);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0, defaultCategoryDataset0.getRowCount());
//       assertEquals(0, defaultCategoryDataset0.getColumnCount());
//       assertNotNull(multiplePiePlot0);
//       
//       int int0 = SwingConstants.SOUTH_EAST;
//       assertEquals(4, int0);
//       
//       defaultCategoryDataset0.setValue((Number) int0, (Comparable) int0, (Comparable) int0);
//       assertEquals(1, defaultCategoryDataset0.getRowCount());
//       assertEquals(1, defaultCategoryDataset0.getColumnCount());
//       
//       String string0 = "~1";
//       DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
//       assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
//       assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
//       assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
//       assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
//       assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
//       assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
//       assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
//       assertNotNull(defaultCategoryItemRenderer0);
//       
//       int int1 = 2157;
//       assertFalse(int1 == int0);
//       
//       Font font0 = defaultCategoryItemRenderer0.getItemLabelFont(int1, int1);
//       assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
//       assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
//       assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
//       assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
//       assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
//       assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
//       assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals(false, font0.isBold());
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals(10, font0.getSize());
//       assertEquals(0, font0.getStyle());
//       assertEquals(false, font0.isTransformed());
//       assertEquals(true, font0.isPlain());
//       assertEquals(false, font0.isItalic());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals("SansSerif", font0.getName());
//       assertNotNull(font0);
//       assertFalse(int1 == int0);
//       
//       defaultCategoryDataset0.setValue((double) int1, (Comparable) string0, (Comparable) string0);
//       assertEquals(2, defaultCategoryDataset0.getRowCount());
//       assertEquals(2, defaultCategoryDataset0.getColumnCount());
//       assertFalse(int1 == int0);
//       
//       boolean boolean0 = false;
//       JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(0, jFreeChart0.getSubtitleCount());
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
//       assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
//       assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
//       assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
//       assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
//       assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
//       assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals(false, font0.isBold());
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals(10, font0.getSize());
//       assertEquals(0, font0.getStyle());
//       assertEquals(false, font0.isTransformed());
//       assertEquals(true, font0.isPlain());
//       assertEquals(false, font0.isItalic());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals("SansSerif", font0.getName());
//       assertEquals(2, defaultCategoryDataset0.getRowCount());
//       assertEquals(2, defaultCategoryDataset0.getColumnCount());
//       assertNotNull(jFreeChart0);
//       assertFalse(int1 == int0);
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int1, int1);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test08() {}
//   @Test(timeout = 4000)
//   public void test08()  throws Throwable  {
//       DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
//       assertEquals(0, defaultCategoryDataset0.getRowCount());
//       assertEquals(0, defaultCategoryDataset0.getColumnCount());
//       assertNotNull(defaultCategoryDataset0);
//       
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultCategoryDataset0);
//       assertEquals(0, defaultCategoryDataset0.getRowCount());
//       assertEquals(0, defaultCategoryDataset0.getColumnCount());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertNotNull(multiplePiePlot0);
//       
//       double double0 = 0.0;
//       defaultCategoryDataset0.addValue(double0, (Comparable) double0, (Comparable) double0);
//       assertEquals(1, defaultCategoryDataset0.getColumnCount());
//       assertEquals(1, defaultCategoryDataset0.getRowCount());
//       
//       int int0 = SwingConstants.SOUTH_EAST;
//       assertEquals(4, int0);
//       
//       defaultCategoryDataset0.setValue((Number) int0, (Comparable) int0, (Comparable) int0);
//       assertEquals(2, defaultCategoryDataset0.getColumnCount());
//       assertEquals(2, defaultCategoryDataset0.getRowCount());
//       
//       String string0 = "";
//       DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
//       assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
//       assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
//       assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
//       assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
//       assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
//       assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
//       assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
//       assertNotNull(defaultCategoryItemRenderer0);
//       
//       Font font0 = defaultCategoryItemRenderer0.getItemLabelFont(int0, int0);
//       assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
//       assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
//       assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
//       assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
//       assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
//       assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
//       assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
//       assertEquals(false, font0.isItalic());
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       assertEquals(false, font0.isBold());
//       assertEquals(0, font0.getStyle());
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals(false, font0.isTransformed());
//       assertEquals(true, font0.isPlain());
//       assertEquals(10, font0.getSize());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals("SansSerif", font0.getName());
//       assertNotNull(font0);
//       
//       boolean boolean0 = false;
//       JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
//       assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
//       assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
//       assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
//       assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
//       assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
//       assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
//       assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(0, jFreeChart0.getSubtitleCount());
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(2, defaultCategoryDataset0.getColumnCount());
//       assertEquals(2, defaultCategoryDataset0.getRowCount());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(false, font0.isItalic());
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       assertEquals(false, font0.isBold());
//       assertEquals(0, font0.getStyle());
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals(false, font0.isTransformed());
//       assertEquals(true, font0.isPlain());
//       assertEquals(10, font0.getSize());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals("SansSerif", font0.getName());
//       assertNotNull(jFreeChart0);
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test09() {}
//   @Test(timeout = 4000)
//   public void test09()  throws Throwable  {
//       DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
//       assertEquals(0, defaultCategoryDataset0.getColumnCount());
//       assertEquals(0, defaultCategoryDataset0.getRowCount());
//       assertNotNull(defaultCategoryDataset0);
//       
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultCategoryDataset0);
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0, defaultCategoryDataset0.getColumnCount());
//       assertEquals(0, defaultCategoryDataset0.getRowCount());
//       assertNotNull(multiplePiePlot0);
//       
//       SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) defaultCategoryDataset0);
//       assertEquals(0, defaultCategoryDataset0.getColumnCount());
//       assertEquals(0, defaultCategoryDataset0.getRowCount());
//       assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
//       assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
//       assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
//       assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
//       assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
//       assertNull(spiderWebPlot0.getNoDataMessage());
//       assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(true, spiderWebPlot0.isWebFilled());
//       assertEquals(false, spiderWebPlot0.isSubplot());
//       assertEquals(true, spiderWebPlot0.isOutlineVisible());
//       assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
//       assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
//       assertNotNull(spiderWebPlot0);
//       
//       int int0 = SwingConstants.SOUTH_EAST;
//       assertEquals(4, int0);
//       
//       defaultCategoryDataset0.setValue((Number) int0, (Comparable) int0, (Comparable) int0);
//       assertEquals(1, defaultCategoryDataset0.getColumnCount());
//       assertEquals(1, defaultCategoryDataset0.getRowCount());
//       
//       TableOrder tableOrder0 = spiderWebPlot0.getDataExtractOrder();
//       assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
//       assertEquals(1, defaultCategoryDataset0.getColumnCount());
//       assertEquals(1, defaultCategoryDataset0.getRowCount());
//       assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
//       assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
//       assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
//       assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
//       assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
//       assertNull(spiderWebPlot0.getNoDataMessage());
//       assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(true, spiderWebPlot0.isWebFilled());
//       assertEquals(false, spiderWebPlot0.isSubplot());
//       assertEquals(true, spiderWebPlot0.isOutlineVisible());
//       assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
//       assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
//       assertNotNull(tableOrder0);
//       
//       multiplePiePlot0.setDataExtractOrder(tableOrder0);
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
//       assertEquals(1, defaultCategoryDataset0.getColumnCount());
//       assertEquals(1, defaultCategoryDataset0.getRowCount());
//       assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
//       assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
//       assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
//       assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
//       assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
//       assertNull(spiderWebPlot0.getNoDataMessage());
//       assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(true, spiderWebPlot0.isWebFilled());
//       assertEquals(false, spiderWebPlot0.isSubplot());
//       assertEquals(true, spiderWebPlot0.isOutlineVisible());
//       assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
//       assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
//       
//       String string0 = "~1";
//       DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
//       assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
//       assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
//       assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
//       assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
//       assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
//       assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
//       assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
//       assertNotNull(defaultCategoryItemRenderer0);
//       
//       Font font0 = defaultCategoryItemRenderer0.getItemLabelFont(int0, int0);
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
//       assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
//       assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
//       assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
//       assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
//       assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
//       assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
//       assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
//       assertEquals(0, font0.getStyle());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals(true, font0.isPlain());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       assertEquals(10, font0.getSize());
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals("SansSerif", font0.getName());
//       assertEquals(false, font0.isItalic());
//       assertEquals(false, font0.isTransformed());
//       assertEquals(false, font0.isBold());
//       assertNotNull(font0);
//       
//       boolean boolean0 = false;
//       JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
//       assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
//       assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
//       assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
//       assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
//       assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
//       assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
//       assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
//       assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
//       assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
//       assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
//       assertEquals(1, defaultCategoryDataset0.getColumnCount());
//       assertEquals(1, defaultCategoryDataset0.getRowCount());
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(0, jFreeChart0.getSubtitleCount());
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0, font0.getStyle());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals(true, font0.isPlain());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       assertEquals(10, font0.getSize());
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals("SansSerif", font0.getName());
//       assertEquals(false, font0.isItalic());
//       assertEquals(false, font0.isTransformed());
//       assertEquals(false, font0.isBold());
//       assertNotNull(jFreeChart0);
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultCategoryDataset0);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(multiplePiePlot0);
      
      String string0 = "";
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertNotNull(defaultCategoryItemRenderer0);
      
      int int0 = 2157;
      Font font0 = defaultCategoryItemRenderer0.getItemLabelFont(int0, int0);
      assertEquals("SansSerif", font0.getName());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.isBold());
      assertEquals(true, font0.isPlain());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertNotNull(font0);
      
      boolean boolean0 = true;
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
      assertEquals("SansSerif", font0.getName());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.isBold());
      assertEquals(true, font0.isPlain());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
      assertEquals("SansSerif", font0.getName());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.isBold());
      assertEquals(true, font0.isPlain());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2157, bufferedImage0.getTileHeight());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2157, bufferedImage0.getWidth());
      assertEquals(2157, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2157, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertNotNull(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "-Y(;SD";
      CategoryAxis categoryAxis0 = new CategoryAxis(string0);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertNotNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 3338;
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset(int0);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(categoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer((double) int0);
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(3338.0, xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01D);
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(xYBoxAndWhiskerRenderer0);
      
      Paint paint0 = xYBoxAndWhiskerRenderer0.getSeriesOutlinePaint(int0);
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(3338.0, xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01D);
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertNull(paint0);
      
      // Undeclared exception!
      try {
        multiplePiePlot0.setAggregatedItemsPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNotNull(multiplePiePlot0);
      
      Comparable<Integer> comparable0 = null;
      // Undeclared exception!
      try {
        multiplePiePlot0.setAggregatedItemsKey(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 5;
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset(int0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNull(categoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNotNull(multiplePiePlot0);
      
      multiplePiePlot0.setAggregatedItemsKey((Comparable) int0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultCategoryDataset0);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(multiplePiePlot0);
      
      TableOrder tableOrder0 = null;
      // Undeclared exception!
      try {
        multiplePiePlot0.setDataExtractOrder(tableOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart((Plot) multiplePiePlot0);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(jFreeChart0);
      
      // Undeclared exception!
      try {
        multiplePiePlot0.setPieChart(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'pieChart' argument must be a chart based on a PiePlot.
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNotNull(multiplePiePlot0);
      
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent((Plot) multiplePiePlot0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNotNull(plotChangeEvent0);
      
      JFreeChart jFreeChart0 = plotChangeEvent0.getChart();
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(jFreeChart0);
      
      // Undeclared exception!
      try {
        multiplePiePlot0.setPieChart(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'pieChart' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(jFreeChart0);
      
      multiplePiePlot0.setPieChart(jFreeChart0);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNotNull(multiplePiePlot0);
      
      Color color0 = (Color)multiplePiePlot0.getAggregatedItemsPaint();
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals(-4144960, color0.getRGB());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 5;
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset(int0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(categoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertNotNull(multiplePiePlot0);
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertNotNull(tableOrder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(taskSeriesCollection0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) taskSeriesCollection0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(multiplePiePlot0);
      
      double double0 = multiplePiePlot0.getLimit();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(multiplePiePlot0);
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "-Y(;SD";
      CategoryAxis categoryAxis0 = new CategoryAxis(string0);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertNull(categoryAxis0.getLabelToolTip());
      assertNotNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 3338;
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset(int0);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      Comparable comparable0 = multiplePiePlot0.getAggregatedItemsKey();
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("-Y(;SD", categoryAxis0.getLabel());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(comparable0);
      assertNotSame(string0, comparable0);
      assertEquals("Other", comparable0);
      assertFalse(string0.equals((Object)comparable0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNotNull(multiplePiePlot0);
      
      String string0 = multiplePiePlot0.getPlotType();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNotNull(string0);
      assertEquals("Multiple Pie Plot", string0);
  }
}
