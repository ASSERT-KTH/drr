/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:40:58 GMT 2014
 */

package org.jfree.chart.block;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import javax.swing.DefaultListCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

 
public class BorderArrangementEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      String string0 = "org.jfree.chart.block.BorderArrangement";
      LabelBlock labelBlock0 = new LabelBlock(string0);
      assertNotNull(labelBlock0);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01D);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01D);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01D);
      
      Object object0 = null;
      borderArrangement0.add((Block) labelBlock0, object0);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01D);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01D);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01D);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertFalse(boolean0);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      
      boolean boolean0 = borderArrangement1.equals((Object) borderArrangement0);
      assertFalse(boolean0);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      
      boolean boolean0 = borderArrangement1.equals((Object) borderArrangement0);
      assertFalse(boolean0);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertTrue(boolean0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      boolean boolean0 = borderArrangement0.equals((Object) blockContainer0);
      assertFalse(boolean0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      double double0 = 0.0;
      EmptyBlock emptyBlock0 = new EmptyBlock(double0, double0);
      assertNotNull(emptyBlock0);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      
      blockContainer0.add((Block) emptyBlock0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(false, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      
      boolean boolean0 = true;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(false, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-2192.23031);
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(double0, double0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals((-2192.23031), range0.getCentralValue(), 0.01D);
      assertEquals((-2192.23031), range0.getLowerBound(), 0.01D);
      assertEquals((-2192.23031), range0.getUpperBound(), 0.01D);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals((-2192.23031), range0.getCentralValue(), 0.01D);
      assertEquals((-2192.23031), range0.getLowerBound(), 0.01D);
      assertEquals((-2192.23031), range0.getUpperBound(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //@Test(timeout = 4000)
//   public void test07()  throws Throwable  {
//       BorderArrangement borderArrangement0 = new BorderArrangement();
//       assertNotNull(borderArrangement0);
      
//       BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
//       assertNotNull(blockContainer0);
//       assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
//       assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
//       assertNull(blockContainer0.getID());
//       assertEquals(true, blockContainer0.isEmpty());
//       assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
//       assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
//       SystemColor systemColor0 = SystemColor.textHighlight;
//       assertNotNull(systemColor0);
//       assertEquals(1, systemColor0.getTransparency());
//       assertEquals(-16777088, systemColor0.getRGB());
//       assertEquals(0, systemColor0.getGreen());
//       assertEquals("java.awt.SystemColor[i=14]", systemColor0.toString());
//       assertEquals(0, systemColor0.getRed());
//       assertEquals(128, systemColor0.getBlue());
//       assertEquals(255, systemColor0.getAlpha());
      
//       double double0 = 0.0;
//       ColorBlock colorBlock0 = new ColorBlock((Paint) systemColor0, double0, double0);
//       assertNotNull(colorBlock0);
//       assertEquals(1, systemColor0.getTransparency());
//       assertEquals(-16777088, systemColor0.getRGB());
//       assertEquals(0, systemColor0.getGreen());
//       assertEquals("java.awt.SystemColor[i=14]", systemColor0.toString());
//       assertEquals(0, systemColor0.getRed());
//       assertEquals(128, systemColor0.getBlue());
//       assertEquals(255, systemColor0.getAlpha());
//       assertNull(colorBlock0.getID());
//       assertEquals(0.0, colorBlock0.getHeight(), 0.01D);
//       assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
//       assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
//       assertEquals(0.0, colorBlock0.getWidth(), 0.01D);
      
//       blockContainer0.add((Block) colorBlock0);
//       assertEquals(1, systemColor0.getTransparency());
//       assertEquals(-16777088, systemColor0.getRGB());
//       assertEquals(0, systemColor0.getGreen());
//       assertEquals("java.awt.SystemColor[i=14]", systemColor0.toString());
//       assertEquals(0, systemColor0.getRed());
//       assertEquals(128, systemColor0.getBlue());
//       assertEquals(255, systemColor0.getAlpha());
//       assertNull(colorBlock0.getID());
//       assertEquals(0.0, colorBlock0.getHeight(), 0.01D);
//       assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
//       assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
//       assertEquals(0.0, colorBlock0.getWidth(), 0.01D);
//       assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
//       assertEquals(false, blockContainer0.isEmpty());
//       assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
//       assertNull(blockContainer0.getID());
//       assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
//       assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
//       Graphics2D graphics2D0 = null;
//       DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
//       assertNotNull(defaultStatisticalCategoryDataset0);
//       assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
//       assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
//       boolean boolean0 = true;
//       Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(boolean0);
//       assertNull(range0);
//       assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
//       assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
//       RectangleConstraint rectangleConstraint0 = new RectangleConstraint(double0, range0);
//       assertNotNull(rectangleConstraint0);
//       assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
//       assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
//       assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
//       assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
//       // Undeclared exception!
//       try {
//         Size2D size2D0 = blockContainer0.arrange(graphics2D0, rectangleConstraint0);
//         fail("Expecting exception: NullPointerException");
      
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = (-2192.23031);
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      EmptyBlock emptyBlock0 = new EmptyBlock(double0, double0);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals((-2192.23031), emptyBlock0.getWidth(), 0.01D);
      assertEquals((-2192.23031), emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      
      Range range0 = new Range(double0, double0);
      assertNotNull(range0);
      assertEquals((-2192.23031), range0.getLowerBound(), 0.01D);
      assertEquals((-2192.23031), range0.getUpperBound(), 0.01D);
      assertEquals((-2192.23031), range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals((-2192.23031), range0.getLowerBound(), 0.01D);
      assertEquals((-2192.23031), range0.getUpperBound(), 0.01D);
      assertEquals((-2192.23031), range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth(double0);
      assertNotNull(rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals((-2192.23031), rectangleConstraint1.getWidth(), 0.01D);
      assertEquals((-2192.23031), range0.getLowerBound(), 0.01D);
      assertEquals((-2192.23031), range0.getUpperBound(), 0.01D);
      assertEquals((-2192.23031), range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      
      RectangleConstraint rectangleConstraint2 = emptyBlock0.toContentConstraint(rectangleConstraint1);
      assertNotNull(rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals((-2192.23031), rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals((-2192.23031), emptyBlock0.getWidth(), 0.01D);
      assertEquals((-2192.23031), emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01D);
      assertEquals((-2192.23031), range0.getLowerBound(), 0.01D);
      assertEquals((-2192.23031), range0.getUpperBound(), 0.01D);
      assertEquals((-2192.23031), range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint2);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals((-2192.23031), rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals((-2192.23031), emptyBlock0.getWidth(), 0.01D);
      assertEquals((-2192.23031), emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals((-2192.23031), range0.getLowerBound(), 0.01D);
      assertEquals((-2192.23031), range0.getUpperBound(), 0.01D);
      assertEquals((-2192.23031), range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth(rectangle2D_Double0.y);
      assertNotNull(rectangleConstraint1);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      boolean boolean0 = true;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toRangeHeight(range0);
      assertNotNull(rectangleConstraint2);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(Double.NaN, rectangleConstraint2.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint2);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(Double.NaN, rectangleConstraint2.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      double double0 = 0.0;
      EmptyBlock emptyBlock0 = new EmptyBlock(double0, double0);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      
      blockContainer0.add((Block) emptyBlock0);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(false, blockContainer0.isEmpty());
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(false, blockContainer0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-2192.23031);
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(double0, double0);
      assertNotNull(range0);
      assertEquals((-2192.23031), range0.getUpperBound(), 0.01D);
      assertEquals((-2192.23031), range0.getCentralValue(), 0.01D);
      assertEquals((-2192.23031), range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals((-2192.23031), range0.getUpperBound(), 0.01D);
      assertEquals((-2192.23031), range0.getCentralValue(), 0.01D);
      assertEquals((-2192.23031), range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals((-2192.23031), range0.getUpperBound(), 0.01D);
      assertEquals((-2192.23031), range0.getCentralValue(), 0.01D);
      assertEquals((-2192.23031), range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth(rectangle2D_Double0.x);
      assertNotNull(rectangleConstraint1);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertNotNull(defaultListCellRenderer_UIResource0);
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      
      Rectangle rectangle0 = defaultListCellRenderer_UIResource0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      boolean boolean0 = true;
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(boolean0);
      assertNull(range0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (double) rectangle0.width);
      assertNotNull(rectangleConstraint0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      double double0 = (-26.231844582925934);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight(double0);
      assertNotNull(rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals((-26.231844582925934), rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      boolean boolean0 = false;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeHeight(range0);
      assertNotNull(rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(Double.NaN, rectangleConstraint1.getHeight(), 0.01D);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      borderArrangement0.clear();
  }
}
