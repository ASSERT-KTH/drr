/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:43:27 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.DateUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00() {}
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       int int0 = 2855;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2855,MONTH=2855,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2855,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2855,HOUR_OF_DAY=2855,MINUTE=2855,SECOND=2855,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=35692788155000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3101,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=22,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=22,SECOND=35,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(dateUtils_DateIterator0);
//       
//       // Undeclared exception!
//       try {
//         Object object0 = dateUtils_DateIterator0.next();
//         fail("Expecting exception: NoSuchElementException");
//       
//       } catch(NoSuchElementException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test01() {}
//   @Test(timeout = 4000)
//   public void test01()  throws Throwable  {
//       int int0 = (-16);
//       int int1 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int1, int0, int0, int0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-16,MONTH=-16,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-16,HOUR_OF_DAY=-16,MINUTE=-16,SECOND=-16,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)DateUtils.round((Calendar) mockGregorianCalendar0, int1);
//       assertFalse(int1 == int0);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int0 == int1);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-16,MONTH=-16,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-16,HOUR_OF_DAY=-16,MINUTE=-16,SECOND=-16,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotNull(mockGregorianCalendar1);
//       
//       DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(int1 == int0);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int0 == int1);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-16,MONTH=-16,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-16,HOUR_OF_DAY=-16,MINUTE=-16,SECOND=-16,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotNull(dateUtils_DateIterator0);
//       
//       MockGregorianCalendar mockGregorianCalendar2 = (MockGregorianCalendar)dateUtils_DateIterator0.next();
//       assertFalse(int1 == int0);
//       assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar0));
//       assertTrue(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar2));
//       assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int0 == int1);
//       assertEquals(true, mockGregorianCalendar2.isLenient());
//       assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167392000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar2.toString());
//       assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-16,MONTH=-16,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-16,HOUR_OF_DAY=-16,MINUTE=-16,SECOND=-16,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167392000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertNotSame(mockGregorianCalendar2, mockGregorianCalendar0);
//       assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar2);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar2);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotNull(mockGregorianCalendar2);
//   }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "The field ";
      int int0 = 520;
      // Undeclared exception!
      try {
        Iterator iterator0 = DateUtils.iterator((Object) string0, int0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not iterate based on The field 
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Date date0 = null;
      int int0 = (-1685);
      // Undeclared exception!
      try {
        Iterator iterator0 = DateUtils.iterator((Object) date0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       int int0 = (-604);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-604,MONTH=-604,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-604,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-604,HOUR_OF_DAY=-604,MINUTE=-604,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       int int1 = 4;
//       Iterator iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-82871042640000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=658,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=344,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=56,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotNull(iterator0);
//   }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(mockGregorianCalendar0);
      
      int int0 = 2812;
      // Undeclared exception!
      try {
        Iterator iterator0 = DateUtils.iterator((Object) mockGregorianCalendar0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The range style 2812 is not valid.
         //
      }
  }

  @Test(timeout = 4000)
  public void test06() {}
//   @Test(timeout = 4000)
//   public void test06()  throws Throwable  {
//       int int0 = 0;
//       int int1 = 6;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int0, int0, int1, int0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=6,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=6,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Iterator iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=6,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=6,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(iterator0);
//   }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 5;
      String string0 = "Unable to parse the date: ";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("Unable to parse the date: ", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Unable to parse the date: ,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(5, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) simpleTimeZone0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("Unable to parse the date: ", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Unable to parse the date: ,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(5, simpleTimeZone0.getRawOffset());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Unable to parse the date: ,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=325,ZONE_OFFSET=5,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("Unable to parse the date: ", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Unable to parse the date: ,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(5, simpleTimeZone0.getRawOffset());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Unable to parse the date: ,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=325,ZONE_OFFSET=5,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(date0);
      
      Iterator iterator0 = DateUtils.iterator((Object) date0, int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("Unable to parse the date: ", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Unable to parse the date: ,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(5, simpleTimeZone0.getRawOffset());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Unable to parse the date: ,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=325,ZONE_OFFSET=5,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test08() {}
//   @Test(timeout = 4000)
//   public void test08()  throws Throwable  {
//       int int0 = 12;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=12,MONTH=12,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=12,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       int int1 = 4;
//       Iterator iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61756084080000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=13,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=12,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=12,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(iterator0);
//   }

  @Test(timeout = 4000)
  public void test09() {}
//   @Test(timeout = 4000)
//   public void test09()  throws Throwable  {
//       int int0 = 2;
//       String string0 = "U3!4Va\"";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=U3!4Va\",offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("U3!4Va\"", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertNotNull(simpleTimeZone0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) simpleTimeZone0);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=U3!4Va\",offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("U3!4Va\"", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=U3!4Va\",offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=322,ZONE_OFFSET=2,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=U3!4Va\",offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("U3!4Va\"", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=U3!4Va\",offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=322,ZONE_OFFSET=2,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(date0);
//       
//       int int1 = 3;
//       Iterator iterator0 = DateUtils.iterator(date0, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=U3!4Va\",offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("U3!4Va\"", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=U3!4Va\",offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=322,ZONE_OFFSET=2,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(iterator0);
//   }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1;
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      assertNotNull(mockDate0);
      
      int int1 = 2;
      Iterator iterator0 = DateUtils.iterator((Date) mockDate0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Calendar calendar0 = null;
      int int0 = (-1308);
      // Undeclared exception!
      try {
        Iterator iterator0 = DateUtils.iterator(calendar0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1;
      Date date0 = null;
      // Undeclared exception!
      try {
        Iterator iterator0 = DateUtils.iterator(date0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 9;
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)DateUtils.round((Calendar) mockGregorianCalendar0, int0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals(true, mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392465600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotNull(mockGregorianCalendar1);
      
      MockGregorianCalendar mockGregorianCalendar2 = (MockGregorianCalendar)DateUtils.truncate((Calendar) mockGregorianCalendar1, int0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar2));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar0));
      assertTrue(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392465600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar2.toString());
      assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar2.isLenient());
      assertEquals(true, mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392465600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotNull(mockGregorianCalendar2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 9;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertEquals("Sat Oct 09 09:09:09 GMT 1909", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Date date0 = DateUtils.truncate((Date) mockDate0, int0);
      assertEquals("Sat Oct 09 09:09:09 GMT 1909", mockDate0.toString());
      assertEquals("Sat Oct 09 00:00:00 GMT 1909", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test15() {}
//   @Test(timeout = 4000)
//   public void test15()  throws Throwable  {
//       int int0 = 158;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=158,MONTH=158,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=158,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       int int1 = 1001;
//       MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)DateUtils.round((Calendar) mockGregorianCalendar0, int1);
//       assertFalse(int0 == int1);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(int1 == int0);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=158,MONTH=158,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=158,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=171,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=1,DAY_OF_YEAR=217,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotNull(mockGregorianCalendar1);
//   }

  @Test(timeout = 4000)
  public void test16() {}
//   @Test(timeout = 4000)
//   public void test16()  throws Throwable  {
//       int int0 = 163;
//       int int1 = 2859;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int0, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2859,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2859,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       int int2 = 1001;
//       MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)DateUtils.round((Calendar) mockGregorianCalendar0, int2);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2859,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2859,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2880,MONTH=5,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=122,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotNull(mockGregorianCalendar1);
//   }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      int int0 = 1001;
      Date date0 = DateUtils.round((Object) mockDate0, int0);
      assertEquals("Sun Feb 16 00:00:00 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test18() {}
//   @Test(timeout = 4000)
//   public void test18()  throws Throwable  {
//       int int0 = 12;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=12,MONTH=12,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=12,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)DateUtils.round((Calendar) mockGregorianCalendar0, int0);
//       assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=12,MONTH=12,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=12,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61756084080000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=13,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=12,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=12,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotNull(mockGregorianCalendar1);
//   }

  @Test(timeout = 4000)
  public void test19() {}
//   @Test(timeout = 4000)
//   public void test19()  throws Throwable  {
//       int int0 = (-16);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-16,MONTH=-16,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-16,HOUR_OF_DAY=-16,MINUTE=-16,SECOND=-16,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       // Undeclared exception!
//       try {
//         Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // The field -16 is not supported
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      int int0 = 13;
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)DateUtils.round((Calendar) mockGregorianCalendar0, int0);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar1.isLenient());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotNull(mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "gN'0>Ja";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("GN'0>JA", locale0.getCountry());
      assertEquals("gn'0>ja", locale0.getLanguage());
      assertEquals("gN'0>Ja", locale0.getVariant());
      assertEquals("gn'0>ja_GN'0>JA_gN'0>Ja", locale0.toString());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("GN'0>JA", locale0.getCountry());
      assertEquals("gn'0>ja", locale0.getLanguage());
      assertEquals("gN'0>Ja", locale0.getVariant());
      assertEquals("gn'0>ja_GN'0>JA_gN'0>Ja", locale0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      int int0 = 14;
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)DateUtils.truncate((Calendar) mockGregorianCalendar0, int0);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("GN'0>JA", locale0.getCountry());
      assertEquals("gn'0>ja", locale0.getLanguage());
      assertEquals("gN'0>Ja", locale0.getVariant());
      assertEquals("gn'0>ja_GN'0>JA_gN'0>Ja", locale0.toString());
      assertEquals(true, mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotNull(mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 280000016;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertEquals("Tue Feb 24 04:30:08 GMT 280413953", mockDate0.toString());
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try {
        Date date0 = DateUtils.truncate((Date) mockDate0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
      }
  }

  @Test(timeout = 4000)
  public void test23() {}
//   @Test(timeout = 4000)
//   public void test23()  throws Throwable  {
//       int int0 = 158;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=158,MONTH=158,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=158,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       // Undeclared exception!
//       try {
//         Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // The field 158 is not supported
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-1731);
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try {
        Date date0 = DateUtils.truncate(object0, int0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not truncate java.lang.Object@17a964c0
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      String string0 = null;
      // Undeclared exception!
      try {
        Date date0 = DateUtils.truncate((Object) string0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Calendar calendar0 = null;
      int int0 = 11;
      // Undeclared exception!
      try {
        Calendar calendar1 = DateUtils.truncate(calendar0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1;
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Iterator iterator0 = DateUtils.iterator((Date) mockDate0, int0);
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 2825;
      Date date0 = null;
      // Undeclared exception!
      try {
        Date date1 = DateUtils.truncate(date0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-2);
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertEquals("Thu Oct 28 21:57:58 GMT 1897", mockDate0.toString());
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try {
        Date date0 = DateUtils.truncate((Object) mockDate0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -2 is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = (-1954);
      // Undeclared exception!
      try {
        Date date0 = DateUtils.round(object0, int0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not round java.lang.Object@1e6cdd18
         //
      }
  }

  @Test(timeout = 4000)
  public void test31() {}
//   @Test(timeout = 4000)
//   public void test31()  throws Throwable  {
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       int int0 = 10;
//       Date date0 = DateUtils.round((Object) mockGregorianCalendar0, int0);
//       assertEquals("Fri Feb 14 20:00:00 GMT 2014", date0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(date0);
//   }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = null;
      int int0 = 13;
      // Undeclared exception!
      try {
        Date date0 = DateUtils.round(object0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Calendar calendar0 = null;
      int int0 = 1584;
      // Undeclared exception!
      try {
        Calendar calendar1 = DateUtils.round(calendar0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Date date0 = null;
      int int0 = (-27);
      // Undeclared exception!
      try {
        Date date1 = DateUtils.round(date0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      Date date0 = DateUtils.parseDate(string0, stringArray0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "+a)<-";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      stringArray0[3] = string1;
      assertNotNull(stringArray0[3]);
      
      try {
        Date date0 = DateUtils.parseDate(string0, stringArray0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unable to parse the date: +a)<-
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "2";
      String[] stringArray0 = null;
      // Undeclared exception!
      try {
        Date date0 = DateUtils.parseDate(string0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date and Patterns must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try {
        Date date0 = DateUtils.parseDate(string0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date and Patterns must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test39() {}
//   @Test(timeout = 4000)
//   public void test39()  throws Throwable  {
//       int int0 = 1;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)DateUtils.round((Calendar) mockGregorianCalendar0, int0);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotNull(mockGregorianCalendar1);
//       
//       boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar1, (Calendar) mockGregorianCalendar0);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62135769600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133091200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test40() {}
//   @Test(timeout = 4000)
//   public void test40()  throws Throwable  {
//       int int0 = 161;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=161,MONTH=161,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=161,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=161,HOUR_OF_DAY=161,MINUTE=161,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       int int1 = 2066;
//       int int2 = 0;
//       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(int0, int0, int0, int1, int0, int2);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=161,MONTH=161,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=161,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2066,HOUR_OF_DAY=2066,MINUTE=161,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotNull(mockGregorianCalendar1);
//       
//       boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-56642008740000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=175,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=41,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-56648866740000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=174,MONTH=10,WEEK_OF_YEAR=47,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=318,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=41,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test41() {}
//   @Test(timeout = 4000)
//   public void test41()  throws Throwable  {
//       int int0 = 1;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotNull(mockGregorianCalendar1);
//       
//       boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133091200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133087540000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test42() {}
//   @Test(timeout = 4000)
//   public void test42()  throws Throwable  {
//       int int0 = 161;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=161,MONTH=161,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=161,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=161,HOUR_OF_DAY=161,MINUTE=161,SECOND=161,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=161,MONTH=161,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=161,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=161,HOUR_OF_DAY=161,MINUTE=161,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotNull(mockGregorianCalendar1);
//       
//       boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-56648866579000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=174,MONTH=10,WEEK_OF_YEAR=47,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=318,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=43,SECOND=41,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-56648866740000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=174,MONTH=10,WEEK_OF_YEAR=47,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=318,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=41,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 2458;
      String string0 = "e";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=e,offset=2458,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("e", simpleTimeZone0.getID());
      assertEquals(2458, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) simpleTimeZone0, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=e,offset=2458,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=23,MILLISECOND=778,ZONE_OFFSET=2458,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("java.util.SimpleTimeZone[id=e,offset=2458,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("e", simpleTimeZone0.getID());
      assertEquals(2458, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(mockGregorianCalendar0);
      
      int int1 = 0;
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)DateUtils.round((Calendar) mockGregorianCalendar0, int1);
      assertFalse(int1 == int0);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(int0 == int1);
      assertEquals(4, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=e,offset=2458,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=2458,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(2, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar1.isLenient());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=e,offset=2458,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=23,MILLISECOND=778,ZONE_OFFSET=2458,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("java.util.SimpleTimeZone[id=e,offset=2458,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("e", simpleTimeZone0.getID());
      assertEquals(2458, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotNull(mockGregorianCalendar1);
      
      boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar1, (Calendar) mockGregorianCalendar0);
      assertFalse(int1 == int0);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(int0 == int1);
      assertEquals(4, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62135769602458,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=e,offset=2458,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=53,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=2458,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=e,offset=2458,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=23,MILLISECOND=778,ZONE_OFFSET=2458,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("java.util.SimpleTimeZone[id=e,offset=2458,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("e", simpleTimeZone0.getID());
      assertEquals(2458, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44() {}
//   @Test(timeout = 4000)
//   public void test44()  throws Throwable  {
//       int int0 = (-2064);
//       Calendar calendar0 = null;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2064,MONTH=-2064,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2064,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2064,HOUR_OF_DAY=-2064,MINUTE=-2064,SECOND=-2064,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       // Undeclared exception!
//       try {
//         boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar0, calendar0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // The date must not be null
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test45() {}
//   @Test(timeout = 4000)
//   public void test45()  throws Throwable  {
//       int int0 = 1;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133091200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertTrue(boolean0);
//   }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test47() {}
//   @Test(timeout = 4000)
//   public void test47()  throws Throwable  {
//       int int0 = 161;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=161,MONTH=161,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=161,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=161,HOUR_OF_DAY=161,MINUTE=161,SECOND=161,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=161,MONTH=161,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=161,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=161,HOUR_OF_DAY=161,MINUTE=161,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotNull(mockGregorianCalendar1);
//       
//       boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-56648866579000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=174,MONTH=10,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=43,SECOND=41,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-56648866740000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=174,MONTH=10,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=41,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test48() {}
//   @Test(timeout = 4000)
//   public void test48()  throws Throwable  {
//       int int0 = 1;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Calendar calendar0 = null;
//       // Undeclared exception!
//       try {
//         boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, calendar0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // The date must not be null
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test49() {}
//   @Test(timeout = 4000)
//   public void test49()  throws Throwable  {
//       int int0 = 161;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=161,MONTH=161,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=161,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=161,HOUR_OF_DAY=161,MINUTE=161,SECOND=161,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-56648866579000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=174,MONTH=10,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=43,SECOND=41,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertTrue(boolean0);
//   }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameInstant(calendar0, calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 9;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertEquals("Sat Oct 09 09:09:09 GMT 1909", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Date date0 = DateUtils.addSeconds((Date) mockDate0, int0);
      assertEquals("Sat Oct 09 09:09:09 GMT 1909", mockDate0.toString());
      assertEquals("Sat Oct 09 09:09:18 GMT 1909", date0.toString());
      assertNotNull(date0);
      
      boolean boolean0 = DateUtils.isSameInstant(date0, (Date) mockDate0);
      assertEquals("Sat Oct 09 09:09:09 GMT 1909", mockDate0.toString());
      assertEquals("Sat Oct 09 09:09:18 GMT 1909", date0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Date date0 = null;
      int int0 = 20;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertEquals("Tue Sep 20 20:20:00 GMT 1921", mockDate0.toString());
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameInstant(date0, date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 893;
      int int1 = (-1);
      MockDate mockDate0 = new MockDate(int0, int1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("Sun Nov 29 00:00:00 GMT 2792", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Date date0 = DateUtils.addWeeks((Date) mockDate0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("Sun Nov 22 00:00:00 GMT 2792", date0.toString());
      assertEquals("Sun Nov 29 00:00:00 GMT 2792", mockDate0.toString());
      assertNotNull(date0);
      
      boolean boolean0 = DateUtils.isSameDay(date0, (Date) mockDate0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("Sun Nov 22 00:00:00 GMT 2792", date0.toString());
      assertEquals("Sun Nov 29 00:00:00 GMT 2792", mockDate0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-2);
      String string0 = "gN'0>Ja";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("gn'0>ja", locale0.getLanguage());
      assertEquals("gn'0>ja_GN'0>JA_gN'0>Ja", locale0.toString());
      assertEquals("GN'0>JA", locale0.getCountry());
      assertEquals("gN'0>Ja", locale0.getVariant());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("gn'0>ja", locale0.getLanguage());
      assertEquals("gn'0>ja_GN'0>JA_gN'0>Ja", locale0.toString());
      assertEquals("GN'0>JA", locale0.getCountry());
      assertEquals("gN'0>Ja", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("gn'0>ja", locale0.getLanguage());
      assertEquals("gn'0>ja_GN'0>JA_gN'0>Ja", locale0.toString());
      assertEquals("GN'0>JA", locale0.getCountry());
      assertEquals("gN'0>Ja", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertEquals("Thu Oct 28 21:57:58 GMT 1897", mockDate0.toString());
      assertNotNull(mockDate0);
      
      boolean boolean0 = DateUtils.isSameDay(date0, (Date) mockDate0);
      assertEquals("gn'0>ja", locale0.getLanguage());
      assertEquals("gn'0>ja_GN'0>JA_gN'0>Ja", locale0.toString());
      assertEquals("GN'0>JA", locale0.getCountry());
      assertEquals("gN'0>Ja", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Thu Oct 28 21:57:58 GMT 1897", mockDate0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57() {}
//   @Test(timeout = 4000)
//   public void test57()  throws Throwable  {
//       int int0 = 1160;
//       int int1 = (-2680);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1160,MONTH=1160,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1160,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1160,HOUR_OF_DAY=1160,MINUTE=1160,SECOND=-2680,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(int1, int0, int1);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2680,MONTH=1160,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2680,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotNull(mockGregorianCalendar1);
//       
//       boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-22405584280000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1259,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=357,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=35,SECOND=20,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-143922787200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2592,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test58() {}
//   @Test(timeout = 4000)
//   public void test58()  throws Throwable  {
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Calendar calendar0 = null;
//       // Undeclared exception!
//       try {
//         boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, calendar0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // The date must not be null
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameDay(calendar0, calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string0 = "M";
      Locale locale0 = new Locale(string0, string0);
      assertEquals("m", locale0.getLanguage());
      assertEquals("m_M", locale0.toString());
      assertEquals("M", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0, locale0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("m", locale0.getLanguage());
      assertEquals("m_M", locale0.toString());
      assertEquals("M", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("m", locale0.getLanguage());
      assertEquals("m_M", locale0.toString());
      assertEquals("M", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(date0);
      
      Date date1 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameDay(date0, date1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 893;
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertEquals("Sat Nov 09 00:00:00 GMT 2869", mockDate0.toString());
      assertNotNull(mockDate0);
      
      boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, (Date) mockDate0);
      assertEquals("Sat Nov 09 00:00:00 GMT 2869", mockDate0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameDay(date0, date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test63() {}
//   @Test(timeout = 4000)
//   public void test63()  throws Throwable  {
//       int int0 = (-3490);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3490,MONTH=-3490,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3490,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-181783267200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3792,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=220,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(dateUtils_DateIterator0);
//       
//       // Undeclared exception!
//       try {
//         dateUtils_DateIterator0.remove();
//         fail("Expecting exception: UnsupportedOperationException");
//       
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test64() {}
//   @Test(timeout = 4000)
//   public void test64()  throws Throwable  {
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392322881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(dateUtils_DateIterator0);
//       
//       boolean boolean0 = dateUtils_DateIterator0.hasNext();
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392322881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 10;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Date date0 = DateUtils.addDays((Date) mockDate0, int0);
      assertEquals("Mon Feb 24 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 1;
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Date date0 = DateUtils.addMilliseconds((Date) mockDate0, int0);
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = (-2);
      String string0 = "gN'0>Ja";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("GN'0>JA", locale0.getCountry());
      assertEquals("gn'0>ja_GN'0>JA_gN'0>Ja", locale0.toString());
      assertEquals("gN'0>Ja", locale0.getVariant());
      assertEquals("gn'0>ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("GN'0>JA", locale0.getCountry());
      assertEquals("gn'0>ja_GN'0>JA_gN'0>Ja", locale0.toString());
      assertEquals("gN'0>Ja", locale0.getVariant());
      assertEquals("gn'0>ja", locale0.getLanguage());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("GN'0>JA", locale0.getCountry());
      assertEquals("gn'0>ja_GN'0>JA_gN'0>Ja", locale0.toString());
      assertEquals("gN'0>Ja", locale0.getVariant());
      assertEquals("gn'0>ja", locale0.getLanguage());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      Date date1 = DateUtils.addMonths(date0, int0);
      assertFalse(date0.equals((Object)date1));
      assertFalse(date1.equals((Object)date0));
      assertEquals("GN'0>JA", locale0.getCountry());
      assertEquals("gn'0>ja_GN'0>JA_gN'0>Ja", locale0.toString());
      assertEquals("gN'0>Ja", locale0.getVariant());
      assertEquals("gn'0>ja", locale0.getLanguage());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("Wed Aug 15 00:00:00 GMT 1582", date1.toString());
      assertNotSame(date0, date1);
      assertNotSame(date1, date0);
      assertNotNull(date1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 10;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Date date0 = DateUtils.addMinutes((Date) mockDate0, int0);
      assertEquals("Fri Feb 14 20:31:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      assertNotNull(dateUtils0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 10;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Date date0 = DateUtils.addHours((Date) mockDate0, int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Sat Feb 15 06:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Date date0 = null;
      int int0 = 12;
      // Undeclared exception!
      try {
        Date date1 = DateUtils.addYears(date0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }
}
