/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:28:23 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

 
public class StringUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "9\\4\\N9-vsa:Rws@h'I8oY;O_-zo9l";
      byte[] byteArray0 = new byte[4];
      try {
        String string1 = StringUtils.toString(byteArray0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 9\\4\\N9-vsa:Rws@h'I8oY;O_-zo9l
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "";
      String string1 = "NTg.i\\";
      assertNotSame(string1, string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string0;
      assertNotNull(charSequenceArray0[0]);
      assertEquals("", charSequenceArray0[0].toString());
      assertEquals(0, charSequenceArray0[0].length());
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string1, charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "U[d[PJ>i~d";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string0, (CharSequence[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "...";
      CharSequence charSequence0 = null;
      char char0 = 'A';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny(charSequence0, (CharSequence[]) stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "+`^gSt";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) string1, (CharSequence) string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "{E?U~!dp~g~V)";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) string1, (CharSequence) string1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "%B";
      String string1 = null;
      boolean boolean0 = StringUtils.endsWith((CharSequence) string1, (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("China", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) string0;
      assertNotNull(charSequenceArray0[0]);
      assertEquals("China", charSequenceArray0[0].toString());
      assertEquals(5, charSequenceArray0[0].length());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) string0, charSequenceArray0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("China", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) string0, charSequenceArray0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) string0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "p})y0";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertEquals("p})y0", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = null;
      boolean boolean0 = StringUtils.startsWith((CharSequence) string2, (CharSequence) string1);
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils";
      int int0 = 0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(string0, string0, int0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.toString());
      
      String string1 = sQLInvalidAuthorizationSpecException0.toString();
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.lang3.StringUtils", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = null;
      String string3 = StringUtils.substringAfter(string2, string1);
      assertNull(string3);
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) string3, (CharSequence) string2);
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = ";^::(";
      String string1 = "W?";
      assertNotSame(string1, string0);
      
      int int0 = 1;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "+`^gSt";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.defaultIfEmpty(string0, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals("+`^gSt", string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      
      int int0 = 3626;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string1, int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertEquals(6, int1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = ";^::(";
      int int0 = 1;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "+`^gSt";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = 4;
      String string2 = StringUtils.defaultIfEmpty(string0, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("+`^gSt", string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string1, int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "+`^gSt";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = 4;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "%B";
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) string0);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try {
        int int1 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = null;
      char char0 = 'Y';
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0, (int) char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "QK%F>9";
      String string1 = "#-2hC";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(6, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "U[d[PJ>i~d";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertEquals("U[d[PJ>i~d", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = "";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertEquals(10, int0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "ative";
      String[] stringArray0 = new String[10];
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance((CharSequence) stringArray0[6], (CharSequence) stringArray0[4]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils";
      int int0 = 0;
      String string1 = StringUtils.repeat(string0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try {
        int int1 = StringUtils.getLevenshteinDistance(charSequence0, (CharSequence) string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "{E?U~!dp~g~V)";
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "YHeL";
      String string1 = "p?\"^]lS/^BG";
      assertNotSame(string1, string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) string0;
      assertNotNull(charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0[0].length());
      assertEquals("YHeL", charSequenceArray0[0].toString());
      
      charSequenceArray0[1] = (CharSequence) string1;
      assertNotNull(charSequenceArray0[1]);
      assertEquals("p?\"^]lS/^BG", charSequenceArray0[1].toString());
      assertEquals(11, charSequenceArray0[1].length());
      
      charSequenceArray0[2] = (CharSequence) string0;
      assertNotNull(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0[2].length());
      assertEquals("YHeL", charSequenceArray0[2].toString());
      
      charSequenceArray0[3] = (CharSequence) string1;
      assertNotNull(charSequenceArray0[3]);
      assertEquals("p?\"^]lS/^BG", charSequenceArray0[3].toString());
      assertEquals(11, charSequenceArray0[3].length());
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("China", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) string0;
      assertNotNull(charSequenceArray0[0]);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals(5, charSequenceArray0[0].length());
      assertEquals("China", charSequenceArray0[0].toString());
      
      charSequenceArray0[1] = (CharSequence) string0;
      assertNotNull(charSequenceArray0[1]);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals(5, charSequenceArray0[1].length());
      assertEquals("China", charSequenceArray0[1].toString());
      
      charSequenceArray0[2] = (CharSequence) string0;
      assertNotNull(charSequenceArray0[2]);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("China", charSequenceArray0[2].toString());
      assertEquals(5, charSequenceArray0[2].length());
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "IllegalAccessException occurred";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "0}3}.L";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("0}3}.L", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "Array and element cannot both be null";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = "A[y.";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) stringArray0[0], (CharSequence) string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, int0);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "#z}.mO|~!Kk=<";
      String string1 = StringUtils.trimToNull(string0);
      assertNotNull(string1);
      assertEquals("#z}.mO|~!Kk=<", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = 392;
      String string2 = StringUtils.substring(string1, int0, int0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) string0, (CharSequence) string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, int1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "4}kD76,Y2R(x%0,?/L{";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string1, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("4}kD76,Y2R(x%0,?/L{", string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = File.pathSeparator;
      assertNotNull(string0);
      assertEquals(":", string0);
      
      String string1 = null;
      String string2 = StringUtils.difference(string0, string1);
      assertNotNull(string2);
      assertEquals(":", string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.difference(string0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "4}kD76,Y2R(x%0,?/L{";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.difference(string1, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "#";
      int int0 = 0;
      String string1 = "Cannot store ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replace(string1, string1, string0, int0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Cannot store ", string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      
      int int1 = 10;
      String string3 = StringUtils.abbreviateMiddle(string2, string0, int1);
      assertNotNull(string3);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int0 == int1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Canno#ore ", string3);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = ";)?9O:9[K;#hukBbA";
      char char0 = 'e';
      String string1 = StringUtils.abbreviateMiddle(string0, string0, (int) char0);
      assertNotNull(string1);
      assertEquals(";)?9O:9[K;#hukBbA", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "#";
      int int0 = (-2496);
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("#", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.abbreviateMiddle(string0, string1, int0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("#", string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      char char0 = '(';
      String string0 = StringUtils.join(objectArray0, char0, (int) char0, (int) char0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviateMiddle(string0, string0, (int) char0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "+`^gSt+`^gSt";
      int int0 = 955;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("+`^gSt+`^gStstring1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.repeat(string1, int0);
      int int1 = Integer.MAX_VALUE;
      String string3 = StringUtils.abbreviate(string2, int1, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "+`^gSt+`^gSt";
      int int0 = 955;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("+`^gSt+`^gStstring1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.repeat(string1, int0);
      String string3 = StringUtils.abbreviate(string2, int0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = null;
      char char0 = 'Y';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "+`^gSt+`^gSt";
      int int0 = 955;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("+`^gSt+`^gSt                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      char char0 = '?';
      String string2 = StringUtils.reverseDelimited(string1, char0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("+`^gSt+`^gStstring2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      char char0 = 'u';
      String string0 = locale0.getExtension(char0);
      assertNull(string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      String string1 = StringUtils.reverse(string0);
      assertNull(string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = ";)?9O:9[K;#hukBbA";
      String string1 = StringUtils.reverse(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("AbBkuh#;K[9:O9?);", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = locale0.getDisplayScript(locale0);
      assertNotNull(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfEmpty(string0, string0);
      assertNotNull(string1);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString(string1, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "1Be|Zow2x8M";
      String string1 = StringUtils.defaultString(string0);
      assertNotNull(string1);
      assertEquals("1Be|Zow2x8M", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "c6\"";
      String string1 = StringUtils.remove(string0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "The Array must not be null";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.removeEnd(string2, string1);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("The Array must not be null", string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "#z}.mO|~!Kk=<";
      String string1 = StringUtils.trimToNull(string0);
      assertNotNull(string1);
      assertEquals("#z}.mO|~!Kk=<", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = 392;
      String string2 = StringUtils.substring(string1, int0, int0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(boolean0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "normalize";
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "#";
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "+`^gSt";
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNotNull(string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("+`^GST", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      
      String string0 = null;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "+`^gSt";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "4T";
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "8wmXL0K;";
      boolean boolean0 = StringUtils.isNumeric((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumeric((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = " ";
      String string1 = null;
      String string2 = StringUtils.defaultIfBlank(string0, string1);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) string2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "0}3}.L";
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = StringUtils.lowerCase(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("strings must not be null", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = ";^::(";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(true, listIterator0.hasNext());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(1, linkedList0.size());
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, string0);
      assertNotNull(string1);
      assertEquals(1, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(true, listIterator0.hasPrevious());
      assertEquals(0, listIterator0.previousIndex());
      assertEquals(1, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) string1);
      assertEquals(1, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(true, listIterator0.hasPrevious());
      assertEquals(0, listIterator0.previousIndex());
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = ";^::(";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string0 = locale0.getDisplayCountry(locale0);
      assertNotNull(string0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("\u53F0\u7063", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "U[d[PJ>i~d";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertEquals("U[d[PJ>i~d", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string0);
      assertNull(stringArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(boolean0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "U[d[PJ>i~d";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertEquals("U[d[PJ>i~d", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string1);
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "The stripAccents(CharSequence) method requires at least Java6, but got: ";
      String string1 = StringUtils.trimToNull(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("The stripAccents(CharSequence) method requires at least Java6, but got:", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "!(]Ph>ouR{/";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("!(]Ph>ouR{/", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "G";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.normalizeSpace(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "IllegalAccessException occurred";
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isAlpha(charSequence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "XTRTX";
      int int0 = (-2885);
      int int1 = 554;
      String string1 = StringUtils.abbreviate(string0, int0, int1);
      assertNotNull(string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("XTRTX", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = null;
      String string3 = StringUtils.stripToNull(string2);
      assertNull(string3);
      
      int int2 = StringUtils.countMatches((CharSequence) string1, (CharSequence) string3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "b|G!\"Lx|6~[VEc";
      Object[] objectArray0 = new Object[3];
      String string1 = StringUtils.join(objectArray0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("b|G!\"Lx|6~[VEcb|G!\"Lx|6~[VEc", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.countMatches((CharSequence) string1, (CharSequence) string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.swapCase(string1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "dG-q";
      String string1 = StringUtils.swapCase(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("Dg-Q", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "%B";
      String string1 = StringUtils.uncapitalize(string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("%B", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = null;
      int int0 = 256;
      char char0 = 'l';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize(string1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = locale0.getDisplayCountry(locale0);
      assertNotNull(string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("\u53F0\u7063", string0);
      
      String string1 = StringUtils.remove(string0, string0);
      assertNotNull(string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.capitalize(string1);
      assertNotNull(string2);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertNull(string1);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertSame(string0, string1);
      
      String string2 = StringUtils.lowerCase(string1, locale0);
      assertNotNull(string2);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      String string1 = mockFile0.getParent();
      assertNull(string1);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      String string2 = StringUtils.upperCase(string1, locale0);
      assertNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.upperCase(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNull(string1);
      
      int int0 = 16;
      String string2 = "JA{:UIU6%%GW8W.;DI";
      String string3 = StringUtils.center(string2, int0, string1);
      assertNotNull(string3);
      assertEquals("JA{:UIU6%%GW8W.;DI", string3);
      assertSame(string3, string2);
      assertSame(string2, string3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 4682;
      String string0 = null;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "U[d[PJ>i~d";
      int int0 = 4682;
      String string1 = StringUtils.center(string0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEqualsd[PJ>i~dstring1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = StringUtils.length(charSequence0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "Arguments cannot both be null";
      char char0 = ' ';
      String string1 = StringUtils.leftPad(string0, (int) char0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("ArgArguments cannot both be null", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "4}kD76,Y2^R(x[0,?/I{";
      int int0 = 0;
      String string1 = StringUtils.center(string0, int0);
      assertNotNull(string1);
      assertEquals("4}kD76,Y2^R(x[0,?/I{", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = StringUtils.leftPad(string1, int0, string0);
      assertNotNull(string2);
      assertEquals("4}kD76,Y2^R(x[0,?/I{", string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 4682;
      String string0 = "";
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEqualsstring1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "Q";
      String string1 = "org.apache.commons.lang3.exception.CloneFailedException";
      assertNotSame(string1, string0);
      
      int int0 = 48;
      String string2 = StringUtils.rightPad(string0, int0, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Qorg.apache.commons.lang3.exception.CloneFailedE", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "U[d[PJ>i~d";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertEquals("U[d[PJ>i~d", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = 4682;
      String string2 = "";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.center(string1, int0, string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEqualsd[PJ>i~dstring3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "b|G!\"Lx|6~[VEc";
      Object[] objectArray0 = new Object[3];
      String string1 = StringUtils.join(objectArray0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("b|G!\"Lx|6~[VEcb|G!\"Lx|6~[VEc", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.length((CharSequence) string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(14, int0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.rightPad(string1, int0, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("b|G!\"Lx|6~[VEcb|G!\"Lx|6~[VEc", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "-PkSg(n9F7BW_gC>D5Gk`%P2";
      String string1 = null;
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      String string2 = StringUtils.capitalize(string1);
      assertNull(string2);
      
      String string3 = StringUtils.rightPad(string2, int0, string1);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "4}kD76,Y2^R(x[0,?/I{";
      int int0 = 0;
      String string1 = StringUtils.center(string0, int0);
      assertNotNull(string1);
      assertEquals("4}kD76,Y2^R(x[0,?/I{", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = null;
      String string3 = StringUtils.repeat(string1, string2, int0);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "W?";
      int int0 = 1493;
      String string1 = StringUtils.repeat(string0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEqualsstring1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char char0 = 'e';
      String string0 = "";
      String string1 = StringUtils.repeat(string0, (int) char0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "1Be|Zow2x8M";
      String string1 = StringUtils.replace(string0, string0, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("1Be|Zow2x8M", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 1;
      String string2 = StringUtils.repeat(string1, int0);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertEquals("1Be|Zow2x8M", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.exception.CloneFailedException";
      String string1 = null;
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      assertNotNull(mockThrowable0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, (Throwable) mockThrowable0);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.lang3.exception.CloneFailedException", sQLRecoverableException0.toString());
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", sQLRecoverableException0.getMessage());
      
      String string2 = sQLRecoverableException0.toString();
      assertNotNull(string2);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.lang3.exception.CloneFailedException", sQLRecoverableException0.toString());
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", sQLRecoverableException0.getMessage());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.lang3.exception.CloneFailedException", string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      
      int int0 = (-2434);
      String string3 = StringUtils.repeat(string1, string2, int0);
      assertNull(string3);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.lang3.exception.CloneFailedException", sQLRecoverableException0.toString());
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", sQLRecoverableException0.getMessage());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = ";w#L<p2m";
      int int0 = 0;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertNotNull(string1);
      assertEquals(";w#L<p2m", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.chop(string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(";w#L<p2", string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chop(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "#";
      String string1 = StringUtils.chop(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "9\\4\\N9-vsa:Rw";
      String string1 = StringUtils.chomp(string0);
      assertNotNull(string1);
      assertEquals("9\\4\\N9-vsa:Rw", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "%";
      String string1 = StringUtils.chomp(string0);
      assertNotNull(string1);
      assertEquals("%", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = ";^::(";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(true, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(1, linkedList0.size());
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, string1);
      assertNotNull(string2);
      assertEquals(0, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(1, listIterator0.nextIndex());
      assertEquals(true, listIterator0.hasPrevious());
      assertEquals(1, linkedList0.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      int int0 = (-2133);
      int int1 = 1;
      String string3 = StringUtils.overlay(string2, string1, int1, int0);
      assertNotNull(string3);
      assertEquals(0, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(1, listIterator0.nextIndex());
      assertEquals(true, listIterator0.hasPrevious());
      assertEquals(1, linkedList0.size());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = ";^::(";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.substringBetween(string0, string0);
      assertNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      int int0 = (-2133);
      String string3 = StringUtils.overlay(string1, string2, int0, int0);
      assertNotNull(string3);
      assertTrue(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.countMatches((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.overlay(string0, string0, int0, int0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "+`^gSt+`^gSt";
      int int0 = 955;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("+`^gSt+`^gStstring1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "...";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.replaceChars(string2, string1, string1);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "8wmXL0K;";
      String string1 = "g.O#J";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replaceChars(string0, string0, string1);
      assertNotNull(string2);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("g.O#J", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "+`^gSt+`^gSt";
      String string1 = "The Array must not be null";
      assertNotSame(string1, string0);
      
      int int0 = (-1734);
      String string2 = StringUtils.substring(string1, int0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("The Array must not be null", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.replaceChars(string0, string2, string2);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals("+`^gSt+`^gSt", string3);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "!(]Ph>ouR{/";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replaceChars(string0, string1, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("!(]Ph>ouR{/", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "";
      char char0 = '\\';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "normalize";
      String[] stringArray0 = new String[4];
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("normalize", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "XA`y8E";
      char char0 = 'A';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("XA`y8E", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "A79bZ}%4F%g~c!C";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertEquals("A79bZ}%4F%g~c!C", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = "The Character must not be null";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      String string3 = StringUtils.replaceEach(string2, stringArray0, stringArray0);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("The Character must not be null", string3);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "c6\"";
      String string1 = StringUtils.remove(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.remove(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("c6\"", string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = string1;
      assertNotNull(stringArray0[3]);
      
      String string3 = StringUtils.replaceEachRepeatedly(string2, stringArray0, stringArray0);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertEquals("c6\"", string3);
      assertSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "c6\"";
      String string1 = "4T";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.remove(string1, string0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("4T", string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      String[] stringArray0 = new String[4];
      String string3 = StringUtils.replaceEachRepeatedly(string2, stringArray0, stringArray0);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("4T", string3);
      assertSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertSame(string3, string1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "\\u0";
      String[] stringArray0 = new String[9];
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 9 vs 4
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "";
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "+`^gSt";
      char char0 = 'E';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
      
      String string1 = null;
      String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "+`^gSt";
      char char0 = 'E';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "c6\"";
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("c6\"", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "{E?U~!dp~g~V)";
      int int0 = 1162;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("{E?U~!dp~g~V)", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "SecurityException occurred";
      char char0 = '!';
      String string1 = StringUtils.defaultString(string0, string0);
      assertNotNull(string1);
      assertEquals("SecurityException occurred", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.replace(string1, string0, string0, (int) char0);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("SecurityException occurred", string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = null;
      char char0 = 'r';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNull(string1);
      
      String string2 = "sun.text.Normalizer";
      String string3 = StringUtils.removeStartIgnoreCase(string2, string1);
      assertNotNull(string3);
      assertEquals("sun.text.Normalizer", string3);
      assertSame(string2, string3);
      assertSame(string3, string2);
      
      String string4 = StringUtils.replace(string3, string3, string1);
      assertNotNull(string4);
      assertEquals("sun.text.Normalizer", string4);
      assertSame(string2, string4);
      assertSame(string2, string3);
      assertSame(string3, string4);
      assertSame(string3, string2);
      assertSame(string4, string3);
      assertSame(string4, string2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "";
      String string1 = "NTg.i\\";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.trim(string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("NTg.i\\", string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      
      String string3 = StringUtils.replace(string2, string0, string0);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertEquals("NTg.i\\", string3);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string1, string3);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string0 = "B_e";
      Locale locale1 = new Locale(string0, string0, string0);
      assertNotNull(locale1);
      assertEquals("B_e", locale1.getVariant());
      assertEquals("b_e", locale1.getLanguage());
      assertEquals("b_e_B_E_B_e", locale1.toString());
      assertEquals("B_E", locale1.getCountry());
      assertEquals("b_e", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      String string1 = locale0.getDisplayCountry(locale1);
      assertNotNull(string1);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("B_e", locale1.getVariant());
      assertEquals("b_e", locale1.getLanguage());
      assertEquals("b_e_B_E_B_e", locale1.toString());
      assertEquals("B_E", locale1.getCountry());
      assertEquals("b_e", locale1.getISO3Language());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("Taiwan", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      char char0 = 'a';
      String string2 = StringUtils.remove(string1, char0);
      assertNotNull(string2);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("B_e", locale1.getVariant());
      assertEquals("b_e", locale1.getLanguage());
      assertEquals("b_e_B_E_B_e", locale1.toString());
      assertEquals("B_E", locale1.getCountry());
      assertEquals("b_e", locale1.getISO3Language());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("Tiwn", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "4}kD76,Y2R(x%0,?/L{";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      char char0 = '3';
      String string2 = StringUtils.remove(string1, char0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.remove(string0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "...";
      String string1 = "\"k.";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.defaultIfBlank(string0, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      String string3 = StringUtils.removeEndIgnoreCase(string1, string2);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\"k.", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = ":f(7";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals(":f(7", string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "+`^gSt";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "XkF7#JWT.s}X?";
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      int int0 = 127;
      boolean boolean0 = treeSet0.add((Integer) int0);
      assertEquals("[127]", treeSet0.toString());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) treeSet0, string0);
      assertNotNull(string1);
      assertEquals("[127]", treeSet0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("127", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.chomp(string0, string1);
      assertNotNull(string2);
      assertEquals("[127]", treeSet0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("XkF7#JWT.s}X?", string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "The stripAccents(CharSequence) method requires at least Java6, but got: ";
      String string1 = StringUtils.trimToNull(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("The stripAccents(CharSequence) method requires at least Java6, but got:", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      int int0 = StringUtils.lastIndexOfAny((CharSequence) string1, charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.repeat(string1, string1, int0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string0 = "B_e";
      String string1 = locale0.getDisplayCountry(locale0);
      assertNotNull(string1);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u53F0\u7063", string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStartIgnoreCase(string1, string0);
      assertNotNull(string2);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u53F0\u7063", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "Arguments cannot both be null";
      int int0 = 8192;
      String string1 = StringUtils.leftPad(string0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEqualsrguments cannot both be null", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.stripStart(string0, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.removeStartIgnoreCase(string2, string1);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string3);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "4}kD76,Y2^R(x[0,?/I{";
      int int0 = 0;
      String string1 = StringUtils.center(string0, int0);
      assertNotNull(string1);
      assertEquals("4}kD76,Y2^R(x[0,?/I{", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = "-PkSg(n9F7BW_";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      char char0 = '3';
      String string3 = StringUtils.remove(string2, char0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-PkSg(n9F7BW_", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string4 = StringUtils.removeStart(string1, string3);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertEquals("4}kD76,Y2^R(x[0,?/I{", string4);
      assertSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertSame(string1, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string4);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "9\\4\\9-Uvsa:Rw";
      String string1 = null;
      String string2 = StringUtils.removeStart(string0, string1);
      assertNotNull(string2);
      assertEquals("9\\4\\9-Uvsa:Rw", string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "4}kD76,Y2^R(x[0,?/I{";
      int int0 = 0;
      String string1 = StringUtils.center(string0, int0);
      assertNotNull(string1);
      assertEquals("4}kD76,Y2^R(x[0,?/I{", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.removeStart(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "sb= 1+o";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("sb=1+o", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "p,hi)gH,ZKH[lznH";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotNull(string1);
      assertEquals("p,hi)gH,ZKH[lznH", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "8wmXL0K;";
      Iterable<CharBuffer> iterable0 = null;
      String string1 = StringUtils.join(iterable0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.exception.CloneFailedException";
      String string1 = null;
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      assertNotNull(mockThrowable0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, (Throwable) mockThrowable0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.lang3.exception.CloneFailedException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      String string2 = StringUtils.join((Iterable<?>) sQLRecoverableException0, string1);
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.lang3.exception.CloneFailedException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.lang3.exception.CloneFailedExceptionorg.evosuite.runtime.mock.java.lang.MockThrowable: org.apache.commons.lang3.exception.CloneFailedException", string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      String string0 = "B_e";
      String string1 = locale0.getDisplayCountry(locale0);
      assertNotNull(string1);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u53F0\u7063", string1);
      assertNotSame(string1, string0);
      
      MockThrowable mockThrowable0 = new MockThrowable(string1);
      assertNotNull(mockThrowable0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, (Throwable) mockThrowable0);
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("B_e", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: B_e", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.join((Iterable<?>) sQLRecoverableException0, string0);
      assertNotNull(string2);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("B_e", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: B_e", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.sql.SQLRecoverableException: B_eB_eorg.evosuite.runtime.mock.java.lang.MockThrowable: \u53F0\u7063", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Iterator<ClientInfoStatus> iterator0 = null;
      String string0 = "X2SS(Pc";
      String string1 = StringUtils.join(iterator0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "1Be|Zow2x8M";
      String string1 = StringUtils.replace(string0, string0, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("1Be|Zow2x8M", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      
      String string2 = StringUtils.join(iterator0, string1);
      assertNotNull(string2);
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 903;
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      
      boolean boolean0 = arrayDeque0.offerFirst((Object) arrayDeque0);
      assertEquals(1, arrayDeque0.size());
      assertEquals("[(this Collection)]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(903, (int)integer0);
      
      boolean boolean1 = arrayDeque0.add((Object) integer0);
      assertEquals(2, arrayDeque0.size());
      assertEquals("[(this Collection), 903]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(2, arrayDeque0.size());
      assertEquals("[(this Collection), 903]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      
      char char0 = '-';
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals(2, arrayDeque0.size());
      assertEquals("[(this Collection), 903]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("903-[(this Collection), 903]", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      
      boolean boolean0 = stack0.add((Object) stack0);
      assertEquals("[(this Collection)]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      char char0 = 'w';
      String string0 = StringUtils.join((Iterable<?>) stack0, char0);
      assertNotNull(string0);
      assertEquals("[(this Collection)]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[(this Collection)]", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char char0 = 'W';
      Iterator<Integer> iterator0 = null;
      String string0 = StringUtils.join(iterator0, char0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "1Be|Zow2x8M";
      String string1 = StringUtils.replace(string0, string0, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("1Be|Zow2x8M", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) string1;
      assertNotNull(objectArray0[0]);
      
      String string2 = StringUtils.join(objectArray0, string0);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1Be|Zow2x8M1Be|Zow2x8M1Be|Zow2x8M", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = null;
      int int0 = 1904;
      String string1 = StringUtils.right(string0, int0);
      assertNull(string1);
      
      String string2 = StringUtils.join(objectArray0, string1, int0, int0);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      assertNotNull(objectArray0[0]);
      
      char char0 = '=';
      String string0 = StringUtils.join(objectArray0, char0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "-POp5nrv";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "NTg.i\\";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "NTg.i\\";
      String string1 = "IllegalArgumentException occurred";
      assertNotSame(string1, string0);
      
      char char0 = '\\';
      String string2 = StringUtils.trim(string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("IllegalArgumentException occurred", string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string2, (int) char0);
      assertNotNull(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "[";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "+`^gSt+`^gSt";
      int int0 = 955;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("+`^gSt+`^gStstring1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = "\"";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String[] stringArray0 = StringUtils.split(string1, string2);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = " ";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "NTg.i\\";
      char char0 = '\\';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = null;
      char char0 = 'N';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "SecurityException occurred";
      int int0 = 0;
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      assertNotNull(mockThrowable0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, (Throwable) mockThrowable0);
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("SecurityException occurred", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: SecurityException occurred", sQLRecoverableException0.toString());
      
      String string1 = sQLRecoverableException0.toString();
      assertNotNull(string1);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("SecurityException occurred", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: SecurityException occurred", sQLRecoverableException0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("java.sql.SQLRecoverableException: SecurityException occurred", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0, int0);
      assertNotNull(stringArray0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("SecurityException occurred", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: SecurityException occurred", sQLRecoverableException0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "Arguments cannot both be null";
      int int0 = 8192;
      String string1 = StringUtils.leftPad(string0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEqualsrguments cannot both be null", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      char[] charArray0 = new char[3];
      String string2 = StringUtils.stripStart(string0, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string1, string2, (int) charArray0[1]);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "8wmXL0K;";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("8wmXL0K;", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string2);
      assertNotNull(stringArray0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0, int0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = null;
      int int0 = (-452);
      String string1 = StringUtils.center(string0, int0);
      assertNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      String string2 = "wk.oin5Y*~YU[a";
      String string3 = StringUtils.center(string2, int1, string1);
      assertNotNull(string3);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("wk.oin5Y*~YU[a", string3);
      assertSame(string3, string2);
      assertSame(string2, string3);
      
      byte[] byteArray0 = new byte[2];
      String string4 = StringUtils.toString(byteArray0, string0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("\u0000\u0000", string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      
      String[] stringArray0 = StringUtils.substringsBetween(string3, string4, string4);
      assertNull(stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string4));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string4));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string3, string4);
      assertSame(string3, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string4);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "_0sS(8uTgI";
      String string1 = StringUtils.capitalize(string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("_0sS(8uTgI", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = new String[3];
      String string2 = "Array and element cannot both be null";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      stringArray0[0] = string2;
      assertNotNull(stringArray0[0]);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      String[] stringArray1 = StringUtils.substringsBetween(stringArray0[0], stringArray0[0], stringArray0[2]);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "+`^gSt";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.defaultIfEmpty(string0, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals("+`^gSt", string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string2, string2);
      assertNotNull(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = ".;Gx3wjP";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertEquals(".;Gx3wjP", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string2);
      assertNull(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = null;
      String string1 = "dG-q";
      String string2 = StringUtils.trim(string1);
      assertNotNull(string2);
      assertEquals("dG-q", string2);
      assertSame(string1, string2);
      assertSame(string2, string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string2, string0, string0);
      assertNull(stringArray0);
      assertSame(string1, string2);
      assertSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "U[d[PJ>i~d";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertEquals("U[d[PJ>i~d", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = 4682;
      String string2 = StringUtils.center(string1, int0, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertEquals("U[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ>i~dU[d[PJ", string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      
      String string3 = StringUtils.substringBetween(string0, string2, string0);
      assertNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "-PkSg(n9F7BW_gC>D5Gk`%P2";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string0, string0, string1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = null;
      String string1 = "\"g&YQTR^ytYs[z$";
      String string2 = StringUtils.substringAfterLast(string1, string0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.substringBetween(string2, string0);
      assertNull(string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "8wmXL0K;";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string1, string1, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "-PkSg(n9F7BW_";
      String string1 = "S";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string0, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("g(n9F7BW_", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "dG-q";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertEquals("dG-q", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = "JA{:UIU6%%GW8W.;DI";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.substringAfterLast(string2, string1);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertEquals("", string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "QK%F>9";
      int int0 = 1234;
      String string1 = StringUtils.overlay(string0, string0, int0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("QK%F>9QK%F>9", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("QK%F>9", string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "Q0xl}Hu]<^GzV_";
      String string1 = null;
      String string2 = StringUtils.substringBeforeLast(string0, string1);
      assertNotNull(string2);
      assertEquals("Q0xl}Hu]<^GzV_", string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = ";)?9O:9[K;#hukBbA";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = File.pathSeparator;
      assertNotNull(string0);
      assertEquals(":", string0);
      
      String string1 = null;
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "G";
      String string1 = "DY";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = "The character ";
      char char0 = 'u';
      String string1 = locale0.getExtension(char0);
      assertNull(string1);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNotNull(string2);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "+`^gSt";
      String string1 = "~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string1, string0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-~g-", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "+`^gSt";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = "LliYK'JW/`e##+@Y,G7";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.defaultIfEmpty(string2, string1);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals("LliYK'JW/`e##+@Y,G7", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      
      String string4 = StringUtils.substringBefore(string2, string3);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertEquals("", string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "IllegalArgume";
      String string1 = null;
      String string2 = StringUtils.substringBefore(string0, string1);
      assertNotNull(string2);
      assertEquals("IllegalArgume", string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = locale0.getDisplayScript(locale0);
      assertNotNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", string0);
      
      String string1 = locale0.getDisplayLanguage(locale0);
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u4E2D\u6587", string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string1, string0);
      assertNotNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils";
      int int0 = 0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(string0, string0, int0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      String string1 = sQLInvalidAuthorizationSpecException0.toString();
      assertNotNull(string1);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.lang3.StringUtils", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.substringAfter(string1, string1);
      assertNotNull(string2);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      String string3 = StringUtils.substringBefore(string2, string2);
      assertNotNull(string3);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("org.apache.commons.lang3.StringUtils", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "XA`y8E";
      int int0 = (-19);
      int int1 = 16;
      String string1 = StringUtils.mid(string0, int0, int1);
      assertNotNull(string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("XA`y8E", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "8wmXL0K;";
      int int0 = 0;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string1, (CharSequence) string0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.mid(string0, int0, int0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "G";
      int int0 = 2617;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "+`^gSt";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = 3626;
      String string2 = StringUtils.right(string1, int0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = ".;Gx3wjP";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertEquals(".;Gx3wjP", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = (-1301);
      String string2 = StringUtils.right(string1, int0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "1Be|Zow2x8M";
      String string1 = StringUtils.replace(string0, string0, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("1Be|Zow2x8M", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 1;
      String string2 = StringUtils.right(string1, int0);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("M", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = 0;
      String string0 = "PI:6:j3P>LT";
      String string1 = StringUtils.left(string0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = ";bScF^^nz_52a3";
      int int0 = (-23);
      String string1 = StringUtils.left(string0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char char0 = '3';
      String string0 = null;
      String string1 = StringUtils.left(string0, (int) char0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>((Collection<? extends String>) priorityQueue0);
      assertNotNull(linkedList0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      char char0 = '&';
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string0);
      
      String string1 = StringUtils.left(string0, (int) char0);
      assertNotNull(string1);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "normalize";
      char char0 = 'g';
      int int0 = 1;
      String string1 = StringUtils.substring(string0, int0, (int) char0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("ormalize", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "`F";
      String string1 = StringUtils.strip(string0);
      assertNotNull(string1);
      assertEquals("`F", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = (-8);
      String string2 = StringUtils.substring(string1, int0, int0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "{E?U~!dp~g~V)";
      int int0 = 57;
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.substring(string1, int0, int0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = "Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ";
      char char0 = '[';
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      String string1 = mockFile0.getParent();
      assertNull(string1);
      
      String string2 = StringUtils.substring(string1, (int) char0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = 1904;
      String string0 = "9\\4\\9-vsa:Rw";
      String string1 = StringUtils.substring(string0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "Arguments cannot both be null";
      int int0 = 8192;
      String string1 = StringUtils.leftPad(string0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEqualsrguments cannot both be null", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      char char0 = 'V';
      String string2 = StringUtils.repeat(char0, int0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = string2;
      int int1 = StringUtils.lastIndexOfAny((CharSequence) string1, (CharSequence[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "Arguments cannot both be null";
      int int0 = 8192;
      String string1 = StringUtils.leftPad(string0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEqualsrguments cannot both be null", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) string1, (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertEquals(0, int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      int int0 = StringUtils.lastIndexOfAny((CharSequence) string1, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "U[d[PJ>i~d";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertEquals("U[d[PJ>i~d", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) string0;
      assertNotNull(charSequenceArray0[1]);
      assertEquals(10, charSequenceArray0[1].length());
      assertEquals("U[d[PJ>i~d", charSequenceArray0[1].toString());
      
      charSequenceArray0[2] = (CharSequence) string1;
      assertNotNull(charSequenceArray0[2]);
      assertEquals(10, charSequenceArray0[2].length());
      assertEquals("U[d[PJ>i~d", charSequenceArray0[2].toString());
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, charSequenceArray0);
      assertEquals(0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "U[d[PJ>i~d";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertEquals("U[d[PJ>i~d", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "wL@I4yg`3ChS\\eBJ";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[4] = (CharSequence) string2;
      assertNotNull(charSequenceArray0[4]);
      assertEquals("wL@I4yg`3ChS\\eBJ", charSequenceArray0[4].toString());
      assertEquals(17, charSequenceArray0[4].length());
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, charSequenceArray0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertEquals((-1), int0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      String string2 = StringUtils.replaceOnce(string0, string0, string1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string1, string2);
      assertTrue(boolean0);
      assertSame(string0, string2);
      assertSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = ";bScF^^nz_52a3";
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "!(]Ph>ouR{/";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("!(]Ph>ouR{/", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = null;
      String string1 = "YHeL";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "normalize";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      String string1 = mockFile0.getParent();
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string1, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "p})y0";
      String string1 = "null comparator";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.stripToNull(string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("p})y0", string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      char char0 = '(';
      String string0 = StringUtils.join(objectArray0, char0, (int) char0, (int) char0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      String string1 = byteOrder0.toString();
      assertNotNull(string1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(string1.equals((Object)string0));
      assertEquals("BIG_ENDIAN", string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string1, string0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = new String[10];
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) stringArray0[2], charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "p})y0";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertEquals("p})y0", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.upperCase(string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertEquals("P})Y0", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string1, (CharSequence) string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertEquals(0, int0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "UP*B8MfH6'F";
      CharSequence charSequence0 = null;
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string0, charSequence0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CharSequence charSequence0 = null;
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAnyBut(charSequence0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.containsAny(charSequence0, charSequence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "fG:bGA3p~<g#1rq2";
      String string1 = "g9WDa[oU(6s,e_kJ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.stripEnd(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("g9WDa[oU(6s,e_kJ", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) string2, charArray0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("China", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, (CharSequence) string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "IllegalArgume";
      String string1 = null;
      String string2 = StringUtils.defaultString(string0, string1);
      assertNotNull(string2);
      assertEquals("IllegalArgume", string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string2, string1);
      assertEquals((-1), int0);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "Q";
      int int0 = StringUtils.indexOfAny((CharSequence) string0, string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "Q";
      String string1 = "org.apache.commons.lang3.exception.CloneFailedException";
      assertNotSame(string1, string0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.upperCase(string0, locale0);
      assertNotNull(string2);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q", string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string2, string1);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-1), int0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "0}3}.L";
      char[] charArray0 = null;
      int int0 = StringUtils.indexOfAny((CharSequence) string0, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CharSequence charSequence0 = null;
      char[] charArray0 = new char[7];
      int int0 = StringUtils.indexOfAny(charSequence0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "!b}?P7oT|y items";
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "%B";
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "#z}.mO|~!Kk=<";
      String string1 = "9\\4\\N9-vsa:Rw";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.trimToNull(string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("9\\4\\N9-vsa:Rw", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string0, (CharSequence) string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "...";
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string0, charSequenceArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "#z}.mO|~!Kk=<";
      String string1 = StringUtils.trimToNull(string0);
      assertNotNull(string1);
      assertEquals("#z}.mO|~!Kk=<", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertTrue(boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.containsIgnoreCase(charSequence0, charSequence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "UP*B8MfH6'F";
      String string1 = ", Length: 0";
      assertNotSame(string1, string0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string1);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(", Length: 0", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: UP*B8MfH6'F", sQLRecoverableException0.toString());
      assertEquals("UP*B8MfH6'F", sQLRecoverableException0.getMessage());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = sQLRecoverableException0.toString();
      assertNotNull(string2);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(", Length: 0", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: UP*B8MfH6'F", sQLRecoverableException0.toString());
      assertEquals("UP*B8MfH6'F", sQLRecoverableException0.getMessage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("java.sql.SQLRecoverableException: UP*B8MfH6'F", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string2, (CharSequence) string1);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(", Length: 0", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: UP*B8MfH6'F", sQLRecoverableException0.toString());
      assertEquals("UP*B8MfH6'F", sQLRecoverableException0.getMessage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0);
      assertNull(string1);
      
      String string2 = "org.apachecommons.lang3fStrin*Utils";
      int int0 = 0;
      String string3 = StringUtils.leftPad(string2, int0);
      assertNotNull(string3);
      assertEquals("org.apachecommons.lang3fStrin*Utils", string3);
      assertSame(string2, string3);
      assertSame(string3, string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string3, (CharSequence) string1);
      assertFalse(boolean0);
      assertSame(string2, string3);
      assertSame(string3, string2);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "UP*B8MfH6'F";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: UP*B8MfH6'F", sQLRecoverableException0.toString());
      assertEquals("UP*B8MfH6'F", sQLRecoverableException0.getSQLState());
      assertEquals("UP*B8MfH6'F", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      String string1 = sQLRecoverableException0.toString();
      assertNotNull(string1);
      assertEquals("java.sql.SQLRecoverableException: UP*B8MfH6'F", sQLRecoverableException0.toString());
      assertEquals("UP*B8MfH6'F", sQLRecoverableException0.getSQLState());
      assertEquals("UP*B8MfH6'F", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("java.sql.SQLRecoverableException: UP*B8MfH6'F", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string1, (CharSequence) string0);
      assertEquals("java.sql.SQLRecoverableException: UP*B8MfH6'F", sQLRecoverableException0.toString());
      assertEquals("UP*B8MfH6'F", sQLRecoverableException0.getSQLState());
      assertEquals("UP*B8MfH6'F", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "SecurityException occurred";
      String string1 = null;
      int int0 = 0;
      String string2 = StringUtils.right(string1, int0);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string2, (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = ",Wfhm0S@";
      int int0 = 64;
      boolean boolean0 = StringUtils.contains((CharSequence) string0, int0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      String string0 = sQLTransientConnectionException0.getMessage();
      assertNull(string0);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      boolean boolean0 = StringUtils.contains((CharSequence) string0, (int) byteArray0[0]);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "+`^gSt+`^gSt";
      int int0 = 955;
      boolean boolean0 = StringUtils.contains((CharSequence) string0, int0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "fG:bGA3p~<g#1rq2";
      String string1 = " G!+k?sL(-n";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string0, int0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      
      String string1 = sQLIntegrityConstraintViolationException0.toString();
      assertNotNull(string1);
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string1);
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStart(string0, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string2, (CharSequence) string2, int1);
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertTrue(int1 == int2);
      assertTrue(int1 == int0);
      assertTrue(int0 == int2);
      assertTrue(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, int2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "Q0xl}Hu]<^GzV_";
      int int0 = 1868;
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0, int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = null;
      int int0 = (-452);
      String string1 = StringUtils.center(string0, int0);
      assertNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string1, int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = "The stripAccents(CharSequence) metod requires at lea1t Java6, but got: ";
      String string1 = null;
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "#";
      int int0 = (-2496);
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("#", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertEquals(0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "{}";
      int int0 = 988;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.substringBetween(string0, string0, string1);
      assertNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string1, (CharSequence) string2, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      
      String string0 = locale0.getDisplayCountry(locale0);
      assertNotNull(string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("\u53F0\u7063", string0);
      
      char char0 = 'a';
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0, (int) char0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CharSequence charSequence0 = null;
      char char0 = '&';
      int int0 = StringUtils.lastIndexOf(charSequence0, charSequence0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = null;
      String string1 = "GbOrCWJ.23)s";
      int int0 = StringUtils.lastIndexOf((CharSequence) string1, (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = "JViUrV{>r.R5E/- ";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = 0;
      int int1 = StringUtils.indexOfAny((CharSequence) string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) string1, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((-1), int2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = "Q";
      int int0 = (-3900);
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "!(]Ph>ouR{/";
      byte[] byteArray0 = new byte[1];
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (int) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "!b}?P7oT|y items";
      String string1 = "Arguments cannot both be null";
      assertNotSame(string1, string0);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      int int0 = 0;
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) stringArray0[2], (CharSequence) string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int1);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "!b}?P7oT|y items";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[3] = stringArray0[1];
      assertNotNull(stringArray0[3]);
      
      stringArray0[5] = stringArray0[0];
      assertNotNull(stringArray0[5]);
      
      int int0 = (-2450);
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) stringArray0[3], (CharSequence) stringArray0[5], int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "%B";
      CharSequence charSequence0 = null;
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, charSequence0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "A79bZ}%4F%g~c!C";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertEquals("A79bZ}%4F%g~c!C", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = 1;
      int int1 = StringUtils.ordinalIndexOf((CharSequence) string1, (CharSequence) string1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "Q";
      int int0 = 48;
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNotNull(string1);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("Q", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) string1, (CharSequence) string1, int0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      
      String string0 = locale0.getDisplayScript(locale0);
      assertNotNull(string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = "\\u0";
      String[] stringArray0 = new String[9];
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      int int0 = (-3677);
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) stringArray0[3], (CharSequence) stringArray0[7], int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "%B";
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) string0);
      assertEquals((-1), int0);
      
      CharSequence charSequence0 = null;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNotNull(string1);
      assertEquals("%B", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int1 = StringUtils.lastOrdinalIndexOf(charSequence0, (CharSequence) string1, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1), int1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils$InitStripAccents";
      String string1 = null;
      char char0 = 'M';
      int int0 = StringUtils.indexOf((CharSequence) string0, (CharSequence) string1, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = "U[d[PJ>i~d";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertEquals("U[d[PJ>i~d", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string1);
      assertEquals(0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int1 = StringUtils.indexOf((CharSequence) string1, (CharSequence) string0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = "Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ";
      char char0 = '[';
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      String string1 = mockFile0.getParent();
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) string1, (CharSequence) string1, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = "4}kD76,Y2R(x%0,?/L{";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      CharSequence charSequence0 = null;
      int int0 = StringUtils.indexOf((CharSequence) string1, charSequence0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = "dG-q";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertEquals("dG-q", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = StringUtils.indexOf((CharSequence) string1, (CharSequence) string1);
      assertEquals(0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = "UP*B8MfH6'F";
      CharSequence charSequence0 = null;
      int int0 = StringUtils.indexOf(charSequence0, (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      int int1 = StringUtils.indexOf((CharSequence) string0, int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = "dG-q";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertEquals("dG-q", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = 16;
      int int1 = StringUtils.indexOf((CharSequence) string1, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      int int0 = 0;
      String string0 = null;
      String string1 = StringUtils.defaultString(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOf((CharSequence) string1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string0 = "B_e";
      String string1 = locale0.getDisplayCountry(locale0);
      assertNotNull(string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u53F0\u7063", string1);
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, int0);
      assertNotSame(string1, string0);
      
      int int1 = StringUtils.indexOf((CharSequence) string0, int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = "+`^gSt";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) string1, (CharSequence) string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = null;
      int int0 = 1904;
      String string1 = StringUtils.right(string0, int0);
      assertNull(string1);
      
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(string0, string1, int0, intArray0);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(1904, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(string1, string1, int0, (Throwable) batchUpdateException0);
      assertNotNull(sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(1904, sQLTransientException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(1904, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string1, (Throwable) sQLTransientException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(1904, sQLTransientException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(1904, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      String string2 = sQLTransactionRollbackException0.toString();
      assertNotNull(string2);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(1904, sQLTransientException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(1904, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals("java.sql.SQLTransactionRollbackException", string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) string2, (CharSequence) string1);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(1904, sQLTransientException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(1904, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(charSequence0, charSequence0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = "{E?U~!dp~g~V)";
      String[] stringArray0 = new String[9];
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) stringArray0[8], (CharSequence) string1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = "U[d[PJ>i~d";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertEquals("U[d[PJ>i~d", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = null;
      boolean boolean0 = StringUtils.equals((CharSequence) string2, (CharSequence) string1);
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = "#";
      boolean boolean0 = StringUtils.equals((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripAccents(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = "1Be|Zow2x8M";
      String string1 = StringUtils.stripAccents(string0);
      assertNotNull(string1);
      assertEquals("1Be|Zow2x8M", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = ".;Gx3wjP";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertEquals(".;Gx3wjP", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String[] stringArray0 = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string1);
      assertNull(stringArray1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = ".;Gx3wjP";
      String string1 = "*?10H<\"bw5|}y";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.capitalize(string1);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("*?10H<\"bw5|}y", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      String string3 = StringUtils.strip(string2, string0);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("*?10H<\"bw5|}y", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = null;
      char char0 = 'r';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNull(string1);
      
      String string2 = "sun.text.Normalizer";
      String string3 = StringUtils.removeStartIgnoreCase(string2, string1);
      assertNotNull(string3);
      assertEquals("sun.text.Normalizer", string3);
      assertSame(string3, string2);
      assertSame(string2, string3);
      
      String string4 = StringUtils.stripEnd(string3, string3);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string2, string4);
      assertSame(string2, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = " in an array of ";
      String string1 = StringUtils.strip(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("in an array of", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = "^rThe Character must not be null";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string1);
      assertNotNull(stringArray1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(string1, string0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = " ";
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripStart(string0, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToEmpty(string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>((Collection<? extends String>) priorityQueue0);
      assertNotNull(linkedList0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      char char0 = '&';
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty(string0);
      assertNotNull(string1);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = "4}kD76,Y2R(x%0,?/L{";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = locale0.getDisplayCountry(locale0);
      assertNotNull(string0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("\u53F0\u7063", string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isBlank(charSequence0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = "Arguments cannot both be null";
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = ":G8";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
      
      char char0 = 'O';
      String string1 = StringUtils.join((Object[]) stringArray0, char0, (int) char0, (int) char0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = locale0.getDisplayScript(locale0);
      assertNotNull(string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", string0);
      
      char char0 = 'u';
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) string0, (CharSequence) string0, (int) char0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = "1Be|Zow2x8M";
      int int0 = 1;
      String string1 = StringUtils.center(string0, int0);
      assertNotNull(string1);
      assertEquals("1Be|Zow2x8M", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = null;
      char char0 = 'r';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = "B_e";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = "";
      char char0 = '\\';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, (int) char0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1);
      assertNotNull(stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = "#";
      int int0 = 0;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertNotNull(string1);
      assertEquals("#", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String[] stringArray0 = StringUtils.split(string0, string0, int0);
      assertNotNull(stringArray0);
      assertSame(string0, string1);
      
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals("#", string2);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = "";
      char char0 = '\\';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = "1Be|Zow2x8M";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = "8wmXL0K;";
      int int0 = 0;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = "U[d[PJ>i~d";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertEquals("U[d[PJ>i~d", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String[] stringArray0 = StringUtils.split(string1);
      assertNotNull(stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = "NTg.i\\";
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("China", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.abbreviate(string0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = "B_e";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("China", string0);
      
      String[] stringArray0 = StringUtils.split(string0, string0);
      assertNotNull(stringArray0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
  }
}
