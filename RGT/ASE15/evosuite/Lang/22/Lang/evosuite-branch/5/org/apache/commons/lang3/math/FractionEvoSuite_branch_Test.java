/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:29:37 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.junit.runner.RunWith;

 
public class FractionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.byteValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(2, fraction1.shortValue());
      assertEquals(2, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      String string0 = fraction1.toProperString();
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.byteValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(2, fraction1.shortValue());
      assertEquals(2, fraction1.getDenominator());
      assertNotNull(string0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE;
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals((-0.5F), fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0L, fraction2.longValue());
      assertEquals((-0.5), fraction2.doubleValue(), 0.01D);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      
      String string0 = fraction2.toProperString();
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals((-0.5F), fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0L, fraction2.longValue());
      assertEquals((-0.5), fraction2.doubleValue(), 0.01D);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(string0);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertEquals("-1/2", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(1.5, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.byteValue());
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      String string0 = fraction1.toProperString();
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(1.5, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.byteValue());
      assertNotNull(string0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals("1 1/2", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.getProperWhole());
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      
      String string0 = fraction1.toProperString();
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.getProperWhole());
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertNotNull(string0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      
      String string0 = fraction1.toProperString();
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(string0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      int int1 = (-5);
      Fraction fraction0 = Fraction.getFraction(int0, int1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string0 = fraction0.toProperString();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(string0);
      assertEquals("2/5", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      int int1 = (-5);
      Fraction fraction0 = Fraction.getFraction(int0, int1);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String string0 = fraction0.toString();
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("0/5", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-1096);
      int int1 = 730;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals(365, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.5013698F), fraction0.floatValue(), 0.01F);
      assertEquals(-548, fraction0.getNumerator());
      assertEquals((-1.5013698630136987), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getProperWhole());
      assertNotNull(fraction0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Fraction fraction1 = Fraction.ONE;
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      int int2 = fraction1.compareTo(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals(365, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.5013698F), fraction0.floatValue(), 0.01F);
      assertEquals(-548, fraction0.getNumerator());
      assertEquals((-1.5013698630136987), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getProperWhole());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction1.shortValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.hashCode();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(23274, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.shortValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.byteValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.shortValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.byteValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(23311, int0);
      
      boolean boolean0 = fraction0.equals((Object) int0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divideBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divideBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE;
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiplyBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      int int0 = 0;
      int int1 = 46;
      Fraction fraction1 = Fraction.getFraction(int0, int0, int1);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(46, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0L, fraction2.longValue());
      assertEquals(2, fraction2.getNumerator());
      assertEquals(0.4, fraction2.doubleValue(), 0.01D);
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(46, fraction1.getDenominator());
      assertNotNull(fraction2);
      assertFalse(int0 == int1);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction1);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      int int1 = (-5);
      Fraction fraction0 = Fraction.getFraction(int0, int1);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.subtract(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = 1880;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = (-3679.937);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-95, fraction0.byteValue());
      assertEquals(-3679, fraction0.intValue());
      assertEquals((-3679.937), fraction0.doubleValue(), 0.01D);
      assertEquals(937, fraction0.getProperNumerator());
      assertEquals((-3679.937F), fraction0.floatValue(), 0.01F);
      assertEquals(-3679, fraction0.getProperWhole());
      assertEquals(-3679, fraction0.shortValue());
      assertEquals(-3679937, fraction0.getNumerator());
      assertEquals((-3679L), fraction0.longValue());
      assertEquals(1000, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(-95, fraction0.byteValue());
      assertEquals(-3679, fraction0.intValue());
      assertEquals((-3679.937), fraction0.doubleValue(), 0.01D);
      assertEquals(937, fraction0.getProperNumerator());
      assertEquals((-3679.937F), fraction0.floatValue(), 0.01F);
      assertEquals(-3679, fraction0.getProperWhole());
      assertEquals(-3679, fraction0.shortValue());
      assertEquals(-3679937, fraction0.getNumerator());
      assertEquals((-3679L), fraction0.longValue());
      assertEquals(1000, fraction0.getDenominator());
      assertEquals(3679937, fraction1.getNumerator());
      assertEquals(3679, fraction1.getProperWhole());
      assertEquals(3679, fraction1.intValue());
      assertEquals(3679.937, fraction1.doubleValue(), 0.01D);
      assertEquals(3679L, fraction1.longValue());
      assertEquals(1000, fraction1.getDenominator());
      assertEquals(3679, fraction1.shortValue());
      assertEquals(937, fraction1.getProperNumerator());
      assertEquals(95, fraction1.byteValue());
      assertEquals(3679.937F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiplyBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      int int1 = (-5);
      Fraction fraction0 = Fraction.getFraction(int0, int1);
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 3093;
      Fraction fraction1 = fraction0.pow(int2);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      int int0 = 0;
      Fraction fraction1 = fraction0.pow(int0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.8, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(5, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-2309.4789194241202);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-5, fraction0.byteValue());
      assertEquals((-2309L), fraction0.longValue());
      assertEquals((-2309.478919425359), fraction0.doubleValue(), 0.01D);
      assertEquals(3067, fraction0.getProperNumerator());
      assertEquals(-2309, fraction0.getProperWhole());
      assertEquals(-2309, fraction0.shortValue());
      assertEquals((-2309.479F), fraction0.floatValue(), 0.01F);
      assertEquals(-2309, fraction0.intValue());
      assertEquals(6404, fraction0.getDenominator());
      assertEquals(-14789903, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(2309, fraction1.shortValue());
      assertEquals(3067, fraction1.getProperNumerator());
      assertEquals(5, fraction1.byteValue());
      assertEquals(2309L, fraction1.longValue());
      assertEquals(14789903, fraction1.getNumerator());
      assertEquals(6404, fraction1.getDenominator());
      assertEquals(2309.479F, fraction1.floatValue(), 0.01F);
      assertEquals(2309, fraction1.intValue());
      assertEquals(2309, fraction1.getProperWhole());
      assertEquals(2309.478919425359, fraction1.doubleValue(), 0.01D);
      assertEquals(-5, fraction0.byteValue());
      assertEquals((-2309L), fraction0.longValue());
      assertEquals((-2309.478919425359), fraction0.doubleValue(), 0.01D);
      assertEquals(3067, fraction0.getProperNumerator());
      assertEquals(-2309, fraction0.getProperWhole());
      assertEquals(-2309, fraction0.shortValue());
      assertEquals((-2309.479F), fraction0.floatValue(), 0.01F);
      assertEquals(-2309, fraction0.intValue());
      assertEquals(6404, fraction0.getDenominator());
      assertEquals(-14789903, fraction0.getNumerator());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = (-2309.4789194241202);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-2309, fraction0.getProperWhole());
      assertEquals((-2309.478919425359), fraction0.doubleValue(), 0.01D);
      assertEquals(-2309, fraction0.intValue());
      assertEquals((-2309.479F), fraction0.floatValue(), 0.01F);
      assertEquals(-14789903, fraction0.getNumerator());
      assertEquals(3067, fraction0.getProperNumerator());
      assertEquals(-2309, fraction0.shortValue());
      assertEquals(-5, fraction0.byteValue());
      assertEquals(6404, fraction0.getDenominator());
      assertEquals((-2309L), fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertEquals(-2309, fraction0.getProperWhole());
      assertEquals((-2309.478919425359), fraction0.doubleValue(), 0.01D);
      assertEquals(-2309, fraction0.intValue());
      assertEquals((-2309.479F), fraction0.floatValue(), 0.01F);
      assertEquals(-14789903, fraction0.getNumerator());
      assertEquals(3067, fraction0.getProperNumerator());
      assertEquals(-2309, fraction0.shortValue());
      assertEquals(-5, fraction0.byteValue());
      assertEquals(6404, fraction0.getDenominator());
      assertEquals((-2309L), fraction0.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction1);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      int int1 = (-5);
      Fraction fraction0 = Fraction.getFraction(int0, int1);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "4 ja&Po9d$0KEUd0yeT";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The fraction could not be parsed as the format X Y/Z
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "}.&wK.>rt`";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}.&wK.>rt`\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE;
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-1), int0);
      
      Fraction fraction2 = Fraction.getFraction((double) int0);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(-1, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-1.0), fraction2.doubleValue(), 0.01D);
      assertEquals(-1, fraction2.byteValue());
      assertEquals((-1L), fraction2.longValue());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals(-1, fraction2.shortValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(-1, fraction2.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-1461);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-2147483645);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
      
      Fraction fraction1 = Fraction.getFraction((double) int0);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, short0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getReducedFraction((int) short0, (int) short0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 1989;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int1, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-1096);
      int int1 = 730;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals(365, fraction0.getDenominator());
      assertEquals((-1.5013698F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.5013698630136987), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-548, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertNotNull(fraction0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String string0 = fraction0.toProperString();
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals(365, fraction0.getDenominator());
      assertEquals((-1.5013698F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.5013698630136987), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-548, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertNotNull(string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("-1 183/365", string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(365, fraction1.getDenominator());
      assertEquals((-1.5013698F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.getProperWhole());
      assertEquals((-1.5013698630136987), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(183, fraction1.getProperNumerator());
      assertEquals(-548, fraction1.getNumerator());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals(365, fraction0.getDenominator());
      assertEquals((-1.5013698F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.5013698630136987), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-548, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-1), int0);
      
      int int1 = fraction1.getDenominator();
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(4, int1);
      
      // Undeclared exception!
      try {
        Fraction fraction2 = Fraction.getFraction(int0, int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 1149;
      int int1 = (-214);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, int0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)0, byte0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int0, (int) byte0, (int) byte0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 2;
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(string0);
      assertEquals("4/5", string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0.8, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE;
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-1), int0);
      
      Fraction fraction2 = fraction1.pow(int0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction1.equals((Object) fraction2);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      double double0 = fraction0.doubleValue();
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0.8, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0.8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(1, fraction1.intValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(8, fraction1.getNumerator());
      assertEquals(1.6, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.6F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }
}
