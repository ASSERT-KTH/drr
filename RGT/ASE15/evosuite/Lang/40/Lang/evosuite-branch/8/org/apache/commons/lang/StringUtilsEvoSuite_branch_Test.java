/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:23:40 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class StringUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      char char0 = '?';
      String string1 = StringUtils.center(string0, (int) char0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Minimum abbreviaMinimum abbreviation width is 4Minimum abbrevia", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.endsWith(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = ">NNT{`6+\\rFjKp";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      boolean boolean0 = StringUtils.endsWith(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = null;
      String string2 = StringUtils.trimToEmpty(string0);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertEquals("Array element", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWith(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = "5,DKzu";
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = "n?IUL8/bjF/,";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string1;
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(stringArray0[0]);
      
      boolean boolean0 = StringUtils.startsWithAny(string2, stringArray0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertTrue(boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = ", Length: ";
      int int0 = 128;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(", Length: ", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = null;
      boolean boolean0 = StringUtils.startsWithAny(string1, stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      boolean boolean0 = StringUtils.startsWithAny(string1, stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = null;
      String string1 = "s'4";
      boolean boolean0 = StringUtils.startsWith(string0, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "KD";
      String string1 = StringUtils.lowerCase(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("kd", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart(string0, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals(2, int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "";
      int int0 = StringUtils.getLevenshteinDistance(string0, string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "org.apache.commons.lang.CharUtils";
      String string1 = null;
      String string2 = StringUtils.trim(string0);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals("org.apache.commons.lang.CharUtils", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance(string2, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance(stringArray0[0], string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = ";TFh}?8";
      int int0 = 0;
      char char0 = 'Y';
      String string1 = StringUtils.center(string0, int0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(";TFh}?8", string1);
      assertNotNull(string1);
      
      String string2 = "oes@_j";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeStartIgnoreCase(string2, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("oes@_j", string3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string3;
      assertNotNull(stringArray0[2]);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = ";TFh}?8";
      int int0 = 0;
      char char0 = 'Y';
      String string1 = StringUtils.center(string0, int0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(";TFh}?8", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertEquals(";TFh}?8", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[7];
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.split(string0);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      int int0 = (-925);
      String string1 = StringUtils.leftPad(string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("Minimum abbreviation width is 4", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0);
      assertSame(string0, string1);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertEquals("Minimum abbreviation width is 4", string2);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      
      String string3 = StringUtils.difference(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = "5,DKzu";
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "n?IUL8/bjF/,";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "";
      String string1 = "~XTlhBWjzi$D";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfDifference(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "R >6";
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.indexOfDifference(string0, stringArray0[1]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = null;
      int int0 = StringUtils.indexOfDifference(string1, string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = ";TFh}?8";
      String string1 = "NOWALUL~_aXLgW";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("NOWALUL~_aXLgW", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "(LR,";
      String string1 = null;
      String string2 = StringUtils.difference(string0, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals("(LR,", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "gfNoo[.>J#MM_&";
      int int0 = (-1775);
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      String string3 = StringUtils.right(string2, int0);
      assertNull(string3);
      
      String string4 = StringUtils.difference(string3, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string4, string0);
      assertSame(string4, string1);
      assertSame(string1, string4);
      assertNotSame(string1, string0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "n7XsnP7u]_.2";
      int int0 = 8193;
      int int1 = 10;
      String string1 = StringUtils.abbreviate(string0, int0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("...P7u]_.2", string1);
      assertNotNull(string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "Strings must not be null";
      int int0 = 5;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("St...", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "j%-";
      int int0 = 0;
      // Undeclared exception!
      try {
        String string1 = StringUtils.abbreviate(string0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[24];
      String string0 = null;
      String string1 = StringUtils.reverseDelimited(string0, charArray0[0]);
      assertNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.reverse(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "cannot pad a negative amount: ";
      String string1 = StringUtils.reverse(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(" :tnuoma evitagen a dap tonnac", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "OY&U";
      int int0 = 568;
      String string1 = StringUtils.left(string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("OY&U", string1);
      assertNotNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      
      String string3 = StringUtils.defaultIfEmpty(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("OY&U", string3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "^\\v{u";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfEmpty(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("^\\v{u", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      String string1 = StringUtils.stripToNull(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("is not in the range '0' - '9'", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(" is not in the range '0' - '9'", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString(string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "R >6";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "dm";
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = ", Length: ";
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = " vs ";
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = '?';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = ", Length: ";
      int int0 = 128;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(", Length: ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "9,o\"~Qx";
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>((Collection<? extends String>) set0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(linkedList0);
      
      char char0 = '`';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "J4e) JSN+5g!X,kKf";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = ", Length: ";
      int int0 = 128;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(", Length: ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = " vs ";
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = ", Length: ";
      int int0 = 128;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(", Length: ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = " vs ";
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "<minimum abbreviation width with offset is 7";
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = null;
      int int0 = 1038;
      char char0 = '4';
      String string1 = StringUtils.center(string0, int0, char0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = " vbhs ";
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "f0h8sMzL\\\",f";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = null;
      int int0 = StringUtils.countMatches(string0, string1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "><j%2KdPA@N_'@Q22";
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "";
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.swapCase(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.uncapitalize(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "('KN2-jD{Xbr.";
      String string1 = StringUtils.uncapitalize(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("('KN2-jD{Xbr.", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.capitalize(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = ", Length: ";
      String string1 = StringUtils.capitalize(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(", Length: ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.capitalize(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = null;
      String string1 = "cannot pad a negative amount: ";
      Locale locale0 = new Locale(string1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("cannot pad a negative amount: ", locale0.getLanguage());
      assertEquals("cannot pad a negative amount: ", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase(string0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("cannot pad a negative amount: ", locale0.getLanguage());
      assertEquals("cannot pad a negative amount: ", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.upperCase(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "?D8@=5G0";
      String string1 = StringUtils.upperCase(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("?D8@=5G0", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "dmzz>v8imp/%y vs ";
      char char0 = '/';
      String string1 = StringUtils.remove(string0, char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("dmzz>v8imp%y vs ", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 2;
      String string2 = StringUtils.center(string1, int0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("dmzz>v8imp%y vs ", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      int int0 = (-417);
      String string1 = StringUtils.center(string0, int0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("Minimum abbreviation width is 4", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "o\\\"=$2";
      char char0 = ']';
      int int0 = StringUtils.indexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[5];
      String string1 = StringUtils.center(stringArray0[0], int0, stringArray0[2]);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = ", Length: 0";
      String string1 = StringUtils.defaultString(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(", Length: 0", string1);
      assertNotNull(string1);
      
      int int0 = 4;
      char char0 = 'c';
      String string2 = StringUtils.center(string1, int0, char0);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertEquals(", Length: 0", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.length(string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "])+z?[,`+";
      int int0 = 127;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("])+z?[,`+])+z?[,`+])+z?[,`+])+z?[,`+])+z?[,`+])+z?[,`+])+z?])+z?[,`+])+z?[,`+])+z?[,`+])+z?[,`+])+z?[,`+])+z?[,`+])+z?[,`+])+z?", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "])+z?[,`+";
      int int0 = StringUtils.length(string0);
      assertEquals(9, int0);
      
      String string1 = StringUtils.substringBefore(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split(string1, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("])+z?[,`+", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      
      String string3 = StringUtils.center(string1, int0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertEquals("])+z])+z?", string3);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "";
      char char0 = 'l';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = ", Length: 0";
      String string1 = null;
      int int0 = StringUtils.indexOfAnyBut(string1, string1);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.leftPad(string1, int0, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "])+z?[,`+";
      int int0 = StringUtils.length(string0);
      assertEquals(9, int0);
      
      String string1 = StringUtils.substringBefore(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.center(string1, int0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("         ", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
      
      String string0 = null;
      String string1 = StringUtils.leftPad(string0, int0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = ".6-NE:WM*a*z}UK>";
      String string1 = StringUtils.defaultString(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(".6-NE:WM*a*z}UK>", string1);
      assertNotNull(string1);
      
      String string2 = "Ob&X)8W<-";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(16, int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rightPad(string2, int0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertEquals("Ob&X)8W<-.6-NE:W", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "ig@";
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("IG@", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(set0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>((Collection<? extends String>) set0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(linkedList0);
      
      char char0 = '`';
      String string2 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad(string1, (int) char0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("IG@                                                                                             ", string3);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "{}";
      int int0 = StringUtils.getLevenshteinDistance(string0, string0);
      assertEquals(0, int0);
      
      String string1 = null;
      String string2 = StringUtils.rightPad(string1, int0, string1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "9Q\"bSCN{wE1B";
      int int0 = (-2033);
      String string1 = StringUtils.rightPad(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("9Q\"bSCN{wE1B", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "{rt+.jbi<gbCI_Lmf}z";
      int int0 = StringUtils.indexOf(string0, string0);
      assertEquals(0, int0);
      
      String string1 = null;
      String string2 = StringUtils.rightPad(string1, int0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "j%-";
      String string1 = null;
      int int0 = 2714;
      String string2 = StringUtils.repeat(string0, string1, int0);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertEquals("j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-j%-", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "mo";
      String string1 = null;
      char char0 = '7';
      String string2 = StringUtils.repeat(string1, string0, (int) char0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "2";
      int int0 = 127;
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = 't';
      charArray0[0] = char0;
      charArray0[3] = charArray0[0];
      charArray0[5] = charArray0[3];
      String string0 = " ";
      String string1 = StringUtils.repeat(string0, (int) charArray0[5]);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("                                                                                                                    ", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'t', '\u0000', '\u0000', 't', '\u0000', 't', '\u0000', '\u0000'}, charArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.chop(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chop(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "R >6";
      String string1 = ", Length: 0";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.chomp(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals(", Length: 0", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "'Q=sN<3G6:,Dx%XyIk";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.chomp(string1, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "^";
      String string1 = StringUtils.chomp(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("^", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = ";TFh}?8";
      String string1 = StringUtils.chomp(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(";TFh}?8", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "OY&U";
      int int0 = 568;
      String string1 = StringUtils.left(string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("OY&U", string1);
      assertNotNull(string1);
      
      int int1 = (-22);
      String string2 = StringUtils.overlay(string1, string0, int0, int1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("OY&U", string2);
      assertNotNull(string2);
      assertFalse(int1 == int0);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "";
      char char0 = 'j';
      int int0 = StringUtils.lastIndexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.overlay(string0, string0, int0, (int) char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "gfNoo[.>J#MM_&";
      int int0 = (-1775);
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      String string3 = StringUtils.overlay(string2, string1, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "?";
      String[] stringArray0 = new String[9];
      String string1 = "dm9,o6\"~q ";
      assertNotSame(string1, string0);
      
      stringArray0[4] = string1;
      assertNotNull(stringArray0[4]);
      
      String string2 = StringUtils.replaceChars(stringArray0[4], string0, stringArray0[4]);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("dm9,o6\"~q ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "minimum abbreviationswidth with offset is 7";
      String[] stringArray0 = new String[10];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = StringUtils.replaceChars(stringArray0[0], string0, stringArray0[4]);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "VR^>Xc}9{R%b`";
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceChars(string2, string1, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertEquals("VR^>Xc}9{R%b`", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("Cannot pad a negative amount: ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "mo";
      String string1 = null;
      String string2 = StringUtils.replaceChars(string1, string1, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char char0 = '7';
      String string0 = null;
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      String string1 = StringUtils.stripToNull(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("is not in the range '0' - '9'", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      char char0 = 'Z';
      String string2 = StringUtils.replaceChars(string1, char0, char0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals("is not in the range '0' - '9'", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "`l~f!09oewl^";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: `l~f!09oewl^
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "...";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      String string1 = "n:{)";
      assertNotSame(string1, string0);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      String string2 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("...", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "-0'13+1M=r5Zcy1";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = " vs ";
      String string1 = "HaV6.t7oGfK|qM3";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("HaV6.t7oGfK|qM3", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
      
      String string1 = "strings must not be null";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.deleteWhitespace(string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.substringsBetween(string0, string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNull(stringArray1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceEach(string1, stringArray1, stringArray0);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertEquals("strings must not be null", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = null;
      int int0 = 256;
      String[] stringArray0 = new String[5];
      String string1 = StringUtils.join((Object[]) stringArray0, string0, int0, int0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      stringArray0[3] = string1;
      assertNotNull(stringArray0[3]);
      
      String string2 = StringUtils.replaceEachRepeatedly(stringArray0[3], stringArray0, stringArray0);
      assertSame(string2, string1);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[4];
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = " vs ";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0:  vs 
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "',**dNth\\.";
      int int0 = 3229;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("',**dNth\\.", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      String string0 = "strings ";
      boolean boolean0 = linkedList0.add(string0);
      assertEquals("[strings ]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      String string1 = "ir[v~)";
      assertNotSame(string1, string0);
      
      char char0 = '|';
      String string2 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("[strings ]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals("strings ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.remove(string1, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertEquals("[strings ]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals("ir[v~)", string3);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "...";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = 0;
      String string3 = StringUtils.replace(string2, string2, string1, int0);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("...", string3);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "F";
      String string1 = null;
      String string2 = StringUtils.replaceOnce(string0, string0, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals("F", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = " vbhs ";
      int int0 = StringUtils.indexOfAny(string0, string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.replace(string0, string1, string0, int0);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals(" vbhs ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = " vs ";
      int int0 = StringUtils.indexOfAny(string0, string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.replace(string1, string1, string1, int0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "<minimum abbreviation width with offset is 7";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("<minimum abbreviation width with offset is 7", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "strings ";
      String string1 = StringUtils.remove(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = null;
      int int0 = 256;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertNull(string1);
      
      String string2 = StringUtils.remove(string1, string1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = " vbhs ";
      String string1 = "m(Dz9jBLfrwvFy4/U";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("m(Dz9jBLfrwvFy4/U", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = " vbhs ";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 10;
      String[] stringArray0 = new String[2];
      char char0 = 'B';
      String string0 = StringUtils.join((Object[]) stringArray0, char0, int0, int0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase(string0, stringArray0[1]);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = ", Length: ";
      int int0 = 128;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(", Length: ", string1);
      assertNotNull(string1);
      
      String string2 = "dm";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeEnd(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertEquals("dm", string3);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "";
      String string1 = "Cannot pad a negative amount: ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEnd(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("Cannot pad a negative amount: ", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "KD";
      String string1 = StringUtils.lowerCase(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("kd", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeStartIgnoreCase(string1, string2);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertEquals("kd", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = StringUtils.removeStartIgnoreCase(stringArray0[7], stringArray0[7]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "cannot pad a negative amount: ";
      String string1 = "Yw";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStart(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("Yw", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = null;
      int int0 = 256;
      String string1 = "cannot pad a negative amount: ";
      String string2 = StringUtils.abbreviate(string0, int0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStart(string1, string2);
      assertSame(string3, string1);
      assertSame(string1, string3);
      assertEquals("cannot pad a negative amount: ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "{}";
      String string1 = StringUtils.chop(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("{", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      String string3 = StringUtils.removeStart(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = " J`lCN/QeZgen";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("J`lCN/QeZgen", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = ";TFh}?8";
      int int0 = 0;
      char char0 = 'Y';
      String string1 = StringUtils.center(string0, int0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(";TFh}?8", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace(string1);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertEquals(";TFh}?8", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "t2-V CTH~2p\\";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Collection<String> collection0 = null;
      String string2 = StringUtils.join(collection0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      String string0 = ")4`";
      int int0 = 5;
      char char0 = 's';
      String string1 = StringUtils.center(string0, int0, char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("s)4`s", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = linkedList0.add(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[s)4`s]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = linkedList0.add(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[s)4`s, s)4`s]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("[s)4`s, s)4`s]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertEquals("s)4`s)4`s)4`s", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "izkoj";
      char char0 = '!';
      String string1 = StringUtils.remove(string0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("izkoj", string1);
      assertNotNull(string1);
      
      Iterator<String> iterator0 = null;
      String string2 = StringUtils.join(iterator0, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      String string0 = null;
      boolean boolean0 = linkedList0.add(string0);
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(string0);
      assertEquals("[null, null]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char char0 = 't';
      String string1 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("[null, null]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertEquals("t", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = "ir[v~)";
      boolean boolean0 = linkedList0.add(string0);
      assertEquals(1, linkedList0.size());
      assertEquals("[ir[v~)]", linkedList0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(string0);
      assertEquals(2, linkedList0.size());
      assertEquals("[ir[v~), ir[v~)]", linkedList0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char char0 = 't';
      String string1 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotSame(string1, string0);
      assertEquals(2, linkedList0.size());
      assertEquals("[ir[v~), ir[v~)]", linkedList0.toString());
      assertEquals("ir[v~)tir[v~)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = "";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      assertNotNull(objectArray0[0]);
      
      String string2 = StringUtils.join(objectArray0, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = "";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join(objectArray0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string1.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "9Q\"bSCN{wE1B";
      int int0 = (-2033);
      Object[] objectArray0 = null;
      String string1 = StringUtils.join(objectArray0, string0, int0, int0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripStart(string0, string0);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf(string0, string1);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0, int0);
      assertNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 5;
      char char0 = 's';
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) int0;
      assertNotNull(objectArray0[0]);
      
      int int1 = 0;
      // Undeclared exception!
      try {
        String string0 = StringUtils.join(objectArray0, char0, int1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char char0 = 'F';
      Object[] objectArray0 = new Object[10];
      String string0 = StringUtils.join(objectArray0, char0);
      assertEquals("FFFFFFFFF", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = ";bsMDudz?'gDJ";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "1'ZcTF7@l[!=8%b`R^";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("cannot pad a negative amount: ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterType(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = " vs ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.stripStart(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("is less than 0: ", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase(stringArray0[1]);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "The Array must not be null";
      int int0 = 0;
      String string1 = "I2'*h|q;!UOpn8to";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.split(string0, string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "3";
      char char0 = ',';
      String[] stringArray0 = StringUtils.split(string0, string0, (int) char0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "f";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "ir[v~)CL<*rygw9RWO?";
      String string1 = "[";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.split(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "The character must not be null";
      String string1 = StringUtils.swapCase(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("tHE CHARACTER MUST NOT BE NULL", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      int int0 = 0;
      String string2 = StringUtils.mid(string1, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = 4;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string1, string2, int1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = null;
      String[] stringArray0 = StringUtils.split(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "O`eJ'";
      char char0 = '\'';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      char char0 = 'M';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = " vbhs ";
      char char0 = 'y';
      String string1 = StringUtils.center(string0, (int) char0, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy vbhs yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.split(string1, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char char0 = ']';
      String string0 = null;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "'Q=sN<3G6:,Dx%XyIk";
      String string1 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "i_;Hq7@8/.[v/tb";
      String string1 = "~T";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = "\\u000";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "R >6";
      String[] stringArray0 = new String[2];
      String string1 = StringUtils.chomp(string0, stringArray0[1]);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("R >6", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.substringsBetween(string0, string1, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "j%-";
      String string1 = null;
      String[] stringArray0 = StringUtils.substringsBetween(string1, string1, string0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = ";TFh}?8";
      int int0 = 0;
      char char0 = 'Y';
      String string1 = StringUtils.center(string0, int0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(";TFh}?8", string1);
      assertNotNull(string1);
      
      String string2 = "NOWALUL~_aXLgW";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween(string2, string1, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "o\\\"=$2";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string0, string1, string1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = " vs ";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string1, string0, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      String string1 = "s~\\79 mdaV5N/!i)";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "?D8@=5G0";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "strings must not be null";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "Z1l";
      String string1 = StringUtils.trimToNull(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("Z1l", string1);
      assertNotNull(string1);
      
      String string2 = "3";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBeforeLast(string1, string2);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertEquals("Z1l", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "";
      String string1 = "pzZ8gr)7`~B-G_41cq";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("pzZ8gr)7`~B-G_41cq", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = ", Length: 0";
      String string1 = null;
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = ")4`";
      int int0 = 5;
      char char0 = 's';
      String string1 = StringUtils.center(string0, int0, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("s)4`s", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.strip(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfter(string2, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = ";TFh}?8";
      int int0 = 0;
      char char0 = 'Y';
      String string1 = StringUtils.center(string0, int0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(";TFh}?8", string1);
      assertNotNull(string1);
      
      String string2 = "oes@_j";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBefore(string1, string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertEquals(";TFh}?8", string3);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "";
      char char0 = 'j';
      int int0 = StringUtils.lastIndexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.right(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore(string1, string1);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "F";
      int int0 = 4189;
      int int1 = (-252);
      String string1 = StringUtils.mid(string0, int1, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("F", string1);
      assertNotNull(string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      char[] charArray0 = new char[24];
      int int0 = (-754);
      String string2 = StringUtils.mid(string1, (int) charArray0[0], int0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "~gs go>o3ioh";
      char char0 = 'e';
      String string1 = StringUtils.mid(string0, (int) char0, (int) char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "x?'t`7";
      int int0 = 0;
      String string1 = StringUtils.right(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = ";TFh}?8";
      char char0 = 'Y';
      String string1 = StringUtils.right(string0, (int) char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(";TFh}?8", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      int int0 = 0;
      String string1 = StringUtils.left(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = " vs ";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.lastIndexOf(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart(string0, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.left(string2, int0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char char0 = 'Y';
      String string0 = null;
      String string1 = StringUtils.left(string0, (int) char0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "";
      int int0 = (-469);
      String string1 = StringUtils.substring(string0, int0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "BUYnh$3U\"/}+3d";
      int int0 = 0;
      int int1 = 3329;
      char char0 = 'G';
      String string1 = StringUtils.rightPad(string0, int1, char0);
      String string2 = StringUtils.substringAfter(string0, string1);
      String string3 = StringUtils.substring(string2, int0, int1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "R >6";
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
      
      int int1 = 838;
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.substring(string0, int1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = null;
      int int0 = 2217;
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "";
      char char0 = '|';
      String string1 = StringUtils.substring(string0, (int) char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = ".6-NE:WM*a*z}UK>";
      String string1 = StringUtils.defaultString(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(".6-NE:WM*a*z}UK>", string1);
      assertNotNull(string1);
      
      int int0 = (-883);
      String string2 = StringUtils.substring(string1, int0);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertEquals(".6-NE:WM*a*z}UK>", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = ".6-NE:WM*a*z}UK>";
      String string1 = StringUtils.defaultString(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(".6-NE:WM*a*z}UK>", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substring(string0, int0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(">", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = null;
      int int0 = 8193;
      String string1 = StringUtils.substring(string0, int0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      int int1 = StringUtils.lastIndexOf(string0, string0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.substring(string0, int1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = " vbhs ";
      String string1 = "m(Dz9jBLfrwvFy4/U";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[17];
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = StringUtils.lastIndexOfAny(string1, stringArray0);
      assertNotSame(string1, string0);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = " vbhs ";
      String[] stringArray0 = new String[17];
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertSame(string0, string1);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(string1, stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[10];
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "ig@";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "ig@";
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("IG@", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String[] stringArray0 = new String[6];
      stringArray0[5] = string1;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(stringArray0[5]);
      
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertNotSame(string0, string1);
      assertEquals((-1), int0);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "Mnp";
      String string1 = null;
      boolean boolean0 = StringUtils.containsNone(string0, string1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsNone(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "ig@";
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("IG@", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[6];
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      boolean boolean0 = StringUtils.containsNone(string1, stringArray0[2]);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "ig@";
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("IG@", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(set0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>((Collection<? extends String>) set0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(linkedList0);
      
      char char0 = '`';
      String string2 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsNone(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Iterator<Object> iterator0 = null;
      char char0 = 'N';
      String string0 = StringUtils.join(iterator0, char0);
      assertNull(string0);
      
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "Z1l";
      String string1 = StringUtils.trimToNull(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("Z1l", string1);
      assertNotNull(string1);
      
      String string2 = null;
      boolean boolean0 = StringUtils.containsOnly(string1, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = StringUtils.containsOnly(stringArray0[3], stringArray0[3]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "^\\v{u";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      int int0 = 0;
      String string2 = StringUtils.rightPad(string0, int0, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("^\\v{u", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsOnly(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[16];
      boolean boolean0 = StringUtils.containsOnly(string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = ", Length: ";
      String string1 = "pWz^;9F1^[j;g\"5";
      assertNotSame(string1, string0);
      
      int int0 = 128;
      String string2 = StringUtils.abbreviate(string1, int0, int0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals("pWz^;9F1^[j;g\"5", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAnyBut(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(0, int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = (-469);
      String string0 = "The Array must not be null";
      String string1 = StringUtils.right(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAnyBut(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = ", Length: ";
      int int0 = 128;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(", Length: ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAnyBut(string1, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = " vs ";
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsOnly(string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "R >6";
      boolean boolean0 = StringUtils.containsOnly(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      String string1 = null;
      boolean boolean0 = StringUtils.containsAny(string0, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "HaV6.t7oGfK|qM3";
      char[] charArray0 = new char[24];
      char char0 = 'f';
      charArray0[0] = char0;
      boolean boolean0 = StringUtils.containsAny(string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'f', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "\\u0 charcter must not be nul";
      char[] charArray0 = null;
      boolean boolean0 = StringUtils.containsAny(string0, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = " vs ";
      char[] charArray0 = new char[24];
      boolean boolean0 = StringUtils.containsAny(string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[24];
      boolean boolean0 = StringUtils.containsAny(string1, charArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = null;
      String string1 = "n7XsnP7u]_.2";
      int int0 = 8193;
      String string2 = StringUtils.overlay(string1, string0, int0, int0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertEquals("n7XsnP7u]_.2", string2);
      assertNotNull(string2);
      assertTrue(string1.equals((Object)string2));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsAny(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertFalse(boolean0);
      assertTrue(string1.equals((Object)string2));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = " vbhs ";
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfAny(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.indexOfAny(string0, string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      char[] charArray0 = new char[10];
      int int0 = StringUtils.indexOfAny(string0, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "gfNoo[.>J#MM_&";
      int int0 = (-1775);
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      char[] charArray0 = new char[2];
      int int1 = StringUtils.indexOfAny(string1, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "?";
      String string1 = "dm9,o\"~Qx";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "dmzz>v8imp/%y vs ";
      char char0 = '/';
      String string1 = StringUtils.remove(string0, char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("dmzz>v8imp%y vs ", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = ", Length: ";
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String[] stringArray0 = new String[17];
      boolean boolean0 = StringUtils.containsIgnoreCase(stringArray0[0], stringArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "...";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = "n:{)";
      assertNotSame(string1, string0);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      boolean boolean0 = StringUtils.contains(stringArray0[0], stringArray0[2]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = ", Length: 0";
      String string1 = null;
      String string2 = StringUtils.defaultString(string0);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals(", Length: 0", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.contains(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.contains(string0, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "Strings must not be null";
      char char0 = 'r';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "";
      char char0 = 'r';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = " vbhs ";
      char char0 = 'y';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "o\\\"=$2";
      char char0 = ']';
      int int0 = StringUtils.indexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
      
      String string1 = null;
      int int1 = StringUtils.lastIndexOf(string0, string1, int0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "',**dNth\\.";
      int int0 = 5;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("',**dNth\\.", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[4];
      int int1 = StringUtils.lastIndexOf(string1, string0, (int) charArray0[1]);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(int1 == int0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      int int1 = StringUtils.lastIndexOf(string0, string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = null;
      String string1 = "AIl&)%eLA2w?x_d|V";
      String string2 = StringUtils.stripStart(string1, string1);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      
      int int0 = StringUtils.lastIndexOf(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertEquals((-1), int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "'Q=sN<3G6:,Dx%XyIk";
      char char0 = ']';
      int int0 = StringUtils.lastIndexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      char char0 = 'y';
      String string0 = null;
      int int0 = StringUtils.lastIndexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "><j%2KdPA@N_'@Q22";
      char char0 = 'F';
      int int0 = StringUtils.lastIndexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "gfNoo[.>J#MM_&";
      int int0 = (-1775);
      int int1 = StringUtils.indexOf(string0, string0, int0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = "(LR,";
      String string1 = null;
      int int0 = 10;
      int int1 = StringUtils.indexOf(string0, string1, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "><j%2KdPA@N_'@Q22";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      char char0 = 'F';
      int int0 = StringUtils.indexOf(string0, string1, (int) char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(17, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "izkoj";
      char char0 = '!';
      String string1 = null;
      String string2 = StringUtils.chomp(string1);
      assertNull(string2);
      
      int int0 = StringUtils.indexOf(string2, string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "R >6";
      int int0 = 838;
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "R >6";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 838;
      int int1 = StringUtils.ordinalIndexOf(string0, string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = "gfNoo[.>J#MM_&";
      int int0 = (-1775);
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      String string3 = StringUtils.right(string2, int0);
      assertNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf(string1, string3, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = "R >6";
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.ordinalIndexOf(string1, string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = null;
      int int0 = 256;
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = null;
      int int0 = StringUtils.indexOf(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = ", Length: ";
      String string1 = null;
      int int0 = StringUtils.indexOf(string1, string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = null;
      char char0 = 'W';
      int int0 = StringUtils.indexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = "~gs go>o3ioh";
      boolean boolean0 = linkedList0.add(string0);
      assertEquals(1, linkedList0.size());
      assertEquals("[~gs go>o3ioh]", linkedList0.toString());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(1, linkedList0.size());
      assertEquals("[~gs go>o3ioh]", linkedList0.toString());
      assertEquals("~gs go>o3ioh", string1);
      assertNotNull(string1);
      
      char char0 = 'e';
      int int0 = StringUtils.indexOf(string1, char0, (int) char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(1, linkedList0.size());
      assertEquals("[~gs go>o3ioh]", linkedList0.toString());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = ", Length: ";
      char char0 = '8';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "mo";
      String string1 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = ", Length: ";
      int int0 = 128;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(", Length: ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.equals(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "o\\\"=$2";
      String string1 = null;
      boolean boolean0 = StringUtils.equals(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = "])+z?[,`+";
      boolean boolean0 = StringUtils.equals(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = "(LR,";
      String[] stringArray0 = new String[2];
      String string1 = "c742E!A%!MxSj[{^";
      assertNotSame(string1, string0);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string1);
      assertNotSame(string1, string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "ig@";
      String string1 = null;
      String string2 = StringUtils.stripEnd(string1, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string1);
      assertNotSame(string1, string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = "R >6";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.stripStart(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToEmpty(string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = ", Length: ";
      String string1 = StringUtils.stripToNull(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(", Length:", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "(LR,";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = " vs ";
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(" vs ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = "mo";
      String string1 = StringUtils.substringBefore(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = "])+z?[,`+";
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.replace(string0, string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(" vs ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = "";
      int int0 = StringUtils.indexOfDifference(string0, string0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center(string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = " ";
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = "<minimum abbreviation width with offset is 7";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.substringBetween(string1, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = " vs ";
      int int0 = StringUtils.indexOfAny(string0, string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0, int0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = ";TFh}?8";
      int int0 = 0;
      char char0 = 'Y';
      String string1 = StringUtils.center(string0, int0, char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(";TFh}?8", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip(string1);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertEquals(";TFh}?8", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "ig@";
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("IG@", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      char char0 = '`';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, string1, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = "F";
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("F", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = "5,DKzu";
      String[] stringArray0 = new String[8];
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = "><j%2KdPA@N_'@Q22";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      char char0 = 'F';
      String string2 = StringUtils.reverseDelimited(string1, char0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }
}
