/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:35:14 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.System;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class FastDateFormatEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "wZz";
      int int0 = (-881);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("wZz", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-881, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=wZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
      assertNotNull(fastDateFormat0);
      assertEquals("wZz", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-881, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=wZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("wZz", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertNotNull(string1);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("wZz", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-881, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=wZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("wZz", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("7-0000GMT+00:00", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "wZZz";
      TimeZone timeZone0 = null;
      TimeZone.setDefault(timeZone0);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Guernsey\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Guernsey,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("wZZz", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      
      String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertNotNull(string1);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Guernsey\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Guernsey,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("wZZz", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("7+00:00GMT", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test02() {}
//   @Test(timeout = 4000)
//   public void test02()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       
//       int int1 = 1987;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=1987,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1987,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       
//       StringBuffer stringBuffer0 = new StringBuffer();
//       assertNotNull(stringBuffer0);
//       assertEquals("", stringBuffer0.toString());
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals(0, stringBuffer0.length());
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
//       assertNotNull(stringBuffer1);
//       assertEquals(34, stringBuffer0.capacity());
//       assertEquals("0171\u5E741\u67088\u65E5 \u661F\u671F\u4E00 \u4E0A\u534812\u664200\u520600\u79D2 GMT", stringBuffer0.toString());
//       assertEquals(29, stringBuffer0.length());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-56770416000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=171,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=8,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("0171\u5E741\u67088\u65E5 \u661F\u671F\u4E00 \u4E0A\u534812\u664200\u520600\u79D2 GMT", stringBuffer1.toString());
//       assertEquals(34, stringBuffer1.capacity());
//       assertEquals(29, stringBuffer1.length());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//   }

  @Test(timeout = 4000)
  public void test03() {}
//   @Test(timeout = 4000)
//   public void test03()  throws Throwable  {
//       String string0 = "wZz";
//       int int0 = (-881);
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("wZz", simpleTimeZone0.getID());
//       assertEquals(-881, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=wZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("wZz", fastDateFormat0.getPattern());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("wZz", simpleTimeZone0.getID());
//       assertEquals(-881, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=wZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat1);
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat1.getPattern());
//       assertEquals(23, fastDateFormat1.getMaxLengthEstimate());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("wZz", fastDateFormat0.getPattern());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("wZz", simpleTimeZone0.getID());
//       assertEquals(-881, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=wZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat1.getPattern());
//       assertEquals(23, fastDateFormat1.getMaxLengthEstimate());
//       assertFalse(boolean0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//   }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "wZZz";
      int int0 = (-881);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=wZZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-881, simpleTimeZone0.getRawOffset());
      assertEquals("wZZz", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      FastDateFormat fastDateFormat0 = new FastDateFormat(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("wZZz", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("java.util.SimpleTimeZone[id=wZZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-881, simpleTimeZone0.getRawOffset());
      assertEquals("wZZz", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      boolean boolean0 = fastDateFormat0.equals((Object) simpleTimeZone0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("wZZz", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("java.util.SimpleTimeZone[id=wZZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-881, simpleTimeZone0.getRawOffset());
      assertEquals("wZZz", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "[";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("[", fastDateFormat0.getPattern());
      assertEquals(1, fastDateFormat0.getMaxLengthEstimate());
      
      Object object0 = null;
      // Undeclared exception!
      try {
        String string1 = fastDateFormat0.format(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "[";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("[", fastDateFormat0.getPattern());
      assertEquals(1, fastDateFormat0.getMaxLengthEstimate());
      
      // Undeclared exception!
      try {
        String string1 = fastDateFormat0.format((Object) fastDateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang.time.FastDateFormat
         //
      }
  }

  @Test(timeout = 4000)
  public void test07() {}
//   @Test(timeout = 4000)
//   public void test07()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.PRC;
//       assertNotNull(locale0);
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockGregorianCalendar0);
//       assertNotNull(attributedCharacterIterator0);
//       assertEquals(31, attributedCharacterIterator0.getEndIndex());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals(31, attributedCharacterIterator0.getRunLimit());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//   }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      //  // Unstable assertion: assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals("yyyy/M/d a h:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("yyyy/M/d a h:mm", simpleDateFormat0.toPattern());
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("yyyy/M/d a h:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("yyyy/M/d a h:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("Tue Dec 11 18:34:49 GMT 1934", date0.toString());
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) date0);
      //  // Unstable assertion: assertNotNull(attributedCharacterIterator0);
      //  // Unstable assertion: assertEquals("yyyy/M/d a h:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("yyyy/M/d a h:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(15, attributedCharacterIterator0.getRunLimit());
      //  // Unstable assertion: assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      //  // Unstable assertion: assertEquals(0, attributedCharacterIterator0.getRunStart());
      //  // Unstable assertion: assertEquals(0, attributedCharacterIterator0.getIndex());
      //  // Unstable assertion: assertEquals(15, attributedCharacterIterator0.getEndIndex());
      //  // Unstable assertion: assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("Tue Dec 11 18:34:49 GMT 1934", date0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "EEE1d MMM yyyy H' h 'm! z";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertNotNull(fastDateFormat0);
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEE1d MMM yyyy H' h 'm! z", fastDateFormat0.getPattern());
      assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("GMT", zoneInfo0.getID());
      
      fastDateFormat0.init();
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEE1d MMM yyyy H' h 'm! z", fastDateFormat0.getPattern());
      assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "y|%vVEoM\\#*!G";
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "u2Nt(CwIw";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "wZZz";
      int int0 = (-881);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("wZZz", simpleTimeZone0.getID());
      assertEquals(-881, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=wZZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      FastDateFormat fastDateFormat0 = new FastDateFormat(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("wZZz", simpleTimeZone0.getID());
      assertEquals(-881, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=wZZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("wZZz", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      
      String string1 = fastDateFormat0.toString();
      assertNotNull(string1);
      assertEquals("wZZz", simpleTimeZone0.getID());
      assertEquals(-881, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=wZZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("wZZz", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("FastDateFormat[wZZz]", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string1, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "|=q%Q#-";
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "{oc";
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("{oc", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("{oc", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("{oc", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "l4o";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("l4o", locale0.getLanguage());
      assertEquals("l4o", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("l4o", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "j\\8-p.mAFT*k";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string0 = "1+h02,g.K/64;Gg<b[";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "fpc_W";
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "=sei*d/6Y_|S\"X";
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "cQ>~*=8Nu)m2Ji";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "b%z:*S+";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "y }Yd@Ik=g";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "X|Ei4NL_1#\"}Mq";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test(timeout = 4000)
  public void test25() {}
//   @Test(timeout = 4000)
//   public void test25()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       
//       String string0 = "Wzi 5$)u~J9-";
//       Locale locale0 = Locale.TRADITIONAL_CHINESE;
//       assertNotNull(locale0);
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TW", locale0.getCountry());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: i
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "Vj![_[5D6~z";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "%EXdgWzuw&J";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = zoneInfo0.getID();
      assertNotNull(string1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("GMT", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "^8.SM<x$";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "]>w)RAyHAF |mK4r";
      Locale locale0 = new Locale(string0, string0);
      assertNotNull(locale0);
      assertEquals("]>w)rayhaf |mk4r_]>W)RAYHAF |MK4R", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("]>W)RAYHAF |MK4R", locale0.getCountry());
      assertEquals("]>w)rayhaf |mk4r", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "<Q)";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test(timeout = 4000)
  public void test31() {}
//   @Test(timeout = 4000)
//   public void test31()  throws Throwable  {
//       String string0 = ";P=Ju1,l<QCm|";
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: P
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "yy-M-d ah:mm";
      String string1 = "*HOz,iA]cP'0zY~-xhA";
      assertNotSame(string1, string0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0, locale0);
      assertNotNull(simpleDateFormat0);
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("yy-M-d ah:mm", simpleDateFormat0.toPattern());
      assertEquals("yy-M-d ah:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("yy-M-d ah:mm", simpleDateFormat0.toPattern());
      assertEquals("yy-M-d ah:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "No date pattern for locale: ";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "L?\\Sqin_8?}wnbL93g_";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "K~{UY<JkknJL";
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("k~{uy<jkknjl", locale0.toString());
      assertEquals("k~{uy<jkknjl", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "3yJJ";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: JJ
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "IQ e*R\":I";
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "$.ZDzn1}z Q";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "%!sCy}*}X.e7Eq@:mMa";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "}+(3GB ~<`";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      String string0 = "$ATAY;|nDdJ}";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      String string0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test43() {}
//   @Test(timeout = 4000)
//   public void test43()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat1);
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat1.getMaxLengthEstimate());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
//   }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "p?!?i)*}N0Df";
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      int int0 = 0;
      int int1 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int1, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(52, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test(timeout = 4000)
  public void test45() {}
//   @Test(timeout = 4000)
//   public void test45()  throws Throwable  {
//       String string0 = "";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.ITALIAN;
//       assertNotNull(locale0);
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("it", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       
//       int int0 = 0;
//       ZoneInfo zoneInfo1 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo1);
//       assertEquals("GMT", zoneInfo1.getID());
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("GMT", zoneInfo1.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       
//       System.setCurrentTimeMillis((long) int0);
//       ZoneInfo zoneInfo2 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo2);
//       assertEquals("GMT", zoneInfo1.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("GMT", zoneInfo2.getID());
//       assertSame(zoneInfo1, zoneInfo2);
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertSame(zoneInfo2, zoneInfo1);
//       assertNotSame(zoneInfo2, zoneInfo0);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo0));
//       
//       int int1 = (-1650);
//       String string1 = "RHNfPj";
//       assertNotSame(string1, string0);
//       
//       int int2 = (-86);
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int1, string1, int0, int0, int0, int1, int2, int0, int2, int2);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(-1650, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("RHNfPj", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=RHNfPj,offset=-1650,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=-1650,startTimeMode=0,endMode=0,endMonth=-86,endDay=0,endDayOfWeek=-86,endTime=-86,endTimeMode=0]", simpleTimeZone0.toString());
//       assertNotSame(string1, string0);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertFalse(string1.equals((Object)string0));
//       
//       long long0 = 1255L;
//       String string2 = "";
//       assertNotSame(string2, string1);
//       assertSame(string2, string0);
//       
//       Locale locale1 = new Locale(string2, string2);
//       assertNotNull(locale1);
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("", locale1.getLanguage());
//       assertEquals("", locale1.getISO3Language());
//       assertEquals("", locale1.toString());
//       assertEquals("", locale1.getVariant());
//       assertEquals("", locale1.getCountry());
//       assertNotSame(string2, string1);
//       assertSame(string2, string0);
//       assertNotSame(locale1, locale0);
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(locale1.equals((Object)locale0));
//       
//       Locale locale2 = Locale.TAIWAN;
//       assertNotNull(locale2);
//       assertEquals("", locale2.getVariant());
//       assertEquals("zho", locale2.getISO3Language());
//       assertEquals("zh_TW", locale2.toString());
//       assertEquals("zh", locale2.getLanguage());
//       assertEquals("TW", locale2.getCountry());
//       assertEquals("TWN", locale2.getISO3Country());
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertNotSame(zoneInfo0, zoneInfo1);
//       assertNotSame(zoneInfo0, zoneInfo2);
//       assertTrue(zoneInfo0.equals((Object)zoneInfo2));
//       assertTrue(zoneInfo0.equals((Object)zoneInfo1));
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//   }

  @Test(timeout = 4000)
  public void test46() {}
//   @Test(timeout = 4000)
//   public void test46()  throws Throwable  {
//       long long0 = 0L;
//       Long long1 = new Long(long0);
//       assertEquals(0L, (long)long1);
//       assertTrue(long1.equals((Object)long0));
//       
//       int int0 = long1.intValue();
//       assertEquals(0, int0);
//       assertTrue(long1.equals((Object)long0));
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertTrue(long1.equals((Object)long0));
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertTrue(long1.equals((Object)long0));
//       
//       Locale locale0 = Locale.TAIWAN;
//       assertNotNull(locale0);
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zho", locale0.getISO3Language());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zho", locale0.getISO3Language());
//       assertTrue(long1.equals((Object)long0));
//   }

  @Test(timeout = 4000)
  public void test47() {}
//   @Test(timeout = 4000)
//   public void test47()  throws Throwable  {
//       String string0 = "wZZz";
//       int int0 = (-881);
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("wZZz", simpleTimeZone0.getID());
//       assertEquals(-881, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=wZZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       
//       TimeZone timeZone0 = null;
//       TimeZone.setDefault(timeZone0);
//       String string1 = "IBI,3;$Rz<";
//       assertNotSame(string1, string0);
//       
//       Locale locale0 = Locale.JAPAN;
//       assertNotNull(locale0);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("ja", locale0.getLanguage());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("wZZz", simpleTimeZone0.getID());
//       assertEquals(-881, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=wZZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("wZZz", fastDateFormat0.getPattern());
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertNotSame(string0, string1);
//       assertFalse(string0.equals((Object)string1));
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Guernsey\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Guernsey,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertNotNull(date0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Guernsey\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Guernsey,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       String string2 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotNull(string2);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("wZZz", simpleTimeZone0.getID());
//       assertEquals(-881, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=wZZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("wZZz", fastDateFormat0.getPattern());
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Guernsey\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Guernsey,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("7-00:00GMT+00:00", string2);
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       
//       boolean boolean0 = simpleTimeZone0.inDaylightTime(date0);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("wZZz", simpleTimeZone0.getID());
//       assertEquals(-881, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=wZZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Guernsey\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Guernsey,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertFalse(boolean0);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       
//       int int1 = (-9);
//       String string3 = "HyZ~73'}So@,GVk";
//       assertNotSame(string3, string1);
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string0);
//       assertFalse(string3.equals((Object)string2));
//       
//       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
//       assertNotNull(mockGregorianCalendar1);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Guernsey\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Guernsey,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       
//       List list0 = fastDateFormat0.parsePattern();
//       assertNotNull(list0);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("wZZz", simpleTimeZone0.getID());
//       assertEquals(-881, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=wZZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("wZZz", fastDateFormat0.getPattern());
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, list0.isEmpty());
//       assertEquals(3, list0.size());
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string3);
//       assertNotSame(string0, string1);
//       assertFalse(int0 == int1);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(string0.equals((Object)string1));
//       
//       String string4 = "EEEE, d MMMM yyyy HH:m_:ss '#''clockJ z";
//       assertNotSame(string4, string1);
//       assertNotSame(string4, string2);
//       assertNotSame(string4, string3);
//       assertNotSame(string4, string0);
//       assertFalse(string4.equals((Object)string2));
//       
//       String string5 = locale0.getCountry();
//       assertNotNull(string5);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("JP", string5);
//       assertNotSame(string5, string4);
//       assertNotSame(string5, string1);
//       assertNotSame(string5, string2);
//       assertNotSame(string5, string3);
//       assertNotSame(string5, string0);
//       assertFalse(string5.equals((Object)string4));
//       assertFalse(string5.equals((Object)string1));
//       assertFalse(string5.equals((Object)string2));
//       assertFalse(string5.equals((Object)string3));
//       assertFalse(string5.equals((Object)string0));
//       
//       String string6 = fastDateFormat0.toString();
//       assertNotNull(string6);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("wZZz", simpleTimeZone0.getID());
//       assertEquals(-881, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=wZZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("wZZz", fastDateFormat0.getPattern());
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("FastDateFormat[wZZz]", string6);
//       assertNotSame(string6, string4);
//       assertNotSame(string6, string0);
//       assertNotSame(string6, string2);
//       assertNotSame(string6, string5);
//       assertNotSame(string6, string1);
//       assertNotSame(string6, string3);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string6);
//       assertNotSame(string0, string4);
//       assertNotSame(string0, string3);
//       assertNotSame(string0, string5);
//       assertNotSame(string0, string1);
//       assertFalse(string6.equals((Object)string4));
//       assertFalse(string6.equals((Object)string0));
//       assertFalse(string6.equals((Object)string2));
//       assertFalse(string6.equals((Object)string5));
//       assertFalse(string6.equals((Object)string1));
//       assertFalse(string6.equals((Object)string3));
//       assertFalse(int0 == int1);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string6));
//       assertFalse(string0.equals((Object)string4));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(string0.equals((Object)string5));
//       assertFalse(string0.equals((Object)string1));
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string3, (TimeZone) simpleTimeZone0, locale0);
//       assertNotNull(fastDateFormat1);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("wZZz", simpleTimeZone0.getID());
//       assertEquals(-881, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=wZZz,offset=-881,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("HyZ~73'}So@,GVk", fastDateFormat1.getPattern());
//       assertEquals(22, fastDateFormat1.getMaxLengthEstimate());
//       assertNotSame(string3, string4);
//       assertNotSame(string3, string1);
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string0);
//       assertNotSame(string3, string5);
//       assertNotSame(string3, string6);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string6);
//       assertNotSame(string0, string4);
//       assertNotSame(string0, string3);
//       assertNotSame(string0, string5);
//       assertNotSame(string0, string1);
//       assertFalse(int0 == int1);
//       assertFalse(string3.equals((Object)string4));
//       assertFalse(string3.equals((Object)string1));
//       assertFalse(string3.equals((Object)string2));
//       assertFalse(string3.equals((Object)string0));
//       assertFalse(string3.equals((Object)string5));
//       assertFalse(string3.equals((Object)string6));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string6));
//       assertFalse(string0.equals((Object)string4));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(string0.equals((Object)string5));
//       assertFalse(string0.equals((Object)string1));
//       
//       TimeZone timeZone1 = null;
//       int int2 = (-533);
//       int int3 = 60000;
//       MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar(int1, int1, int2, int0, int3);
//       assertNotNull(mockGregorianCalendar2);
//       assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Guernsey\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Guernsey,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-9,MONTH=-9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-533,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-881,HOUR_OF_DAY=-881,MINUTE=60000,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar2.toString());
//       assertEquals(true, mockGregorianCalendar2.isLenient());
//       assertNotSame(mockGregorianCalendar2, mockGregorianCalendar0);
//       assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int3);
//       assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar0));
//       assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int1);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       
//       boolean boolean1 = mockGregorianCalendar0.after((Object) mockGregorianCalendar2);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Guernsey\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Guernsey,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-9,MONTH=-9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-533,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-881,HOUR_OF_DAY=-881,MINUTE=60000,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar2.toString());
//       assertEquals(true, mockGregorianCalendar2.isLenient());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Guernsey\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Guernsey,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertTrue(boolean1);
//       assertNotSame(mockGregorianCalendar2, mockGregorianCalendar0);
//       assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar2);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int3);
//       assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar0));
//       assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int1);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar2));
//       assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(boolean1 == boolean0);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       
//       Locale locale1 = Locale.CANADA_FRENCH;
//       assertNotNull(locale1);
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("CAN", locale1.getISO3Country());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("", locale1.getVariant());
//       assertEquals("fr_CA", locale1.toString());
//       assertEquals("CA", locale1.getCountry());
//       assertNotSame(locale1, locale0);
//       assertFalse(locale1.equals((Object)locale0));
//       
//       String string7 = "tCdWiHgn>#Q/f~$b;{";
//       assertNotSame(string7, string5);
//       assertNotSame(string7, string6);
//       assertNotSame(string7, string0);
//       assertNotSame(string7, string4);
//       assertNotSame(string7, string3);
//       assertNotSame(string7, string2);
//       assertNotSame(string7, string1);
//       assertFalse(string7.equals((Object)string5));
//       assertFalse(string7.equals((Object)string6));
//       assertFalse(string7.equals((Object)string2));
//   }

  @Test(timeout = 4000)
  public void test48() {}
//   @Test(timeout = 4000)
//   public void test48()  throws Throwable  {
//       String string0 = "k-\"-";
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("k-\"-", fastDateFormat0.getPattern());
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       int int0 = (-1);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       Date date0 = mockGregorianCalendar0.getGregorianChange();
//       assertNotNull(date0);
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
//       assertNotNull(stringBuffer0);
//       assertEquals("k-\"-", stringBuffer0.toString());
//       assertEquals(21, stringBuffer0.capacity());
//       assertEquals(5, stringBuffer0.length());
//       
//       long long0 = 1L;
//       StringBuffer stringBuffer1 = fastDateFormat0.format(long0, stringBuffer0);
//       assertNotNull(stringBuffer1);
//       assertEquals(21, stringBuffer0.capacity());
//       assertEquals("k-\"-24-\"-", stringBuffer0.toString());
//       assertEquals(11, stringBuffer0.length());
//       assertEquals(21, stringBuffer1.capacity());
//       assertEquals("k-\"-24-\"-", stringBuffer1.toString());
//       assertEquals(11, stringBuffer1.length());
//       assertEquals("k-\"-", fastDateFormat0.getPattern());
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotNull(string1);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("k-\"-", fastDateFormat0.getPattern());
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("20-\"-", string1);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       
//       char char0 = '%';
//       boolean boolean0 = true;
//       Locale locale0 = Locale.TAIWAN;
//       assertNotNull(locale0);
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//   }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      
      int int0 = 0;
      String string1 = fastDateFormat0.format((long) int0);
      assertNotNull(string1);
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test51() {}
//   @Test(timeout = 4000)
//   public void test51()  throws Throwable  {
//       int int0 = 1;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       
//       String string0 = "u";
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertNotNull(parsePosition0);
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(1, parsePosition0.getIndex());
//       
//       Object object0 = fastDateFormat0.parseObject(string0, parsePosition0);
//       assertNull(object0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(0, parsePosition0.getErrorIndex());
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
//       assertEquals(0, parsePosition0.getIndex());
//   }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string0 = fastDateFormat0.getPattern();
      assertNotNull(string0);
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("H.mm.ss z", string0);
  }

  @Test(timeout = 4000)
  public void test53() {}
//   @Test(timeout = 4000)
//   public void test53()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       
//       int int0 = fastDateFormat0.getMaxLengthEstimate();
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(23, int0);
//   }

  @Test(timeout = 4000)
  public void test54() {}
//   @Test(timeout = 4000)
//   public void test54()  throws Throwable  {
//       long long0 = 0L;
//       Long long1 = new Long(long0);
//       assertEquals(0L, (long)long1);
//       assertTrue(long1.equals((Object)long0));
//       
//       int int0 = long1.intValue();
//       assertEquals(0, int0);
//       assertTrue(long1.equals((Object)long0));
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertTrue(long1.equals((Object)long0));
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertTrue(long1.equals((Object)long0));
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertTrue(long1.equals((Object)long0));
//   }

  @Test(timeout = 4000)
  public void test55() {}
//   @Test(timeout = 4000)
//   public void test55()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertNotNull(locale0);
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//   }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, timeZone0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("EEEE d MMMM yyyy H' h 'mm z", fastDateFormat0.getPattern());
      assertEquals(43, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      assertEquals("EEEE d MMMM yyyy H' h 'mm z", fastDateFormat0.getPattern());
      assertEquals(43, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57() {}
//   @Test(timeout = 4000)
//   public void test57()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "%EXdgWzuw&J";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//   }

  @Test(timeout = 4000)
  public void test58() {}
//   @Test(timeout = 4000)
//   public void test58()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//   }

  @Test(timeout = 4000)
  public void test59() {}
//   @Test(timeout = 4000)
//   public void test59()  throws Throwable  {
//       String string0 = "EEE1d MMM yyyy H' h 'm! z";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Date date0 = mockGregorianCalendar0.getGregorianChange();
//       assertNotNull(date0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       
//       String string1 = fastDateFormat0.format(date0);
//       assertNotNull(string1);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       assertEquals("1582\u5E7410\u670815\u65E5 \u661F\u671F\u4E94", string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string1);
//       assertNotNull(fastDateFormat1);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("1582\u5E7410\u670815\u65E5 \u661F\u671F\u4E94", fastDateFormat1.getPattern());
//       assertEquals(15, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//   }

  @Test(timeout = 4000)
  public void test60() {}
//   @Test(timeout = 4000)
//   public void test60()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       
//       long long0 = 0L;
//       Long long1 = new Long(long0);
//       assertEquals(0L, (long)long1);
//       assertTrue(long1.equals((Object)long0));
//       
//       String string0 = fastDateFormat0.format((Object) long1);
//       assertNotNull(string0);
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("1970/1/1 \u4E0A\u5348 12:00", string0);
//       assertTrue(long1.equals((Object)long0));
//   }
}
