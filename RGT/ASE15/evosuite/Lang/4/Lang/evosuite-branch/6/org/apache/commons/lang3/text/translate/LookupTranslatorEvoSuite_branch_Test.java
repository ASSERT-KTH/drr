/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:17:18 GMT 2014
 */

package org.apache.commons.lang3.text.translate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.lang3.text.translate.LookupTranslator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

 
public class LookupTranslatorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = "";
      String string1 = "tWJ6b~8Q?-;'vG0A{";
      assertNotSame(string1, string0);
      
      CharSequence[][] charSequenceArray0 = new CharSequence[8][2];
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      charSequenceArray1[0] = (CharSequence) string0;
      assertEquals(0, charSequenceArray1[0].length());
      assertEquals("", charSequenceArray1[0].toString());
      assertNotNull(charSequenceArray1[0]);
      
      charSequenceArray1[1] = (CharSequence) string0;
      assertEquals("", charSequenceArray1[1].toString());
      assertEquals(0, charSequenceArray1[1].length());
      assertNotNull(charSequenceArray1[1]);
      
      charSequenceArray1[5] = (CharSequence) string1;
      assertEquals("tWJ6b~8Q?-;'vG0A{", charSequenceArray1[5].toString());
      assertEquals(18, charSequenceArray1[5].length());
      assertNotNull(charSequenceArray1[5]);
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      charSequenceArray0[1] = charSequenceArray0[0];
      assertNotNull(charSequenceArray0[1]);
      
      charSequenceArray0[2] = charSequenceArray0[1];
      assertNotNull(charSequenceArray0[2]);
      
      charSequenceArray0[3] = charSequenceArray1;
      assertNotNull(charSequenceArray0[3]);
      
      charSequenceArray0[4] = charSequenceArray1;
      assertNotNull(charSequenceArray0[4]);
      
      charSequenceArray0[5] = charSequenceArray0[3];
      assertNotNull(charSequenceArray0[5]);
      
      charSequenceArray0[6] = charSequenceArray0[4];
      assertNotNull(charSequenceArray0[6]);
      
      charSequenceArray0[7] = charSequenceArray0[3];
      assertNotNull(charSequenceArray0[7]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
      
      String string2 = lookupTranslator0.translate(charSequenceArray1[5]);
      assertEquals("tWJ6b~8Q?-;'vG0A{", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
  }

  //@Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[9][7];
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      String string0 = "fC>hIV>/`=UBZ5_*";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      String string1 = mockFile0.getParent();
      assertEquals("fC>hIV>", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      charSequenceArray1[0] = (CharSequence) string1;
      assertEquals("fC>hIV>", charSequenceArray1[0].toString());
      assertEquals(7, charSequenceArray1[0].length());
      assertNotNull(charSequenceArray1[0]);
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      charSequenceArray0[1] = charSequenceArray1;
      assertNotNull(charSequenceArray0[1]);
      
      charSequenceArray0[2] = charSequenceArray0[0];
      assertNotNull(charSequenceArray0[2]);
      
      charSequenceArray0[3] = charSequenceArray0[2];
      assertNotNull(charSequenceArray0[3]);
      
      charSequenceArray0[4] = charSequenceArray0[0];
      assertNotNull(charSequenceArray0[4]);
      
      charSequenceArray0[5] = charSequenceArray0[4];
      assertNotNull(charSequenceArray0[5]);
      
      charSequenceArray0[6] = charSequenceArray0[1];
      assertNotNull(charSequenceArray0[6]);
      
      charSequenceArray0[7] = charSequenceArray0[2];
      assertNotNull(charSequenceArray0[7]);
      
      charSequenceArray0[8] = charSequenceArray0[0];
      assertNotNull(charSequenceArray0[8]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
      
      String string2 = lookupTranslator0.translate((CharSequence) string1);
      assertEquals("fC>hIV>", string2);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CharSequence[][] charSequenceArrayArray0 = null;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArrayArray0);
      assertNotNull(lookupTranslator0);
  }
}
