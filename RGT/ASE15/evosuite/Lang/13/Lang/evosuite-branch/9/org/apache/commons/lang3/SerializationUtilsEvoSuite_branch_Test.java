/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:10:53 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.Serializable;
import org.apache.commons.lang3.SerializationException;
import org.apache.commons.lang3.SerializationUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class SerializationUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = "w328?iAp";
      InputStream inputStream0 = ClassLoader.getSystemResourceAsStream(string0);
      assertNull(inputStream0);
      
      // Undeclared exception!
      try {
        Object object0 = SerializationUtils.deserialize(inputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The InputStream must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try {
        Object object0 = SerializationUtils.deserialize(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.StreamCorruptedException: invalid stream header: 00000000
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_CLASS;
      assertEquals((byte)118, byte0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      // Undeclared exception!
      try {
        SerializationUtils.serialize((Serializable) byte0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte byte0 = (byte) (-33);
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try {
        SerializationUtils.serialize((Serializable) byte0, outputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The OutputStream must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = null;
      String string1 = SerializationUtils.clone(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SerializationUtils serializationUtils0 = new SerializationUtils();
      assertNotNull(serializationUtils0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      
      Integer integer1 = SerializationUtils.clone(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotSame(integer0, integer1);
      assertNotSame(integer1, integer0);
      assertEquals(1, (int)integer1);
  }
}
