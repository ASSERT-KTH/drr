/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:04:13 GMT 2014
 */

package org.apache.commons.lang.text;

import static org.junit.Assert.*;
import org.junit.Test;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class StrBuilderEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = (-1744L);
      long long1 = strBuilder_StrBuilderReader0.skip(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[6];
      char char0 = ']';
      charArray0[2] = char0;
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip((long) charArray0[2]);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertArrayEquals(new char[] {'\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "!/;|BzvvZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[9];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertArrayEquals(new char[] {'!', '/', ';', '|', 'B', 'z', 'v', 'v', 'Z'}, charArray0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[5];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(5, charBuffer0.length());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharBuffer charBuffer1 = charBuffer0.compact();
      assertEquals(5, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(true, charBuffer1.hasArray());
      assertEquals(false, charBuffer1.isDirect());
      assertEquals(false, charBuffer1.hasRemaining());
      assertEquals("", charBuffer1.toString());
      assertEquals(5, charBuffer1.position());
      assertEquals(false, charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(5, charBuffer1.capacity());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(5, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(false, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertSame(charBuffer1, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(true, charBuffer1.hasArray());
      assertEquals(false, charBuffer1.isDirect());
      assertEquals(false, charBuffer1.hasRemaining());
      assertEquals("", charBuffer1.toString());
      assertEquals(5, charBuffer1.position());
      assertEquals(false, charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(5, charBuffer1.capacity());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(5, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(false, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertSame(charBuffer1, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char char0 = 'E';
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, int0, (int) char0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = '5';
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = char0;
      charArray0[5] = charArray0[1];
      // Undeclared exception!
      try {
        int int0 = strBuilder_StrBuilderReader0.read(charArray0, (int) charArray0[5], (int) char0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-1468);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, (int) charArray0[0], int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[9];
      int int0 = (-3045);
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, int0, (int) charArray0[7]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 108;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[10];
      char char0 = '%';
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      List list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, char0, charArray0[0]);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "Linux";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = (-1086);
      char char0 = '/';
      Integer integer0 = new Integer((int) char0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(47, (int)integer0);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, (float) integer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1086
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = ")'`\\JF^:9g})39rw";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.tabMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      int int0 = 1918;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.replace((StrMatcher) strMatcher_CharMatcher0, string0, int0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = "A ";
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = (StrMatcher.TrimMatcher)StrMatcher.trimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      int int1 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_TrimMatcher0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.replace(int1, int0, string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "1.2";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.hashCode();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(49525, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals((Object) string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "!/;|BzvvZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(10, strBuilder1.length());
      assertEquals(10, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder(string0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(9, strBuilder2.size());
      assertEquals(9, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(41, strBuilder2.capacity());
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.append(int0);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(41, strBuilder3.capacity());
      assertEquals(10, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(10, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(10, strBuilder2.length());
      assertEquals(10, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(41, strBuilder2.capacity());
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotNull(strBuilder3);
      
      boolean boolean0 = strBuilder3.equals((Object) strBuilder0);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(41, strBuilder3.capacity());
      assertEquals(10, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(10, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(10, strBuilder2.length());
      assertEquals(10, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(41, strBuilder2.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "WgPpr,n{sYI";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals(strBuilder0);
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "!/;|BzvvZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(10, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.length());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder(string0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNull(strBuilder2.getNewLineText());
      assertEquals(41, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(9, strBuilder2.length());
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder2.equals((Object) strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(41, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(9, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 32;
      String string0 = "oHb4d;\"<@cxm:Jja";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(int0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNotSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder0, strBuilder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 32;
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(int0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNotSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder0, strBuilder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "Linux";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.charSetMatcher(string0);
      assertNotNull(strMatcher_CharSetMatcher0);
      
      int int1 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharSetMatcher0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "` ;p-u\\kVdd52aJ I";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = null;
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "Linux";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.spaceMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      int int1 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "SL& 4SNR_,1AWE9`/c/";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(19, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string1 = "%p!_J$sn'_Bj";
      assertNotSame(string1, string0);
      
      int int0 = strBuilder0.lastIndexOf(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(19, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "6";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf(string0);
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "4.0";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = '4';
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.charMatcher(char0);
      assertNotNull(strMatcher_CharMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_CharMatcher0);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.size());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf(string0, (int) char0);
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "` ;p-u\\kVdd52aJ I";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = 'q';
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = strBuilder0.lastIndexOf(string1, (int) char0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder0.capacity());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      int int1 = strBuilder0.lastIndexOf(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = ")'`\\JF^:9g})39rw";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 1918;
      int int1 = strBuilder0.lastIndexOf(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "` ;p-u\\kVdd52aJ I";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = 'q';
      int int0 = strBuilder0.lastIndexOf(char0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 108;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = 'V';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(int0, int0, char0);
      assertEquals(108, strBuilder1.capacity());
      assertEquals(108, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(108, strBuilder1.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.length());
      assertEquals(108, strBuilder0.size());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      int int1 = strBuilder0.lastIndexOf(char0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.length());
      assertEquals(108, strBuilder0.size());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(107, int1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = '_';
      int int0 = strBuilder0.lastIndexOf(char0, (int) char0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 1;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strMatcher_NoMatcher0);
      
      int int1 = (-1);
      int int2 = strBuilder0.indexOf((StrMatcher) strMatcher_NoMatcher0, int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 108;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'V';
      String string0 = "f)hK3PN1,'y";
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(int0, int0, char0);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(108, strBuilder1.size());
      assertEquals(108, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(108, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(108, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll(string0, string0);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(108, strBuilder1.size());
      assertEquals(108, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(108, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(108, strBuilder2.length());
      assertEquals(108, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(108, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      long long0 = 1925L;
      StrBuilder strBuilder1 = strBuilder0.append(long0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = "Invalid length: ";
      StrBuilder strBuilder2 = strBuilder0.deleteAll(string0);
      assertNull(strBuilder2.getNullText());
      assertEquals(4, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(4, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "SL& 4SNR_,1AWE9`/c/";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.contains(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "4.0";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = '4';
      String string1 = null;
      int int0 = strBuilder0.indexOf(string1, (int) char0);
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = "*.1\\['pww4-7~";
      int int0 = (-4833);
      int int1 = strBuilder0.indexOf(string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "!/;|BzvvZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string1 = "?";
      assertNotSame(string1, string0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(41, strBuilder1.capacity());
      assertNotSame(string1, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(string0, string1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = '2';
      int int0 = (-1);
      int int1 = strBuilder0.indexOf(char0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "])\\m)cdk";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = (StrMatcher.StringMatcher)StrMatcher.stringMatcher(string0);
      assertNotNull(strMatcher_StringMatcher0);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_StringMatcher0);
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "])\\m)cdk";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string1 = null;
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)StrMatcher.stringMatcher(string1);
      assertNotNull(strMatcher_NoMatcher0);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_NoMatcher0);
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "SL& 4SNR_,1AWE9`/c/";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = "*.1\\['pww4-7~";
      boolean boolean0 = strBuilder0.contains(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 9;
      char char0 = 'x';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, int0, char0);
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.contains(char0);
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((long) int0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char char0 = 'T';
      boolean boolean0 = strBuilder0.contains(char0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[7];
      String string0 = "F+\"sx]puA";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(60, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(60, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(60, strBuilder0.length());
      assertEquals(60, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(60, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(60, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int1 = 9;
      String string1 = strBuilder1.midString(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(strBuilder0.getNullText());
      assertEquals(60, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(60, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(60, strBuilder0.length());
      assertEquals(60, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(60, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(60, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("F+\"sx]pu", string1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-354);
      String string0 = "owsdH";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(38, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[5];
      char char0 = '5';
      charArray0[0] = char0;
      charArray0[2] = charArray0[0];
      String string1 = strBuilder0.midString(int0, (int) charArray0[2]);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals(38, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'5', '\u0000', '5', '\u0000', '\u0000'}, charArray0);
      assertEquals("owsdH", string1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = "F+\"sx]puA";
      int int1 = strBuilder0.lastIndexOf(string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int1);
      
      String string1 = strBuilder0.midString(int1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = ' ';
      String string0 = strBuilder0.midString((int) char0, (int) char0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, (long) int0);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      char char0 = 'f';
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft((Object) strBuilder0, (int) char0, char0);
      assertEquals(103, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(103, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(103, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(103, strBuilder1.capacity());
      assertEquals(103, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(103, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(103, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(103, strBuilder0.capacity());
      assertEquals(103, strBuilder0.length());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      
      String string1 = strBuilder1.rightString((int) char0);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(103, strBuilder1.capacity());
      assertEquals(103, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(103, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(103, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(103, strBuilder0.capacity());
      assertEquals(103, strBuilder0.length());
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string1);
      assertEquals("fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0", string1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.rightString(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = 'f';
      String string1 = strBuilder0.rightString((int) char0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 1;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[9];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = strBuilder0.leftString(int0);
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = (-687);
      String string0 = strBuilder0.leftString(int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "SL& 4SNR_,1AWE9`/c/";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = 'k';
      String string1 = strBuilder0.leftString((int) char0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("SL& 4SNR_,1AWE9`/c/", string1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "1.2";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, (double) int0);
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      String string0 = "Ys";
      boolean boolean0 = strBuilder1.endsWith(string0);
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "4.0";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.endsWith(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = "Ys";
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "1.5";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string1 = "A ";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.startsWith(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "1.5";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "1.2";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.startsWith(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "A ";
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 115;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(115, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(115, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(115, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "!/;|BzvvZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(41, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      char char0 = '2';
      StrBuilder strBuilder1 = strBuilder0.setLength((int) char0);
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(50, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = (StrMatcher.TrimMatcher)StrMatcher.trimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst((StrMatcher) strMatcher_TrimMatcher0, string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder2.length());
      assertEquals(50, strBuilder2.capacity());
      assertEquals(49, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "java.vm.specification.version";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(61, strBuilder0.capacity());
      assertEquals(29, strBuilder0.length());
      assertEquals(29, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string1);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(61, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(61, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = ",NPNdc+";
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string0);
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string1, string0);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = (-1004);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "%";
      StrBuilder strBuilder1 = strBuilder0.append(string0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll(string0, string0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "A ";
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 1506;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(1506, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string0);
      assertEquals(1506, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(1506, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 946;
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = '5';
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int0, char0);
      assertEquals(946, strBuilder1.capacity());
      assertEquals(946, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(946, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(946, strBuilder0.length());
      assertEquals(946, strBuilder0.size());
      assertEquals(946, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      char char1 = 'Y';
      StrBuilder strBuilder2 = strBuilder0.replaceAll(char0, char1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertEquals(946, strBuilder2.length());
      assertEquals(946, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(946, strBuilder2.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(946, strBuilder0.length());
      assertEquals(946, strBuilder0.size());
      assertEquals(946, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.replaceFirst(char1, char0);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertNull(strBuilder0.getNullText());
      assertEquals(946, strBuilder0.length());
      assertEquals(946, strBuilder0.size());
      assertEquals(946, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(946, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(946, strBuilder3.length());
      assertEquals(946, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((long) int0);
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      char char0 = 'T';
      char char1 = '%';
      StrBuilder strBuilder2 = strBuilder0.replaceFirst(char0, char1);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = ' ';
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(char0, char0);
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      long long0 = 1925L;
      StrBuilder strBuilder1 = strBuilder0.append(long0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char char0 = '5';
      char char1 = 'n';
      StrBuilder strBuilder2 = strBuilder1.replaceAll(char0, char1);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = ' ';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      String string0 = ";^";
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter1 = (StrBuilder.StrBuilderWriter)strBuilder_StrBuilderWriter0.append((CharSequence) string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder_StrBuilderWriter1, strBuilder_StrBuilderWriter0);
      assertSame(strBuilder_StrBuilderWriter0, strBuilder_StrBuilderWriter1);
      assertNotNull(strBuilder_StrBuilderWriter1);
      
      char char1 = 'b';
      StrBuilder strBuilder1 = strBuilder0.replaceAll(char1, char0);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "!/;|BzvvZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = '#';
      StrBuilder strBuilder1 = strBuilder0.replaceAll(char0, char0);
      assertEquals(9, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(41, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.replace(int0, int0, string0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "WgPpr,n{sYI";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      StrBuilder strBuilder1 = strBuilder0.replace((int) charArray0[2], (int) charArray0[2], string0);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(43, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(22, strBuilder1.size());
      assertEquals(22, strBuilder1.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "` ;p-u\\kVdd52aJ I";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(49, strBuilder1.capacity());
      assertEquals(17, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(17, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 108;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = "f)hK3PN1,'y";
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(108, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[10];
      char char0 = '>';
      char char1 = 'E';
      charArray0[5] = char1;
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertEquals(false, strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(false, strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strTokenizer0.previousIndex());
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'E', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, string0);
      assertEquals(false, strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(false, strTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'E', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst(char0);
      assertFalse(char0 == char1);
      assertEquals(false, strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(false, strTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'E', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[10];
      char char0 = '>';
      charArray0[5] = char0;
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertEquals(false, strTokenizer0.isEmptyTokenAsNull());
      assertEquals(false, strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '>', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, string0);
      assertEquals(false, strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(false, strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '>', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst(char0);
      assertEquals(false, strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(false, strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '>', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 946;
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = '5';
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int0, char0);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(946, strBuilder1.size());
      assertEquals(946, strBuilder1.capacity());
      assertEquals(946, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(946, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(946, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(946, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll(char0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(946, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(946, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char char0 = 'f';
      char[] charArray0 = new char[5];
      charArray0[0] = char0;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'f', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll(char0);
      assertEquals(32, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, strBuilder2.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "!/;|BzvvZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(10, strBuilder1.size());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.trim();
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(41, strBuilder2.capacity());
      assertEquals(9, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder2.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "])\\m)cdk";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.delete(int0, int0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(40, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 2688;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(2688, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int1 = 0;
      boolean boolean0 = true;
      StrBuilder strBuilder1 = strBuilder0.insert(int1, boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(2688, strBuilder1.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(2688, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, boolean0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "WgPpr,n{sYI";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(11, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[3];
      int int1 = 3;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = 'V';
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 86
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "5-Gw";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[6];
      int int1 = (-418);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -418
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[10];
      char char0 = '%';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, (int) char0, (int) charArray0[7]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 37
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 1527;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1527, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int1 = 0;
      char[] charArray0 = new char[9];
      int int2 = (-1706);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int1, charArray0, int2, (int) charArray0[6]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -1706
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int0, int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, (Object) string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 1;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      char char0 = 'I';
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(list0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) list0, int0, char0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = '5';
      Object object0 = null;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(object0, (int) char0, char0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 3396;
      int int1 = 0;
      char char0 = 'u';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(int0, int1, char0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      int int1 = 1;
      char char0 = ';';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int1, char0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = 'V';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, int0, char0);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "!/;|BzvvZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = '#';
      int int0 = (-1);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int0, char0);
      assertEquals(41, strBuilder1.capacity());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "SL& 4SNR_,1AWE9`/c/";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(51, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(51, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(56, strBuilder1.size());
      assertEquals(56, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(2, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = (StrBuilder.StrBuilderTokenizer)strBuilder0.asTokenizer();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 1527;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1527, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = "kw";
      Iterator<StrBuilder> iterator0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, string0);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1527, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1527, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "c}//%p If2>V";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(list0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) list0, string0);
      assertEquals(38, strBuilder0.length());
      assertEquals(38, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(45, strBuilder1.capacity());
      assertEquals(38, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(38, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) list0, string0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = (-1468);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      Collection<Object> collection0 = null;
      String string0 = "P/|4";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(collection0, string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[1];
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "!/;|BzvvZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = true;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(13, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = (-3811);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[5];
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      int int1 = 0;
      strBuilder_StrBuilderWriter0.write(charArray0, int1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = (-408);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      char char0 = 'V';
      charArray0[0] = char0;
      int int1 = 0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, int1, (int) charArray0[0]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 86
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = (-1981);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1981), (int)integer0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[7];
      int int1 = 0;
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(charArray0, int1, (int) integer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1981
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[6];
      char char0 = 'D';
      charArray0[2] = char0;
      charArray0[5] = charArray0[2];
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, (int) charArray0[5], (int) charArray0[3]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = strBuilder0.toCharArray(int0, int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 115;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(115, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'Y';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, int0, char0);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(115, strBuilder1.capacity());
      assertEquals(115, strBuilder1.size());
      assertEquals(115, strBuilder1.length());
      assertEquals(115, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(115, strBuilder0.size());
      assertEquals(115, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(115, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(115, strBuilder0.size());
      assertEquals(115, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(115, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(115, strBuilder0.size());
      assertEquals(115, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(list0);
      
      String string0 = "";
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Collection) list0, string0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(230, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(230, strBuilder1.size());
      assertEquals(230, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(230, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(230, strBuilder2.size());
      assertEquals(230, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(230, strBuilder0.length());
      assertEquals(230, strBuilder0.size());
      assertEquals(230, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.append(strBuilder0, (int) char0, int0);
      assertEquals(345, strBuilder3.size());
      assertEquals(false, strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(345, strBuilder3.length());
      assertEquals(345, strBuilder3.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(345, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(345, strBuilder1.length());
      assertEquals(345, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(345, strBuilder0.size());
      assertEquals(345, strBuilder0.length());
      assertEquals(345, strBuilder0.capacity());
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 9;
      char char0 = 'x';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, int0, char0);
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      int int1 = 0;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(9, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 2688;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(2688, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = 'r';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2688, strBuilder0.length());
      assertEquals(2688, strBuilder0.capacity());
      assertEquals(2688, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2688, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2688, strBuilder1.size());
      assertEquals(2688, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int1 = (-1211);
      // Undeclared exception!
      try {
        StrBuilder strBuilder2 = strBuilder0.append(strBuilder0, (int) char0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 2688;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(2688, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = 'r';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertEquals(2688, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2688, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(2688, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2688, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2688, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2688, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder2 = strBuilder0.append(strBuilder0, (int) char0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = (-705);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = null;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1, int0, int0);
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 2688;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2688, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 108;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = 'V';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(int0, int0, char0);
      assertEquals(108, strBuilder1.length());
      assertEquals(108, strBuilder1.size());
      assertEquals(108, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(108, strBuilder0.size());
      assertEquals(108, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertEquals(216, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(216, strBuilder1.size());
      assertEquals(216, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(216, strBuilder0.capacity());
      assertEquals(216, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(216, strBuilder0.length());
      assertEquals(216, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(216, strBuilder2.capacity());
      assertEquals(216, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 3146;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(3146, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = null;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertNull(strBuilder2.getNullText());
      assertEquals(3146, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3146, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 108;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(108, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 32;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.size());
      assertEquals(32, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(32, stringBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(32, stringBuffer0.length());
      assertEquals(32, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "java.lang.Object";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("java.lang.Object", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      int int0 = 0;
      int int1 = (-1044);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 32;
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = 'c';
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[8];
      String string0 = "OS/2";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals(20, stringBuffer0.capacity());
      assertEquals(4, stringBuffer0.length());
      assertEquals("OS/2", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      int int0 = (-1);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, (int) charArray0[1]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = (-3438);
      StrMatcher strMatcher0 = null;
      int int1 = strBuilder0.indexOf(strMatcher0);
      assertFalse(int1 == int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int1);
      
      StringBuffer stringBuffer0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[8];
      String string0 = "OS/2";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals(20, stringBuffer0.capacity());
      assertEquals("OS/2", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, (int) charArray0[4], (int) charArray0[0]);
      assertEquals(20, stringBuffer0.capacity());
      assertEquals("OS/2", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = 'E';
      StringBuffer stringBuffer0 = new StringBuffer((int) char0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(69, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      int int0 = 0;
      StringBuffer stringBuffer1 = stringBuffer0.insert(int0, (float) char0);
      assertEquals("69.0", stringBuffer1.toString());
      assertEquals(4, stringBuffer1.length());
      assertEquals(69, stringBuffer1.capacity());
      assertEquals(4, stringBuffer0.length());
      assertEquals(69, stringBuffer0.capacity());
      assertEquals("69.0", stringBuffer0.toString());
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertNotNull(stringBuffer1);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertEquals("69.0", stringBuffer1.toString());
      assertEquals(4, stringBuffer1.length());
      assertEquals(69, stringBuffer1.capacity());
      assertEquals(4, stringBuffer0.length());
      assertEquals(69, stringBuffer0.capacity());
      assertEquals("69.0", stringBuffer0.toString());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 32;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = 'E';
      StringBuffer stringBuffer0 = new StringBuffer((int) char0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(69, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(69, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "6";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string1 = "Invalid length: ";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = 2;
      StrBuilder strBuilder1 = strBuilder0.append(string1, int0, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(3, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNotSame(string1, string0);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(string0, string1);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = ",NPNdc+";
      char[] charArray0 = new char[7];
      char char0 = 'q';
      charArray0[0] = char0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(string0, int0, (int) charArray0[0]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int1 = strBuilder0.length();
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, int1);
      
      String string0 = "";
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertTrue(int0 == int1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      int int2 = (-2783);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(string0, int1, int2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int1 = strBuilder0.length();
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, int1);
      
      String string0 = "";
      StrBuilder strBuilder1 = strBuilder0.append(string0, int1, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "c}//%p If2>V";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = (-4494);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'V';
      String string0 = "";
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(string0, (int) char0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 108;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      String string0 = null;
      strBuilder_StrBuilderWriter0.write(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "4.0";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals("4.0", strBuilder1.getNullText());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals("4.0", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendNull();
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals("4.0", strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertEquals("4.0", strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(6, strBuilder2.length());
      assertEquals("4.0", strBuilder2.getNullText());
      assertEquals(6, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(35, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = "|G7gu;G7rHK(C";
      StrBuilder strBuilder1 = strBuilder0.setNewLineText(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals("|G7gu;G7rHK(C", strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals("|G7gu;G7rHK(C", strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendNewLine();
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals("|G7gu;G7rHK(C", strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(13, strBuilder2.length());
      assertEquals("|G7gu;G7rHK(C", strBuilder2.getNewLineText());
      assertEquals(13, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = '\\';
      int int0 = 0;
      char[] charArray0 = new char[25];
      // Undeclared exception!
      try {
        strBuilder0.getChars((int) char0, int0, charArray0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 4;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(4, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[10];
      char char0 = '5';
      charArray0[0] = char0;
      // Undeclared exception!
      try {
        strBuilder0.getChars((int) charArray0[0], (int) charArray0[0], charArray0, (int) charArray0[6]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 53
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 890;
      char char0 = '>';
      int int1 = (-675);
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try {
        strBuilder0.getChars(int0, int1, charArray0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -675
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 115;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(115, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = 'Y';
      int int1 = (-178);
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try {
        strBuilder0.getChars(int1, (int) char0, charArray0, (int) charArray0[2]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -178
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = (StrMatcher.TrimMatcher)StrMatcher.trimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      int int1 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_TrimMatcher0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int1);
      
      StrBuilder strBuilder1 = strBuilder0.append((long) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[8];
      int int2 = strBuilder_StrBuilderReader0.read(charArray0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'-', '1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 0;
      String string0 = "1.5";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int1 = 3;
      char[] charArray0 = strBuilder0.toCharArray(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'1', '.', '5'}, charArray0);
      
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'1', '.', '5'}, charArray1);
      assertArrayEquals(new char[] {'1', '.', '5'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 0;
      String string0 = "1.5";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray(int0, int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'1', '.', '5'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "org.apache.commons.lang.text.StrBuilder";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(71, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.size());
      assertEquals(39, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(71, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.size());
      assertEquals(39, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'o', 'r', 'g', '.', 'a', 'p', 'a', 'c', 'h', 'e', '.', 'c', 'o', 'm', 'm', 'o', 'n', 's', '.', 'l', 'a', 'n', 'g', '.', 't', 'e', 'x', 't', '.', 'S', 't', 'r', 'B', 'u', 'i', 'l', 'd', 'e', 'r'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.deleteCharAt(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "Linux";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.deleteCharAt(int0);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(37, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = (-28);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.deleteCharAt(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -28
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 1;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[9];
      char char0 = 'I';
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(9, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrBuilder strBuilder2 = strBuilder0.setCharAt(int0, char0);
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(9, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder2.size());
      assertEquals(9, strBuilder2.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'E';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setCharAt((int) char0, char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 69
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "!/;|BzvvZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = '#';
      int int0 = (-1);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setCharAt(int0, char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 1506;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1506, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try {
        char char0 = strBuilder0.charAt(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1506
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 108;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = 'V';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(int0, int0, char0);
      assertEquals(108, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(108, strBuilder1.size());
      assertEquals(108, strBuilder1.capacity());
      assertEquals(108, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(108, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int1 = strBuilder_StrBuilderReader0.read();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(108, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(49, int1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try {
        char char0 = strBuilder0.charAt(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "1.2";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder1.isEmpty();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertEquals(5, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      boolean boolean1 = strBuilder0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = (-1468);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int1 = 328;
      char char0 = '9';
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int1, char0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(328, strBuilder1.size());
      assertEquals(328, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(328, strBuilder1.capacity());
      assertEquals(328, strBuilder0.length());
      assertEquals(328, strBuilder0.size());
      assertEquals(328, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertFalse(int0 == int1);
      assertEquals(328, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(328, strBuilder2.capacity());
      assertEquals(328, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(328, strBuilder0.length());
      assertEquals(328, strBuilder0.size());
      assertEquals(328, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "4.0";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = 1803;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(1803, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int1 = (-66);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setLength(int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -66
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.close();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      String string0 = null;
      strBuilder_StrBuilderWriter0.write(string0, int0, int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = (-1981);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1981), (int)integer0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(charArray0, int0, (int) integer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -1981
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "!/;|BzvvZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = '#';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write((int) char0);
      assertEquals(10, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "*.1\\['pww4-7~";
      int int0 = strBuilder0.indexOf(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = ' ';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert((int) char0, (long) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = 108;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = 'V';
      int int1 = strBuilder0.indexOf(char0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, strBuilder0.size());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      String string0 = "VVQA";
      StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) strMatcher_CharMatcher0, string0);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[5];
      StrBuilder strBuilder1 = strBuilder0.insert((int) charArray0[0], charArray0[3]);
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = (-1468);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = '9';
      // Undeclared exception!
      try {
        String string0 = strBuilder0.substring((int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      float float0 = (-39.0379F);
      StrBuilder strBuilder1 = strBuilder0.append(float0);
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) strMatcher_CharSetMatcher0);
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = ';';
      StrMatcher strMatcher0 = null;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strMatcher0, (int) char0, char0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = (StrBuilder.StrBuilderWriter)strBuilder0.asWriter();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = 2688;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2688, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2688
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = 108;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(108, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, (Object) strBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 108
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = 2688;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2688, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = (StrBuilder.StrBuilderReader)strBuilder0.asReader();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2688, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderReader0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      String string0 = ";^";
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter1 = (StrBuilder.StrBuilderWriter)strBuilder_StrBuilderWriter0.append((CharSequence) string0);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder_StrBuilderWriter1, strBuilder_StrBuilderWriter0);
      assertSame(strBuilder_StrBuilderWriter0, strBuilder_StrBuilderWriter1);
      assertNotNull(strBuilder_StrBuilderWriter1);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.capacity();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      double double0 = 0.0;
      StrBuilder strBuilder1 = strBuilder0.append(double0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string1 = strBuilder0.getNewLineText();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = '_';
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.mark((int) char0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.close();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertTrue(boolean0);
  }
}
