/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:12:17 GMT 2014
 */

package org.apache.commons.lang3.text.translate;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Locale;
import org.apache.commons.lang3.text.translate.AggregateTranslator;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;
import org.apache.commons.lang3.text.translate.OctalUnescaper;
import org.apache.commons.lang3.text.translate.UnicodeEscaper;
import org.apache.commons.lang3.text.translate.UnicodeUnescaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;

import org.junit.runner.RunWith;

 
public class CharSequenceTranslatorEvoSuite_branch_Test   {

  //@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = new NumericEntityUnescaper.OPTION[3];
      NumericEntityUnescaper.OPTION numericEntityUnescaper_OPTION0 = NumericEntityUnescaper.OPTION.semiColonRequired;
      numericEntityUnescaper_OPTIONArray0[0] = numericEntityUnescaper_OPTION0;
      assertEquals(0, numericEntityUnescaper_OPTIONArray0[0].ordinal());
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[0].toString());
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[0].name());
      
      numericEntityUnescaper_OPTIONArray0[1] = numericEntityUnescaper_OPTIONArray0[0];
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[1].name());
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[1].toString());
      assertEquals(0, numericEntityUnescaper_OPTIONArray0[1].ordinal());
      
      numericEntityUnescaper_OPTIONArray0[2] = numericEntityUnescaper_OPTIONArray0[0];
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[2].name());
      assertEquals(0, numericEntityUnescaper_OPTIONArray0[2].ordinal());
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[2].toString());
      
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0);
      assertNotNull(numericEntityUnescaper0);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      String string1 = mockFile0.getAbsolutePath();
      assertNotNull(string1);
      assertEquals("/scratch/ac1gf/Lang/6/0/run_evosuite.pl_48890_1418317912", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = numericEntityUnescaper0.translate((CharSequence) string1);
      assertNotNull(string2);
      assertEquals("/scratch/ac1gf/Lang/6/0/run_evosuite.pl_48890_1418317912", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      assertNotNull(unicodeUnescaper0);
      
      CharSequence charSequence0 = null;
      int int0 = 2;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      unicodeUnescaper0.translate(charSequence0, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  //@Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = new NumericEntityUnescaper.OPTION[3];
      NumericEntityUnescaper.OPTION numericEntityUnescaper_OPTION0 = NumericEntityUnescaper.OPTION.semiColonRequired;
      numericEntityUnescaper_OPTIONArray0[0] = numericEntityUnescaper_OPTION0;
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[0].toString());
      assertEquals(0, numericEntityUnescaper_OPTIONArray0[0].ordinal());
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[0].name());
      
      numericEntityUnescaper_OPTIONArray0[1] = numericEntityUnescaper_OPTION0;
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[1].name());
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[1].toString());
      assertEquals(0, numericEntityUnescaper_OPTIONArray0[1].ordinal());
      
      numericEntityUnescaper_OPTIONArray0[2] = numericEntityUnescaper_OPTION0;
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[2].toString());
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[2].name());
      assertEquals(0, numericEntityUnescaper_OPTIONArray0[2].ordinal());
      
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0);
      assertNotNull(numericEntityUnescaper0);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      String string1 = mockFile0.getAbsolutePath();
      assertNotNull(string1);
      assertEquals("/scratch/ac1gf/Lang/6/0/run_evosuite.pl_48890_1418317912", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        numericEntityUnescaper0.translate((CharSequence) string1, writer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      assertNotNull(unicodeUnescaper0);
      
      CharSequence charSequence0 = null;
      String string0 = unicodeUnescaper0.translate(charSequence0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      assertNotNull(octalUnescaper0);
      
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[2];
      AggregateTranslator aggregateTranslator0 = (AggregateTranslator)octalUnescaper0.with(charSequenceTranslatorArray0);
      assertNotNull(aggregateTranslator0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = (-719);
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.outsideOf(int0, int0);
      assertNotNull(unicodeEscaper0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = locale0.getDisplayName(locale0);
      assertNotNull(string0);
      assertEquals("\u4E2D\u6587 (\u4E2D\u56FD)", string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      String string1 = unicodeEscaper0.translate((CharSequence) string0);
      assertNotNull(string1);
      assertEquals("\\u4E2D\\u6587\\u0020\\u0028\\u4E2D\\u56FD\\u0029", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
  }
}
