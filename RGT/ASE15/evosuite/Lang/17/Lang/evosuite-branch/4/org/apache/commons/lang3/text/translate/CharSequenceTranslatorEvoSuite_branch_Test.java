/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:29:01 GMT 2014
 */

package org.apache.commons.lang3.text.translate;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.File;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Locale;
import org.apache.commons.lang3.text.translate.AggregateTranslator;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.NumericEntityEscaper;
import org.apache.commons.lang3.text.translate.OctalUnescaper;
import org.apache.commons.lang3.text.translate.UnicodeEscaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;

import org.junit.runner.RunWith;

 
public class CharSequenceTranslatorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = (-1166);
      String string0 = CharSequenceTranslator.hex(int0);
      assertNotNull(string0);
      assertEquals("FFFFFB72", string0);
      
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.outsideOf(int0, int0);
      assertNotNull(unicodeEscaper0);
      
      String string1 = unicodeEscaper0.translate((CharSequence) string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("\\u0046\\u0046\\u0046\\u0046\\u0046\\u0042\\u0037\\u0032", string1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 1;
      NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.outsideOf(int0, int0);
      assertNotNull(numericEntityEscaper0);
      
      CharSequence charSequence0 = null;
      String string0 = "gfmL~0u,i)i J";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream((File) mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) mockFileOutputStream0, charsetEncoder0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(outputStreamWriter0);
      
      numericEntityEscaper0.translate(charSequence0, (Writer) outputStreamWriter0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = (-294);
      NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.outsideOf(int0, int0);
      assertNotNull(numericEntityEscaper0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = locale0.getISO3Language();
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(string0);
      assertEquals("deu", string0);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        numericEntityEscaper0.translate((CharSequence) string0, writer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = null;
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      assertNotNull(octalUnescaper0);
      
      String string1 = octalUnescaper0.translate((CharSequence) string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = (-1166);
      String string0 = CharSequenceTranslator.hex(int0);
      assertNotNull(string0);
      assertEquals("FFFFFB72", string0);
      
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.below(int0);
      assertNotNull(unicodeEscaper0);
      
      String string1 = unicodeEscaper0.translate((CharSequence) string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("FFFFFB72", string1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 4035;
      NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.outsideOf(int0, int0);
      assertNotNull(numericEntityEscaper0);
      
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[2];
      AggregateTranslator aggregateTranslator0 = (AggregateTranslator)numericEntityEscaper0.with(charSequenceTranslatorArray0);
      assertNotNull(aggregateTranslator0);
  }
}
