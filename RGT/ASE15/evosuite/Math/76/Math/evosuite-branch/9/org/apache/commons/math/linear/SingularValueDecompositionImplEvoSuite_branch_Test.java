/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:40:35 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.SingularValueDecompositionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class SingularValueDecompositionImplEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 2170;
      int int1 = 1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(int1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)array2DRowRealMatrix0.scalarAdd((double) int0);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix1);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix1, int1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(2170.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertNotNull(singularValueDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(2170.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(true, decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      double double0 = Double.NaN;
      doubleArray0[11] = double0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      int int0 = 3805;
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertNotNull(singularValueDecompositionImpl0);
      
      int int1 = singularValueDecompositionImpl0.getRank();
      assertEquals(0, int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getNorm(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 22;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(22, openMapRealMatrix0.getColumnDimension());
      assertEquals(22, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) openMapRealMatrix0, int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(22, openMapRealMatrix0.getColumnDimension());
      assertEquals(22, openMapRealMatrix0.getRowDimension());
      assertNotNull(singularValueDecompositionImpl0);
      
      // Undeclared exception!
      try {
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getCovariance((double) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 370.7200077183194;
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      double[] doubleArray2 = new double[4];
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = double0;
      doubleArray2[2] = doubleArray0[0];
      doubleArray1[2] = doubleArray2;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray1[0];
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray1[1];
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1, boolean0);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 2362;
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0, int0);
      assertEquals(1119.7404754901347, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(3, singularValueDecompositionImpl0.getRank());
      assertEquals(5.991722318325883E7, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(singularValueDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getCovariance(doubleArray2[0]);
      assertArrayEquals(new double[] {370.7200077183194, 0.0, 370.7200077183194, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1119.7404754901347, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(3, singularValueDecompositionImpl0.getRank());
      assertEquals(5.991722318325883E7, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = (-1147.2854);
      doubleArray0[1] = double0;
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray1[1];
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray1[1];
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray1[1];
      assertNotNull(doubleArray1[8]);
      
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1, boolean0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 2362;
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0, int0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(3441.8562, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertNotNull(singularValueDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getCovariance(double0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(3441.8562, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertNotNull(array2DRowRealMatrix0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getCovariance(doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, (-1147.2854), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertTrue(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(3441.8562, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertNotNull(array2DRowRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2170;
      double[][] doubleArray0 = new double[1][10];
      double[] doubleArray1 = new double[11];
      doubleArray1[1] = (double) int0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      assertArrayEquals(new double[] {0.0, 2170.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(11, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertNotNull(array2DRowRealMatrix0);
      
      array2DRowRealMatrix0.data = doubleArray0;
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(11, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertNotNull(array2DRowRealMatrix0.data);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 2170.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(11, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(2170.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertNotNull(singularValueDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertArrayEquals(new double[] {0.0, 2170.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(11, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(2170.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 370.7200077183194;
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray1[0];
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray1[0];
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray1[1];
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1, boolean0);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 2362;
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0, int0);
      assertEquals(1112.160023154958, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(singularValueDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getCovariance(double0);
      assertEquals(1112.160023154958, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(1112.160023154958, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(decompositionSolver0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = (-1147.2854);
      doubleArray0[1] = double0;
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray1[1];
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray1[1];
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray1[1];
      assertNotNull(doubleArray1[8]);
      
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1, boolean0);
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 2362;
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0, int0);
      assertEquals(3441.8562, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertNotNull(singularValueDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getS();
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(3441.8562, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getS();
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(3441.8562, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertNotNull(array2DRowRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1373.97804938751;
      doubleArray0[1] = double0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1373.97804938751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertArrayEquals(new double[] {0.0, 1373.97804938751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(1373.97804938751, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertNotNull(singularValueDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getUT();
      assertArrayEquals(new double[] {0.0, 1373.97804938751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1373.97804938751, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertNotNull(array2DRowRealMatrix0);
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertArrayEquals(new double[] {0.0, 1373.97804938751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(1373.97804938751, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertNotNull(decompositionSolver0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1373.97804938751;
      doubleArray0[1] = double0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1373.97804938751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertArrayEquals(new double[] {0.0, 1373.97804938751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1373.97804938751, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertNotNull(singularValueDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getUT();
      assertArrayEquals(new double[] {0.0, 1373.97804938751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1373.97804938751, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getU();
      assertArrayEquals(new double[] {0.0, 1373.97804938751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1373.97804938751, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(10, array2DRowRealMatrix1.getRowDimension());
      assertEquals(false, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(singularValueDecompositionImpl0);
      
      // Undeclared exception!
      try {
        double double0 = singularValueDecompositionImpl0.getConditionNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 22;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(22, openMapRealMatrix0.getColumnDimension());
      assertEquals(22, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) openMapRealMatrix0, int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(22, openMapRealMatrix0.getColumnDimension());
      assertEquals(22, openMapRealMatrix0.getRowDimension());
      assertNotNull(singularValueDecompositionImpl0);
      
      double[] doubleArray0 = singularValueDecompositionImpl0.getSingularValues();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(22, openMapRealMatrix0.getColumnDimension());
      assertEquals(22, openMapRealMatrix0.getRowDimension());
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 2362;
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0, int0);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(singularValueDecompositionImpl0);
      
      // Undeclared exception!
      try {
        double double0 = singularValueDecompositionImpl0.getNorm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }
}
