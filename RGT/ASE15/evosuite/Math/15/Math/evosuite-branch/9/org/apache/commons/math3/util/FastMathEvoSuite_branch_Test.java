/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:04:25 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.abs(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      double double0 = (-3431.288088728);
      double double1 = FastMath.atan2(double0, (double) float1);
      assertFalse(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(float0 == float1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-3.141592653589793), double2, 0.01D);
      
      double double3 = FastMath.sin(double2);
      assertFalse(float0 == float1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(float1 == float0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-1.2246467991473532E-16), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float float0 = (-2676.1255F);
      float float1 = 0.0F;
      float float2 = FastMath.copySign(float0, float1);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertEquals(2676.1255F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = (-785);
      float float0 = FastMath.copySign((float) int0, (float) int0);
      assertEquals((-785.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = 2830.8414;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.2632785817814321), double1, 0.01D);
      
      double double2 = FastMath.copySign(double1, double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-0.2632785817814321), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = 2607L;
      long long1 = FastMath.max(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(2607L, long1);
      
      double double0 = (-1029.048611498);
      double double1 = FastMath.copySign((double) long1, double0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2607.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = (-444.475422747009);
      double double2 = FastMath.sin(double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.004961954789184062, double2, 0.01D);
      
      double double3 = FastMath.copySign(double1, double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertEquals(444.475422747009, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = 0.6409968137741089;
      double double1 = FastMath.log10(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.19314412923900123), double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.hypot(double2, double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertEquals(0.19314412923900123, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.004961954789184062, double1, 0.01D);
      
      int int0 = FastMath.getExponent(double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-8), int0);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.hypot((double) int0, double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(8.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      //  // Unstable assertion: assertEquals((-127), int0);
      
      double double0 = FastMath.IEEEremainder((double) float0, (double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.hypot((double) int0, double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = (-4879.1);
      double double1 = FastMath.asinh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals((-9.185863246670745), double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.hypot(double2, double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = 8.5807488300972206E18;
      double double1 = 0.0;
      double double2 = FastMath.log(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.hypot(double0, double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = 3337.0;
      int int0 = 1736;
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.hypot(double1, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 689;
      int int1 = (-127);
      int int2 = FastMath.min(int0, int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((-127), int2);
      
      int int3 = 0;
      assertFalse(int3 == int2);
      
      int int4 = FastMath.max(int3, int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int4);
      assertFalse(int3 == int1);
      assertEquals(0, int4);
      
      int int5 = (-713);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      
      float float0 = FastMath.scalb((float) int2, int5);
      assertFalse(int2 == int5);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertTrue(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int5);
      assertFalse(int0 == int2);
      assertFalse(int1 == int4);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int5);
      assertFalse(int1 == int3);
      assertEquals(-0.0F, float0, 0.01F);
      
      double double0 = FastMath.max((double) float0, (double) int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int5);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int2 == int5);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertTrue(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int5);
      assertFalse(int0 == int2);
      assertFalse(int1 == int4);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int5);
      assertFalse(int1 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int5);
      assertFalse(int3 == int2);
      assertTrue(int3 == int4);
      assertFalse(int3 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float float0 = (-1642.09F);
      double double0 = FastMath.rint((double) float0);
      assertEquals((-1642.0), double0, 0.01D);
      
      int int0 = FastMath.getExponent((double) float0);
      assertEquals(10, int0);
      
      double double1 = FastMath.max(double0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(10.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.exp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      float float0 = (-2676.1255F);
      double double2 = FastMath.max(double1, (double) float0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.max(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = (-960);
      int int1 = (-1069);
      float float0 = FastMath.max((float) int1, (float) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-960.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.getExponent((double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1023), int1);
      
      float float0 = FastMath.max((float) int0, (float) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.004961954789184062, double1, 0.01D);
      
      int int0 = FastMath.getExponent(double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-8), int0);
      
      long long0 = 1043L;
      long long1 = FastMath.max(long0, (long) int0);
      assertTrue(long0 == long1);
      assertFalse(double0 == double1);
      assertTrue(long1 == long0);
      assertFalse(double1 == double0);
      assertEquals(1043L, long1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-785);
      int int1 = 470;
      int int2 = FastMath.max(int1, int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(470, int2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.abs(float0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      
      double double0 = FastMath.sin((double) float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(-0.0, double0, 0.01D);
      
      double double1 = FastMath.min(double0, (double) float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(-0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.floor(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      long long0 = 2607L;
      long long1 = FastMath.max(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(2607L, long1);
      
      double double2 = FastMath.min(double1, (double) long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 340;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(340, int1);
      
      long long0 = 0L;
      double double0 = FastMath.min((double) int1, (double) long0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = (-1237);
      float float0 = FastMath.abs((float) int0);
      assertEquals(1237.0F, float0, 0.01F);
      
      int int1 = 2977;
      float float1 = FastMath.min(float0, (float) int1);
      assertFalse(int0 == int1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(int1 == int0);
      assertEquals(1237.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 982;
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals(982L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 13;
      long long0 = 4503599627370496L;
      long long1 = FastMath.min(long0, (long) int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(13L, long1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 340;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(340, int1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = (-1779.5);
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1780.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = (-170.5);
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-170.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = (-4.3307634616102625E-8);
      double double1 = FastMath.rint(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      double double0 = FastMath.sin((double) int0);
      assertEquals((-0.972630067242408), double0, 0.01D);
      
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = (-3410.4205938825);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-3410.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.getExponent((double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1023), int1);
      
      double double0 = FastMath.ceil((double) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1023.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = (-1273.0);
      double double1 = FastMath.rint(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1273.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = (-3.476352191116455E277);
      long long0 = FastMath.round(double0);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.getExponent((double) int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals((-1023), int1);
      
      double double0 = FastMath.acosh((double) int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.floor(double0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.004961954789184062, double1, 0.01D);
      
      double double2 = FastMath.toDegrees(double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      int int0 = FastMath.getExponent(double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1024, int0);
      
      float float0 = FastMath.nextAfter((float) int0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1023.99994F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = 0.6409968137741089;
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.7460943665116851, double1, 0.01D);
      
      float float0 = 0.0F;
      float float1 = FastMath.nextAfter(float0, double1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.4E-45F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = 0.6409968137741089;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.19314412923900123), double1, 0.01D);
      
      float float0 = 0.0F;
      float float1 = FastMath.nextAfter(float0, double1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.4E-45F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = 1738.0112150672;
      double double1 = FastMath.tanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      int int0 = FastMath.getExponent(double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0, int0);
      
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(float1 == float0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.004961954789184062, double1, 0.01D);
      
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, double1);
      assertFalse(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertEquals(3.4028235E38F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      
      float float0 = 0.5F;
      double double2 = FastMath.asin(double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      float float1 = FastMath.nextAfter(float0, double2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = (-1848.2964283);
      double double1 = FastMath.rint(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1848.0), double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-1847.9999999999998), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.004961954789184062, double1, 0.01D);
      
      int int0 = FastMath.getExponent(double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-8), int0);
      
      double double2 = FastMath.nextAfter(double0, (double) int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(1.7976931348623155E308, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1158.0);
      double double2 = FastMath.nextAfter(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-4.9E-324), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = 4054.726081;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = 0.3850763440132141;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertEquals(0.0, double3, 0.01D);
      
      double double4 = FastMath.nextAfter(double1, double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertEquals(1.7976931348623157E308, double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = 2254.6F;
      double double0 = FastMath.nextAfter((double) float0, (double) float0);
      assertEquals(2254.60009765625, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = (-0.33333333333333287);
      double double1 = FastMath.sqrt(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.nextAfter(double0, double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = (-0.33333333333333287);
      double double1 = FastMath.sqrt(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float float0 = (-1134.0701F);
      int int0 = 184;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 1099;
      float float0 = FastMath.nextUp((float) int0);
      assertEquals(1099.0001F, float0, 0.01F);
      
      int int1 = (-163);
      float float1 = FastMath.scalb(float0, int1);
      assertFalse(int1 == int0);
      assertFalse(float1 == float0);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = (-470.0F);
      float float1 = FastMath.max(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-470.0F), float1, 0.01F);
      
      int int0 = (-150);
      float float2 = FastMath.scalb(float1, int0);
      assertTrue(float1 == float0);
      assertFalse(float1 == float2);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertEquals((-3.3E-43F), float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = (-627.0F);
      float float1 = FastMath.min(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals((-627.0F), float1, 0.01F);
      
      int int0 = (-156);
      float float2 = FastMath.scalb(float1, int0);
      assertFalse(float0 == float2);
      assertTrue(float0 == float1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertTrue(float1 == float0);
      assertFalse(float1 == float2);
      assertEquals((-7.0E-45F), float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.scalb((float) int0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-7.464389E-37F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float float0 = (-1642.09F);
      int int0 = (-243);
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float float0 = (-1098.1887F);
      int int0 = 1223;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = (-3410.4205938825);
      int int0 = 0;
      double double1 = FastMath.scalb(double0, int0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-3410.4205938825), double1, 0.01D);
      
      int int1 = FastMath.getExponent(double1);
      assertTrue(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(double1 == double0);
      assertEquals(11, int1);
      
      int int2 = 130;
      assertFalse(int2 == int1);
      
      float float0 = FastMath.scalb((float) int1, int2);
      assertTrue(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(double1 == double0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = 0L;
      int int0 = (-367);
      float float0 = FastMath.scalb((float) long0, int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      int int0 = (-2526);
      float float1 = FastMath.scalb(float0, int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 3268;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 1247;
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = (-3410.4205938825);
      int int0 = 0;
      int int1 = FastMath.getExponent(double0);
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      float float0 = FastMath.scalb((float) int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(11.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = 2607L;
      int int0 = (-367);
      float float0 = FastMath.scalb((float) long0, int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = 9.686179886293545E-10;
      int int0 = 1034;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1034, int1);
      
      double double1 = FastMath.scalb(double0, int1);
      assertFalse(double1 == double0);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertTrue(int1 == int0);
      assertEquals(1.7830685782662507E302, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = 97.40634;
      double double1 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertFalse(double0 == double1);
      assertEquals(6, int0);
      
      int int1 = 1117;
      assertFalse(int1 == int0);
      
      double double2 = FastMath.nextAfter(double1, (double) int0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(int0 == int1);
      assertEquals(4.9E-324, double2, 0.01D);
      
      double double3 = FastMath.scalb(double2, int1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(8.796093022208E12, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = (-649.2925730519129);
      int int0 = (-1898);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = (-2594.3);
      int int0 = (-1069);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-4.10163E-319), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = (-960);
      int int1 = (-1069);
      double double0 = FastMath.scalb((double) int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1.51777E-319), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = 2607L;
      long long1 = 0L;
      int int0 = FastMath.getExponent((double) long1);
      assertFalse(long1 == long0);
      assertEquals((-1023), int0);
      
      double double0 = FastMath.scalb((double) long0, int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(2.900383774564137E-305, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 340;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(340, int1);
      
      int int2 = (-1685);
      assertFalse(int2 == int1);
      
      double double0 = FastMath.scalb((double) int1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-1237);
      int int1 = 2977;
      double double0 = FastMath.scalb((double) int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = 2254.6F;
      int int0 = FastMath.round(float0);
      assertEquals(2255, int0);
      
      double double0 = FastMath.scalb((double) int0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float float0 = 2358.62F;
      float float1 = FastMath.signum(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1.0F, float1, 0.01F);
      
      int int0 = (-2714);
      double double0 = FastMath.scalb((double) float1, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = (-1559.58106);
      double double1 = FastMath.IEEEremainder(double0, double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.hypot(double1, double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.abs(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      int int0 = 1862;
      double double0 = FastMath.scalb((double) float1, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = (-1435.3361955504256);
      double double1 = FastMath.log1p(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      int int0 = (-1237);
      double double2 = FastMath.scalb(double1, int0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.getExponent((double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1023), int1);
      
      int int2 = 1247;
      assertFalse(int2 == int1);
      
      double double0 = FastMath.scalb((double) int1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.abs(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      double double0 = FastMath.ulp((double) float1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.abs(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = (-731L);
      long long1 = FastMath.max(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-731L), long1);
      
      long long2 = FastMath.abs(long1);
      assertFalse(long1 == long2);
      assertTrue(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(731L, long2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 982;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(982, int1);
      
      long long0 = FastMath.abs((long) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(982L, long0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = (-134);
      int int1 = FastMath.abs(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(134, int1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toRadians(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.toDegrees(double1);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = 1757.0;
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.toDegrees(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.toRadians(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.7031839360032603E-108, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.floor(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = (-6.679737442193143E-9);
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.570796333474634, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float float0 = 1284.02F;
      int int0 = FastMath.getExponent(float0);
      assertEquals(10, int0);
      
      double double0 = 0.0;
      double double1 = FastMath.nextAfter(double0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float float0 = (-2676.1255F);
      double double0 = FastMath.tan((double) float0);
      assertEquals(0.5612673305404826, double0, 0.01D);
      
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.9748800521906561, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.acos((double) float0);
      assertEquals(3.141592653589793, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float float0 = (-134.688F);
      double double0 = FastMath.acos((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 982;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(982, int1);
      
      double double0 = FastMath.acos((double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.asin(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-1);
      double double0 = FastMath.asin((double) int0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.signum(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = FastMath.asin((double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = 0.16666666666666666;
      double double1 = FastMath.min(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.16666666666666666, double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.16744807921968932, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = 7.529170882336924E-162;
      double double1 = 2.787906051540986E261;
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = 0.6409968137741089;
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      
      double double2 = 0.0;
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double1, double2);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = 0.6409968137741089;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.19314412923900123), double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double1, double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertEquals((-1.5707963267948966), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float float0 = 631.0F;
      float float1 = (-2345.9238F);
      float float2 = FastMath.copySign(float0, float1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertEquals((-631.0F), float2, 0.01F);
      
      float float3 = Float.NEGATIVE_INFINITY;
      assertFalse(float3 == float2);
      
      double double0 = FastMath.atan2((double) float2, (double) float3);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float2 == float3);
      assertFalse(float1 == float2);
      assertFalse(float1 == float3);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float3);
      assertFalse(float0 == float2);
      assertFalse(float3 == float0);
      assertFalse(float3 == float1);
      assertFalse(float3 == float2);
      assertEquals((-3.141592653589793), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float float0 = 631.0F;
      float float1 = FastMath.copySign(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(631.0F, float1, 0.01F);
      
      float float2 = Float.NEGATIVE_INFINITY;
      assertFalse(float2 == float1);
      
      double double0 = FastMath.atan2((double) float1, (double) float2);
      assertFalse(float0 == float2);
      assertTrue(float0 == float1);
      assertFalse(float1 == float2);
      assertTrue(float1 == float0);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertEquals(3.141592653589793, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = (-824.0);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = 1355.6186668264083;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = (-3431.288088728);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-2.356194490192345), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = 355.117;
      double double1 = FastMath.toRadians(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(6.197960879804704, double1, 0.01D);
      
      double double2 = (-3431.288088728);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.sinh(double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.atan2(double3, double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertEquals((-1.5707963267948966), double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.abs(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      double double0 = FastMath.sinh((double) float0);
      assertFalse(float0 == float1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2(double0, (double) float1);
      assertFalse(double0 == double1);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertEquals((-0.7853981633974483), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = 1037.3555113822474;
      float float0 = 1692.642F;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, (double) float0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float float0 = 1819.5306F;
      double double0 = 0.0;
      float float1 = (-5377.6094F);
      float float2 = FastMath.min(float0, float1);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertEquals((-5377.6094F), float2, 0.01F);
      
      double double1 = FastMath.rint(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, (double) float2);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.min(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
      
      double double0 = 1566.7375;
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2((double) float1, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.atan2((double) float0, (double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 3268;
      float float0 = FastMath.nextAfter((float) int0, (double) int0);
      assertEquals(3268.0F, float0, 0.01F);
      
      int int1 = FastMath.getExponent(float0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      double double0 = FastMath.sin((double) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-0.9999902065507035), double0, 0.01D);
      
      double double1 = FastMath.atan2((double) float0, double0);
      assertFalse(double1 == double0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertEquals(1.5711023213405944, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = (-1559.58106);
      double double1 = FastMath.ulp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2.2737367544323206E-13, double1, 0.01D);
      
      int int0 = 340;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(340, int1);
      
      double double2 = FastMath.atan2(double1, (double) int1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(int1 == int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(int0 == int1);
      assertEquals(6.687461042448002E-16, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = (-1);
      double double0 = FastMath.log10((double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.atan2(double0, (double) int0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = 0L;
      float float0 = FastMath.signum((float) long0);
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = FastMath.getExponent((double) float0);
      assertEquals((-1023), int0);
      
      double double0 = FastMath.ulp((double) long0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = FastMath.atan2(double0, (double) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(3.141592653589793, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.atan((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.tan((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.floor(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = (-1599.5640582990054);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.880728760161884), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = 0.4794255495071411;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-2), int0);
      
      double double1 = FastMath.cos((double) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.4161468365471424), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = (-840.287493229145);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.sin((double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = (-6.971366338144781E56);
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4.685543304373521, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = 4503599627370480L;
      double double0 = FastMath.sin((double) long0);
      assertEquals((-0.9769895864997806), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = (-3.784600043780169E13);
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.9188032418500327), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = 2.819190456167585E218;
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.6465548791554334, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = 7.690475570840264E294;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.33361041733867813, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = (-1.8908603201210102E262);
      double double1 = FastMath.abs(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.8908603201210102E262, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.9999481705883706, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = 8.5807488300972206E18;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.9757877072690858, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.004962015874444895), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = 0.4794255495071411;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.46126956470692204, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = 1757.0;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(8.164510349730522, double1, 0.01D);
      
      int int0 = (-1204);
      double double2 = FastMath.pow(double1, int0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = 1738.0112150672;
      double double1 = FastMath.tanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      int int0 = 0;
      double double2 = FastMath.pow(double1, int0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = (-3410.4205938825);
      int int0 = 0;
      double double1 = FastMath.scalb(double0, int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-3410.4205938825), double1, 0.01D);
      
      int int1 = FastMath.getExponent(double1);
      assertTrue(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(double0 == double1);
      assertEquals(11, int1);
      
      double double2 = FastMath.pow(double0, int1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-7.259176626477146E38), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = (-1239L);
      double double0 = FastMath.pow((double) long0, (double) long0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = (-1435.3361955504256);
      double double1 = FastMath.ulp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.2737367544323206E-13, double1, 0.01D);
      
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = (-1);
      double double0 = FastMath.log10((double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.pow((double) int0, double0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = 2.3639917373657227;
      double double1 = 0.0;
      double double2 = FastMath.log10(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.pow(double0, double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double3);
      assertTrue(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = 0L;
      long long1 = 4503599627370496L;
      long long2 = FastMath.max(long0, long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertEquals(4503599627370496L, long2);
      
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.pow((double) float0, (double) long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = 0L;
      long long1 = 4503599627370485L;
      long long2 = FastMath.max(long0, long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(4503599627370485L, long2);
      
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.pow((double) float0, (double) long2);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = (-966.0085923297614);
      double double1 = FastMath.max(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-966.0085923297614), double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = (-966.0085923297614);
      double double1 = FastMath.max(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-966.0085923297614), double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      int int0 = (-1557);
      float float0 = FastMath.ulp((float) int0);
      assertEquals(1.2207031E-4F, float0, 0.01F);
      
      double double3 = FastMath.pow(double2, (double) float0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float float0 = (-777.4641F);
      double double0 = FastMath.toDegrees((double) float0);
      assertEquals((-44545.412301990735), double0, 0.01D);
      
      double double1 = 1600.65076032;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.exp(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.pow(double0, double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float float0 = 1819.5306F;
      double double0 = FastMath.exp((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = (-2365.448749053496);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float float0 = 1819.5306F;
      double double0 = FastMath.exp((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, (double) float0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float float0 = -0.0F;
      long long0 = 415L;
      double double0 = FastMath.pow((double) float0, (double) long0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.nextUp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-0.99999994F), float1, 0.01F);
      
      int int0 = (-3059);
      double double0 = FastMath.scalb((double) float1, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(-0.0, double0, 0.01D);
      
      double double1 = FastMath.cbrt((double) float0);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(float1 == float0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(float0 == float1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float float0 = -0.0F;
      long long0 = 396L;
      double double0 = FastMath.pow((double) float0, (double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.nextUp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-0.99999994F), float1, 0.01F);
      
      int int0 = (-3059);
      double double0 = FastMath.scalb((double) float1, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(-0.0, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, (double) float1);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(float0 == float1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.floor(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = 9.737596728980696E-10;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertTrue(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double3);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double3);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.rint(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long long0 = 0L;
      float float0 = FastMath.signum((float) long0);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = FastMath.log1p((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float float0 = 1740.9773F;
      double double0 = FastMath.cosh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.log1p(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = (-1);
      double double0 = FastMath.log1p((double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = 3409.617;
      double double1 = FastMath.signum(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.log10(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = 0.058823529411764705;
      double double1 = FastMath.log1p(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.05715841383994861, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.acosh(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = 4054.726081;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log10(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = (-1);
      double double0 = FastMath.atanh((double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = (-8.491135959370133E-8);
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-8.491135598873194E-8), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = 2952.7;
      double double1 = FastMath.nextUp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2952.7000000000003, double1, 0.01D);
      
      double double2 = FastMath.expm1(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long long0 = (-731L);
      double double0 = FastMath.expm1((double) long0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = 0.9985313415527344;
      double double1 = 0.0;
      double double2 = FastMath.nextUp(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(4.9E-324, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertEquals(1.5E-323, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = (-1158.0);
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = (-1396.3954);
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = FastMath.getExponent(double1);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1023), int0);
      
      float float0 = FastMath.signum((float) int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.signum(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-1.0), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = 0.021256837993860245;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.02126004051863131, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double double0 = 0.087;
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.08722050326312049, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = 0.10643415153026581;
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.10683880901024288, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long long0 = 0L;
      float float0 = FastMath.signum((float) long0);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = FastMath.atanh((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double double0 = 1.0921536132159379E198;
      double double1 = 2661.86547;
      double double2 = FastMath.log(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.017295575573077666, double2, 0.01D);
      
      double double3 = FastMath.asinh(double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.017294713398222097, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double double0 = 0.058823529411764705;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.058789658521402235, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double double0 = 0.16666666666666666;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.16590455026930118, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double double0 = (-964.9371456111);
      double double1 = FastMath.ulp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.1368683772161603E-13, double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(1.1368683772161603E-13, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double double0 = 2.063924789428711;
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(3.874934689053198, double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.9991387733980804, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double double0 = (-5.207000323380292E-8);
      double double1 = FastMath.tanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-5.207000323380287E-8), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double double0 = 9.737596728980696E-10;
      double double1 = FastMath.sinh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(9.737596728980696E-10, double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(9.737596728980696E-10, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.floor(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double double0 = (-1599.5640582990054);
      double double1 = FastMath.sinh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.tanh(double2);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertEquals(1.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double double0 = (-1599.5640582990054);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-1.0), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double double0 = (-0.0013888888689039883);
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.0013888897619662546), double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-0.0013888902084977753), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      float float0 = (-627.0F);
      double double0 = FastMath.sinh((double) float0);
      assertEquals((-1.0037144064323216E272), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.floor(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      float float0 = 524.5508F;
      float float1 = FastMath.min(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(524.5508F, float1, 0.01F);
      
      double double0 = FastMath.sinh((double) float1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(3.22462917710019E227, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = FastMath.round(float0);
      assertEquals((-1), int0);
      
      double double0 = FastMath.cosh((double) int0);
      assertEquals(1.5430806348152437, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      float float0 = (-21.86045F);
      double double0 = FastMath.cosh((double) float0);
      assertEquals(1.5589893006928477E9, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      float float0 = 631.0F;
      double double0 = FastMath.cosh((double) float0);
      assertEquals(5.4800949752820215E273, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double double0 = (-1599.5640582990054);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-1.7976931348623157E308), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double double0 = (-3410.4205938825);
      int int0 = 0;
      double double1 = FastMath.scalb(double0, int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-3410.4205938825), double1, 0.01D);
      
      double double2 = FastMath.atan(double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals((-1.570503107837348), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
  }
}
