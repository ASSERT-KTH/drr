/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:22:42 GMT 2014
 */

package org.apache.commons.math.estimation;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.EstimationException;
import org.apache.commons.math.estimation.EstimationProblem;
import org.apache.commons.math.estimation.GaussNewtonEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class AbstractEstimatorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations());
      assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations());
      assertNotNull(levenbergMarquardtEstimator0);
      
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      assertNotNull(simpleEstimationProblem0);
      
      int int0 = levenbergMarquardtEstimator0.getCostEvaluations();
      assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations());
      assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations());
      assertEquals(0, int0);
      
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(int0, int0, int0);
      assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations());
      assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations());
      assertEquals(0, gaussNewtonEstimator0.getJacobianEvaluations());
      assertEquals(0, gaussNewtonEstimator0.getCostEvaluations());
      assertNotNull(gaussNewtonEstimator0);
      
      try {
        double[] doubleArray0 = gaussNewtonEstimator0.guessParametersErrors((EstimationProblem) simpleEstimationProblem0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no degrees of freedom (0 measurements, 0 parameters)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations());
      assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations());
      assertNotNull(levenbergMarquardtEstimator0);
      
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      assertNotNull(simpleEstimationProblem0);
      
      String string0 = "ywX.";
      double double0 = 493.0;
      boolean boolean0 = false;
      EstimatedParameter estimatedParameter0 = new EstimatedParameter(string0, double0, boolean0);
      assertEquals(false, estimatedParameter0.isBound());
      assertEquals("ywX.", estimatedParameter0.getName());
      assertEquals(493.0, estimatedParameter0.getEstimate(), 0.01D);
      assertNotNull(estimatedParameter0);
      
      simpleEstimationProblem0.addParameter(estimatedParameter0);
      assertEquals(false, estimatedParameter0.isBound());
      assertEquals("ywX.", estimatedParameter0.getName());
      assertEquals(493.0, estimatedParameter0.getEstimate(), 0.01D);
      
      levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
      assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations());
      assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations());
      
      try {
        double[][] doubleArray0 = levenbergMarquardtEstimator0.getCovariances((EstimationProblem) simpleEstimationProblem0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unable to compute covariances: singular problem
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations());
      assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations());
      assertNotNull(levenbergMarquardtEstimator0);
      
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      assertNotNull(simpleEstimationProblem0);
      
      double double0 = levenbergMarquardtEstimator0.getChiSquare((EstimationProblem) simpleEstimationProblem0);
      assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations());
      assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations());
      assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations());
      assertNotNull(levenbergMarquardtEstimator0);
      
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      assertNotNull(simpleEstimationProblem0);
      
      double double0 = levenbergMarquardtEstimator0.getRMS((EstimationProblem) simpleEstimationProblem0);
      assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations());
      assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = 585;
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(int0, int0, int0);
      assertEquals(0, gaussNewtonEstimator0.getJacobianEvaluations());
      assertEquals(0, gaussNewtonEstimator0.getCostEvaluations());
      assertNotNull(gaussNewtonEstimator0);
      
      gaussNewtonEstimator0.rows = int0;
      assertEquals(0, gaussNewtonEstimator0.getJacobianEvaluations());
      assertEquals(0, gaussNewtonEstimator0.getCostEvaluations());
      
      // Undeclared exception!
      try {
        gaussNewtonEstimator0.updateResidualsAndCost();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = (-393);
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(int0, int0, int0);
      assertEquals(0, gaussNewtonEstimator0.getJacobianEvaluations());
      assertEquals(0, gaussNewtonEstimator0.getCostEvaluations());
      assertNotNull(gaussNewtonEstimator0);
      
      try {
        gaussNewtonEstimator0.updateResidualsAndCost();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of evaluations exceeded (-393)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations());
      assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations());
      assertNotNull(levenbergMarquardtEstimator0);
      
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      assertNotNull(simpleEstimationProblem0);
      
      levenbergMarquardtEstimator0.estimate((EstimationProblem) simpleEstimationProblem0);
      assertEquals(1, levenbergMarquardtEstimator0.getCostEvaluations());
      assertEquals(1, levenbergMarquardtEstimator0.getJacobianEvaluations());
      
      int int0 = 2;
      levenbergMarquardtEstimator0.rows = int0;
      assertEquals(1, levenbergMarquardtEstimator0.getCostEvaluations());
      assertEquals(1, levenbergMarquardtEstimator0.getJacobianEvaluations());
      
      // Undeclared exception!
      try {
        double[][] doubleArray0 = levenbergMarquardtEstimator0.getCovariances((EstimationProblem) simpleEstimationProblem0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations());
      assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations());
      assertNotNull(levenbergMarquardtEstimator0);
      
      int int0 = levenbergMarquardtEstimator0.getJacobianEvaluations();
      assertEquals(0, levenbergMarquardtEstimator0.getJacobianEvaluations());
      assertEquals(0, levenbergMarquardtEstimator0.getCostEvaluations());
      assertEquals(0, int0);
  }
}
