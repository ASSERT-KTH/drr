/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:23:07 GMT 2014
 */

package org.apache.commons.math3.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
import org.apache.commons.math3.linear.OpenMapRealMatrix;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.RectangularCholeskyDecomposition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class RectangularCholeskyDecompositionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 446.32736726;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {446.32736726, 446.32736726, 446.32736726, 446.32736726, 446.32736726, 446.32736726}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {446.32736726, 446.32736726, 446.32736726, 446.32736726, 446.32736726, 446.32736726}, doubleArray0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector1.outerProduct((RealVector) openMapRealVector0);
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(6, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(6, openMapRealMatrix0.getColumnDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {446.32736726, 446.32736726, 446.32736726, 446.32736726, 446.32736726, 446.32736726}, doubleArray0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealMatrix0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      double double1 = 0.0;
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
      try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) openMapRealMatrix0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -\u221E is smaller than, or equal to, the minimum (0): not positive definite matrix: value -\u221E at index 2
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 90;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertEquals(90, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(90, blockRealMatrix0.getColumnDimension());
      assertEquals(false, blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
      try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) blockRealMatrix0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (90): not positive definite matrix: value 0 at index 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      double double0 = (-1.0);
      Double double1 = new Double(double0);
      assertEquals((-1.0), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      double double2 = 1635.5;
      Double double3 = new Double(double2);
      assertEquals(1635.5, (double)double3, 0.01D);
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double2 == double0);
      assertNotSame(double3, double1);
      
      doubleArray0[3] = double3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double2);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertFalse(double2 == double0);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertFalse(double2 == double0);
      assertNotNull(openMapRealMatrix0);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) openMapRealMatrix0, (double) double3);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, rectangularCholeskyDecomposition0.getRank());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double2 == double0);
      assertNotNull(rectangularCholeskyDecomposition0);
      assertNotSame(double3, double1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      double double0 = (-1.0);
      Double double1 = new Double(double0);
      assertEquals((-1.0), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      double double2 = 1635.5;
      Double double3 = new Double(double2);
      assertEquals(1635.5, (double)double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      assertTrue(double3.equals((Object)double2));
      assertNotSame(double3, double1);
      
      doubleArray0[3] = double3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double2);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertFalse(double2 == double0);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertFalse(double2 == double0);
      assertNotNull(openMapRealMatrix0);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) openMapRealMatrix0, (double) double1);
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(4, rectangularCholeskyDecomposition0.getRank());
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double1.equals((Object)double2));
      assertTrue(double1.equals((Object)double0));
      assertFalse(double1.equals((Object)double3));
      assertNotNull(rectangularCholeskyDecomposition0);
      assertNotSame(double1, double3);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = 90;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertEquals(90, blockRealMatrix0.getRowDimension());
      assertEquals(90, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(false, blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      
      double double0 = (-500.9667202077468);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) blockRealMatrix0, double0);
      assertEquals(90, rectangularCholeskyDecomposition0.getRank());
      assertEquals(90, blockRealMatrix0.getRowDimension());
      assertEquals(90, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(false, blockRealMatrix0.isTransposable());
      assertNotNull(rectangularCholeskyDecomposition0);
      
      BlockRealMatrix blockRealMatrix1 = (BlockRealMatrix)rectangularCholeskyDecomposition0.getRootMatrix();
      assertEquals(false, blockRealMatrix1.isTransposable());
      assertEquals(90, blockRealMatrix1.getRowDimension());
      assertEquals(true, blockRealMatrix1.isSquare());
      assertEquals(Double.NaN, blockRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(90, blockRealMatrix1.getColumnDimension());
      assertEquals(90, rectangularCholeskyDecomposition0.getRank());
      assertEquals(90, blockRealMatrix0.getRowDimension());
      assertEquals(90, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(false, blockRealMatrix0.isTransposable());
      assertFalse(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix0.equals((Object)blockRealMatrix1));
      assertNotNull(blockRealMatrix1);
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertNotSame(blockRealMatrix0, blockRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      double double0 = (-1.0);
      Double double1 = new Double(double0);
      assertEquals((-1.0), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[0]);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertNotNull(openMapRealMatrix0);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) openMapRealMatrix0, (double) doubleArray0[0]);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, rectangularCholeskyDecomposition0.getRank());
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertNotNull(rectangularCholeskyDecomposition0);
      
      int int0 = rectangularCholeskyDecomposition0.getRank();
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, rectangularCholeskyDecomposition0.getRank());
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(4, int0);
  }
}
