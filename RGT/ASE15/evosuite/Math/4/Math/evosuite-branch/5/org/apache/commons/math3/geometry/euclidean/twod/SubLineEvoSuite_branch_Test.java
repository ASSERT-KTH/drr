/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:42:12 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class SubLineEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertNotNull(subLine0);
      
      double double0 = 99.4546973725989;
      Line line0 = new Line(vector2D0, double0);
      assertEquals(5.206917764905114, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertNotNull(line0);
      
      Line line1 = line0.getReverse();
      assertNotSame(line1, line0);
      assertNotSame(line0, line1);
      assertEquals(-0.0, line1.getOriginOffset(), 0.01D);
      assertEquals(2.065325111315321, line1.getAngle(), 0.01D);
      assertEquals(5.206917764905114, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertNotNull(line1);
      assertFalse(line1.equals((Object)line0));
      assertFalse(line0.equals((Object)line1));
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line1);
      assertNotSame(line1, line0);
      assertNotSame(line0, line1);
      assertEquals(-0.0, line1.getOriginOffset(), 0.01D);
      assertEquals(2.065325111315321, line1.getAngle(), 0.01D);
      assertEquals(5.206917764905114, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertNotNull(segment0);
      assertFalse(line1.equals((Object)line0));
      assertFalse(line0.equals((Object)line1));
      
      Line line2 = segment0.getLine();
      assertSame(line2, line1);
      assertNotSame(line2, line0);
      assertSame(line1, line2);
      assertNotSame(line1, line0);
      assertNotSame(line0, line1);
      assertNotSame(line0, line2);
      assertEquals(-0.0, line2.getOriginOffset(), 0.01D);
      assertEquals(2.065325111315321, line2.getAngle(), 0.01D);
      assertEquals(-0.0, line1.getOriginOffset(), 0.01D);
      assertEquals(2.065325111315321, line1.getAngle(), 0.01D);
      assertEquals(5.206917764905114, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertNotNull(line2);
      assertFalse(line2.equals((Object)line0));
      assertFalse(line1.equals((Object)line0));
      assertFalse(line0.equals((Object)line1));
      assertFalse(line0.equals((Object)line2));
      
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split((Hyperplane<Euclidean2D>) line2);
      assertSame(line2, line1);
      assertNotSame(line2, line0);
      assertSame(line1, line2);
      assertNotSame(line1, line0);
      assertNotSame(line0, line1);
      assertNotSame(line0, line2);
      assertEquals(-0.0, line2.getOriginOffset(), 0.01D);
      assertEquals(2.065325111315321, line2.getAngle(), 0.01D);
      assertEquals(-0.0, line1.getOriginOffset(), 0.01D);
      assertEquals(2.065325111315321, line1.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(5.206917764905114, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
      assertFalse(line2.equals((Object)line0));
      assertFalse(line1.equals((Object)line0));
      assertFalse(line0.equals((Object)line1));
      assertFalse(line0.equals((Object)line2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertNotNull(subLine0);
      
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split((Hyperplane<Euclidean2D>) line0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertNotNull(vector2D0);
      
      double double0 = 0.0;
      Line line0 = new Line(vector2D0, double0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertNotNull(subLine0);
      
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split((Hyperplane<Euclidean2D>) line0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertNotNull(subLine0);
      
      double double0 = 0.0;
      Line line0 = new Line(vector2D0, double0);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertNotNull(line0);
      
      Side side0 = subLine0.side((Hyperplane<Euclidean2D>) line0);
      assertEquals(Side.HYPER, side0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(3, side0.ordinal());
      assertEquals("HYPER", side0.toString());
      assertEquals("HYPER", side0.name());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 0.0;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = polygonsSet0.getBoundarySize();
      assertEquals(4.0, double2, 0.01D);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertNotNull(vector2D0);
      
      double double0 = 0.0;
      Line line0 = new Line(vector2D0, double0);
      //  // Unstable assertion: assertEquals(0.0, line0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      //  // Unstable assertion: assertEquals(0.0, line0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      //  // Unstable assertion: assertEquals(0.0, line0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, subLine0.isEmpty());
      //  // Unstable assertion: assertNotNull(subLine0);
      
      Side side0 = subLine0.side((Hyperplane<Euclidean2D>) line0);
      //  // Unstable assertion: assertEquals(Side.PLUS, side0);
      //  // Unstable assertion: assertEquals(0.0, line0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, subLine0.isEmpty());
      //  // Unstable assertion: assertEquals("PLUS", side0.name());
      //  // Unstable assertion: assertEquals(0, side0.ordinal());
      //  // Unstable assertion: assertEquals("PLUS", side0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(subLine0);
      
      boolean boolean0 = false;
      Vector2D vector2D1 = subLine0.intersection(subLine0, boolean0);
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(vector2D1, vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01D);
      assertEquals(true, vector2D1.isNaN());
      assertEquals(false, vector2D1.isInfinite());
      assertEquals(Double.NaN, vector2D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getNormSq(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(vector2D1);
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(vector2D1.equals((Object)vector2D0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertNotNull(subLine0);
      
      SubLine subLine1 = line0.wholeHyperplane();
      assertNotSame(subLine1, subLine0);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertNotNull(subLine1);
      assertFalse(subLine1.equals((Object)subLine0));
      
      boolean boolean0 = false;
      Vector2D vector2D1 = subLine1.intersection(subLine0, boolean0);
      assertNotSame(subLine1, subLine0);
      assertNotSame(subLine0, subLine1);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertNull(vector2D1);
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(subLine0.equals((Object)subLine1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertNotNull(subLine0);
      
      SubLine subLine1 = new SubLine(vector2D0, vector2D0);
      assertNotSame(subLine1, subLine0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertNotNull(subLine1);
      assertFalse(subLine1.equals((Object)subLine0));
      
      boolean boolean0 = true;
      Vector2D vector2D1 = subLine0.intersection(subLine1, boolean0);
      assertNotSame(subLine0, subLine1);
      assertNotSame(subLine1, subLine0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertNull(vector2D1);
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(subLine1.equals((Object)subLine0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(subLine0);
      
      boolean boolean0 = true;
      Vector2D vector2D1 = subLine0.intersection(subLine0, boolean0);
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(vector2D0, vector2D1);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01D);
      assertEquals(true, vector2D1.isNaN());
      assertEquals(Double.NaN, vector2D1.getNormSq(), 0.01D);
      assertEquals(false, vector2D1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(vector2D1);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(vector2D0.equals((Object)vector2D1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertNotNull(vector2D0);
      
      double double0 = 0.0;
      Line line0 = new Line(vector2D0, double0);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertNotNull(subLine0);
      
      Vector2D vector2D1 = Vector2D.NEGATIVE_INFINITY;
      assertNotSame(vector2D1, vector2D0);
      assertEquals(true, vector2D1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm1(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm(), 0.01D);
      assertNotNull(vector2D1);
      assertFalse(vector2D1.equals((Object)vector2D0));
      
      boolean boolean0 = vector2D1.isNaN();
      assertNotSame(vector2D1, vector2D0);
      assertFalse(boolean0);
      assertEquals(true, vector2D1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm1(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm(), 0.01D);
      assertFalse(vector2D1.equals((Object)vector2D0));
      
      SubLine subLine1 = new SubLine(vector2D1, vector2D1);
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(subLine1, subLine0);
      assertEquals(true, vector2D1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm1(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertNotNull(subLine1);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(subLine1.equals((Object)subLine0));
      
      Vector2D vector2D2 = subLine1.intersection(subLine0, boolean0);
      assertNotSame(subLine0, subLine1);
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(subLine1, subLine0);
      assertNotSame(vector2D0, vector2D1);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(true, vector2D1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm1(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertNull(vector2D2);
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(vector2D0.equals((Object)vector2D1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertNotNull(vector2D0);
      
      double double0 = (-1875.73796287);
      Line line0 = new Line(vector2D0, double0);
      assertEquals(2.9344439766962296, line0.getAngle(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      assertEquals(2.9344439766962296, line0.getAngle(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertNotNull(segment0);
      
      boolean boolean0 = line0.isParallelTo(line0);
      assertTrue(boolean0);
      assertEquals(2.9344439766962296, line0.getAngle(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      
      SubLine subLine0 = new SubLine(segment0);
      assertEquals(2.9344439766962296, line0.getAngle(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, line0.getOriginOffset(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertNotNull(subLine0);
      
      Vector2D vector2D1 = subLine0.intersection(subLine0, boolean0);
      assertEquals(2.9344439766962296, line0.getAngle(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, line0.getOriginOffset(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertNotNull(vector2D0);
      
      double double0 = 0.0;
      Line line0 = new Line(vector2D0, double0);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(subLine0);
      
      boolean boolean0 = vector2D0.isNaN();
      assertTrue(boolean0);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      
      SubLine subLine1 = new SubLine(vector2D0, vector2D0);
      assertNotSame(subLine1, subLine0);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, subLine1.isEmpty());
      assertNotNull(subLine1);
      assertFalse(subLine1.equals((Object)subLine0));
      
      Vector2D vector2D1 = subLine1.intersection(subLine0, boolean0);
      assertNotSame(subLine1, subLine0);
      assertNotSame(subLine0, subLine1);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, subLine1.isEmpty());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNull(vector2D1);
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(subLine0.equals((Object)subLine1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertNotNull(vector2D0);
      
      double double0 = 0.0;
      Line line0 = new Line(vector2D0, double0);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertNotNull(subLine0);
      
      List<Segment> list0 = subLine0.getSegments();
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }
}
