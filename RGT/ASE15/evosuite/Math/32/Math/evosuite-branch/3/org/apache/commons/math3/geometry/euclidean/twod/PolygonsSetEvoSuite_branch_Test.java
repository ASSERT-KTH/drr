/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:00:40 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.exception.MathInternalError;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class PolygonsSetEvoSuite_branch_Test   {

  //@Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = (-2336.1667984602987);
      double double1 = 3.4028234663852886E38;
      double double2 = 393.97702605931875;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      double double3 = polygonsSet0.getSize();
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double0, double0, double0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      // Undeclared exception!
      try {
        polygonsSet0.computeGeometricalProperties();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 3.4028234663852886E38;
      double double1 = 0.0;
      double double2 = (-3.3561181E-7);
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double1, double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(vector2DArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = (-2261.83632851);
      double double1 = 0.0;
      double double2 = (-3.306704499596062);
      PolygonsSet polygonsSet0 = new PolygonsSet(double1, double0, double2, double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      double double3 = polygonsSet0.getSize();
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(5108424.352602763, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 3.4028234663852886E38;
      double double1 = (-4408.2111959665);
      double double2 = 823.84695269;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double2, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(true, vector0.isNaN());
      assertEquals(Double.NaN, vector0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector0.getNorm(), 0.01D);
      assertEquals(false, vector0.isInfinite());
      assertEquals(Double.NaN, vector0.getNormSq(), 0.01D);
      assertNotNull(vector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = 9.755392680573412E-9;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      // Undeclared exception!
      try {
        polygonsSet0.computeGeometricalProperties();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 2.0E-8;
      double double1 = 0.0;
      double double2 = 0.00970024545271;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double2, double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(0.004850142726306987, vector0.getNorm1(), 0.01D);
      assertEquals(0.004850132726306986, vector0.getNormInf(), 0.01D);
      assertEquals(0.004850132726317295, vector0.getNorm(), 0.01D);
      assertEquals(false, vector0.isInfinite());
      assertEquals(false, vector0.isNaN());
      assertEquals(2.3523787462894037E-5, vector0.getNormSq(), 0.01D);
      assertNotNull(vector0);
      
      polygonsSet0.computeGeometricalProperties();
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(false, polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(false, vector0.isInfinite());
      assertEquals(Double.NaN, vector0.getNormInf(), 0.01D);
      assertEquals(true, vector0.isNaN());
      assertEquals(Double.NaN, vector0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector0.getNorm(), 0.01D);
      assertNotNull(vector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>((Object) boolean0);
      assertNotNull(bSPTree0);
      
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree0);
      assertEquals(true, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      polygonsSet0.computeGeometricalProperties();
      assertEquals(true, polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<SubLine> linkedList0 = new LinkedList<SubLine>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(subLine0);
      
      boolean boolean0 = linkedList0.add(subLine0);
      assertEquals(1, linkedList0.size());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertTrue(boolean0);
      
      LinkedList<SubHyperplane<Euclidean2D>> linkedList1 = new LinkedList<SubHyperplane<Euclidean2D>>((Collection<? extends SubHyperplane<Euclidean2D>>) linkedList0);
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList0.size());
      assertNotNull(linkedList1);
      
      PolygonsSet polygonsSet0 = new PolygonsSet((Collection<SubHyperplane<Euclidean2D>>) linkedList1);
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList0.size());
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList0.size());
      assertEquals(false, vector0.isInfinite());
      assertEquals(Double.NaN, vector0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector0.getNorm1(), 0.01D);
      assertEquals(true, vector0.isNaN());
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(vector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 2.0E-8;
      double double1 = 0.0;
      double double2 = 0.00970024545271;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double2, double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion0 = polygonsSet0.copySelf();
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(polygonsSet0.equals((Object)abstractRegion0));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertNotSame(polygonsSet0, abstractRegion0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(false, abstractRegion0.isEmpty());
      assertNotNull(abstractRegion0);
  }
}
