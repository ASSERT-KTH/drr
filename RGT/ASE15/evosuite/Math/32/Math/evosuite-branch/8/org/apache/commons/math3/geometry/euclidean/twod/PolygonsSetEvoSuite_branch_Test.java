/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:52:36 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.geom.AffineTransform;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.exception.MathInternalError;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class PolygonsSetEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = 15.29876699466433;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double1);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      // Undeclared exception!
      try {
        polygonsSet0.computeGeometricalProperties();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = (-8.0E298);
      double double1 = 30.5453755;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double1);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      // Undeclared exception!
      try {
        Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1.6396371775014866);
      double double2 = (-541.1031197320648);
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double1, double2);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      polygonsSet0.computeGeometricalProperties();
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = (-3.8E-8);
      double double1 = 0.0;
      PolygonsSet polygonsSet0 = new PolygonsSet(double1, double0, double1, double0);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = polygonsSet0.getSize();
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.4440000000000004E-15, double2, 0.01D);
      
      polygonsSet0.computeGeometricalProperties();
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = 3.4028234663852886E38;
      double double1 = (-439.0343740891812);
      double double2 = 2491.982012459713;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double2, double1);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      polygonsSet0.computeGeometricalProperties();
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>((Object) boolean0);
      assertNotNull(bSPTree0);
      
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree0);
      assertNotNull(polygonsSet0);
      assertEquals(true, polygonsSet0.isEmpty());
      
      double double0 = polygonsSet0.getSize();
      assertEquals(true, polygonsSet0.isEmpty());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      PolygonsSet polygonsSet0 = new PolygonsSet((Collection<SubHyperplane<Euclidean2D>>) linkedList0);
      assertNotNull(polygonsSet0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, polygonsSet0.isEmpty());
      
      polygonsSet0.computeGeometricalProperties();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, polygonsSet0.isEmpty());
  }

  //@Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double double0 = (-154.0813294539121);
      double double1 = 3.4028234663852886E38;
      double double2 = 0.0;
      PolygonsSet polygonsSet0 = new PolygonsSet(double1, double2, double2, double0);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = polygonsSet0.getSize();
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double double0 = (-154.0813294539121);
      double double1 = 3.4028234663852886E38;
      double double2 = 0.0;
      PolygonsSet polygonsSet0 = new PolygonsSet(double1, double2, double2, double0);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      int int0 = 1499;
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(int0);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.getScaleX(), 0.01D);
      assertEquals((-1.0), affineTransform0.getShearY(), 0.01D);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01D);
      assertEquals(1.0, affineTransform0.getShearX(), 0.01D);
      assertEquals("AffineTransform[[0.0, 1.0, 0.0], [-1.0, 0.0, 0.0]]", affineTransform0.toString());
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01D);
      assertEquals(0.0, affineTransform0.getScaleY(), 0.01D);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01D);
      
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      assertNotNull(transform0);
      assertEquals(0.0, affineTransform0.getScaleX(), 0.01D);
      assertEquals((-1.0), affineTransform0.getShearY(), 0.01D);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01D);
      assertEquals(1.0, affineTransform0.getShearX(), 0.01D);
      assertEquals("AffineTransform[[0.0, 1.0, 0.0], [-1.0, 0.0, 0.0]]", affineTransform0.toString());
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01D);
      assertEquals(0.0, affineTransform0.getScaleY(), 0.01D);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01D);
      
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion0 = polygonsSet0.applyTransform(transform0);
      assertNotNull(abstractRegion0);
      assertEquals(false, abstractRegion0.isEmpty());
      assertEquals(0.0, affineTransform0.getScaleX(), 0.01D);
      assertEquals((-1.0), affineTransform0.getShearY(), 0.01D);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01D);
      assertEquals(1.0, affineTransform0.getShearX(), 0.01D);
      assertEquals("AffineTransform[[0.0, 1.0, 0.0], [-1.0, 0.0, 0.0]]", affineTransform0.toString());
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01D);
      assertEquals(0.0, affineTransform0.getScaleY(), 0.01D);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01D);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotSame(polygonsSet0, abstractRegion0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(polygonsSet0.equals((Object)abstractRegion0));
  }
}
