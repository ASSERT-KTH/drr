/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:48:34 GMT 2014
 */

package org.apache.commons.math3.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FractionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertEquals("3 / 4", string0);
      assertNotNull(string0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-331);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-331, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 949;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 949/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 0.1;
      int int0 = 2007;
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.1, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.1F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(10, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(10.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(75.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(75.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1565;
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      
      Fraction fraction2 = fraction1.divide(int0);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotNull(fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(2.1299254E-4F, fraction2.floatValue(), 0.01F);
      assertEquals(0.021299254526091587, fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(4695, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(2.1299254526091586E-4, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      
      int int1 = (-1514);
      Fraction fraction3 = fraction1.subtract(int1);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(int1 == int0);
      assertNotNull(fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(1514, fraction3.shortValue());
      assertEquals(151433.3333333333, fraction3.percentageValue(), 0.01D);
      assertEquals(4543, fraction3.getNumerator());
      assertEquals(1514L, fraction3.longValue());
      assertEquals(1514.3334F, fraction3.floatValue(), 0.01F);
      assertEquals(3, fraction3.getDenominator());
      assertEquals(1514.3333333333333, fraction3.doubleValue(), 0.01D);
      assertEquals(1514, fraction3.intValue());
      assertEquals(-22, fraction3.byteValue());
      
      Fraction fraction4 = fraction1.divide(int1);
      assertFalse(fraction4.equals((Object)fraction3));
      assertFalse(fraction4.equals((Object)fraction0));
      assertFalse(fraction4.equals((Object)fraction2));
      assertFalse(fraction4.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction4));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(int1 == int0);
      assertNotNull(fraction4);
      assertNotSame(fraction4, fraction3);
      assertNotSame(fraction4, fraction0);
      assertNotSame(fraction4, fraction2);
      assertNotSame(fraction4, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction4);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertEquals((-2.2016732716864817E-4), fraction4.doubleValue(), 0.01D);
      assertEquals((-0.022016732716864818), fraction4.percentageValue(), 0.01D);
      assertEquals(0L, fraction4.longValue());
      assertEquals(0, fraction4.byteValue());
      assertEquals(0, fraction4.intValue());
      assertEquals(-1, fraction4.getNumerator());
      assertEquals(4542, fraction4.getDenominator());
      assertEquals((-2.2016733E-4F), fraction4.floatValue(), 0.01F);
      assertEquals(0, fraction4.shortValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      
      Fraction fraction5 = fraction0.multiply(fraction2);
      assertFalse(int0 == int1);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction4));
      assertFalse(fraction1.equals((Object)fraction5));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction4));
      assertFalse(fraction0.equals((Object)fraction5));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction4));
      assertTrue(fraction2.equals((Object)fraction5));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction5.equals((Object)fraction0));
      assertFalse(fraction5.equals((Object)fraction1));
      assertFalse(fraction5.equals((Object)fraction4));
      assertTrue(fraction5.equals((Object)fraction2));
      assertFalse(fraction5.equals((Object)fraction3));
      assertNotNull(fraction5);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction4);
      assertNotSame(fraction1, fraction5);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction4);
      assertNotSame(fraction0, fraction5);
      assertNotSame(fraction2, fraction5);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction4);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction5, fraction0);
      assertNotSame(fraction5, fraction1);
      assertNotSame(fraction5, fraction4);
      assertNotSame(fraction5, fraction3);
      assertNotSame(fraction5, fraction2);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(2.1299254E-4F, fraction2.floatValue(), 0.01F);
      assertEquals(0.021299254526091587, fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(4695, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(2.1299254526091586E-4, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(2.1299254E-4F, fraction5.floatValue(), 0.01F);
      assertEquals(4695, fraction5.getDenominator());
      assertEquals(2.1299254526091586E-4, fraction5.doubleValue(), 0.01D);
      assertEquals(0, fraction5.shortValue());
      assertEquals(0.021299254526091587, fraction5.percentageValue(), 0.01D);
      assertEquals(1, fraction5.getNumerator());
      assertEquals(0, fraction5.intValue());
      assertEquals(0, fraction5.byteValue());
      assertEquals(0L, fraction5.longValue());
      
      Fraction fraction6 = fraction4.subtract(fraction5);
      assertFalse(fraction4.equals((Object)fraction3));
      assertFalse(fraction4.equals((Object)fraction6));
      assertFalse(fraction4.equals((Object)fraction0));
      assertFalse(fraction4.equals((Object)fraction5));
      assertFalse(fraction4.equals((Object)fraction2));
      assertFalse(fraction4.equals((Object)fraction1));
      assertFalse(fraction6.equals((Object)fraction5));
      assertFalse(fraction6.equals((Object)fraction0));
      assertFalse(fraction6.equals((Object)fraction1));
      assertFalse(fraction6.equals((Object)fraction2));
      assertFalse(fraction6.equals((Object)fraction4));
      assertFalse(fraction6.equals((Object)fraction3));
      assertFalse(int0 == int1);
      assertFalse(fraction1.equals((Object)fraction6));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction4));
      assertFalse(fraction1.equals((Object)fraction5));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction6));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction4));
      assertFalse(fraction0.equals((Object)fraction5));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction6));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction4));
      assertTrue(fraction2.equals((Object)fraction5));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(int1 == int0);
      assertFalse(fraction5.equals((Object)fraction0));
      assertFalse(fraction5.equals((Object)fraction1));
      assertFalse(fraction5.equals((Object)fraction6));
      assertFalse(fraction5.equals((Object)fraction4));
      assertTrue(fraction5.equals((Object)fraction2));
      assertFalse(fraction5.equals((Object)fraction3));
      assertNotNull(fraction6);
      assertNotSame(fraction4, fraction3);
      assertNotSame(fraction4, fraction6);
      assertNotSame(fraction4, fraction0);
      assertNotSame(fraction4, fraction5);
      assertNotSame(fraction4, fraction2);
      assertNotSame(fraction4, fraction1);
      assertNotSame(fraction6, fraction5);
      assertNotSame(fraction6, fraction0);
      assertNotSame(fraction6, fraction1);
      assertNotSame(fraction6, fraction2);
      assertNotSame(fraction6, fraction4);
      assertNotSame(fraction6, fraction3);
      assertNotSame(fraction1, fraction6);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction4);
      assertNotSame(fraction1, fraction5);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction0, fraction6);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction4);
      assertNotSame(fraction0, fraction5);
      assertNotSame(fraction2, fraction5);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction6);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction4);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction5, fraction0);
      assertNotSame(fraction5, fraction1);
      assertNotSame(fraction5, fraction6);
      assertNotSame(fraction5, fraction4);
      assertNotSame(fraction5, fraction3);
      assertNotSame(fraction5, fraction2);
      assertEquals((-2.2016732716864817E-4), fraction4.doubleValue(), 0.01D);
      assertEquals((-0.022016732716864818), fraction4.percentageValue(), 0.01D);
      assertEquals(0L, fraction4.longValue());
      assertEquals(0, fraction4.byteValue());
      assertEquals(0, fraction4.intValue());
      assertEquals(-1, fraction4.getNumerator());
      assertEquals(4542, fraction4.getDenominator());
      assertEquals((-2.2016733E-4F), fraction4.floatValue(), 0.01F);
      assertEquals(0, fraction4.shortValue());
      assertEquals(7108230, fraction6.getDenominator());
      assertEquals((-0.043315987242956405), fraction6.percentageValue(), 0.01D);
      assertEquals(0L, fraction6.longValue());
      assertEquals(0, fraction6.byteValue());
      assertEquals(0, fraction6.shortValue());
      assertEquals(0, fraction6.intValue());
      assertEquals((-4.3315988E-4F), fraction6.floatValue(), 0.01F);
      assertEquals((-4.3315987242956405E-4), fraction6.doubleValue(), 0.01D);
      assertEquals(-3079, fraction6.getNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(2.1299254E-4F, fraction2.floatValue(), 0.01F);
      assertEquals(0.021299254526091587, fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(4695, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(2.1299254526091586E-4, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(2.1299254E-4F, fraction5.floatValue(), 0.01F);
      assertEquals(4695, fraction5.getDenominator());
      assertEquals(2.1299254526091586E-4, fraction5.doubleValue(), 0.01D);
      assertEquals(0, fraction5.shortValue());
      assertEquals(0.021299254526091587, fraction5.percentageValue(), 0.01D);
      assertEquals(1, fraction5.getNumerator());
      assertEquals(0, fraction5.intValue());
      assertEquals(0, fraction5.byteValue());
      assertEquals(0L, fraction5.longValue());
      
      // Undeclared exception!
      try {
        Fraction fraction7 = fraction3.subtract(fraction6);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 10,764,232,709
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.TWO_THIRDS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(66.66666666666666, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(100.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1, fraction2.intValue());
      assertEquals(66.66666666666666, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      
      Fraction fraction3 = fraction1.add(fraction2);
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertNotNull(fraction3);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertEquals(1L, fraction3.longValue());
      assertEquals(1, fraction3.byteValue());
      assertEquals(1.6666666666666667, fraction3.doubleValue(), 0.01D);
      assertEquals(3, fraction3.getDenominator());
      assertEquals(166.66666666666669, fraction3.percentageValue(), 0.01D);
      assertEquals(1, fraction3.intValue());
      assertEquals(1, fraction3.shortValue());
      assertEquals(5, fraction3.getNumerator());
      assertEquals(1.6666666F, fraction3.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(100.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1, fraction2.intValue());
      assertEquals(66.66666666666666, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(75.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction2);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertEquals(4, fraction2.getDenominator());
      assertEquals(0.75F, fraction2.floatValue(), 0.01F);
      assertEquals(75.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.75, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(75.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      
      double double0 = 0.0;
      Fraction fraction1 = new Fraction(double0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotNull(fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertEquals(0.4, fraction2.doubleValue(), 0.01D);
      assertEquals(40.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(2, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      int int1 = (-960);
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.subtract(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  //@Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 81;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(fraction0);
      assertEquals(-2147483648, fraction0.getNumerator());
      assertEquals((-2.6512143802469134E7), fraction0.doubleValue(), 0.01D);
      assertEquals(-26512143, fraction0.intValue());
      assertEquals(29937, fraction0.shortValue());
      assertEquals((-26512143L), fraction0.longValue());
      assertEquals((-2.6512144E7F), fraction0.floatValue(), 0.01F);
      assertEquals(81, fraction0.getDenominator());
      assertEquals((-2.6512143802469134E9), fraction0.percentageValue(), 0.01D);
      assertEquals(-15, fraction0.byteValue());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/81, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = new Fraction(int0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.subtract(int0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertTrue(boolean0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.shortValue());
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01D);
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getDenominator());
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, fraction1.shortValue());
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01D);
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      
      String string0 = fraction0.toString();
      assertEquals("-1", string0);
      assertNotNull(string0);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      
      boolean boolean0 = fraction0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      
      int int0 = 0;
      int int1 = (-960);
      Fraction fraction1 = Fraction.getReducedFraction(int0, int1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(75.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(75.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 0.1;
      int int0 = 2007;
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(10, fraction0.getDenominator());
      assertEquals(0.1, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.1F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(10.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.intValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(60.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      
      int int1 = fraction0.compareTo(fraction1);
      assertEquals((-1), int1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int0 == int1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(10, fraction0.getDenominator());
      assertEquals(0.1, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.1F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(10.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(60.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(0.2, fraction1.doubleValue(), 0.01D);
      assertEquals(20.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = (-2747.4898);
      int int0 = 0;
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals((-274800.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-2748.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-2748, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-2748, fraction0.getNumerator());
      assertEquals(-2748, fraction0.shortValue());
      assertEquals((-2748.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-2748L), fraction0.longValue());
      assertEquals(68, fraction0.byteValue());
      
      Fraction fraction1 = fraction0.abs();
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(-68, fraction1.byteValue());
      assertEquals(2748, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2748L, fraction1.longValue());
      assertEquals(2748, fraction1.shortValue());
      assertEquals(2748.0F, fraction1.floatValue(), 0.01F);
      assertEquals(274800.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2748, fraction1.getNumerator());
      assertEquals(2748.0, fraction1.doubleValue(), 0.01D);
      assertEquals((-274800.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-2748.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-2748, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-2748, fraction0.getNumerator());
      assertEquals(-2748, fraction0.shortValue());
      assertEquals((-2748.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-2748L), fraction0.longValue());
      assertEquals(68, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -1/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(40.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      
      short short0 = fraction1.shortValue();
      assertEquals((short)0, short0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(40.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide((int) short0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -1/0
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = (-3180.298121);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals((-3180L), fraction0.longValue());
      assertEquals((-318029.8113207547), fraction0.percentageValue(), 0.01D);
      assertEquals(-108, fraction0.byteValue());
      assertEquals((-3180.298113207547), fraction0.doubleValue(), 0.01D);
      assertEquals(-842779, fraction0.getNumerator());
      assertEquals(-3180, fraction0.intValue());
      assertEquals(-3180, fraction0.shortValue());
      assertEquals((-3180.298F), fraction0.floatValue(), 0.01F);
      assertEquals(265, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = new Fraction(int0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      double double0 = 180.05126726241218;
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(double0, (double) long0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 180.051 to fraction after 0 iterations
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      
      int int0 = 2195;
      int int1 = fraction0.hashCode();
      assertEquals(23388, int1);
      assertFalse(int1 == int0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) int1, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 23,388 to fraction (-23,387/9,223,372,036,854,775,807)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 1347;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) int0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,347 to fraction (9,223,372,036,854,774,462/9,223,372,036,854,775,807)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      int int0 = 0;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, int0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -\u221E to fraction (-9,223,372,036,854,775,808/1)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.add(int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(200.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2, fraction1.shortValue());
      assertEquals(2, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      
      double double0 = fraction0.percentageValue();
      assertEquals(100.0, double0, 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      
      int int0 = 0;
      Fraction fraction1 = fraction0.multiply(int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      
      float float0 = fraction0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(75.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      
      Fraction fraction2 = fraction0.divide(fraction1);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction2);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(75.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
  }
}
