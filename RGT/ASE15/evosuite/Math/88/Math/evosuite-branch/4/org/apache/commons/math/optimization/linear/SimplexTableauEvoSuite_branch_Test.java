/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:48:39 GMT 2014
 */

package org.apache.commons.math.optimization.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.LinkedList;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.linear.RealVectorImpl;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class SimplexTableauEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(int0);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(1, realVectorImpl0.getDimension());
      assertNotNull(realVectorImpl0);
      
      boolean boolean0 = false;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, (double) int0);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(simplexTableau0);
      
      GoalType goalType1 = null;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, boolean0, int0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertFalse(boolean1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 698.577609527317;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(698.577609527317, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(698.577609527317, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(simplexTableau0);
      
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, doubleArray0[5]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction1);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean1 == boolean0);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals(698.577609527317, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(boolean1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1345.78005;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      double double1 = (-14.500630473421946);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(simplexTableau0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean1 = simplexTableau1.equals((Object) simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(boolean1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 698.577609527317;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(698.577609527317, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(698.577609527317, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(698.577609527317, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(simplexTableau0.equals((Object)simplexTableau1));
      assertEquals(698.577609527317, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(int0);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertNotNull(realVectorImpl0);
      
      boolean boolean0 = false;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, (double) int0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean1 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, int0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertNotNull(simplexTableau0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0 == boolean1);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertFalse(boolean2);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 942.2957149464692;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(942.2957149464692, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(942.2957149464692, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(simplexTableau0);
      
      Object object0 = null;
      boolean boolean1 = simplexTableau0.equals(object0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(942.2957149464692, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[30];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(simplexTableau0);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray1, doubleArray1[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, boolean0, doubleArray1[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertNotNull(simplexTableau1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean0 == boolean1);
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean1 == boolean0);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertFalse(boolean1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 1.0E-12;
      Double[] doubleArray0 = new Double[10];
      doubleArray0[0] = (Double) double0;
      doubleArray0[1] = (Double) double0;
      doubleArray0[2] = (Double) double0;
      doubleArray0[3] = (Double) double0;
      doubleArray0[4] = (Double) double0;
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = doubleArray0[4];
      doubleArray0[7] = (Double) double0;
      doubleArray0[8] = doubleArray0[2];
      doubleArray0[9] = doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) openMapRealVector0, double0);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, (double) doubleArray0[9]);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = 0;
      simplexTableau0.divideRow(int0, (double) doubleArray0[2]);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double double0 = (-865.8660851137416);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      boolean boolean0 = true;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, boolean0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-865.8660851137416), (-865.8660851137416), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isNaN());
      //  // Unstable assertion: assertEquals(14, realVectorImpl0.getDimension());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isInfinite());
      //  // Unstable assertion: assertEquals(7093174.969251771, realVectorImpl0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1224.5195607667501, realVectorImpl0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1731.7321702274833, realVectorImpl0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertNotNull(realVectorImpl0);
      
      RealVectorImpl realVectorImpl1 = realVectorImpl0.ebeMultiply(realVectorImpl0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-865.8660851137416), (-865.8660851137416), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(realVectorImpl1.equals((Object)realVectorImpl0));
      //  // Unstable assertion: assertFalse(realVectorImpl0.equals((Object)realVectorImpl1));
      //  // Unstable assertion: assertEquals(1060269.9582263043, realVectorImpl1.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl1.isInfinite());
      //  // Unstable assertion: assertEquals(14, realVectorImpl1.getDimension());
      //  // Unstable assertion: assertEquals(1499448.1547003945, realVectorImpl1.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(6.141739641652816E9, realVectorImpl1.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl1.isNaN());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isNaN());
      //  // Unstable assertion: assertEquals(14, realVectorImpl0.getDimension());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isInfinite());
      //  // Unstable assertion: assertEquals(7093174.969251771, realVectorImpl0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1224.5195607667501, realVectorImpl0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1731.7321702274833, realVectorImpl0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertNotNull(realVectorImpl1);
      //  // Unstable assertion: assertNotSame(realVectorImpl1, realVectorImpl0);
      //  // Unstable assertion: assertNotSame(realVectorImpl0, realVectorImpl1);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl1, doubleArray0[5]);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-865.8660851137416), (-865.8660851137416), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(realVectorImpl1.equals((Object)realVectorImpl0));
      //  // Unstable assertion: assertFalse(realVectorImpl0.equals((Object)realVectorImpl1));
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(1060269.9582263043, realVectorImpl1.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl1.isInfinite());
      //  // Unstable assertion: assertEquals(14, realVectorImpl1.getDimension());
      //  // Unstable assertion: assertEquals(1499448.1547003945, realVectorImpl1.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(6.141739641652816E9, realVectorImpl1.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl1.isNaN());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isNaN());
      //  // Unstable assertion: assertEquals(14, realVectorImpl0.getDimension());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isInfinite());
      //  // Unstable assertion: assertEquals(7093174.969251771, realVectorImpl0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1224.5195607667501, realVectorImpl0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1731.7321702274833, realVectorImpl0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertNotSame(realVectorImpl1, realVectorImpl0);
      //  // Unstable assertion: assertNotSame(realVectorImpl0, realVectorImpl1);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertNotNull(linkedList0);
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) realVectorImpl0, doubleArray0[0], relationship0, (RealVector) realVectorImpl1, doubleArray0[0]);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-865.8660851137416), (-865.8660851137416), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(realVectorImpl1.equals((Object)realVectorImpl0));
      //  // Unstable assertion: assertFalse(realVectorImpl0.equals((Object)realVectorImpl1));
      //  // Unstable assertion: assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(1060269.9582263043, realVectorImpl1.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl1.isInfinite());
      //  // Unstable assertion: assertEquals(14, realVectorImpl1.getDimension());
      //  // Unstable assertion: assertEquals(1499448.1547003945, realVectorImpl1.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(6.141739641652816E9, realVectorImpl1.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl1.isNaN());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isNaN());
      //  // Unstable assertion: assertEquals(14, realVectorImpl0.getDimension());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isInfinite());
      //  // Unstable assertion: assertEquals(7093174.969251771, realVectorImpl0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1224.5195607667501, realVectorImpl0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1731.7321702274833, realVectorImpl0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertNotNull(linearConstraint0);
      //  // Unstable assertion: assertNotSame(realVectorImpl1, realVectorImpl0);
      //  // Unstable assertion: assertNotSame(realVectorImpl0, realVectorImpl1);
      
      boolean boolean1 = linkedList0.offerLast(linearConstraint0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-865.8660851137416), (-865.8660851137416), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(realVectorImpl1.equals((Object)realVectorImpl0));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(realVectorImpl0.equals((Object)realVectorImpl1));
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(1060269.9582263043, realVectorImpl1.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl1.isInfinite());
      //  // Unstable assertion: assertEquals(14, realVectorImpl1.getDimension());
      //  // Unstable assertion: assertEquals(1499448.1547003945, realVectorImpl1.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(6.141739641652816E9, realVectorImpl1.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl1.isNaN());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isNaN());
      //  // Unstable assertion: assertEquals(14, realVectorImpl0.getDimension());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isInfinite());
      //  // Unstable assertion: assertEquals(7093174.969251771, realVectorImpl0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1224.5195607667501, realVectorImpl0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1731.7321702274833, realVectorImpl0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertNotSame(realVectorImpl1, realVectorImpl0);
      //  // Unstable assertion: assertNotSame(realVectorImpl0, realVectorImpl1);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[5]);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-865.8660851137416), (-865.8660851137416), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(realVectorImpl1.equals((Object)realVectorImpl0));
      //  // Unstable assertion: assertFalse(realVectorImpl0.equals((Object)realVectorImpl1));
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(1060269.9582263043, realVectorImpl1.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl1.isInfinite());
      //  // Unstable assertion: assertEquals(14, realVectorImpl1.getDimension());
      //  // Unstable assertion: assertEquals(1499448.1547003945, realVectorImpl1.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(6.141739641652816E9, realVectorImpl1.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl1.isNaN());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isNaN());
      //  // Unstable assertion: assertEquals(14, realVectorImpl0.getDimension());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isInfinite());
      //  // Unstable assertion: assertEquals(7093174.969251771, realVectorImpl0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1224.5195607667501, realVectorImpl0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1731.7321702274833, realVectorImpl0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertNotSame(realVectorImpl1, realVectorImpl0);
      //  // Unstable assertion: assertNotSame(realVectorImpl0, realVectorImpl1);
      
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(int0);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertNotNull(realVectorImpl0);
      
      boolean boolean0 = false;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, (double) int0);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(simplexTableau0);
      
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(1.0, realPointValuePair0.getValue(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(realPointValuePair0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1345.78005;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(simplexTableau0);
      
      simplexTableau0.discardArtificialVariables();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[32];
      double double0 = 0.5;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl();
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertNotNull(realVectorImpl0);
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) realVectorImpl0, relationship0, double0);
      assertEquals(0.5, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(0.5, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertTrue(boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.5, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(simplexTableau0);
      
      simplexTableau0.discardArtificialVariables();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.5, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = (-2.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double[] doubleArray0 = new double[4];
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[0], relationship0, doubleArray0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertTrue(boolean0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl();
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertNotNull(realVectorImpl0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[3] = double0;
      LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray1, relationship0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(linearConstraint1.equals((Object)linearConstraint0));
      assertEquals(0.0, linearConstraint1.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint1.getRelationship());
      assertNotNull(linearConstraint1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(linearConstraint1, linearConstraint0);
      
      linkedList0.addFirst(linearConstraint1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(linearConstraint1.equals((Object)linearConstraint0));
      assertEquals(2, linkedList0.size());
      assertEquals(0.0, linearConstraint1.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint1.getRelationship());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(linearConstraint1, linearConstraint0);
      
      boolean boolean1 = linkedList0.add(linearConstraint1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(linearConstraint1.equals((Object)linearConstraint0));
      assertEquals(3, linkedList0.size());
      assertEquals(0.0, linearConstraint1.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint1.getRelationship());
      assertTrue(boolean1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(linearConstraint1, linearConstraint0);
      
      boolean boolean2 = false;
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, double0);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals((-2.0), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean2, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = (-2.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      double[] doubleArray0 = new double[4];
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[0], relationship0, doubleArray0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl();
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0, realVectorImpl0.getDimension());
      assertNotNull(realVectorImpl0);
      
      Relationship relationship1 = Relationship.GEQ;
      assertNotSame(relationship1, relationship0);
      
      LinearConstraint linearConstraint1 = new LinearConstraint((RealVector) realVectorImpl0, relationship1, double0);
      assertFalse(relationship1.equals((Object)relationship0));
      assertFalse(linearConstraint1.equals((Object)linearConstraint0));
      assertEquals((-2.0), linearConstraint1.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint1.getRelationship());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0, realVectorImpl0.getDimension());
      assertNotNull(linearConstraint1);
      assertNotSame(relationship1, relationship0);
      assertNotSame(linearConstraint1, linearConstraint0);
      
      boolean boolean1 = linkedList0.add(linearConstraint1);
      assertFalse(relationship1.equals((Object)relationship0));
      assertFalse(linearConstraint1.equals((Object)linearConstraint0));
      assertTrue(boolean1 == boolean0);
      assertEquals((-2.0), linearConstraint1.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint1.getRelationship());
      assertEquals(2, linkedList0.size());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0, realVectorImpl0.getDimension());
      assertTrue(boolean1);
      assertNotSame(relationship1, relationship0);
      assertNotSame(linearConstraint1, linearConstraint0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, double0);
      assertEquals((-2.0), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0, realVectorImpl0.getDimension());
      assertNotNull(linearObjectiveFunction0);
      
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //@Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 942.2957149464692;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(942.2957149464692, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(942.2957149464692, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.hashCode();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(942.2957149464692, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-549374277), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getNumArtificialVariables();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, int0);
      
      simplexTableau0.setEntry(int0, int0, doubleArray0[4]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(int0);
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertNotNull(realVectorImpl0);
      
      boolean boolean0 = false;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, (double) int0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertNotNull(simplexTableau0);
      
      int int1 = simplexTableau0.getNumSlackVariables();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 942.2957149464692;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(942.2957149464692, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(942.2957149464692, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(simplexTableau0);
      
      double[][] doubleArray1 = simplexTableau0.getData();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(942.2957149464692, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 942.2957149464692;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(942.2957149464692, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(942.2957149464692, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(942.2957149464692, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(7, int0);
  }
}
