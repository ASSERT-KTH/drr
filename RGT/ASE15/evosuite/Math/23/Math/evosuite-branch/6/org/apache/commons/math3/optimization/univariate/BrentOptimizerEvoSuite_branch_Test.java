/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:24:14 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Cbrt;
import org.apache.commons.math3.analysis.function.Exp;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BrentOptimizerEvoSuite_branch_Test   {

  //@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 3.0;
      double double1 = 1076.3659;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double1, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = brentOptimizer0.getConvergenceChecker();
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(convergenceChecker0);
      
      BrentOptimizer brentOptimizer1 = new BrentOptimizer(double0, double0, convergenceChecker0);
      assertFalse(double1 == double0);
      assertFalse(brentOptimizer0.equals((Object)brentOptimizer1));
      assertFalse(double0 == double1);
      assertFalse(brentOptimizer1.equals((Object)brentOptimizer0));
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer1.getGoalType());
      assertEquals(0.0, brentOptimizer1.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer1.getMax(), 0.01D);
      assertEquals(0, brentOptimizer1.getEvaluations());
      assertEquals(0, brentOptimizer1.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer1.getStartValue(), 0.01D);
      assertNotNull(brentOptimizer1);
      assertNotSame(brentOptimizer0, brentOptimizer1);
      assertNotSame(brentOptimizer1, brentOptimizer0);
      
      int int0 = 1485;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      UnivariateFunction univariateFunction0 = cbrt0.derivative();
      assertNotNull(univariateFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double2 = (-937.0);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer1.optimize(int0, univariateFunction0, goalType0, double2, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(brentOptimizer0.equals((Object)brentOptimizer1));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(brentOptimizer1.equals((Object)brentOptimizer0));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer1.getGoalType());
      assertEquals(1076.3659, brentOptimizer1.getMax(), 0.01D);
      assertEquals((-937.0), brentOptimizer1.getMin(), 0.01D);
      assertEquals(69.68295, brentOptimizer1.getStartValue(), 0.01D);
      assertEquals(3, brentOptimizer1.getEvaluations());
      assertEquals(1485, brentOptimizer1.getMaxEvaluations());
      assertEquals(69.68295, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(0.01968465132707214, univariatePointValuePair0.getValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
      assertNotSame(brentOptimizer0, brentOptimizer1);
      assertNotSame(brentOptimizer1, brentOptimizer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = 1817.0959999688216;
      double double1 = 0.26302230633;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertFalse(double0 == double1);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNotNull(brentOptimizer0);
      
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = brentOptimizer0.getConvergenceChecker();
      assertFalse(double0 == double1);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(convergenceChecker0);
      
      BrentOptimizer brentOptimizer1 = new BrentOptimizer(double1, double1, convergenceChecker0);
      assertFalse(double1 == double0);
      assertFalse(brentOptimizer1.equals((Object)brentOptimizer0));
      assertFalse(brentOptimizer0.equals((Object)brentOptimizer1));
      assertFalse(double0 == double1);
      assertNull(brentOptimizer1.getGoalType());
      assertEquals(0, brentOptimizer1.getEvaluations());
      assertEquals(0.0, brentOptimizer1.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer1.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer1.getMin(), 0.01D);
      assertEquals(0, brentOptimizer1.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNotNull(brentOptimizer1);
      assertNotSame(brentOptimizer1, brentOptimizer0);
      assertNotSame(brentOptimizer0, brentOptimizer1);
      
      int int0 = 1458;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      UnivariateFunction univariateFunction0 = cbrt0.derivative();
      assertNotNull(univariateFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double2 = (-914.5997379213701);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer1.optimize(int0, univariateFunction0, goalType0, double2, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(brentOptimizer1.equals((Object)brentOptimizer0));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(brentOptimizer0.equals((Object)brentOptimizer1));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-914.5997379213701), brentOptimizer1.getMin(), 0.01D);
      assertEquals(1458, brentOptimizer1.getMaxEvaluations());
      assertEquals(271.7001310393149, brentOptimizer1.getStartValue(), 0.01D);
      assertEquals(1458.0, brentOptimizer1.getMax(), 0.01D);
      assertEquals(16, brentOptimizer1.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer1.getGoalType());
      assertEquals(0.0064724360921643576, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(9.597693969317485, univariatePointValuePair0.getValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNotNull(univariatePointValuePair0);
      assertNotSame(brentOptimizer1, brentOptimizer0);
      assertNotSame(brentOptimizer0, brentOptimizer1);
  }

  //@Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = 1.0;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNotNull(brentOptimizer0);
      
      int int0 = 1468;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      UnivariateFunction univariateFunction0 = cbrt0.derivative();
      assertNotNull(univariateFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = (-937.1522571);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, univariateFunction0, goalType0, double1, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1468, brentOptimizer0.getMaxEvaluations());
      assertEquals((-937.1522571), brentOptimizer0.getMin(), 0.01D);
      assertEquals(11, brentOptimizer0.getEvaluations());
      assertEquals(1468.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(265.42387145, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(1.0, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(0.3333333333333333, univariatePointValuePair0.getValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = 0.2273430684523271;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNotNull(brentOptimizer0);
      
      int int0 = 2113;
      Exp exp0 = new Exp();
      assertNotNull(exp0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) exp0, goalType0, double0, double0, (double) int0);
      assertEquals(2113.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.2273430684523271, brentOptimizer0.getMin(), 0.01D);
      assertEquals(2113, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(24, brentOptimizer0.getEvaluations());
      assertEquals(0.2273430684523271, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.8469885603121252, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(2.3326117447576036, univariatePointValuePair0.getValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = 1.0;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 1468;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) cbrt0, goalType0, double0, (double) int0);
      assertEquals(1.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1468.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(734.5, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(1468, brentOptimizer0.getMaxEvaluations());
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(734.5, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(9.0225770615302, univariatePointValuePair0.getValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = 1.0;
      double double1 = (-937.1522571);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -937.152 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = 0.0;
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (0)
         //
      }
  }
}
