/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:54:06 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Acos;
import org.apache.commons.math3.analysis.function.Inverse;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BrentOptimizerEvoSuite_branch_Test   {

  //@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 0.3153223395347595;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertNotNull(brentOptimizer0);
      
      int int0 = 4441;
      double[] doubleArray0 = new double[18];
      doubleArray0[3] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(3, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.3153223395347595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction1.degree());
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.3153223395347595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction1);
      
      double double1 = 1615.7431902603785;
      doubleArray0[6] = double1;
      GoalType goalType0 = GoalType.MINIMIZE;
      double double2 = (-612.3497250659321);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) polynomialFunction1, goalType0, doubleArray0[6], double0, double2);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals((-2.8421709430404007E-14), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(7.641460721719223E-28, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(6, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.3153223395347595, brentOptimizer0.getMax(), 0.01D);
      assertEquals(4441, brentOptimizer0.getMaxEvaluations());
      assertEquals(1615.7431902603785, brentOptimizer0.getMin(), 0.01D);
      assertEquals((-612.3497250659321), brentOptimizer0.getStartValue(), 0.01D);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.3153223395347595, 0.0, 0.0, 1615.7431902603785, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(univariatePointValuePair0);
  }

  //@Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = 0.076923076923;
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = null;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0, convergenceChecker0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      int int0 = 266;
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = (-1.09E-7);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) inverse0, goalType0, (double) int0, double1, double1);
      assertEquals((-1.09E-7), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals((-9174311.926605504), univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(9, brentOptimizer0.getEvaluations());
      assertEquals(266, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals((-1.09E-7), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals((-1.09E-7), brentOptimizer0.getMax(), 0.01D);
      assertEquals(266.0, brentOptimizer0.getMin(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = 0.3153223395347595;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNotNull(brentOptimizer0);
      
      int int0 = 4441;
      double[] doubleArray0 = new double[18];
      doubleArray0[7] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(7, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3153223395347595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertEquals(6, polynomialFunction1.degree());
      assertEquals(7, polynomialFunction0.degree());
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3153223395347595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction1);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = (-612.3497250659321);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) polynomialFunction1, goalType0, doubleArray0[6], double0, double1);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals((-612.3497250659321), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.3153223395347595, brentOptimizer0.getMax(), 0.01D);
      assertEquals(16, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(4441, brentOptimizer0.getMaxEvaluations());
      assertEquals(6, polynomialFunction1.degree());
      assertEquals(0.2720297732279679, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals((-0.7054408583047849), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(7, polynomialFunction0.degree());
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3153223395347595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = 0.3153223395347595;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertNotNull(brentOptimizer0);
      
      int int0 = 4441;
      double[] doubleArray0 = new double[18];
      doubleArray0[7] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(7, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3153223395347595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) polynomialFunction0, goalType0, doubleArray0[6], double0, (double) int0);
      assertEquals(7, polynomialFunction0.degree());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(21, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(4441.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.3153223395347595, brentOptimizer0.getMax(), 0.01D);
      assertEquals(4441, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.855719299719974, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(0.10594343008151189, univariatePointValuePair0.getValue(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3153223395347595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = 0.3153223395347595;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 4441;
      double[] doubleArray0 = new double[18];
      doubleArray0[3] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(3, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.3153223395347595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      
      doubleArray0[6] = (double) int0;
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) polynomialFunction0, goalType0, doubleArray0[6], double0, doubleArray0[6]);
      assertEquals(1.7827681744949013, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(1.7866494823539443, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(4441.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(4441, brentOptimizer0.getMaxEvaluations());
      assertEquals(4441.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.3153223395347595, brentOptimizer0.getMax(), 0.01D);
      assertEquals(19, brentOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.3153223395347595, 0.0, 0.0, 4441.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = 2912.0802577518793;
      double double1 = 1.0074354568442952E-9;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double1, double1);
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNull(brentOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertNotNull(brentOptimizer0);
      
      int int0 = 807;
      GoalType goalType0 = GoalType.MAXIMIZE;
      Acos acos0 = new Acos();
      //  // Unstable assertion: assertNotNull(acos0);
      
      double double2 = (-1.6707442997445);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) acos0, goalType0, double0, double2);
      //  // Unstable assertion: assertEquals(1455.2047567260674, univariatePointValuePair0.getPoint(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, univariatePointValuePair0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(57, brentOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals((-1.6707442997445), brentOptimizer0.getMax(), 0.01D);
      //  // Unstable assertion: assertEquals(2912.0802577518793, brentOptimizer0.getMin(), 0.01D);
      //  // Unstable assertion: assertEquals(807, brentOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(1455.2047567260674, brentOptimizer0.getStartValue(), 0.01D);
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = 2912.0802577518793;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNotNull(brentOptimizer0);
      
      int int0 = 807;
      GoalType goalType0 = GoalType.MAXIMIZE;
      Acos acos0 = new Acos();
      assertNotNull(acos0);
      
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) acos0, goalType0, double0, (double) int0);
      assertEquals(1859.5401288759397, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(2912.0802577518793, brentOptimizer0.getMin(), 0.01D);
      assertEquals(807.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(807, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(Double.NaN, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(1859.5401288759397, univariatePointValuePair0.getPoint(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double double0 = 0.3153223395347595;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertNotNull(brentOptimizer0);
      
      int int0 = 4441;
      double double1 = (-0.46121166267859515);
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = brentOptimizer0.getConvergenceChecker();
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertFalse(double0 == double1);
      assertNull(convergenceChecker0);
      
      BrentOptimizer brentOptimizer1 = null;
      try {
        brentOptimizer1 = new BrentOptimizer((double) int0, double1, convergenceChecker0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0.461 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double double0 = (-1.09E-7);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than the minimum (0)
         //
      }
  }
}
