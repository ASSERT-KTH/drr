/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:40:26 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.junit.runner.RunWith;

 
public class ArrayRealVectorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-473.3467771124861);
      doubleArray0[7] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(669.4134318980724, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(473.3467771124861, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(946.6935542249722, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-473.3467771124861)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapLog1pToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(16, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(true, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-473.3467771124861)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
      
      int int0 = arrayRealVector0.hashCode();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(true, arrayRealVector0.isNaN());
      assertEquals(9, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-473.3467771124861)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      int int0 = arrayRealVector0.hashCode();
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1244764481, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1110.5);
      doubleArray0[0] = double0;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1110.5, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1110.5, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1110.5, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {(-1110.5), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.subtract(arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(6, arrayRealVector1.getDimension());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1110.5, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1110.5, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1110.5, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {(-1110.5), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
      
      boolean boolean1 = arrayRealVector1.equals((Object) arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(6, arrayRealVector1.getDimension());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1110.5, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1110.5, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1110.5, arrayRealVector0.getLInfNorm(), 0.01D);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1110.5), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(boolean0 == boolean1);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.ebeDivide(arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      boolean boolean1 = arrayRealVector0.equals((Object) arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(boolean0 == boolean1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(6, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
      
      boolean boolean1 = arrayRealVector0.equals((Object) arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(6, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      boolean boolean1 = arrayRealVector0.equals((Object) doubleArray0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-1.0);
      double[] doubleArray0 = new double[13];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(13, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      boolean boolean0 = arrayRealVector0.equals((Object) openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(13, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      int int0 = 5025;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(int0);
      assertEquals(5025, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertNotNull(arrayRealVector1);
      
      boolean boolean0 = arrayRealVector1.equals((Object) arrayRealVector0);
      assertEquals(5025, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[6] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double double0 = 804.181005;
      doubleArray0[2] = double0;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(804.181005, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(804.181005, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(804.181005, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 804.181005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAsinToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(11, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, arrayRealVector0.isNaN());
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
      
      boolean boolean1 = arrayRealVector0.isInfinite();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, arrayRealVector0.isNaN());
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 393.1418260310963;
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(393.1418260310963, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(393.1418260310963, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(393.1418260310963, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      arrayRealVector0.setSubVector(int0, (RealVector) openMapRealVector0);
      assertEquals(393.1418260310963, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(393.1418260310963, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(393.1418260310963, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 22;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(484.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(103.18914671611545, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(22.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(22, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(484.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(103.18914671611545, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(22.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(22, openMapRealVector0.getDimension());
      assertEquals(22, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(22, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1778;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1778, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1778, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1778, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      try {
        arrayRealVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 2.0;
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) doubleArray0[5];
      doubleArray1[1] = (Double) doubleArray0[4];
      doubleArray1[2] = (Double) double0;
      doubleArray1[3] = (Double) doubleArray0[0];
      doubleArray1[4] = doubleArray1[3];
      doubleArray1[5] = (Double) doubleArray0[6];
      doubleArray1[6] = (Double) doubleArray0[3];
      doubleArray1[7] = (Double) double0;
      doubleArray1[8] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      assertEquals(6.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3.4641016151377544, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      arrayRealVector0.unitize();
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.7320508075688776, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.5773502691896258, arrayRealVector0.getLInfNorm(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      try {
        RealVector realVector0 = arrayRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = (-1.0);
      double[] doubleArray0 = new double[13];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(13, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      double double1 = arrayRealVector0.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(13, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 22;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(103.18914671611545, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(22.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(484.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(22, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double double0 = arrayRealVector0.getL1Distance((RealVector) openMapRealVector0);
      assertEquals(22, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(103.18914671611545, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(22.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(484.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(484.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      double double0 = arrayRealVector0.getLInfNorm();
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      double double0 = arrayRealVector0.getL1Norm();
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2137;
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, double0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2137, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAcosToSelf();
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2137, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2137, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.5707963267948966, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2137, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(72.61429715477483, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3356.7917503608064, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2137, openMapRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      double double1 = arrayRealVector0.dotProduct((RealVector) openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.5707963267948966, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2137, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(72.61429715477483, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3356.7917503608064, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2137, openMapRealVector0.getDimension());
      assertEquals(5272.836151281939, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      double double0 = arrayRealVector0.dotProduct((RealVector) arrayRealVector0);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(18, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(18, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.ebeDivide((RealVector) openMapRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(18, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(18, arrayRealVector1.getDimension());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      try {
        RealVector realVector0 = arrayRealVector0.ebeDivide((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 18 but expected 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 949;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(949.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(900601.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(949, arrayRealVector0.getDimension());
      assertEquals(29234.74557782229, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(949, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapLog10ToSelf();
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(949, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(949, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.ebeMultiply((RealVector) openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(949, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(949, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(949.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(900601.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(949, arrayRealVector0.getDimension());
      assertEquals(29234.74557782229, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(949, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapUlpToSelf();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(4.9E-324, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3.0E-323, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(3.0E-323, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector1.getDimension());
      assertEquals(4.9E-324, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapRint();
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapFloorToSelf();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(2, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCeilToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 2137;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(2137, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2137, arrayRealVector0.getDimension());
      assertEquals(2137, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCbrtToSelf();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2137, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(2137, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(2137, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSqrt();
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(13, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAbs();
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(13, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapInv();
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAtan();
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(11, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAcos();
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(11, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(5.209742038047157, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(17.27875959474386, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(11, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 2411;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2411, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapTanToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(2411, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2411, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSinToSelf();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(16, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 2.0;
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) doubleArray0[5];
      doubleArray1[1] = (Double) doubleArray0[4];
      doubleArray1[2] = (Double) double0;
      doubleArray1[3] = (Double) doubleArray0[0];
      doubleArray1[4] = doubleArray1[3];
      doubleArray1[5] = (Double) doubleArray0[6];
      doubleArray1[6] = (Double) doubleArray0[3];
      doubleArray1[7] = (Double) double0;
      doubleArray1[8] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      assertEquals(3.4641016151377544, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCos();
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(7.248440509641426, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(2.553337926852727, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(3.4641016151377544, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 13;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(46.87216658103186, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(169.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapTanhToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(0.9999999999897818, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(3.605551275427147, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(12.999999999867166, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(13, arrayRealVector1.getDimension());
      assertEquals(3.605551275427147, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.9999999999897818, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(12.999999999867166, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 5025;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5025, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSinhToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(5025, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5025, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      double double0 = 6.283185307179586;
      Double double1 = new Double(double0);
      assertEquals(6.283185307179586, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[2];
      doubleArray0[7] = doubleArray0[4];
      doubleArray0[8] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(56.548667764616276, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(18.849555921538762, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6.283185307179586, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCoshToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(267.7467614837482, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(2409.720853353734, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(803.2402844512445, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(267.7467614837482, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(803.2402844512445, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2409.720853353734, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapLog10ToSelf();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(18, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 22;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(22.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(484.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(103.18914671611545, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapLogToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(3.091042453358316, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(22, arrayRealVector1.getDimension());
      assertEquals(14.49827423751512, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(68.00293397388292, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(3.091042453358316, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(68.00293397388292, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(14.49827423751512, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 13;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(13.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(169.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(46.87216658103186, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapExpm1ToSelf();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertEquals(442412.3920089205, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5751361.096115966, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(1595140.5642888376, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(13, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1595140.5642888376, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(5751361.096115966, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(442412.3920089205, arrayRealVector1.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapExpToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(3.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(1.7320508075688772, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.7320508075688772, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapPowToSelf(doubleArray0[4]);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(9.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(3.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(9.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1859.8511558;
      doubleArray0[0] = double0;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1859.8511558, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1859.8511558, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1859.8511558, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {1859.8511558}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.unitVector();
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1859.8511558, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1859.8511558, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1859.8511558, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {1859.8511558}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 5025;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5025, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSubtractToSelf((double) int0);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(356208.3528287904, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(2.5250625E7, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(5025, arrayRealVector1.getDimension());
      assertEquals(5025.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(356208.3528287904, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5025.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2.5250625E7, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5025, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 2.0;
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) doubleArray0[5];
      doubleArray1[1] = (Double) doubleArray0[4];
      doubleArray1[2] = (Double) double0;
      doubleArray1[3] = (Double) doubleArray0[0];
      doubleArray1[4] = doubleArray1[3];
      doubleArray1[5] = (Double) doubleArray0[6];
      doubleArray1[6] = (Double) doubleArray0[3];
      doubleArray1[7] = (Double) double0;
      doubleArray1[8] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3.4641016151377544, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAddToSelf((double) doubleArray1[4]);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(2.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(3.4641016151377544, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(6.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3.4641016151377544, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 949;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(949.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(900601.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(29234.74557782229, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(949, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertEquals(949, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapLog10ToSelf();
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(949, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(949, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.subtract((RealVector) openMapRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(949.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(900601.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(29234.74557782229, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(949, arrayRealVector0.getDimension());
      assertEquals(949, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(949, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(949, openMapRealVector1.getDimension());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = (-1.0);
      double[] doubleArray0 = new double[13];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(13, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.add((RealVector) openMapRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(13, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(13, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      double double0 = 6.283185307179586;
      Double double1 = new Double(double0);
      assertEquals(6.283185307179586, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[2];
      doubleArray0[7] = doubleArray0[4];
      doubleArray0[8] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(18.849555921538762, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(56.548667764616276, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6.283185307179586, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(18, arrayRealVector1.getDimension());
      assertEquals(113.0973355292326, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(6.283185307179586, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(26.6572976289502, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(18.849555921538762, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(56.548667764616276, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6.283185307179586, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      double double0 = 6.283185307179586;
      Double double1 = new Double(double0);
      assertEquals(6.283185307179586, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[2];
      doubleArray0[7] = doubleArray0[4];
      doubleArray0[8] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(6.283185307179586, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(18.849555921538762, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(56.548667764616276, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(113.0973355292326, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(18, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(6.283185307179586, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(26.6572976289502, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(6.283185307179586, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(18.849555921538762, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(56.548667764616276, arrayRealVector0.getL1Norm(), 0.01D);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = 3;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, boolean0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      int int0 = 2;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 5025;
      Double[] doubleArray0 = new Double[7];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // position 5,025 and size 5,025 dont fit to the size of the input array {2}
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = 0;
      int int1 = 1030;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // position 0 and size 1,030 dont fit to the size of the input array {2}
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      try {
        RealVector realVector0 = arrayRealVector0.subtract((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try {
        RealVector realVector0 = arrayRealVector0.projection(doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 13;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(46.87216658103186, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(13.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(169.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      double double0 = arrayRealVector0.getL1Distance((RealVector) arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(46.87216658103186, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(13.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(169.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      arrayRealVector0.set(doubleArray0[2]);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.append((RealVector) arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(6, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      int int0 = 3;
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.append((double) int0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(3.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(3.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(3.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try {
        RealVector realVector0 = arrayRealVector0.projection(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 6 but expected 3
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 2411;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2411, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try {
        arrayRealVector0.setSubVector(int0, (RealVector) arrayRealVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 2,411 out of allowed range [0, 2,410]
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      String string0 = arrayRealVector0.toString();
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals("{0; 0; 0; 0; 0; 0}", string0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      double double0 = arrayRealVector0.getDistance((RealVector) arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 1778;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(1778, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1778, arrayRealVector0.getDimension());
      assertEquals(1778, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)arrayRealVector0.projection((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1778, openMapRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1778, arrayRealVector0.getDimension());
      assertEquals(1778, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      double double0 = 6.283185307179586;
      Double double1 = new Double(double0);
      assertEquals(6.283185307179586, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[2];
      doubleArray0[7] = doubleArray0[4];
      doubleArray0[8] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(56.548667764616276, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6.283185307179586, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(18.849555921538762, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.ebeDivide((RealVector) arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(56.548667764616276, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6.283185307179586, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(18.849555921538762, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(9.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.subtract((RealVector) arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(11, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.add((RealVector) arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(13, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray1 = arrayRealVector0.getDataRef();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      int int0 = (-2963);
      // Undeclared exception!
      try {
        arrayRealVector0.setEntry(int0, (double) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index -2,963 out of allowed range [0, -1]
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      double double0 = (-3872.8932348);
      doubleArray0[0] = (Double) double0;
      doubleArray0[1] = (Double) double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(15491.5729392, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3872.8932348, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(7745.7864696, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(15491.5729392, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3872.8932348, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(7745.7864696, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double double1 = arrayRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(15491.5729392, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3872.8932348, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(7745.7864696, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 22;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(484.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(103.18914671611545, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(22.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      double double0 = arrayRealVector0.getLInfDistance((RealVector) arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(484.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(103.18914671611545, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(22.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 13;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(46.87216658103186, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(169.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(13.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[10];
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.append(doubleArray0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(23, arrayRealVector1.getDimension());
      assertEquals(169.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(46.87216658103186, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(13.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(46.87216658103186, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(169.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(13.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray1 = arrayRealVector0.toArray();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.projection(arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(13, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(13, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 5025;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5025, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSignum();
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(5025, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5025, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      int int0 = (-2183);
      int int1 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int1);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try {
        RealVector realVector0 = arrayRealVector0.getSubVector(int0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index -2,183 out of allowed range [0, -1]
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.append(arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(12, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = 3;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.ebeMultiply((RealVector) arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
  }
}
