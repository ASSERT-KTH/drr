/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:36:46 GMT 2014
 */

package org.apache.commons.math3.optimization.direct;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.exception.TooManyEvaluationsException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.SimplePointChecker;
import org.apache.commons.math3.optimization.SimpleValueChecker;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CMAESOptimizerEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1782;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      boolean boolean0 = true;
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int0, doubleArray0[3], boolean0, int0, int0, (RandomGenerator) well512a0, boolean0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {1782.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      int int1 = 10;
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1, (RandomGenerator) well512a0);
      assertFalse(int1 == int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[1], int1, int0, unitSphereRandomVectorGenerator0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[4], doubleArray1[3], doubleArray1[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,782 out of [0, 0] range
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 20;
      double[] doubleArray0 = new double[10];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      int int1 = 0;
      double[][] doubleArray1 = new double[10][10];
      MersenneTwister mersenneTwister0 = (MersenneTwister)CMAESOptimizer.DEFAULT_RANDOMGENERATOR;
      assertNotNull(mersenneTwister0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0, (RandomGenerator) mersenneTwister0);
      assertFalse(int0 == int1);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[4], int0, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[6]);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-593);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      boolean boolean0 = false;
      Well19937c well19937c0 = new Well19937c((long) int0);
      assertNotNull(well19937c0);
      
      int int1 = 4;
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>();
      assertEquals(2.2250738585072014E-306, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1.1102230246251565E-14, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertNotNull(simplePointChecker0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int1, (double) int0, boolean0, int1, int0, (RandomGenerator) well19937c0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2.2250738585072014E-306, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1.1102230246251565E-14, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {(-593.0)}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1, (RandomGenerator) well19937c0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, int0, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-593.0)}, doubleArray0, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0], doubleArray1[0], doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -593 is smaller than the minimum (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      Well1024a well1024a0 = new Well1024a(int0);
      assertNotNull(well1024a0);
      
      double[] doubleArray0 = new double[3];
      boolean boolean0 = true;
      int int1 = 3751;
      int int2 = well1024a0.nextInt(int1);
      assertEquals(507, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((double) int0, (double) int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertNotNull(simpleValueChecker0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int0, doubleArray0[1], boolean0, int0, int0, (RandomGenerator) well1024a0, boolean0, (ConvergenceChecker<PointValuePair>) simpleValueChecker0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray1[0];
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      int int3 = 0;
      assertFalse(int3 == int2);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int2, (RandomGenerator) well1024a0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[1], int0, int3, unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray2 = new double[8];
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 8
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      Well1024a well1024a0 = new Well1024a(int0);
      assertNotNull(well1024a0);
      
      double[] doubleArray0 = new double[3];
      boolean boolean0 = true;
      int int1 = 4489;
      int int2 = well1024a0.nextInt(int1);
      assertEquals(3162, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((double) int0, doubleArray0[2]);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simpleValueChecker0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int0, doubleArray0[1], boolean0, int1, int0, (RandomGenerator) well1024a0, boolean0, (ConvergenceChecker<PointValuePair>) simpleValueChecker0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray1[0];
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int2, (RandomGenerator) well1024a0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[1], int0, int0, unitSphereRandomVectorGenerator0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[1], doubleArray1[2], doubleArray1[0]);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(1, cMAESOptimizer0.getEvaluations());
      assertEquals(4489, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = (-1470);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      
      int int1 = 1782;
      double[] doubleArray0 = new double[7];
      Well512a well512a0 = new Well512a();
      //  // Unstable assertion: assertNotNull(well512a0);
      
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[6]);
      
      int int2 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0, (RandomGenerator) well512a0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[1], int1, int2, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[2]);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(1783, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(1782, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-1470);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      
      int int1 = 1782;
      double[] doubleArray0 = new double[7];
      Well512a well512a0 = new Well512a();
      //  // Unstable assertion: assertNotNull(well512a0);
      
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[6]);
      
      int int2 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int2, (RandomGenerator) well512a0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[1], int0, int2, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[2]);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(1782, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(1783, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNotNull(pointValuePair0);
  }
}
