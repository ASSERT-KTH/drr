/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:19:59 GMT 2014
 */

package org.apache.commons.math.stat.inference;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.distribution.ChiSquaredDistribution;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
import org.apache.commons.math.distribution.DistributionFactoryImpl;
import org.apache.commons.math.distribution.GammaDistribution;
import org.apache.commons.math.distribution.GammaDistributionImpl;
import org.apache.commons.math.stat.inference.ChiSquareTestImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ChiSquareTestImplEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[7];
      long long0 = (-2825L);
      longArray0[0] = long0;
      long[][] longArray1 = new long[2][1];
      longArray1[0] = longArray0;
      assertNotNull(longArray1[0]);
      
      longArray1[1] = longArray0;
      assertNotNull(longArray1[1]);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquareTest(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All entries in input 2-way table must be non-negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[5][3];
      long[] longArray1 = new long[4];
      longArray0[0] = longArray1;
      assertNotNull(longArray0[0]);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquare(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input table must be rectangular
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 1.8577309980042944;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double0);
      assertEquals(1.8577309980042944, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(1.8577309980042944, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0, (GammaDistribution) gammaDistributionImpl0);
      assertEquals(1.8577309980042944, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(0.9288654990021472, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(1.8577309980042944, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(1.8577309980042944, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(0.9288654990021472, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(1.8577309980042944, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[1];
      longArray0[0] = longArray1;
      assertNotNull(longArray0[0]);
      
      try {
        double double1 = chiSquareTestImpl0.chiSquareTest(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input table must have at least two columns
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 1874.229848293884;
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0);
      assertEquals(1874.229848293884, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(1874.229848293884, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[1][6];
      try {
        double double1 = chiSquareTestImpl0.chiSquareTest(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input table must have at least two rows
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = 301L;
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      longArray0[2] = long0;
      longArray0[3] = longArray0[0];
      longArray0[4] = long0;
      longArray0[5] = long0;
      longArray0[6] = longArray0[3];
      longArray0[7] = long0;
      longArray0[8] = long0;
      longArray0[9] = long0;
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double double0 = 1.0E-14;
      long[] longArray1 = new long[10];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = long0;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray1, longArray0, double0);
      assertArrayEquals(new long[] {301L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {301L, 301L, 301L, 301L, 301L, 301L, 301L, 301L, 301L, 301L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[5];
      double double0 = 659.1908647925527;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 659.1908647925527
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[4];
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, (double) longArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 0.0
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = 301L;
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double double0 = 1.0E-14;
      long[] longArray1 = new long[10];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = long0;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray1, longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must not both be zero
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = 301L;
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      longArray0[2] = long0;
      longArray0[3] = longArray0[0];
      longArray0[4] = long0;
      longArray0[5] = long0;
      longArray0[6] = longArray0[3];
      longArray0[7] = long0;
      longArray0[8] = long0;
      longArray0[9] = long0;
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double double0 = 1.0E-14;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, double0);
      assertArrayEquals(new long[] {301L, 301L, 301L, 301L, 301L, 301L, 301L, 301L, 301L, 301L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[8];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long long0 = (-2390L);
      longArray1[3] = long0;
      try {
        double double0 = chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[4];
      long long0 = (-27L);
      longArray0[1] = long0;
      double double0 = 1.0E-5;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 1.0;
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0);
      assertEquals(1.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(1.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[15];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      try {
        double double1 = chiSquareTestImpl0.chiSquareDataSetsComparison(longArray1, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oberved1, observed2 array lengths incorrect
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[1];
      try {
        double double0 = chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oberved1, observed2 array lengths incorrect
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 1.0;
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0);
      assertEquals(1.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(1.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[20][2];
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 1.0
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[1][9];
      double double0 = 0.0;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 0.0
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 1874.229848293884;
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0);
      assertEquals(1874.229848293884, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(1874.229848293884, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double0;
      long[] longArray0 = new long[4];
      long long0 = 2046L;
      longArray0[1] = long0;
      double double1 = 3.6899182659531625E-6;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, double1);
      assertArrayEquals(new double[] {1874.229848293884, 1874.229848293884, 1874.229848293884, 1874.229848293884}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {0L, 2046L, 0L, 0L}, longArray0);
      assertEquals(3.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(boolean0);
  }

  //@Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 1874.229848293884;
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0);
      assertEquals(1874.229848293884, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(1874.229848293884, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double0;
      long[] longArray0 = new long[4];
      double double1 = 3.6899182659531625E-6;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, double1);
      assertArrayEquals(new double[] {1874.229848293884, 1874.229848293884, 1874.229848293884, 1874.229848293884}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(3.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[1];
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[20];
      double double0 = 4606.88373333;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 4606.88373333
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long long0 = (-9L);
      long[] longArray0 = new long[7];
      double[] doubleArray0 = new double[7];
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, (double) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: -9.0
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 1.0;
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0);
      assertEquals(1.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(1.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      long[] longArray0 = new long[2];
      long long0 = 2L;
      longArray0[1] = long0;
      double double1 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {0L, 2L}, longArray0);
      assertEquals(1.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.15729920705028488, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 1.0;
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0);
      assertEquals(1.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(1.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      long[] longArray0 = new long[2];
      long long0 = (-1L);
      longArray0[1] = long0;
      try {
        double double1 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative and expected counts must be postive
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[7];
      long[] longArray0 = new long[7];
      try {
        double double0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative and expected counts must be postive
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[30];
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquare(doubleArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed, expected array lengths incorrect
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[13];
      double double0 = 2.1744E-4;
      long[] longArray0 = new long[6];
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed, expected array lengths incorrect
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[6][7];
      double double0 = 0.5;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      DistributionFactoryImpl distributionFactoryImpl0 = (DistributionFactoryImpl)chiSquareTestImpl0.getDistributionFactory();
      assertNotNull(distributionFactoryImpl0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[20];
      try {
        double double0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts cannot all be 0
         //
      }
  }
}
