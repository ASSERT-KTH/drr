/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:33:01 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class PoissonDistributionImplEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 0.13333332538604736;
      int int0 = 5982;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
      assertEquals(0.13333332538604736, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      double double1 = 1.0;
      int int1 = poissonDistributionImpl0.inverseCumulativeProbability(double1);
      assertEquals(0.13333332538604736, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Integer.MAX_VALUE, int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 0.13333332538604736;
      int int0 = 5982;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
      assertEquals(0.13333332538604736, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int1 = poissonDistributionImpl0.getDomainLowerBound(double0);
      assertEquals(0.13333332538604736, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = poissonDistributionImpl0.inverseCumulativeProbability((double) int1);
      assertEquals(0.13333332538604736, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 0.5;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int0 = 0;
      double double1 = poissonDistributionImpl0.probability(int0);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.6065306597126334, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 1281.0;
      int int0 = 2431;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
      assertEquals(1281.0, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int1 = poissonDistributionImpl0.getDomainUpperBound(int0);
      assertEquals(1281.0, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Integer.MAX_VALUE, int1);
      
      double double1 = poissonDistributionImpl0.probability(int1);
      assertEquals(1281.0, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 0.13333332538604736;
      int int0 = 5982;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
      assertEquals(0.13333332538604736, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      double double1 = poissonDistributionImpl0.probability(int0);
      assertEquals(0.13333332538604736, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 0.5;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int0 = (-1075);
      double double1 = poissonDistributionImpl0.probability(int0);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-867.2739455993);
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -867.274 is smaller than, or equal to, the minimum (0): mean (-867.274)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 5982;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl((double) int0);
      assertEquals(5982.0, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
  }

  //@Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 1750.42207013435;
      int int0 = (-2755);
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0, int0);
      assertEquals(1750.42207013435, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int1 = poissonDistributionImpl0.sample();
      assertEquals(1750.42207013435, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1759, int1);
      
      PoissonDistributionImpl poissonDistributionImpl1 = new PoissonDistributionImpl(double0, int1);
      assertEquals(1750.42207013435, poissonDistributionImpl0.getMean(), 0.01D);
      assertEquals(1750.42207013435, poissonDistributionImpl1.getMean(), 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(poissonDistributionImpl0.equals((Object)poissonDistributionImpl1));
      assertFalse(poissonDistributionImpl1.equals((Object)poissonDistributionImpl0));
      assertNotSame(poissonDistributionImpl0, poissonDistributionImpl1);
      assertNotSame(poissonDistributionImpl1, poissonDistributionImpl0);
      assertNotNull(poissonDistributionImpl1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 1750.42207013435;
      int int0 = (-2755);
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0, int0);
      assertEquals(1750.42207013435, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      double double1 = poissonDistributionImpl0.getMean();
      assertEquals(1750.42207013435, poissonDistributionImpl0.getMean(), 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1750.42207013435, double1, 0.01D);
  }

  //@Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 1750.42207013435;
      int int0 = (-2755);
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0, int0);
      assertEquals(1750.42207013435, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int1 = poissonDistributionImpl0.sample();
      assertEquals(1750.42207013435, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1759, int1);
      
      double double1 = poissonDistributionImpl0.normalApproximateProbability(int1);
      assertEquals(1750.42207013435, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertEquals(0.585887202669521, double1, 0.01D);
  }
}
