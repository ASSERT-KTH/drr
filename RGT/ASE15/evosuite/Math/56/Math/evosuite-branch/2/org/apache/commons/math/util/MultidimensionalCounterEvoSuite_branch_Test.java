/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:06:40 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.exception.DimensionMismatchException;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.apache.commons.math.exception.OutOfRangeException;
import org.apache.commons.math.util.MultidimensionalCounter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class MultidimensionalCounterEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 279;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {279}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(279, multidimensionalCounter0.getSize());
      assertEquals(1, multidimensionalCounter0.getDimension());
      
      try {
        int int1 = multidimensionalCounter0.getCount(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 279 out of [0, 278] range
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-2883);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = intArray0[0];
      intArray0[3] = int0;
      intArray0[4] = intArray0[2];
      intArray0[5] = int0;
      intArray0[6] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {(-2883), (-2883), (-2883), (-2883), (-2883), (-2883), (-2883)}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(7, multidimensionalCounter0.getDimension());
      assertEquals(1519077045, multidimensionalCounter0.getSize());
      
      try {
        int int1 = multidimensionalCounter0.getCount(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -2,883 out of [0, -2,884] range
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-1848);
      int[] intArray0 = new int[7];
      intArray0[1] = int0;
      intArray0[0] = int0;
      intArray0[3] = int0;
      intArray0[5] = int0;
      intArray0[2] = int0;
      intArray0[4] = int0;
      intArray0[6] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {(-1848), (-1848), (-1848), (-1848), (-1848), (-1848), (-1848)}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(7, multidimensionalCounter0.getDimension());
      assertEquals(1562378240, multidimensionalCounter0.getSize());
      
      // Undeclared exception!
      try {
        String string0 = multidimensionalCounter0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 7
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 10;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {10}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(10, multidimensionalCounter0.getSize());
      
      String string0 = multidimensionalCounter0.toString();
      assertEquals("[0]", string0);
      assertArrayEquals(new int[] {10}, intArray0);
      assertNotNull(string0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(10, multidimensionalCounter0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 1;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1, multidimensionalCounter0.getSize());
      assertEquals(1, multidimensionalCounter0.getDimension());
      
      // Undeclared exception!
      try {
        int[] intArray1 = multidimensionalCounter0.getCounts(intArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 out of [0, 1] range
         //
      }
  }

  //@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-133);
      intArray0[0] = int0;
      intArray0[2] = int0;
      int int1 = 180;
      intArray0[1] = int1;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {(-133), 180, (-133)}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertEquals(3184020, multidimensionalCounter0.getSize());
      
      int[] intArray1 = multidimensionalCounter0.getCounts(int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-133), 180, (-133)}, intArray0);
      assertArrayEquals(new int[] {89702, 133, (-2147483547)}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertEquals(3184020, multidimensionalCounter0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-1848);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = intArray0[0];
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {(-1848), (-1848), (-1848), (-1848), (-1848), (-1848), (-1848)}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(7, multidimensionalCounter0.getDimension());
      assertEquals(1562378240, multidimensionalCounter0.getSize());
      
      // Undeclared exception!
      try {
        int[] intArray1 = multidimensionalCounter0.getCounts(intArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,848 out of [0, 1,562,378,240] range
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[2];
      MultidimensionalCounter multidimensionalCounter0 = null;
      try {
        multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 1;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(1, multidimensionalCounter0.getSize());
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotNull(multidimensionalCounter_Iterator0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(1, multidimensionalCounter0.getSize());
      
      Integer integer0 = multidimensionalCounter_Iterator0.next();
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(1, multidimensionalCounter0.getSize());
      
      Integer integer1 = multidimensionalCounter_Iterator0.next();
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotSame(integer1, integer0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(1, multidimensionalCounter0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 10;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {10}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(10, multidimensionalCounter0.getSize());
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      assertArrayEquals(new int[] {10}, intArray0);
      assertNotNull(multidimensionalCounter_Iterator0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(10, multidimensionalCounter0.getSize());
      
      boolean boolean0 = multidimensionalCounter_Iterator0.hasNext();
      assertTrue(boolean0);
      assertArrayEquals(new int[] {10}, intArray0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(10, multidimensionalCounter0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 1;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(1, multidimensionalCounter0.getSize());
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotNull(multidimensionalCounter_Iterator0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(1, multidimensionalCounter0.getSize());
      
      Integer integer0 = multidimensionalCounter_Iterator0.next();
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(1, multidimensionalCounter0.getSize());
      
      boolean boolean0 = multidimensionalCounter_Iterator0.hasNext();
      assertFalse(boolean0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(1, multidimensionalCounter0.getSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-133);
      intArray0[2] = int0;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      intArray1[0] = int0;
      intArray1[1] = int0;
      intArray1[2] = int0;
      intArray1[3] = intArray0[2];
      intArray1[4] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-133), (-133), (-133), (-133), (-133)}, intArray1);
      assertNotNull(multidimensionalCounter0);
      assertNotSame(intArray1, intArray0);
      assertEquals(1333877067, multidimensionalCounter0.getSize());
      assertEquals(5, multidimensionalCounter0.getDimension());
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-133), (-133), (-133), (-133), (-133)}, intArray1);
      assertNotNull(multidimensionalCounter_Iterator0);
      assertNotSame(intArray1, intArray0);
      assertEquals(1333877067, multidimensionalCounter0.getSize());
      assertEquals(5, multidimensionalCounter0.getDimension());
      
      int int1 = multidimensionalCounter_Iterator0.getCount();
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-133), (-133), (-133), (-133), (-133)}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1333877067, multidimensionalCounter0.getSize());
      assertEquals(5, multidimensionalCounter0.getDimension());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-1848);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = intArray0[0];
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {(-1848), (-1848), (-1848), (-1848), (-1848), (-1848), (-1848)}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1562378240, multidimensionalCounter0.getSize());
      assertEquals(7, multidimensionalCounter0.getDimension());
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();
      assertArrayEquals(new int[] {(-1848), (-1848), (-1848), (-1848), (-1848), (-1848), (-1848)}, intArray0);
      assertNotNull(multidimensionalCounter_Iterator0);
      assertEquals(1562378240, multidimensionalCounter0.getSize());
      assertEquals(7, multidimensionalCounter0.getDimension());
      
      int[] intArray1 = multidimensionalCounter_Iterator0.getCounts();
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-1)}, intArray1);
      assertArrayEquals(new int[] {(-1848), (-1848), (-1848), (-1848), (-1848), (-1848), (-1848)}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(1562378240, multidimensionalCounter0.getSize());
      assertEquals(7, multidimensionalCounter0.getDimension());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-133);
      intArray0[2] = int0;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      intArray1[0] = int0;
      intArray1[1] = int0;
      intArray1[2] = int0;
      intArray1[3] = intArray0[2];
      intArray1[4] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-133), (-133), (-133), (-133), (-133)}, intArray1);
      assertNotNull(multidimensionalCounter0);
      assertNotSame(intArray1, intArray0);
      assertEquals(1333877067, multidimensionalCounter0.getSize());
      assertEquals(5, multidimensionalCounter0.getDimension());
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-133), (-133), (-133), (-133), (-133)}, intArray1);
      assertNotNull(multidimensionalCounter_Iterator0);
      assertNotSame(intArray1, intArray0);
      assertEquals(1333877067, multidimensionalCounter0.getSize());
      assertEquals(5, multidimensionalCounter0.getDimension());
      
      // Undeclared exception!
      try {
        multidimensionalCounter_Iterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 10;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {10}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(10, multidimensionalCounter0.getSize());
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      assertArrayEquals(new int[] {10}, intArray0);
      assertNotNull(multidimensionalCounter_Iterator0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(10, multidimensionalCounter0.getSize());
      
      // Undeclared exception!
      try {
        int int1 = multidimensionalCounter_Iterator0.getCount(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 10;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {10}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(10, multidimensionalCounter0.getSize());
      
      int[] intArray1 = multidimensionalCounter0.getSizes();
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {10}, intArray1);
      assertArrayEquals(new int[] {10}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(10, multidimensionalCounter0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 10;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {10}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(10, multidimensionalCounter0.getSize());
      assertEquals(1, multidimensionalCounter0.getDimension());
      
      int int1 = multidimensionalCounter0.getDimension();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {10}, intArray0);
      assertEquals(10, multidimensionalCounter0.getSize());
      assertEquals(1, multidimensionalCounter0.getDimension());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-1848);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = intArray0[0];
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertArrayEquals(new int[] {(-1848), (-1848), (-1848), (-1848), (-1848), (-1848), (-1848)}, intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(7, multidimensionalCounter0.getDimension());
      assertEquals(1562378240, multidimensionalCounter0.getSize());
      
      int int1 = multidimensionalCounter0.getSize();
      assertEquals(1562378240, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-1848), (-1848), (-1848), (-1848), (-1848), (-1848), (-1848)}, intArray0);
      assertEquals(7, multidimensionalCounter0.getDimension());
      assertEquals(1562378240, multidimensionalCounter0.getSize());
  }
}
