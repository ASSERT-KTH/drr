/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:08:56 GMT 2014
 */

package org.apache.commons.math3.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FractionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      
      String string0 = fraction0.toString();
      assertEquals("-1", string0);
      assertNotNull(string0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      
      String string0 = fraction0.toString();
      assertEquals("1 / 5", string0);
      assertNotNull(string0);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-253);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-253, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 169;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 169/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      
      int int0 = fraction0.intValue();
      assertEquals(0, int0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      
      int int1 = fraction0.hashCode();
      assertEquals(23315, int1);
      assertFalse(int1 == int0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = Fraction.getReducedFraction(int0, int1);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-2);
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertNotNull(fraction1);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      
      Fraction fraction1 = fraction0.divide(fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = (-1477.797301);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals((-1477L), fraction0.longValue());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals(59, fraction0.byteValue());
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals(-1477, fraction0.shortValue());
      assertEquals(74, fraction0.getDenominator());
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      
      int int0 = (-1030);
      Fraction fraction1 = fraction0.multiply(int0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-1477L), fraction0.longValue());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals(59, fraction0.byteValue());
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals(-1477, fraction0.shortValue());
      assertEquals(74, fraction0.getDenominator());
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(-45, fraction1.byteValue());
      assertEquals(37, fraction1.getDenominator());
      assertEquals(1522131L, fraction1.longValue());
      assertEquals(1522131, fraction1.intValue());
      assertEquals(1522131.2162162163, fraction1.doubleValue(), 0.01D);
      assertEquals(56318855, fraction1.getNumerator());
      assertEquals(1522131.2F, fraction1.floatValue(), 0.01F);
      assertEquals(1.5221312162162164E8, fraction1.percentageValue(), 0.01D);
      assertEquals(14803, fraction1.shortValue());
      
      Fraction fraction2 = fraction1.multiply(int0);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(-16393, fraction2.shortValue());
      assertEquals(-9, fraction2.byteValue());
      assertEquals(57327607L, fraction2.longValue());
      assertEquals(5.732760794594595E7, fraction2.doubleValue(), 0.01D);
      assertEquals(5.7327608E7F, fraction2.floatValue(), 0.01F);
      assertEquals(37, fraction2.getDenominator());
      assertEquals(57327607, fraction2.intValue());
      assertEquals(2121121494, fraction2.getNumerator());
      assertEquals(5.732760794594595E9, fraction2.percentageValue(), 0.01D);
      assertEquals((-1477L), fraction0.longValue());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals(59, fraction0.byteValue());
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals(-1477, fraction0.shortValue());
      assertEquals(74, fraction0.getDenominator());
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(-45, fraction1.byteValue());
      assertEquals(37, fraction1.getDenominator());
      assertEquals(1522131L, fraction1.longValue());
      assertEquals(1522131, fraction1.intValue());
      assertEquals(1522131.2162162163, fraction1.doubleValue(), 0.01D);
      assertEquals(56318855, fraction1.getNumerator());
      assertEquals(1522131.2F, fraction1.floatValue(), 0.01F);
      assertEquals(1.5221312162162164E8, fraction1.percentageValue(), 0.01D);
      assertEquals(14803, fraction1.shortValue());
      
      // Undeclared exception!
      try {
        Fraction fraction3 = fraction2.add(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 4,242,242,988
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-1477.797301);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(59, fraction0.byteValue());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals(-1477, fraction0.shortValue());
      assertEquals((-1477L), fraction0.longValue());
      assertEquals(74, fraction0.getDenominator());
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertEquals(40.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertEquals(40.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(59, fraction0.byteValue());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals(-1477, fraction0.shortValue());
      assertEquals((-1477L), fraction0.longValue());
      assertEquals(74, fraction0.getDenominator());
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals(-1477, fraction2.shortValue());
      assertEquals((-1477.3972972972972), fraction2.doubleValue(), 0.01D);
      assertEquals(370, fraction2.getDenominator());
      assertEquals((-1477L), fraction2.longValue());
      assertEquals(-546637, fraction2.getNumerator());
      assertEquals((-147739.72972972973), fraction2.percentageValue(), 0.01D);
      assertEquals(-1477, fraction2.intValue());
      assertEquals((-1477.3973F), fraction2.floatValue(), 0.01F);
      assertEquals(59, fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      
      int int0 = 0;
      Fraction fraction1 = new Fraction(int0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(100.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1, fraction2.byteValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      
      Fraction fraction2 = fraction1.add(fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.add(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = new Fraction(int0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(-2147483648, fraction0.getNumerator());
      assertEquals(-2147483648, fraction0.intValue());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals((-2.147483648E11), fraction0.percentageValue(), 0.01D);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(150.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.5, fraction1.doubleValue(), 0.01D);
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(150.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.5, fraction1.doubleValue(), 0.01D);
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.MINUS_ONE;
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.shortValue());
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      
      Fraction fraction1 = fraction0.reciprocal();
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertTrue(boolean0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      
      boolean boolean0 = fraction0.equals((Object) int0);
      assertFalse(boolean0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = (-1477.797301);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(74, fraction0.getDenominator());
      assertEquals((-1477L), fraction0.longValue());
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals(59, fraction0.byteValue());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(-1477, fraction0.shortValue());
      
      int int0 = (-1030);
      Fraction fraction1 = fraction0.multiply(int0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1522131L, fraction1.longValue());
      assertEquals(1522131.2162162163, fraction1.doubleValue(), 0.01D);
      assertEquals(1522131.2F, fraction1.floatValue(), 0.01F);
      assertEquals(56318855, fraction1.getNumerator());
      assertEquals(37, fraction1.getDenominator());
      assertEquals(14803, fraction1.shortValue());
      assertEquals(-45, fraction1.byteValue());
      assertEquals(1522131, fraction1.intValue());
      assertEquals(1.5221312162162164E8, fraction1.percentageValue(), 0.01D);
      assertEquals(74, fraction0.getDenominator());
      assertEquals((-1477L), fraction0.longValue());
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals(59, fraction0.byteValue());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(-1477, fraction0.shortValue());
      
      int int1 = fraction1.compareTo(fraction0);
      assertEquals(1, int1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1522131L, fraction1.longValue());
      assertEquals(1522131.2162162163, fraction1.doubleValue(), 0.01D);
      assertEquals(1522131.2F, fraction1.floatValue(), 0.01F);
      assertEquals(56318855, fraction1.getNumerator());
      assertEquals(37, fraction1.getDenominator());
      assertEquals(14803, fraction1.shortValue());
      assertEquals(-45, fraction1.byteValue());
      assertEquals(1522131, fraction1.intValue());
      assertEquals(1.5221312162162164E8, fraction1.percentageValue(), 0.01D);
      assertEquals(74, fraction0.getDenominator());
      assertEquals((-1477L), fraction0.longValue());
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals(59, fraction0.byteValue());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(-1477, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      
      int int0 = (-3977);
      Fraction fraction1 = fraction0.subtract(int0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(11933, fraction1.getNumerator());
      assertEquals(-119, fraction1.byteValue());
      assertEquals(3977.6667F, fraction1.floatValue(), 0.01F);
      assertEquals(3977, fraction1.shortValue());
      assertEquals(3977, fraction1.intValue());
      assertEquals(3977L, fraction1.longValue());
      assertEquals(3977.6666666666665, fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(397766.6666666666, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      
      int int1 = fraction0.compareTo(fraction1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(11933, fraction1.getNumerator());
      assertEquals(-119, fraction1.byteValue());
      assertEquals(3977.6667F, fraction1.floatValue(), 0.01F);
      assertEquals(3977, fraction1.shortValue());
      assertEquals(3977, fraction1.intValue());
      assertEquals(3977L, fraction1.longValue());
      assertEquals(3977.6666666666665, fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(397766.6666666666, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-1477.797301);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals((-1477L), fraction0.longValue());
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(59, fraction0.byteValue());
      assertEquals(74, fraction0.getDenominator());
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals(-1477, fraction0.shortValue());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals((-1477L), fraction0.longValue());
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(59, fraction0.byteValue());
      assertEquals(74, fraction0.getDenominator());
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals(-1477, fraction0.shortValue());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertNotNull(fraction0);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertEquals(66.66666666666666, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-1477.797301);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals(-1477, fraction0.shortValue());
      assertEquals(59, fraction0.byteValue());
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-1477L), fraction0.longValue());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals(74, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1477, fraction1.shortValue());
      assertEquals(109357, fraction1.getNumerator());
      assertEquals(1477L, fraction1.longValue());
      assertEquals(1477, fraction1.intValue());
      assertEquals(147779.72972972973, fraction1.percentageValue(), 0.01D);
      assertEquals(74, fraction1.getDenominator());
      assertEquals(1477.7972972972973, fraction1.doubleValue(), 0.01D);
      assertEquals(-59, fraction1.byteValue());
      assertEquals(1477.7972F, fraction1.floatValue(), 0.01F);
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals(-1477, fraction0.shortValue());
      assertEquals(59, fraction0.byteValue());
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-1477L), fraction0.longValue());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals(74, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 2160.2;
      double double1 = (-59.02248834249491);
      int int0 = (-3);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double1, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 2,160.2 to fraction after -3 iterations
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      
      int int0 = fraction0.intValue();
      assertEquals((-1), int0);
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      
      int int1 = (-2098);
      assertFalse(int1 == int0);
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) int1, (double) int0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,098 to fraction (2,099/9,223,372,036,854,775,807)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 49;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) int0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 49 to fraction (9,223,372,036,854,775,760/9,223,372,036,854,775,807)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = (-1477.797301);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-1477, fraction0.shortValue());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals((-1477L), fraction0.longValue());
      assertEquals(-1477, fraction0.intValue());
      assertEquals(59, fraction0.byteValue());
      assertEquals(74, fraction0.getDenominator());
      
      byte byte0 = fraction0.byteValue();
      assertEquals((byte)59, byte0);
      assertEquals(-1477, fraction0.shortValue());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals((-1477L), fraction0.longValue());
      assertEquals(-1477, fraction0.intValue());
      assertEquals(59, fraction0.byteValue());
      assertEquals(74, fraction0.getDenominator());
      
      Fraction fraction1 = new Fraction((double) byte0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(-1477, fraction0.shortValue());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(-109357, fraction0.getNumerator());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals((-1477L), fraction0.longValue());
      assertEquals(-1477, fraction0.intValue());
      assertEquals(59, fraction0.byteValue());
      assertEquals(74, fraction0.getDenominator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(59L, fraction1.longValue());
      assertEquals(59, fraction1.getNumerator());
      assertEquals(5900.0, fraction1.percentageValue(), 0.01D);
      assertEquals(59, fraction1.shortValue());
      assertEquals(59, fraction1.intValue());
      assertEquals(59.0, fraction1.doubleValue(), 0.01D);
      assertEquals(59, fraction1.byteValue());
      assertEquals(59.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      int int0 = 470;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (-9,223,372,036,854,775,808/1)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      
      int int0 = 49;
      Fraction fraction1 = fraction0.add(int0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(49.0, fraction1.doubleValue(), 0.01D);
      assertEquals(4900.0, fraction1.percentageValue(), 0.01D);
      assertEquals(49, fraction1.intValue());
      assertEquals(49, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(49.0F, fraction1.floatValue(), 0.01F);
      assertEquals(49, fraction1.shortValue());
      assertEquals(49L, fraction1.longValue());
      assertEquals(49, fraction1.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = 31.99286158170347;
      int int0 = (-3977);
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals(31, fraction0.shortValue());
      assertEquals(31.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(31, fraction0.getNumerator());
      assertEquals(31L, fraction0.longValue());
      assertEquals(31, fraction0.intValue());
      assertEquals(31, fraction0.byteValue());
      assertEquals(31.0, fraction0.doubleValue(), 0.01D);
      assertEquals(3100.0, fraction0.percentageValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      
      double double0 = fraction0.percentageValue();
      assertEquals(20.0, double0, 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      
      float float0 = fraction0.floatValue();
      assertEquals(0.2F, float0, 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = (-1477.797301);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-1477, fraction0.shortValue());
      assertEquals((-1477L), fraction0.longValue());
      assertEquals(74, fraction0.getDenominator());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals(59, fraction0.byteValue());
      assertEquals(-109357, fraction0.getNumerator());
      
      long long0 = fraction0.longValue();
      assertEquals((-1477L), long0);
      assertEquals(-1477, fraction0.shortValue());
      assertEquals((-1477L), fraction0.longValue());
      assertEquals(74, fraction0.getDenominator());
      assertEquals((-1477.7972F), fraction0.floatValue(), 0.01F);
      assertEquals((-147779.72972972973), fraction0.percentageValue(), 0.01D);
      assertEquals(-1477, fraction0.intValue());
      assertEquals((-1477.7972972972973), fraction0.doubleValue(), 0.01D);
      assertEquals(59, fraction0.byteValue());
      assertEquals(-109357, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
  }
}
