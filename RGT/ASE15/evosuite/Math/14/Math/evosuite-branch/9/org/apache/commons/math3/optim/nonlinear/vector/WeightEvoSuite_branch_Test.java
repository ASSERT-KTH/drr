/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:00:01 GMT 2014
 */

package org.apache.commons.math3.optim.nonlinear.vector;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.NonSquareMatrixException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optim.nonlinear.vector.Weight;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class WeightEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      Weight weight0 = null;
      try {
        weight0 = new Weight((RealMatrix) array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (2x1) matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Weight weight0 = new Weight(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(weight0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      assertEquals(false, diagonalMatrix0.isTransposable());
      assertEquals(1, diagonalMatrix0.getColumnDimension());
      assertEquals(true, diagonalMatrix0.isSquare());
      assertEquals(1, diagonalMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(diagonalMatrix0);
      
      Weight weight0 = new Weight((RealMatrix) diagonalMatrix0);
      assertEquals(false, diagonalMatrix0.isTransposable());
      assertEquals(1, diagonalMatrix0.getColumnDimension());
      assertEquals(true, diagonalMatrix0.isSquare());
      assertEquals(1, diagonalMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(weight0);
      
      DiagonalMatrix diagonalMatrix1 = (DiagonalMatrix)weight0.getWeight();
      assertTrue(diagonalMatrix1.equals((Object)diagonalMatrix0));
      assertTrue(diagonalMatrix0.equals((Object)diagonalMatrix1));
      assertNotSame(diagonalMatrix1, diagonalMatrix0);
      assertNotSame(diagonalMatrix0, diagonalMatrix1);
      assertEquals(true, diagonalMatrix1.isSquare());
      assertEquals(false, diagonalMatrix1.isTransposable());
      assertEquals(1, diagonalMatrix1.getRowDimension());
      assertEquals(1, diagonalMatrix1.getColumnDimension());
      assertEquals(false, diagonalMatrix0.isTransposable());
      assertEquals(1, diagonalMatrix0.getColumnDimension());
      assertEquals(true, diagonalMatrix0.isSquare());
      assertEquals(1, diagonalMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(diagonalMatrix1);
  }
}
