/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:10:10 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigInteger;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.junit.runner.RunWith;

 
public class MathUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[2];
      double double0 = MathUtils.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertEquals(-7168, bigInteger1.shortValue());
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-4,294,967,296^-4,294,967,296)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 21;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) int0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertEquals(1, bigInteger1.byteValue());
      assertEquals(1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      
      long long0 = (-1837L);
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1,837)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-62);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-62)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte byte0 = (byte)7;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) byte0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 3312L;
      long long1 = MathUtils.pow(long0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte byte0 = (byte) (-14);
      int int0 = MathUtils.hash((double) byte0);
      assertEquals((-1070858240), int0);
      
      try {
        long long0 = MathUtils.pow((long) byte0, (long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-14^-1,070,858,240)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte byte0 = (byte)7;
      int int0 = 668;
      long long0 = MathUtils.pow((long) byte0, int0);
      assertEquals((-1427468534252400223L), long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-2853);
      try {
        long long0 = MathUtils.pow((long) intArray0[4], int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,853)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 11;
      long long0 = (-1L);
      try {
        int int1 = MathUtils.pow(int0, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (11^-1)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = MathUtils.hash(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(887503681, int0);
      
      int int1 = MathUtils.pow(int0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1426508609, int1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 4986;
      int int1 = (-988);
      try {
        int int2 = MathUtils.pow(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,986^-988)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = 6227020800L;
      int[] intArray0 = new int[6];
      long long1 = MathUtils.subAndCheck((long) intArray0[1], long0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-6227020800L), long1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short short0 = (short)37;
      int int0 = MathUtils.subAndCheck((int) short0, (int) short0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      short short0 = (short) (-1);
      short short1 = MathUtils.sign(short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short) (-1), short1);
      
      long long0 = MathUtils.sign((long) short1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = (-75);
      int int1 = MathUtils.sign(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      short short0 = (short)37;
      short short1 = MathUtils.indicator(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)1, short1);
      
      int int0 = MathUtils.sign((int) short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = 2037.3F;
      float float1 = MathUtils.sign(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.sign(float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = (-188.2F);
      float float1 = MathUtils.sign(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.0F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = (-252.8747354);
      double double1 = MathUtils.sign(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)61;
      byteArray0[4] = byte0;
      double double0 = MathUtils.sign((double) byteArray0[4]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)61, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      double double0 = MathUtils.sign((double) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte byte0 = (byte)65;
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte)1, byte1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte byte0 = (byte) (-14);
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 5;
      intArray0[6] = int0;
      float float0 = 344.3F;
      float float1 = MathUtils.round(float0, intArray0[5], intArray0[6]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 5, 0}, intArray0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(344.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = 2213L;
      int int0 = (-1);
      int int1 = MathUtils.pow(int0, long0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try {
        float float0 = MathUtils.round((float) int1, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 6;
      float float1 = MathUtils.round(float0, int0, int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 5;
      intArray0[6] = int0;
      float float0 = MathUtils.round((float) intArray0[6], intArray0[2], intArray0[6]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 5, 0}, intArray0);
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = 3312L;
      int int0 = (-911);
      int int1 = 0;
      float float0 = MathUtils.round((float) long0, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double0 = MathUtils.round((double) float0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = Double.NaN;
      int[] intArray0 = new int[6];
      double double1 = MathUtils.round(double0, intArray0[0], intArray0[0]);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = (-3062L);
      long long1 = MathUtils.indicator(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-1L), long1);
      
      double[] doubleArray0 = new double[3];
      double double0 = Double.NaN;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) long0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (double) long1);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-3062.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = 865.77865718;
      int int0 = MathUtils.compareTo(double0, double0, double0);
      assertEquals(0, int0);
      
      double double1 = MathUtils.log((double) int0, (double) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = double1;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = double0;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, doubleArray0[5]);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 6
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 542;
      double double0 = (-1.0);
      double double1 = MathUtils.log((double) int0, double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      //  // Unstable assertion: assertTrue(short0 == short1);
      //  // Unstable assertion: assertTrue(short1 == short0);
      //  // Unstable assertion: assertEquals((short)0, short1);
      
      double double2 = MathUtils.scalb(double1, (int) short1);
      //  // Unstable assertion: assertTrue(short0 == short1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(short1 == short0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte byte0 = (byte)61;
      double double0 = MathUtils.scalb((double) byte0, (int) byte0);
      assertEquals(1.4065642356203533E20, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 0;
      double double0 = 1.0;
      double double1 = MathUtils.nextAfter(double0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.9999999999999999, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 1;
      float float0 = MathUtils.round((float) int0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      float float0 = MathUtils.round((float) byte0, (int) byteArray0[2]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = 374.7288F;
      int int0 = 4986;
      float float1 = MathUtils.round(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[2];
      long long0 = MathUtils.mulAndCheck((long) intArray0[0], (long) intArray0[0]);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = 865.77865718;
      double double1 = 0.0;
      int int0 = MathUtils.compareTo(double1, double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1), int0);
      
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(long0, (long) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short short0 = (short) (-1);
      short short1 = MathUtils.sign(short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short) (-1), short1);
      
      long long0 = MathUtils.mulAndCheck((long) short0, (long) short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = (byte)7;
      long long0 = MathUtils.sign((long) byte0);
      assertEquals(1L, long0);
      
      short short0 = (short) (-1);
      long long1 = MathUtils.mulAndCheck((long) short0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 955;
      // Undeclared exception!
      try {
        int int2 = MathUtils.lcm(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2313);
      int int2 = MathUtils.lcm(int1, int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = (-1.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = double0;
      int int0 = MathUtils.compareTo(doubleArray0[0], doubleArray0[3], doubleArray0[3]);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short short0 = (short) (-713);
      int int1 = MathUtils.lcm(int0, (int) short0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(713, int1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte byte0 = (byte)44;
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte)1, byte1);
      
      long long0 = MathUtils.indicator((long) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short short0 = (short) (-1878);
      short short1 = MathUtils.indicator(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
      
      long long0 = MathUtils.indicator((long) short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-1765);
      int int1 = MathUtils.indicator(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 0;
      float float0 = Float.NaN;
      float float1 = MathUtils.round(float0, int0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = MathUtils.indicator(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = (byte)7;
      short short0 = MathUtils.sign((short) byte0);
      assertEquals((short)1, short0);
      
      double double0 = MathUtils.indicator((double) short0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte byte0 = (byte) (-42);
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte byte0 = (byte) (-14);
      int int0 = MathUtils.gcd((int) byte0, (int) byte0);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 60;
      intArray0[0] = int0;
      int int1 = 0;
      int int2 = MathUtils.gcd(intArray0[0], int1);
      assertArrayEquals(new int[] {60, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(60, int2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = (-172);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialLog(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -172
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[10];
      double double0 = MathUtils.factorialDouble(intArray0[1]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-1674);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialDouble(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,674
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 918;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 2614;
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-2647);
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,647
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(int0, (long) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      
      double double0 = MathUtils.binomialCoefficientLog(int1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
      
      boolean boolean0 = MathUtils.equals((double) int1, double0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)61;
      byteArray0[0] = byte0;
      double double0 = (-252.8747354);
      boolean boolean0 = MathUtils.equals(double0, double0, (int) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)61, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = 3061.60271918;
      int int0 = 4194304;
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equals(double0, double0, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equals((double) byteArray0[4], (double) byteArray0[4], (int) byteArray0[1]);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = 75.30922335747104;
      int int0 = 0;
      int int1 = MathUtils.pow(int0, (long) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      
      int int2 = MathUtils.compareTo((double) int1, double0, double0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = Double.NaN;
      int[] intArray0 = new int[6];
      boolean boolean0 = MathUtils.equals(double0, (double) intArray0[1], (double) intArray0[1]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[0] = double0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = 6227020800L;
      long long1 = MathUtils.addAndCheck(long0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(12454041600L, long1);
      
      int[] intArray0 = new int[6];
      int int0 = MathUtils.compareTo((double) intArray0[4], (double) long1, (double) intArray0[0]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 60;
      intArray0[1] = int0;
      int int1 = MathUtils.compareTo((double) intArray0[1], (double) intArray0[3], (double) intArray0[0]);
      assertArrayEquals(new int[] {0, 60, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = (-5504);
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -5,504
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[7];
      int int1 = (-75);
      intArray0[5] = int1;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(intArray0[5], int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -75, k = 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 1418;
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(2836, int1);
      
      int int2 = 2247;
      assertFalse(int2 == int1);
      
      double double0 = MathUtils.binomialCoefficientLog(int1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(1444.8518491075035, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-2825);
      int int1 = 167;
      double double0 = MathUtils.binomialCoefficientLog(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = (-2825);
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientLog(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = (byte)44;
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte)1, byte1);
      
      double double0 = MathUtils.binomialCoefficientLog((int) byte0, (int) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals(3.784189633918261, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 1604;
      int int1 = 12;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(5.810353702649776E29, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = MathUtils.hash(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(887503681, int0);
      
      short short0 = (short)1;
      double double0 = MathUtils.binomialCoefficientDouble(int0, (int) short0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8.87503681E8, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 1909;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 21;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = (-179);
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(32041, int1);
      
      long long0 = MathUtils.binomialCoefficient(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-2853);
      int int1 = 66;
      double double0 = MathUtils.binomialCoefficientDouble(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 21;
      int int1 = 15;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(54264.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 66;
      intArray0[3] = int0;
      int int1 = 0;
      int int2 = MathUtils.pow(intArray0[1], int1);
      assertArrayEquals(new int[] {0, 0, 0, 66, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      long long0 = MathUtils.binomialCoefficient(intArray0[3], int2);
      assertArrayEquals(new int[] {0, 0, 0, 66, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(66L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(int0, (long) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      
      long long0 = MathUtils.binomialCoefficient(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 927;
      int int1 = 348;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(int0, int0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short short0 = (short) (-1878);
      short short1 = MathUtils.indicator(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short) (-1), short1);
      
      long long0 = MathUtils.addAndCheck((long) short1, (long) short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int1 = MathUtils.addAndCheck(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = 2.0;
      double double1 = MathUtils.log(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = MathUtils.cosh(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(1.5430806348152437, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      short short0 = (short)37;
      double double0 = MathUtils.sinh((double) short0);
      assertEquals(5.859571186401306E15, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = 1183.0;
      byte byte0 = (byte) (-14);
      double double1 = MathUtils.normalizeAngle((double) byte0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1186.088393671301, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte byte0 = (byte)7;
      short short0 = MathUtils.sign((short) byte0);
      assertEquals((short)1, short0);
      
      float float0 = MathUtils.round((float) byte0, (int) short0);
      assertEquals(7.0F, float0, 0.01F);
  }
}
