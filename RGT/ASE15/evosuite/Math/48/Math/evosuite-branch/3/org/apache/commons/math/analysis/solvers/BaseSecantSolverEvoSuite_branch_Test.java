/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:14:20 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.ConvergenceException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseSecantSolverEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 261;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-176.23799148069142);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertEquals((-4.6343511630325324E-7), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(261, pegasusSolver0.getMaxEvaluations());
      assertEquals(27, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(42.381004259654304, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-176.23799148069142), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(261.0, pegasusSolver0.getMax(), 0.01D);
      
      AllowedSolution allowedSolution1 = AllowedSolution.ABOVE_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, (double) int0, allowedSolution1);
      assertEquals(7.55671956812965E-7, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertNotSame(allowedSolution1, allowedSolution0);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(130.49999976828244, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(261, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-4.6343511630325324E-7), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(8, pegasusSolver0.getEvaluations());
      assertEquals(261.0, pegasusSolver0.getMax(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      int int0 = 279;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-1.0);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertEquals((-2.4472758395581545E-8), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(139.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(23, pegasusSolver0.getEvaluations());
      assertEquals((-1.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals(279.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(279, pegasusSolver0.getMaxEvaluations());
      
      AllowedSolution allowedSolution1 = AllowedSolution.BELOW_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, (double) int0, allowedSolution1);
      assertEquals((-2.4472758395581545E-8), double2, 0.01D);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertEquals(7, pegasusSolver0.getEvaluations());
      assertEquals((-2.4472758395581545E-8), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(139.4999999877636, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(279.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(279, pegasusSolver0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      int int0 = 266;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-1380.3182955);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertEquals(2.3671677051963444E-7, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(266, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-557.15914775), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-1380.3182955), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(28, pegasusSolver0.getEvaluations());
      assertEquals(266.0, pegasusSolver0.getMax(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      int int0 = 279;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-1.0);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertEquals((-2.4472758395581545E-8), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(279.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(23, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(279, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(139.0, pegasusSolver0.getStartValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      
      int int0 = 699;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-1847.19162565253);
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, (double) int0);
      assertEquals((-1.9180374923871173E-7), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(699.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(699.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-1847.19162565253), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(699, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(26, regulaFalsiSolver0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 37.930599839805296;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(37.930599839805296, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(37.930599839805296, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      
      int int0 = 1381;
      double[] doubleArray0 = new double[3];
      double double1 = 1.0E-6;
      doubleArray0[2] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 1381.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = (PolynomialFunction)polynomialFunction0.derivative();
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertArrayEquals(new double[] {0.0, 0.0, 1381.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertEquals(2, polynomialFunction0.degree());
      assertEquals(1, polynomialFunction1.degree());
      
      double double2 = (-1464.753925128292);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction1, double2, double1, allowedSolution0);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertArrayEquals(new double[] {0.0, 0.0, 1381.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertEquals(2, polynomialFunction0.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(37.930599839805296, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(4, regulaFalsiSolver0.getEvaluations());
      assertEquals((-732.3769620641459), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1381, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-1464.753925128292), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(37.930599839805296, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 5.3019045185522256;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(5.3019045185522256, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(5.3019045185522256, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      
      int int0 = 1369;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1369.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction0.degree());
      
      double double1 = (-1454.57);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, (double) int0, allowedSolution0);
      assertEquals(2.2737367544323206E-13, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertArrayEquals(new double[] {0.0, 1369.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction0.degree());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1454.57), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1369, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(5.3019045185522256, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(4, regulaFalsiSolver0.getEvaluations());
      assertEquals((-42.78500000000008), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1369.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(5.3019045185522256, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 0.9608362210075;
      double double1 = 1.0E-6;
      double double2 = (-5885.99);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double1, double2, double0);
      assertNotNull(harmonicOscillator0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double2);
      assertNotNull(illinoisSolver0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals((-5885.99), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      
      int int0 = 38;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, (double) int0, double0, allowedSolution0);
      assertEquals(5.450990540420009, double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.9608362210075, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getMin(), 0.01D);
      assertEquals(38.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(22, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(38, illinoisSolver0.getMaxEvaluations());
      assertEquals((-5885.99), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 0.7649706564795763;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.7649706564795763, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.7649706564795763, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      
      int int0 = 1387;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.7649706564795763, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction0.degree());
      
      double double1 = (-1459.52795107412);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, (double) int0, allowedSolution0);
      assertEquals((-1.0097419586828951E-28), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertArrayEquals(new double[] {0.0, 0.7649706564795763, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1387, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.7649706564795763, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.7649706564795763, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-36.26397553705988), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(4, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1459.52795107412), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1387.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1, polynomialFunction0.degree());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = (-11.04);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-11.04), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-11.04), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      
      int int0 = 1368;
      double[] doubleArray0 = new double[10];
      double double1 = 1.0E-6;
      doubleArray0[1] = double1;
      doubleArray0[2] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1.0E-6, 1368.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = (PolynomialFunction)polynomialFunction0.derivative();
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertArrayEquals(new double[] {0.0, 1.0E-6, 1368.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertEquals(2, polynomialFunction0.degree());
      assertEquals(1, polynomialFunction1.degree());
      
      double double2 = (-1477.084123640799);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction1, double2, doubleArray0[1], allowedSolution0);
      assertEquals((-3.6549707602323847E-10), double3, 0.01D);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertArrayEquals(new double[] {0.0, 1.0E-6, 1368.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertEquals(2, polynomialFunction0.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(1368, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals((-738.5420613203994), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-11.04), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-11.04), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1477.084123640799), regulaFalsiSolver0.getMin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-25.712390739187263);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals((-25.712390739187263), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-25.712390739187263), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      
      int int0 = 153;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0);
      assertEquals((-4.650038551196044E-46), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-25.712390739187263), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-25.712390739187263), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(153, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-25.712390739187263), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(63.64380463040637, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(114, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(153.0, regulaFalsiSolver0.getMax(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-0.0013888888689039883);
      int int0 = 2018;
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, (double) int0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals((-0.0013888888689039883), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(2018.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-0.0013888888689039883), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      
      // Undeclared exception!
      try {
        double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) expm1_0, double0, (double) int0, double0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = (-5.931496127338068);
      double double1 = 1.0E-6;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double1, double0, double0);
      assertNotNull(harmonicOscillator0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertFalse(double0 == double1);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals((-5.931496127338068), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 27;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, (double) int0, double0, allowedSolution0);
      assertEquals(15.154200201339433, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-5.931496127338068), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(27, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getMin(), 0.01D);
      assertEquals(14, illinoisSolver0.getEvaluations());
      assertEquals(27.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-5.931496127338068), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = 568.6002313894436;
      int int0 = 165;
      double double1 = (-2833.5968022987317);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, double0, allowedSolution0);
      assertEquals(1.2443281237509207E-7, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-1132.498285454644), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(27, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(165, pegasusSolver0.getMaxEvaluations());
      assertEquals(568.6002313894436, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-2833.5968022987317), pegasusSolver0.getMin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      int int0 = 250;
      Identity identity0 = new Identity();
      assertNotNull(identity0);
      
      double double0 = (-570.0467975);
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) identity0, double0, (double) int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-160.02339875), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(250.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-570.0467975), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(250, pegasusSolver0.getMaxEvaluations());
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double1);
      assertNotNull(illinoisSolver0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-160.02339875), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(250.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-570.0467975), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(250, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) identity0, double0, double1, allowedSolution0);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-160.02339875), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(250.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-570.0467975), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(250, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-570.0467975), illinoisSolver0.getMin(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(250, illinoisSolver0.getMaxEvaluations());
      assertEquals((-285.02339875), illinoisSolver0.getStartValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      
      int int0 = 7;
      Sigmoid sigmoid0 = new Sigmoid((double) int0, (double) int0);
      assertNotNull(sigmoid0);
      
      UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
      assertNotNull(univariateRealFunction0);
      
      double double0 = regulaFalsiSolver0.solve(int0, univariateRealFunction0, (double) int0, (double) int0, (double) int0);
      assertEquals(7.0, double0, 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(7.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(7.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(7, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertEquals(7.0, regulaFalsiSolver0.getMin(), 0.01D);
  }
}
