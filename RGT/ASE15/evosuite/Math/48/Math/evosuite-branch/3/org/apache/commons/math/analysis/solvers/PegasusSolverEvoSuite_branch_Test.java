/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:45 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class PegasusSolverEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 0.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      double double1 = pegasusSolver0.getStartValue();
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      PegasusSolver pegasusSolver1 = new PegasusSolver(double0, double0, double1);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver1.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver1.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver1.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver1.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver1.getEvaluations());
      assertEquals(0, pegasusSolver1.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver1.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver1.getAbsoluteAccuracy(), 0.01D);
      assertNotSame(pegasusSolver0, pegasusSolver1);
      assertNotSame(pegasusSolver1, pegasusSolver0);
      assertNotNull(pegasusSolver1);
      assertTrue(double1 == double0);
      assertFalse(pegasusSolver0.equals((Object)pegasusSolver1));
      assertTrue(double0 == double1);
      assertFalse(pegasusSolver1.equals((Object)pegasusSolver0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = 0.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      double double1 = pegasusSolver0.getStartValue();
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      PegasusSolver pegasusSolver1 = new PegasusSolver(double1, double1);
      assertEquals(0.0, pegasusSolver1.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver1.getMax(), 0.01D);
      assertEquals(0, pegasusSolver1.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver1.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver1.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver1.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver1.getMin(), 0.01D);
      assertEquals(0, pegasusSolver1.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertNotSame(pegasusSolver1, pegasusSolver0);
      assertNotSame(pegasusSolver0, pegasusSolver1);
      assertNotNull(pegasusSolver1);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertFalse(pegasusSolver1.equals((Object)pegasusSolver0));
      assertFalse(pegasusSolver0.equals((Object)pegasusSolver1));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
  }
}
