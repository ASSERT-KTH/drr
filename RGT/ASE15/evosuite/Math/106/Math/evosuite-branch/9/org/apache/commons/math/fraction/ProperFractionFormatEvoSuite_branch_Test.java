/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:54:55 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math.fraction.Fraction;
import org.apache.commons.math.fraction.ProperFractionFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ProperFractionFormatEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ProperFractionFormat properFractionFormat0 = null;
      try {
        properFractionFormat0 = new ProperFractionFormat(numberFormat0, numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // whole format can not be null.
         //
      }
  }

  @Test(timeout = 4000)
  public void test1() {}
//   @Test(timeout = 4000)
//   public void test1()  throws Throwable  {
//       String string0 = "@-sP[}l";
//       ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
//       assertNotNull(choiceFormat0);
//       assertEquals(false, choiceFormat0.isParseIntegerOnly());
//       assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
//       assertEquals("", choiceFormat0.toPattern());
//       assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
//       assertEquals(0, choiceFormat0.getMinimumFractionDigits());
//       assertEquals(3, choiceFormat0.getMaximumFractionDigits());
//       assertEquals(true, choiceFormat0.isGroupingUsed());
//       
//       DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
//       assertNotNull(decimalFormat0);
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals("#,##0.###", decimalFormat0.toPattern());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals("#\u00A0##0,###", decimalFormat0.toLocalizedPattern());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(3, decimalFormat0.getMaximumFractionDigits());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       
//       ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) choiceFormat0, (NumberFormat) choiceFormat0, (NumberFormat) decimalFormat0);
//       assertNotNull(properFractionFormat0);
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals("#,##0.###", decimalFormat0.toPattern());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals("#\u00A0##0,###", decimalFormat0.toLocalizedPattern());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(3, decimalFormat0.getMaximumFractionDigits());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals(false, choiceFormat0.isParseIntegerOnly());
//       assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
//       assertEquals("", choiceFormat0.toPattern());
//       assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
//       assertEquals(0, choiceFormat0.getMinimumFractionDigits());
//       assertEquals(3, choiceFormat0.getMaximumFractionDigits());
//       assertEquals(true, choiceFormat0.isGroupingUsed());
//       
//       String string1 = "/ ";
//       assertNotSame(string1, string0);
//       
//       try {
//         Object object0 = properFractionFormat0.parseObject(string1);
//         fail("Expecting exception: ParseException");
//       
//       } catch(ParseException e) {
//          //
//          // Format.parseObject(String) failed
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = "!/v$";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
      assertNotNull(choiceFormat0);
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals("", choiceFormat0.toPattern());
      
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) choiceFormat0);
      assertNotNull(properFractionFormat0);
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals("", choiceFormat0.toPattern());
      
      try {
        Object object0 = properFractionFormat0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      int int0 = 2;
      String string0 = properFractionFormat0.format((Object) int0);
      assertEquals("2 0 / 1", string0);
      assertNotNull(string0);
      
      Fraction fraction0 = (Fraction)properFractionFormat0.parseObject(string0);
      assertNotNull(fraction0);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test4() {}
//   @Test(timeout = 4000)
//   public void test4()  throws Throwable  {
//       DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
//       assertNotNull(decimalFormat0);
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("#,##0", decimalFormat0.toPattern());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(true, decimalFormat0.isParseIntegerOnly());
//       assertEquals("#\u00A0##0", decimalFormat0.toLocalizedPattern());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       
//       ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
//       assertNotNull(properFractionFormat0);
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("#,##0", decimalFormat0.toPattern());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(true, decimalFormat0.isParseIntegerOnly());
//       assertEquals("#\u00A0##0", decimalFormat0.toLocalizedPattern());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       
//       String string0 = "/ ";
//       int int0 = 0;
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertNotNull(parsePosition0);
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       assertEquals(0, parsePosition0.getIndex());
//       
//       Object object0 = properFractionFormat0.parseObject(string0, parsePosition0);
//       assertNull(object0);
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("#,##0", decimalFormat0.toPattern());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(true, decimalFormat0.isParseIntegerOnly());
//       assertEquals("#\u00A0##0", decimalFormat0.toLocalizedPattern());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(0, parsePosition0.getErrorIndex());
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
//   }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "$d*W%=^t{YOKPk5";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
      assertNotNull(choiceFormat0);
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) choiceFormat0);
      assertNotNull(properFractionFormat0);
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      
      int int0 = 1368;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals(1368, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1368,errorIndex=-1]", parsePosition0.toString());
      
      Fraction fraction0 = (Fraction)properFractionFormat0.parseObject(string0, parsePosition0);
      assertNotNull(fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1367, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1367,errorIndex=1367]", parsePosition0.toString());
      assertEquals(1367, parsePosition0.getErrorIndex());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#.##0,###", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
      assertNotNull(properFractionFormat0);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#.##0,###", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = properFractionFormat0.format((Object) integer0);
      assertEquals("0 / 1", string0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(string0);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#.##0,###", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      String string0 = "3-94[X]4tEo\"OKS/Ey";
      try {
        Fraction fraction0 = properFractionFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable fraction number: \"3-94[X]4tEo\"OKS/Ey\"
         //
      }
  }
}
