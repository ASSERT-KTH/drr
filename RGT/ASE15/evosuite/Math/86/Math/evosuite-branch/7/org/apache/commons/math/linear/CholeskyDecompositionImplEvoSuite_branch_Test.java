/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:18:53 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.CholeskyDecompositionImpl;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.DenseRealMatrix;
import org.apache.commons.math.linear.NonSquareMatrixException;
import org.apache.commons.math.linear.NotPositiveDefiniteMatrixException;
import org.apache.commons.math.linear.NotSymmetricMatrixException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CholeskyDecompositionImplEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) realMatrixImpl0, doubleArray0[0], doubleArray0[0]);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(choleskyDecompositionImpl0);
      
      double double0 = choleskyDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) realMatrixImpl0, doubleArray0[0], doubleArray0[0]);
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(choleskyDecompositionImpl0);
      
      DenseRealMatrix denseRealMatrix0 = (DenseRealMatrix)choleskyDecompositionImpl0.getL();
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1, denseRealMatrix0.getColumnDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(1, denseRealMatrix0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(denseRealMatrix0);
      
      DenseRealMatrix denseRealMatrix1 = (DenseRealMatrix)choleskyDecompositionImpl0.getLT();
      assertTrue(denseRealMatrix1.equals((Object)denseRealMatrix0));
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, denseRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix1.isSquare());
      assertEquals(1, denseRealMatrix1.getRowDimension());
      assertEquals(1, denseRealMatrix1.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(denseRealMatrix1, denseRealMatrix0);
      assertNotNull(denseRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) realMatrixImpl0, doubleArray0[0], doubleArray0[0]);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(choleskyDecompositionImpl0);
      
      DenseRealMatrix denseRealMatrix0 = (DenseRealMatrix)choleskyDecompositionImpl0.getL();
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, denseRealMatrix0.getColumnDimension());
      assertEquals(1, denseRealMatrix0.getRowDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(denseRealMatrix0);
      
      DenseRealMatrix denseRealMatrix1 = (DenseRealMatrix)choleskyDecompositionImpl0.getL();
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(true, denseRealMatrix1.isSquare());
      assertEquals(1, denseRealMatrix1.getColumnDimension());
      assertEquals(0.0, denseRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(1, denseRealMatrix1.getRowDimension());
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertSame(denseRealMatrix1, denseRealMatrix0);
      assertNotNull(denseRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 2;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      double double0 = (-315.22398373508867);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) realMatrixImpl0, double0, double0);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertNotNull(choleskyDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      //  // Unstable assertion: assertEquals(3, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapLog10ToSelf();
      //  // Unstable assertion: assertEquals(3, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector1.getEpsilon(), 0.01D);
      //  // Unstable assertion: assertEquals(3, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0);
      //  // Unstable assertion: assertEquals(3, openMapRealMatrix0.getColumnDimension());
      //  // Unstable assertion: assertEquals(3, openMapRealMatrix0.getRowDimension());
      //  // Unstable assertion: assertEquals(true, openMapRealMatrix0.isSquare());
      //  // Unstable assertion: assertEquals(3, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector1.getEpsilon(), 0.01D);
      //  // Unstable assertion: assertEquals(3, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotNull(openMapRealMatrix0);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) openMapRealMatrix0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // not symmetric matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(3, openMapRealMatrix0.getRowDimension());
      assertEquals(3, openMapRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) openMapRealMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // not positive definite matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 5x1 matrix was provided instead of a square matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) realMatrixImpl0, doubleArray0[0], doubleArray0[0]);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(choleskyDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = choleskyDecompositionImpl0.getSolver();
      assertEquals(true, decompositionSolver0.isNonSingular());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(decompositionSolver0);
  }
}
