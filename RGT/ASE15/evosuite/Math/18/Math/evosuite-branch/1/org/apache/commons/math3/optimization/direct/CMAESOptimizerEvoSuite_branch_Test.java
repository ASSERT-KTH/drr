/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:42:01 GMT 2014
 */

package org.apache.commons.math3.optimization.direct;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.SimplePointChecker;
import org.apache.commons.math3.optimization.SimpleValueChecker;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CMAESOptimizerEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 8;
      double[] doubleArray0 = new double[1];
      boolean boolean0 = false;
      int[] intArray0 = new int[7];
      intArray0[4] = int0;
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 8, 0, 0}, intArray0);
      assertNotNull(well19937c0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(intArray0[2], doubleArray0, int0, (double) intArray0[4], boolean0, int0, intArray0[4], (RandomGenerator) well19937c0, boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 8, 0, 0}, intArray0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(intArray0[1], (RandomGenerator) well19937c0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 8, 0, 0}, intArray0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, intArray0[5], unitSphereRandomVectorGenerator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 8, 0, 0}, intArray0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(intArray0[4], (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0], doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 8, 0, 0}, intArray0);
      assertEquals(5, cMAESOptimizer0.getEvaluations());
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(8, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      int int1 = 1593;
      boolean boolean0 = true;
      int[] intArray0 = new int[7];
      intArray0[0] = int1;
      doubleArray0[0] = (double) intArray0[0];
      intArray0[4] = int1;
      Well19937c well19937c0 = new Well19937c(intArray0);
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 0}, intArray0);
      //  // Unstable assertion: assertNotNull(well19937c0);
      
      boolean boolean1 = false;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(intArray0[4]);
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 0}, intArray0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      
      ConvergenceChecker<PointValuePair> convergenceChecker0 = cMAESOptimizer0.getConvergenceChecker();
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 0}, intArray0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(convergenceChecker0);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int0, doubleArray0, int1, (double) int0, boolean0, int1, int1, (RandomGenerator) well19937c0, boolean1, convergenceChecker0);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      //  // Unstable assertion: assertArrayEquals(new double[] {1593.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 0}, intArray0);
      //  // Unstable assertion: assertNull(cMAESOptimizer1.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer1.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(cMAESOptimizer1);
      
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(intArray0[1], (RandomGenerator) well19937c0);
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 0}, intArray0);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, intArray0[5], unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 0}, intArray0);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(intArray0[4], (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      //  // Unstable assertion: assertArrayEquals(new double[] {1593.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 0}, intArray0);
      //  // Unstable assertion: assertEquals(1594, cMAESOptimizer1.getEvaluations());
      //  // Unstable assertion: assertEquals(1593, cMAESOptimizer1.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, cMAESOptimizer1.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[6];
      int int1 = 20;
      doubleArray0[5] = (double) int1;
      boolean boolean0 = true;
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>();
      assertEquals(1.1102230246251565E-14, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(2.2250738585072014E-306, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertNotNull(simplePointChecker0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int1, doubleArray0[0], boolean0, int0, int0, (RandomGenerator) well512a0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 20.0}, doubleArray0, 0.01);
      assertEquals(1.1102230246251565E-14, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(2.2250738585072014E-306, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1, (RandomGenerator) well512a0);
      assertFalse(int1 == int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray2, int1, int0, unitSphereRandomVectorGenerator0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      doubleArray0[0] = doubleArray0[5];
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0]);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {20.0, 0.0, 0.0, 0.0, 0.0, 20.0}, doubleArray0, 0.01);
      assertEquals(1.1102230246251565E-14, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(2.2250738585072014E-306, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(20, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(21, cMAESOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      double double0 = 1729.3175634656;
      doubleArray0[0] = double0;
      int int1 = 1593;
      boolean boolean0 = true;
      int[] intArray0 = new int[17];
      intArray0[6] = int1;
      Well19937c well19937c0 = new Well19937c(intArray0);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertNotNull(well19937c0);
      
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker();
      //  // Unstable assertion: assertEquals(1.1102230246251565E-14, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(2.2250738585072014E-306, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      //  // Unstable assertion: assertNotNull(simpleValueChecker0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int1, (double) int1, boolean0, int0, int1, (RandomGenerator) well19937c0, boolean0, (ConvergenceChecker<PointValuePair>) simpleValueChecker0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1729.3175634656}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(1.1102230246251565E-14, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(2.2250738585072014E-306, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(intArray0[1], (RandomGenerator) well19937c0);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, intArray0[5], unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(intArray0[6], (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1729.3175634656}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(1.1102230246251565E-14, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(2.2250738585072014E-306, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(1594, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(1593, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      boolean boolean0 = false;
      int int1 = (-523);
      int[] intArray0 = new int[7];
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(well19937c0);
      
      int int2 = 4;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(intArray0[2], doubleArray0, int2, (double) int1, boolean0, int0, intArray0[4], (RandomGenerator) well19937c0, boolean0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(intArray0[1], (RandomGenerator) well19937c0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int1, intArray0[5], unitSphereRandomVectorGenerator0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      int int3 = 10;
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int3, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0], doubleArray0, doubleArray0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(5, cMAESOptimizer0.getEvaluations());
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      boolean boolean0 = false;
      int[] intArray0 = new int[7];
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(well19937c0);
      
      int int1 = 4;
      intArray0[2] = int1;
      intArray0[4] = int1;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(intArray0[2], doubleArray0, int1, doubleArray0[0], boolean0, int0, intArray0[4], (RandomGenerator) well19937c0, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 4, 0, 4, 0, 0}, intArray0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      
      doubleArray0[0] = (double) intArray0[4];
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(intArray0[1], (RandomGenerator) well19937c0);
      assertArrayEquals(new int[] {0, 0, 4, 0, 4, 0, 0}, intArray0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, intArray0[5], unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertArrayEquals(new int[] {0, 0, 4, 0, 4, 0, 0}, intArray0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(intArray0[2], (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0], doubleArray0, doubleArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {4.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 4, 0, 4, 0, 0}, intArray0);
      assertEquals(4, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(5, cMAESOptimizer0.getEvaluations());
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      int int1 = 1593;
      boolean boolean0 = true;
      int[] intArray0 = new int[7];
      intArray0[4] = int1;
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 1593, 0, 0}, intArray0);
      assertNotNull(well19937c0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(intArray0[4]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 1593, 0, 0}, intArray0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      ConvergenceChecker<PointValuePair> convergenceChecker0 = cMAESOptimizer0.getConvergenceChecker();
      assertArrayEquals(new int[] {0, 0, 0, 0, 1593, 0, 0}, intArray0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(convergenceChecker0);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int0, doubleArray0, int1, (double) int0, boolean0, int1, int1, (RandomGenerator) well19937c0, boolean0, convergenceChecker0);
      assertFalse(int1 == int0);
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(int0 == int1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 1593, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer1.getEvaluations());
      assertNull(cMAESOptimizer1.getGoalType());
      assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      assertNotNull(cMAESOptimizer1);
      
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(intArray0[1], (RandomGenerator) well19937c0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 1593, 0, 0}, intArray0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, intArray0[5], unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 1593, 0, 0}, intArray0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(intArray0[4], (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0);
      assertFalse(int1 == int0);
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(int0 == int1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 1593, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(5, cMAESOptimizer1.getEvaluations());
      assertEquals(1593, cMAESOptimizer1.getMaxEvaluations());
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer1.getGoalType());
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      boolean boolean0 = false;
      int[] intArray0 = new int[7];
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(well19937c0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(intArray0[2], doubleArray0, intArray0[0], (double) intArray0[4], boolean0, int0, intArray0[4], (RandomGenerator) well19937c0, boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      
      int int1 = 30000;
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(intArray0[1], (RandomGenerator) well19937c0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, intArray0[5], unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(30000, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(1, cMAESOptimizer0.getEvaluations());
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      int int1 = 1593;
      boolean boolean0 = true;
      int[] intArray0 = new int[7];
      intArray0[0] = int1;
      doubleArray0[0] = (double) intArray0[0];
      intArray0[4] = int1;
      intArray0[6] = int1;
      Well19937c well19937c0 = new Well19937c(intArray0);
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 1593}, intArray0);
      //  // Unstable assertion: assertNotNull(well19937c0);
      
      byte byte0 = (byte)59;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(intArray0[4]);
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 1593}, intArray0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      
      ConvergenceChecker<PointValuePair> convergenceChecker0 = cMAESOptimizer0.getConvergenceChecker();
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 1593}, intArray0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(convergenceChecker0);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer((int) byte0, doubleArray0, intArray0[6], (double) intArray0[4], boolean0, intArray0[3], intArray0[6], (RandomGenerator) well19937c0, boolean0, convergenceChecker0);
      //  // Unstable assertion: assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      //  // Unstable assertion: assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      //  // Unstable assertion: assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 1593}, intArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1593.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNull(cMAESOptimizer1.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer1.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(cMAESOptimizer1);
      
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(intArray0[1], (RandomGenerator) well19937c0);
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 1593}, intArray0);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, intArray0[5], unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 1593}, intArray0);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(intArray0[4], (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0);
      //  // Unstable assertion: assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      //  // Unstable assertion: assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      //  // Unstable assertion: assertArrayEquals(new int[] {1593, 0, 0, 0, 1593, 0, 1593}, intArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1593.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, cMAESOptimizer1.getGoalType());
      //  // Unstable assertion: assertEquals(1594, cMAESOptimizer1.getEvaluations());
      //  // Unstable assertion: assertEquals(1593, cMAESOptimizer1.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      int[] intArray0 = new int[17];
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(well19937c0);
      
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker();
      assertEquals(2.2250738585072014E-306, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1.1102230246251565E-14, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertNotNull(simpleValueChecker0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, intArray0[5], (double) intArray0[6], boolean0, int0, intArray0[5], (RandomGenerator) well19937c0, boolean0, (ConvergenceChecker<PointValuePair>) simpleValueChecker0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(2.2250738585072014E-306, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1.1102230246251565E-14, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(2.2250738585072014E-306, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1.1102230246251565E-14, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNotNull(cMAESOptimizer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 5;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      int[] intArray0 = new int[17];
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(well19937c0);
      
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker();
      assertEquals(1.1102230246251565E-14, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(2.2250738585072014E-306, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertNotNull(simpleValueChecker0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(intArray0[3], doubleArray0, intArray0[3], doubleArray0[0], boolean0, int0, intArray0[3], (RandomGenerator) well19937c0, boolean0, (ConvergenceChecker<PointValuePair>) simpleValueChecker0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(1.1102230246251565E-14, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(2.2250738585072014E-306, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertNotNull(cMAESOptimizer0);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1.1102230246251565E-14, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(2.2250738585072014E-306, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 2637;
      double[] doubleArray0 = new double[2];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      boolean boolean0 = false;
      int[] intArray0 = new int[7];
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(well19937c0);
      
      int int1 = 4;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(intArray0[2], doubleArray0, int1, (double) intArray0[4], boolean0, int0, intArray0[4], (RandomGenerator) well19937c0, boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(intArray0[1], (RandomGenerator) well19937c0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, intArray0[5], unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      int int2 = 10;
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int2, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0], doubleArray0, doubleArray0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(5, cMAESOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(10, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(pointValuePair0);
  }
}
