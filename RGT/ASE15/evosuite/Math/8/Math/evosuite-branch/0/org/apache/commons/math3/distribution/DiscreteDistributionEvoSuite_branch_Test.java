/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:07:17 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class DiscreteDistributionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = 1229.9876;
      Double double1 = new Double(double0);
      assertEquals(1229.9876, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) double0, double1);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      int int0 = (-99516382);
      try {
        Object[] objectArray0 = discreteDistribution0.sample(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-99,516,382)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = 3990.849858170159;
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) double0, (Double) double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(pair0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) linkedList0);
      assertEquals(2, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      int int0 = 2053;
      Object[] objectArray0 = discreteDistribution0.sample(int0);
      assertEquals(2, linkedList0.size());
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = 1229.9876;
      Double double1 = new Double(double0);
      assertEquals(1229.9876, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) double0, double1);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      List<Pair<Double, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      double double0 = 3990.849858170159;
      Double double1 = null;
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, (Double) double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Double double2 = new Double(double0);
      assertEquals(3990.849858170159, (double)double2, 0.01D);
      assertTrue(double2.equals((Object)double0));
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      double double3 = discreteDistribution0.probability(double2);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertTrue(double2.equals((Object)double0));
      assertFalse(double2.equals((Object)double3));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      double double0 = 3990.849858170159;
      Double double1 = null;
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) double0, (Double) double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      double double2 = discreteDistribution0.probability(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      double double0 = 3990.849858170159;
      Double double1 = null;
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, (Double) double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      double double2 = discreteDistribution0.probability(double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = 3990.849858170159;
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) double0, (Double) double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      double double1 = discreteDistribution0.probability((Double) double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      long long0 = (-3601L);
      Long long1 = new Long(long0);
      assertEquals((-3601L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Double double0 = new Double((double) long0);
      assertEquals((-3601.0), (double)double0, 0.01D);
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>((List<Pair<Long, Double>>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,601 is smaller than the minimum (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      double double0 = 3990.849858170159;
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) double0, (Double) double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      int int0 = (-519);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      discreteDistribution0.reseedRandomGenerator((long) int0);
      assertEquals(1, linkedList0.size());
  }
}
