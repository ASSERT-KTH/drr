/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:28:07 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class NormalDistributionImplEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 418.0;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(double0, double0, double0);
      assertEquals(418.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(418.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      long long0 = 651L;
      double double1 = normalDistributionImpl0.getInitialDomain(long0);
      assertEquals(836.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(418.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(418.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 0.1818181574344635;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(double0, double0, double0);
      assertEquals(0.1818181574344635, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.1818181574344635, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double1 = normalDistributionImpl0.getInitialDomain(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.1818181574344635, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.1818181574344635, normalDistributionImpl0.getMean(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 0.097;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double1 = normalDistributionImpl0.getDomainLowerBound(double0);
      assertEquals((-1.7976931348623157E308), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      
      double double2 = normalDistributionImpl0.getDomainUpperBound(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 0.1818181574344635;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(double0, double0, double0);
      assertEquals(0.1818181574344635, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.1818181574344635, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double1 = 1.0;
      double double2 = normalDistributionImpl0.inverseCumulativeProbability(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.1818181574344635, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.1818181574344635, normalDistributionImpl0.getStandardDeviation(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = 0.0;
      double double1 = normalDistributionImpl0.inverseCumulativeProbability(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      int int0 = 1752;
      double double0 = normalDistributionImpl0.cumulativeProbability((double) int0);
      assertEquals(1.0, double0, 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = (-2611.9976358169);
      double double1 = normalDistributionImpl0.cumulativeProbability(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      long long0 = 651L;
      NormalDistributionImpl normalDistributionImpl0 = null;
      try {
        normalDistributionImpl0 = new NormalDistributionImpl((double) long0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 is smaller than, or equal to, the minimum (0): standard deviation (-179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = normalDistributionImpl0.getMean();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      
      double double1 = normalDistributionImpl0.density(double0);
      assertEquals(0.3989422804014327, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 418.0;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(double0, double0, double0);
      assertEquals(418.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(418.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double1 = normalDistributionImpl0.getStandardDeviation();
      assertEquals(418.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(418.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(418.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
  }

  //@Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 418.0;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(double0, double0, double0);
      assertEquals(418.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(418.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double1 = normalDistributionImpl0.sample();
      assertEquals(418.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(418.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(418.0, normalDistributionImpl0.getMean(), 0.01D);
      
      double double2 = normalDistributionImpl0.cumulativeProbability(double1);
      assertEquals(0.5, double2, 0.01D);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(418.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(418.0, normalDistributionImpl0.getMean(), 0.01D);
      
      double double3 = normalDistributionImpl0.inverseCumulativeProbability(double2);
      assertEquals(418.0, double3, 0.01D);
      assertTrue(double3 == double1);
      assertTrue(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double0);
      assertTrue(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertEquals(418.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(418.0, normalDistributionImpl0.getMean(), 0.01D);
  }
}
