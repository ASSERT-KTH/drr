/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:45:26 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = 0.6675875016520408;
      double double1 = FastMath.sinh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(0.7182919222700779, double1, 0.01D);
      
      double double2 = (-746.91);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.exp(double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      
      double double4 = FastMath.max(double3, double1);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertTrue(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertTrue(double4 == double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 0.008333333333333333;
      double double2 = FastMath.max(double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.008333333333333333, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = 0.0F;
      float float2 = FastMath.max(float0, float1);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = (-1.0);
      long long0 = FastMath.round(double0);
      assertEquals((-1L), long0);
      
      float float0 = FastMath.max((float) long0, (float) long0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  //@Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = 4294967295L;
      int int0 = (-1);
      float float0 = FastMath.max((float) long0, (float) int0);
      assertEquals(4.2949673E9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 429;
      int int1 = 591;
      long long0 = FastMath.max((long) int1, (long) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(591L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 2026;
      int int1 = 0;
      int int2 = FastMath.max(int0, int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(2026, int2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = (-1963.885420078961);
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.min(double1, double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = (-1739.2176);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.min(double1, double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float float0 = (-958.177F);
      float float1 = 3152.2607F;
      float float2 = FastMath.min(float0, float1);
      assertTrue(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
      assertEquals((-958.177F), float2, 0.01F);
      
      float float3 = FastMath.min(float1, float2);
      assertTrue(float3 == float2);
      assertFalse(float3 == float1);
      assertTrue(float3 == float0);
      assertTrue(float0 == float3);
      assertTrue(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float1 == float3);
      assertTrue(float2 == float3);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
      assertEquals((-958.177F), float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 429;
      int int1 = FastMath.min(int0, int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(429, int1);
      
      float float1 = FastMath.min(float0, (float) int1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = (-7L);
      long long1 = 9193070505571053912L;
      long long2 = FastMath.min(long1, long0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertTrue(long0 == long2);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-7L), long2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 38;
      int int1 = 325;
      int int2 = FastMath.min(int1, int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(38, int2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float float0 = 1930.5F;
      double double0 = FastMath.rint((double) float0);
      assertEquals(1930.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = 1517.5;
      double double1 = FastMath.rint(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1518.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = 12.740435282076758;
      double double1 = FastMath.toRadians(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.22236254380949194, double1, 0.01D);
      
      double double2 = FastMath.rint(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = (-1739.2176);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1739.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.floor(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = (-4949.098682566872);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      long long0 = FastMath.round(double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = (-2693.184202);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.floor(double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.pow(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = 1365.077;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.nextAfter(double1, double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertEquals((-0.9999999999999999), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.toDegrees(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-57.29577951308232), double1, 0.01D);
      
      double double2 = 1365.077;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.nextAfter(double1, double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-57.295779513082316), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = (-4949.098682566872);
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.918275994162203), double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.nextAfter(double2, double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertEquals((-4.9E-324), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 790;
      int int1 = FastMath.max(int0, int0);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertEquals(790, int1);
      
      double double0 = FastMath.acos((double) int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.nextAfter(double0, double0);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float float0 = (-3033.2F);
      float float1 = FastMath.abs(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(3033.2F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      float float0 = FastMath.abs((float) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 2234;
      long long0 = FastMath.abs((long) int0);
      assertEquals(2234L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = (-1);
      int int1 = FastMath.round((float) int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1), int1);
      
      int int2 = FastMath.abs(int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.toDegrees(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2.8E-322), double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-6.554705304481029E-108), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.toDegrees(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals((-2.8E-322), double1, 0.01D);
      
      double double2 = FastMath.ulp(double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(4.9E-324, double2, 0.01D);
      
      double double3 = FastMath.acos(double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = (-1.3450008618314016);
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = (-1);
      int int1 = FastMath.round((float) int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1), int1);
      
      double double0 = FastMath.acos((double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(3.141592653589793, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.asin(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sinh(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.cosh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(1.0, double2, 0.01D);
      
      double double3 = FastMath.asin(double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = (-1963.885420078961);
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = 1.8014398509481988E16;
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.exp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.718281828459045, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-0.9117339147869651), double2, 0.01D);
      
      double double3 = 0.0;
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      
      double double4 = FastMath.atan2(double2, double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertEquals((-1.5707963267948966), double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = 1.0;
      double double1 = 0.0;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = 593.1195860478;
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = (-1739.2176);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      float float0 = (-48.4F);
      double double2 = FastMath.atan2((double) float0, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-3.141592653589793), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = (-2693.184202);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      long long0 = 1952L;
      long long1 = FastMath.min(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(1952L, long1);
      
      double double2 = FastMath.atan2((double) long1, double1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-2.356194490192345), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = 2073.84;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(7.637157240201254, double1, 0.01D);
      
      double double2 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = 1567.5390470005411;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.7853981633974483, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = 2196.4;
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = (-3898.644071627046);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertEquals(-0.0, double3, 0.01D);
      
      double double4 = FastMath.atan2(double3, double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertEquals((-3.141592653589793), double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = 2073.84;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(7.637157240201254, double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = 1567.5390470005411;
      double double1 = FastMath.toDegrees(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(89813.37161509019, double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      float float0 = (-1.0F);
      double double3 = FastMath.atan2((double) float0, double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(-0.0, double3, 0.01D);
      
      double double4 = FastMath.atan2(double3, double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertEquals(0.0, double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      long long0 = 0L;
      double double2 = FastMath.atan2((double) long0, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = FastMath.abs(long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-9223372036854775808L), long1);
      
      double double0 = FastMath.atan2((double) long0, (double) long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-2.356194490192345), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = FastMath.atan((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = (-1739.2176);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-600.7078);
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(3.141592653589793, double2, 0.01D);
      
      double double3 = FastMath.tan(double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-1.2246467991473532E-16), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = (-0.038055824220351434);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ceil(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = 2013.79854454744;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.2246467991473532E-16, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = 1567.5390470005411;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sin(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = 1567.5390470005411;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      float float0 = (-55.0F);
      double double2 = FastMath.atan2((double) float0, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(-0.0, double2, 0.01D);
      
      double double3 = FastMath.sin(double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertEquals(-0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = 2147483660L;
      double double0 = FastMath.sin((double) long0);
      assertEquals((-0.9472496664697129), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = 2.85040095144011744E17;
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.5434886348565426, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = 1.8014398509481988E16;
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.9675911762612261, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = 1.0737418237314787E9;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.8039222041859247), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 38;
      double double0 = FastMath.expm1((double) int0);
      assertEquals(3.1855931757113756E16, double0, 0.01D);
      
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(6.511274622697945, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float float0 = 4658.708F;
      double double0 = FastMath.acos((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      // Undeclared exception!
      try {
        double double1 = FastMath.sin(double0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = 4294967295L;
      long long1 = FastMath.max(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(4294967295L, long1);
      
      double double0 = FastMath.cos((double) long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-0.8679353473572022), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = FastMath.abs(long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-9223372036854775808L), long1);
      
      double double0 = FastMath.sin((double) long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-0.9999303766734422), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = 19.770032449758027;
      double double1 = FastMath.tanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.5574077246549023, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = (-497.999741988278);
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(17.430953356291965, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = 3.145894820876798E-6;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.1458948208716093E-6, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = FastMath.abs(long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-9223372036854775808L), long1);
      
      double double0 = FastMath.pow((double) long1, (double) long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = (-710.195293241921);
      double double1 = FastMath.pow(double0, double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.pow(double0, double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = (-1739.2176);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      long long0 = (-7L);
      double double2 = FastMath.pow((double) long0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.toRadians(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.8700663162719435E-4), double1, 0.01D);
      
      double double2 = FastMath.rint(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = FastMath.log(double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.pow(double1, double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = (-1739.2176);
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.sinh(double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = (-1734.7379097463167);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      int int0 = (-22);
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals((-22L), long0);
      
      double double2 = FastMath.pow(double1, (double) long0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = (-1739.2176);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      long long0 = 9193070505571053912L;
      long long1 = FastMath.min(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(9193070505571053912L, long1);
      
      double double2 = FastMath.pow(double1, (double) long1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(long1 == long0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(long0 == long1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = (-1739.2176);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 429;
      double double0 = 970.901974235;
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.ulp((double) int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(5.6843418860808015E-14, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = 1567.5390470005411;
      double double1 = FastMath.floor(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1567.0, double1, 0.01D);
      
      double double2 = FastMath.sinh(double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.pow(double1, double2);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = 2835.051F;
      double double0 = FastMath.cosh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = (-1335.0804031);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float float0 = 2835.051F;
      double double0 = FastMath.cosh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, (double) float0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = 1567.5390470005411;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      float float0 = (-55.0F);
      double double2 = FastMath.abs((double) float0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(55.0, double2, 0.01D);
      
      double double3 = FastMath.atan2((double) float0, double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double3, 0.01D);
      
      double double4 = FastMath.pow(double3, double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertTrue(double4 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-0.038055824220351434);
      double double2 = FastMath.ceil(double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(-0.0, double2, 0.01D);
      
      double double3 = FastMath.atan2(double0, double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertEquals(3.141592653589793, double3, 0.01D);
      
      double double4 = FastMath.pow(double2, double3);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertTrue(double4 == double0);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double0 == double4);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertEquals(0.0, double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = 1.8014398509481988E16;
      double double1 = FastMath.nextUp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.8014398509481992E16, double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = (-0.038055824220351434);
      double double1 = FastMath.ceil(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.pow((double) int0, (double) int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log1p(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = 1317.45193;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = (-1739.2176);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.log1p(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.log(double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = 0.008333333333333333;
      double double1 = FastMath.log1p(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.008298802814695094, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = (-109.21450957425493);
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      float float0 = (-3290.69F);
      double double2 = FastMath.atan2((double) float0, double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double2, 0.01D);
      
      double double3 = FastMath.log(double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertEquals(0.4515827052894548, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = 0.6931470632553101;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.15917461245261436), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      double double0 = FastMath.nextAfter((double) int1, (double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
      assertTrue(int0 == int1);
      assertEquals((-744.4400719213812), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 1567.5390470005411;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log10(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = (-0.038055824220351434);
      double double1 = FastMath.ceil(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.log(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = (-709.70416F);
      double double0 = FastMath.exp((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = (-709.3908404723218);
      double double1 = FastMath.expm1(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = (-713.54);
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = (-1314.9035496);
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = (-2500.0);
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 429;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(429, int1);
      
      double double0 = FastMath.signum((double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float float0 = (-958.177F);
      double double0 = FastMath.signum((double) float0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = FastMath.signum((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.010715100793361396), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = (-0.09088450866185192);
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.09113599135352736), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = 0.003;
      double double1 = FastMath.sqrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.05477225575051661, double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.05482712680808606, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = 0.008333333333329196;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.008333236885725868, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = 0.0952233225107193;
      double double1 = FastMath.max(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0952233225107193, double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals(0.09508000060292923, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = (-0.12502530217170715);
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.12470185366756537), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      double double0 = FastMath.asinh((double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = (-1756.6626);
      double double1 = FastMath.cbrt(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-12.065985109834779), double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-0.9999999999338319), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = 3.145894820876798E-6;
      double double1 = FastMath.tanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.1458948208664203E-6, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = 1567.5390470005411;
      double double1 = FastMath.floor(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1567.0, double1, 0.01D);
      
      int int0 = 0;
      double double2 = FastMath.min(double1, (double) int0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = FastMath.tanh(double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = (-1739.2176);
      double double1 = FastMath.sinh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.toRadians(double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.tanh(double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(1.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = (-1739.2176);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-1.0), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.toDegrees(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2.8E-322), double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-2.8E-322), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.5430806348152437, double1, 0.01D);
  }

  //@Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.acosh(double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(710.1881780014921, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = (-497.999741988278);
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-6.903747747536414), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float float0 = (-48.4F);
      double double0 = FastMath.cos((double) float0);
      assertEquals((-0.2904380648295497), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.010657492902405514), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.ulp(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }
}
