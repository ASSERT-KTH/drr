/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:01:06 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = (-2021.1F);
      float float2 = FastMath.min(float0, float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
      
      double double0 = FastMath.max((double) float2, (double) float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = (-2278.336);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = (-3633.8884);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.max(double1, double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertTrue(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double3);
      assertFalse(double1 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = (-2021.1F);
      float float2 = FastMath.max(float0, float1);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
  }

  //@Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float float0 = 391.1F;
      float float1 = (-808.5014F);
      float float2 = FastMath.max(float0, float1);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertTrue(float0 == float2);
      assertFalse(float0 == float1);
      assertEquals(391.1F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      float float0 = (-2011.3F);
      int int2 = FastMath.round(float0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-2011), int2);
      
      long long0 = FastMath.max((long) int1, (long) int2);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = (-24);
      assertFalse(int2 == int1);
      
      int int3 = FastMath.max(int1, int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int0 == int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertTrue(int1 == int3);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.exp(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(1.0, double1, 0.01D);
      
      double double2 = (-1334.2136830929935);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.sqrt(double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      
      double double4 = FastMath.min(double3, double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertTrue(double4 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertEquals(Double.NaN, double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.exp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = (-2714.955254);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.exp(double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertEquals(0.0, double3, 0.01D);
      
      double double4 = FastMath.min(double1, double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(double3 == double4);
      assertTrue(double3 == double0);
      assertTrue(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertTrue(double4 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertTrue(double0 == double3);
      assertTrue(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertEquals(0.0, double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = FastMath.round(float0);
      assertEquals((-1), int0);
      
      float float1 = FastMath.min(float0, (float) int0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-1.0F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float float0 = (-112.733F);
      float float1 = FastMath.abs(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(112.733F, float1, 0.01F);
      
      float float2 = FastMath.min(float1, float0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertTrue(float0 == float2);
      assertFalse(float0 == float1);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
      assertEquals((-112.733F), float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.min(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = (-2847);
      float float0 = (-1813.4F);
      int int1 = FastMath.round(float0);
      assertFalse(int1 == int0);
      assertEquals((-1813), int1);
      
      long long0 = FastMath.min((long) int1, (long) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-2847L), long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = (-459);
      int int1 = (-673);
      int int2 = FastMath.min(int0, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-673), int2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = 540.5;
      double double1 = FastMath.rint(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(540.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = (-0.49999999999999994);
      double double1 = FastMath.rint(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 0.0;
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      
      double double3 = FastMath.asinh(double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertEquals(1.8622957433108482, double3, 0.01D);
      
      double double4 = FastMath.rint(double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertEquals(2.0, double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = 1269.2;
      double double1 = (-1458.295471030241);
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-0.8546167478721908), double2, 0.01D);
      
      double double3 = FastMath.rint(double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertEquals((-1.0), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = (-622.36726);
      double double1 = FastMath.atan2(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-2.356194490192345), double1, 0.01D);
      
      double double2 = FastMath.ceil(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-2.0), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ceil(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = (-205.0);
      double double1 = FastMath.floor(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-205.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.floor(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = 1.375;
      double double1 = FastMath.exp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.955076722920577, double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
      
      long long0 = FastMath.round(double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 0.0;
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(3.141592653589793, double2, 0.01D);
      
      double double3 = FastMath.nextAfter(double0, double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertEquals((-0.9999999999999999), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = 0.49999999999999994;
      double double1 = FastMath.nextAfter(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.5, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = (-2278.336);
      double double1 = FastMath.nextUp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2278.3359999999993), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1290.5761326410716);
      double double2 = FastMath.nextAfter(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-4.9E-324), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = (-1133.03988);
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = 1.375;
      double double1 = FastMath.exp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.955076722920577, double1, 0.01D);
      
      double double2 = FastMath.ulp(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(4.440892098500626E-16, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = (-3709);
      int int1 = FastMath.abs(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3709, int1);
      
      float float0 = FastMath.abs((float) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3709.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 17;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(17, int1);
      
      double double0 = FastMath.cbrt((double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(2.571281590658235, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.nextAfter((double) int0, (double) int0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = FastMath.cbrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.7031839360032603E-108, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sqrt(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = 0.11764700710773468;
      double double1 = FastMath.tanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.11710721840889775, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.4534197728609959, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.141592653589793, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = (-127.24333);
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = 1.375;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(3.955076722920577, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = (-2714.955254);
      double double1 = FastMath.toRadians(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-47.38490822661895), double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = 1092.17151177;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = (-6.032174644509064E-23);
      double double1 = FastMath.sinh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-6.032174644509064E-23), double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals((-6.032174644509064E-23), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = (-3277.8272843745);
      double double1 = FastMath.sqrt(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      long long0 = (-1L);
      long long1 = FastMath.abs(long0);
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertFalse(long1 == long0);
      //  // Unstable assertion: assertEquals(1L, long1);
      
      double double2 = FastMath.atan2((double) long1, double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(long1 == long0);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = 1.0;
      double double1 = 0.0;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 0.0;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = 8.539466375492093;
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = 1763.0;
      double double1 = FastMath.min(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1763.0, double1, 0.01D);
      
      double double2 = FastMath.exp(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.atan2(double1, double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = (-6.032174644509064E-23);
      double double1 = 1092.17151177;
      double double2 = FastMath.sinh(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.toRadians(double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertEquals((-1.0528130860200165E-24), double3, 0.01D);
      
      double double4 = FastMath.atan2(double3, double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(-0.0, double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.toDegrees(double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.atan2(double1, double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals((-1.5707963267948966), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-2.356194490192345), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = (-2436.1830472791);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      float float0 = 1.0F;
      float float1 = FastMath.max(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(1.0F, float1, 0.01F);
      
      double double2 = FastMath.atan2(double1, (double) float1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.abs(long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      double double0 = FastMath.atan2((double) long1, (double) long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = (-6.032174644509064E-23);
      double double1 = FastMath.ceil(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      float float0 = 0.0F;
      int int0 = FastMath.round(float0);
      //  // Unstable assertion: assertEquals(0, int0);
      
      double double3 = FastMath.atan2((double) int0, double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = (-709.3011849614851);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-5.553421541417541E307), double1, 0.01D);
      
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-3.141592653589793), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = (-6.032174644509064E-23);
      double double1 = FastMath.ceil(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.atan(double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.sin((double) float0);
      assertEquals((-0.8414709848078965), double0, 0.01D);
      
      double double1 = (-8.0E298);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = (-6.032174644509064E-23);
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(3.141592653589793, double2, 0.01D);
      
      double double3 = FastMath.tan(double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertEquals((-1.2246467991473532E-16), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = (-2278.336);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.tan(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(3.141592653589793, double2, 0.01D);
      
      double double3 = FastMath.cos(double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = 1.375;
      double double1 = FastMath.exp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.955076722920577, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-0.6869707865095637), double2, 0.01D);
  }

  //@Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = (-4480.089356866437);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.cos(double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = 919.588913468977;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.7819163520165869, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = (-622.36726);
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-3.141592653589793), double2, 0.01D);
      
      double double3 = FastMath.sin(double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertEquals((-1.2246467991473532E-16), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.sin(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sin(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = 1.633123935319537E16;
      double double1 = FastMath.max(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(1.633123935319537E16, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-0.28443016146380146), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = (-4981L);
      long long1 = 7910884519577875640L;
      long long2 = FastMath.max(long0, long1);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertEquals(7910884519577875640L, long2);
      
      double double0 = FastMath.cos((double) long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertEquals((-0.8647216223165652), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = 707.74607021202;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.1726890937098182E307, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.0999852997010289, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = 1.633123935319537E16;
      double double1 = FastMath.nextUp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.6331239353195372E16, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.9901052115487928, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = 113236205062349959L;
      double double0 = FastMath.sin((double) long0);
      assertEquals(0.7785078918965618, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = (-112.733F);
      float float1 = FastMath.abs(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(112.733F, float1, 0.01F);
      
      double double0 = FastMath.sinh((double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(4.552925824756335E48, double0, 0.01D);
      
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
      assertEquals(0.22282389805647193, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = 704.71;
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.1263266032392167E306, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.1494687974705045, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = (-456.550359562822);
      double double1 = FastMath.abs(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(456.550359562822, double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(9.468297023235308E197, double2, 0.01D);
      
      double double3 = FastMath.tan(double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertEquals((-6.683092079247131), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = 9.219544613762692E-9;
      double double1 = FastMath.tan(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(9.219544613762692E-9, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = (-2278.336);
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.8108570903624145), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = (-502.0);
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = (-3184.51436033779);
      double double1 = FastMath.toDegrees(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-182459.2326461584), double1, 0.01D);
      
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = (-1L);
      double double0 = (-8.0E298);
      double double1 = FastMath.pow((double) long0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = FastMath.round(float0);
      //  // Unstable assertion: assertEquals((-1), int0);
      
      double double0 = FastMath.sqrt((double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.pow((double) int0, double0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.toDegrees(double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.expm1(double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertEquals((-1.0), double2, 0.01D);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertEquals(-0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = 743.0;
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = (-622.36726);
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-3.141592653589793), double2, 0.01D);
      
      double double3 = FastMath.pow(double1, double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      double double0 = (-2278.336);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.nextUp((double) int0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(4.9E-324, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = 1721.1055657;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = (-1.0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = (-2278.336);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double0);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      int int0 = (-1022);
      double double2 = FastMath.pow(double1, (double) int0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = FastMath.cosh((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = FastMath.pow((double) int1, double0);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
      assertEquals(0.0, double1, 0.01D);
  }

  //@Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = 1144.0659;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 1721.1055657;
      double double1 = FastMath.log1p(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(7.4513029872317675, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.log1p(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.acosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.pow(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = 0.7937005259840998;
      double double1 = FastMath.sqrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.8908987181403394, double1, 0.01D);
      
      double double2 = FastMath.log10(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-0.05017166594399683), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextAfter(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.log10(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-323.3062153431158), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = FastMath.max(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = FastMath.atanh((double) float1);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = 1269.2;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log10(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = (-405.64145243780376);
      double double1 = FastMath.log1p(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = (-6.032174644509064E-23);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.log(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = (-0.1666666567325592);
      double double1 = FastMath.max(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-0.1666666567325592), double1, 0.01D);
      
      double double2 = FastMath.expm1(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals((-0.15351826670034546), double2, 0.01D);
  }

  //@Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.expm1(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = 1269.2;
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = (-709.3011849614851);
      double double1 = FastMath.expm1(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = (-709.3011849614851);
      double double1 = FastMath.exp(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = FastMath.round(float0);
      //  // Unstable assertion: assertEquals((-1), int0);
      
      double double0 = FastMath.sqrt((double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.toDegrees(double0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, (double) int0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(3.708456430845337E-309, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = (-742.26);
      double double1 = FastMath.expm1(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = 1269.2;
      double double1 = FastMath.signum(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.6321205588285577), double1, 0.01D);
      
      double double2 = FastMath.signum(double1);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-1.0), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = 0.012966634084950801;
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.012967360867224125, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = 0.058823529411764705;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.05889151782819173, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = 0.097;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.09730595342912242, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sqrt(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals((-355.09408900074607), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.035992228531467885, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.asinh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = 0.11111095942313305;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.11088359754107008, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.6321205588285577), double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-0.5961722400471147), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = 0.07490822288864472;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.07483834449967837, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.tanh((double) float0);
      assertEquals((-0.7615941559557649), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = (-456.550359562822);
      double double1 = FastMath.tanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 1678;
      double double0 = FastMath.tanh((double) int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.tanh((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = FastMath.acos((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1.5707963267948966, double0, 0.01D);
      
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(2.3012989023072947, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.1752011936438014), double1, 0.01D);
      
      double double2 = FastMath.cosh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.773775678340353, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = (-2278.336);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = 2935890503282001226L;
      double double0 = FastMath.sin((double) long0);
      assertEquals((-0.5669398211864902), double0, 0.01D);
      
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.8435484010778814, double1, 0.01D);
  }
}
