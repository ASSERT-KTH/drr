/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:01:11 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateTimeZoneEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = fixedDateTimeZone0.toString();
      assertNotNull(string0);
      assertEquals("UTC", string0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      long long0 = fixedDateTimeZone0.adjustOffset((long) int0, boolean0);
      assertEquals(0L, long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      long long0 = (-2336L);
      int int0 = fixedDateTimeZone0.getOffset(long0);
      assertEquals(0, int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0);
      assertNotNull(localDateTime0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DateTimeZone dateTimeZone0 = null;
      long long0 = fixedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, (long) int0);
      assertEquals((-3600000L), long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = 1455L;
      boolean boolean0 = true;
      long long1 = cachedDateTimeZone0.convertLocalToUTC(long0, boolean0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-3598545L), long1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = (-9223372036854775807L);
      DateTime dateTime0 = new DateTime(long0);
      assertNotNull(dateTime0);
      assertEquals((-9223372036854775807L), dateTime0.getMillis());
      
      // Undeclared exception!
      try {
        DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = (-1619L);
      long long1 = cachedDateTimeZone0.adjustOffset(long0, boolean0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-1619L), long1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-499);
      String string0 = "AST";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-499, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=AST,offset=-499,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("AST", simpleTimeZone0.getID());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-499, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=AST,offset=-499,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("AST", simpleTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateMidnight dateMidnight0 = localDate0.toDateMidnight((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateMidnight0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-499, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=AST,offset=-499,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("AST", simpleTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(1392368400000L, dateMidnight0.getMillis());
      
      Instant instant0 = dateMidnight0.toInstant();
      assertNotNull(instant0);
      assertEquals(1392368400000L, instant0.getMillis());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-499, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=AST,offset=-499,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("AST", simpleTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(1392368400000L, dateMidnight0.getMillis());
      
      MockDate mockDate0 = (MockDate)instant0.toDate();
      assertNotNull(mockDate0);
      assertEquals(1392368400000L, instant0.getMillis());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Fri Feb 14 09:00:00 GMT 2014", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-499, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=AST,offset=-499,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("AST", simpleTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(1392368400000L, dateMidnight0.getMillis());
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertNotNull(localDateTime0);
      assertEquals(1392368400000L, instant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Fri Feb 14 09:00:00 GMT 2014", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-499, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=AST,offset=-499,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("AST", simpleTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(1392368400000L, dateMidnight0.getMillis());
      
      int int1 = (-1833);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(int1);
      assertNotNull(localDateTime1);
      assertFalse(int0 == int1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(int1 == int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(1392368400000L, instant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime1.size());
      assertEquals("Fri Feb 14 09:00:00 GMT 2014", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-499, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=AST,offset=-499,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("AST", simpleTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(1392368400000L, dateMidnight0.getMillis());
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime1);
      assertFalse(int0 == int1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(int1 == int0);
      assertFalse(boolean0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(1392368400000L, instant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime1.size());
      assertEquals("Fri Feb 14 09:00:00 GMT 2014", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-499, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=AST,offset=-499,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("AST", simpleTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(1392368400000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ReadableInstant readableInstant0 = null;
      int int0 = cachedDateTimeZone0.getOffset(readableInstant0);
      assertEquals(0, int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-5);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset((long) int0);
      assertTrue(boolean0);
      assertEquals("-00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 9223372036854775807L;
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset(long0);
      assertFalse(boolean0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = 52;
      int int1 = 7;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (long) int1, int1);
      assertNotNull(gJChronology0);
      assertFalse(int1 == int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      YearMonthDay yearMonthDay0 = new YearMonthDay(int0, int1, int1, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3, yearMonthDay0.size());
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((long) int0, (Chronology) gJChronology0);
      assertNotNull(timeOfDay0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, timeOfDay0.size());
      
      DateTime dateTime0 = yearMonthDay0.toDateTime(timeOfDay0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateTime0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-60510153524948L), dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, timeOfDay0.size());
      assertEquals(3, yearMonthDay0.size());
      
      int int2 = cachedDateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-75000), int2);
      assertEquals((-60510153524948L), dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, timeOfDay0.size());
      assertEquals(3, yearMonthDay0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-22);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-22:00", fixedDateTimeZone0.toString());
      assertEquals("-22:00", fixedDateTimeZone0.getID());
      
      String string0 = fixedDateTimeZone0.getName((long) int0);
      assertNotNull(string0);
      assertEquals("-22:00", string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-22:00", fixedDateTimeZone0.toString());
      assertEquals("-22:00", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      long long0 = (-2336L);
      int int0 = fixedDateTimeZone0.getOffset(long0);
      assertEquals(0, int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      
      String string0 = fixedDateTimeZone0.getName((long) int0, locale0);
      assertNotNull(string0);
      assertEquals("Tempo universale coordinato", string0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = (-12219292800000L);
      String string0 = cachedDateTimeZone0.getShortName(long0);
      assertNotNull(string0);
      assertEquals("-00:01:15", string0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-5);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0, locale0);
      assertNotNull(string0);
      assertEquals("-00:00:00.005", string0);
      assertEquals("-00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1488;
      String string0 = "*e";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("*e", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=*e,offset=1488,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1488, simpleTimeZone0.getRawOffset());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("*e", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=*e,offset=1488,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1488, simpleTimeZone0.getRawOffset());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("*e", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=*e,offset=1488,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1488, simpleTimeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Provider provider0 = null;
      DateTimeZone.setProvider(provider0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-22);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-22:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-22:00", fixedDateTimeZone0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fixedDateTimeZone0.toTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("-22:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-22:00", fixedDateTimeZone0.toString());
      assertEquals("GMT-22:00", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertEquals("-22:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-22:00", fixedDateTimeZone0.toString());
      assertEquals("-22:00", fixedDateTimeZone1.toString());
      assertEquals("-22:00", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("GMT-22:00", zoneInfo0.getID());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 179;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+179:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+179:00", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-993);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -993
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      int int1 = 821;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 821
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-5);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      String string0 = fixedDateTimeZone0.toString();
      assertNotNull(string0);
      assertEquals("-00:00:00.005", string0);
      assertEquals("-00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals("-00:00:00.005", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-00:00:00.005", fixedDateTimeZone1.getID());
      assertEquals("-00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = (-1619L);
      String string0 = fixedDateTimeZone0.getShortName(long0);
      assertNotNull(string0);
      assertEquals("UTC", string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-175);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.175", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.175", fixedDateTimeZone0.toString());
      
      DateTimeZone.setDefault((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.175", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.175", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "nonteOfYear";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider((Provider) uTCProvider0);
      long long0 = 10799961L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
  }

  @Test(timeout = 4000)
  public void test29() {}
//   @Test(timeout = 4000)
//   public void test29()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       
//       TimeZone timeZone0 = null;
//       CachedDateTimeZone cachedDateTimeZone1 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
//       assertNotNull(cachedDateTimeZone1);
//       assertSame(cachedDateTimeZone1, cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone1.toString());
//       assertEquals(false, cachedDateTimeZone1.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone1.getID());
//   }

  @Test(timeout = 4000)
  public void test30() {}
//   @Test(timeout = 4000)
//   public void test30()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       
//       long long0 = (-9223372036854775808L);
//       String string0 = cachedDateTimeZone0.getName(long0);
//       assertNotNull(string0);
//       assertEquals("-00:01:15", string0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//   }

  @Test(timeout = 4000)
  public void test31() {}
//   @Test(timeout = 4000)
//   public void test31()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", zoneInfo0.getID());
//   }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "+00:00:00.00";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test33() {}
//   @Test(timeout = 4000)
//   public void test33()  throws Throwable  {
//       Set<String> set0 = DateTimeZone.getAvailableIDs();
//       assertNotNull(set0);
//       assertEquals(572, set0.size());
//       assertEquals(false, set0.isEmpty());
//   }

  @Test(timeout = 4000)
  public void test34() {}
//   @Test(timeout = 4000)
//   public void test34()  throws Throwable  {
//       ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
//       assertNotNull(zoneInfoProvider0);
//   }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-175);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.175", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.175", fixedDateTimeZone0.toString());
      
      Object object0 = fixedDateTimeZone0.writeReplace();
      assertNotNull(object0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.175", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.175", fixedDateTimeZone0.toString());
  }
}
