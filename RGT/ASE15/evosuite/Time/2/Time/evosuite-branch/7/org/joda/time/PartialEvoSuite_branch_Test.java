/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:13 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PartialEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      String string0 = "0npo+X%V%,3DN";
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      int[] intArray0 = new int[18];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(8, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      
      String string0 = ">";
      String string1 = partial0.toString(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(">", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals(8, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 223;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(1, partial0.size());
      assertNotNull(dateTimeFormatter0);
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertEquals("0223", string1);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 0L;
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertEquals(4, partial0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 585;
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals(4, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(5, partial1.size());
      assertEquals(4, localTime0.size());
      assertNotNull(partial1);
      
      String string0 = partial1.toString();
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals("[yearOfEra=585, hourOfDay=0, minuteOfHour=0, secondOfMinute=0, millisOfSecond=0]", string0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals(4, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(5, partial1.size());
      assertEquals(4, localTime0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = null;
      String string1 = partial0.toString(string0, locale0);
      assertEquals("[]", string1);
      assertEquals(0, partial0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 223;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(1, partial0.size());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 27;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      long long0 = 0L;
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) localTime0);
      assertFalse(boolean0);
      assertEquals(1, partial0.size());
      assertEquals(4, localTime0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = partial0.isMatch(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 27;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) int0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) localTime0);
      assertTrue(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      MonthDay monthDay0 = new MonthDay((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertEquals(2, partial0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2, monthDay0.size());
      assertNotNull(partial0);
      
      int[] intArray0 = new int[6];
      int int0 = 130;
      intArray0[1] = int0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, intArray0[1]);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals(2, partial0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(3, partial1.size());
      assertEquals(2, monthDay0.size());
      assertArrayEquals(new int[] {0, 130, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial1);
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(dateMidnight0);
      
      boolean boolean0 = partial1.isMatch((ReadableInstant) dateMidnight0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(boolean0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2, partial0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(3, partial1.size());
      assertEquals(2, monthDay0.size());
      assertArrayEquals(new int[] {0, 130, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(partial0);
      
      ReadableInstant readableInstant0 = null;
      boolean boolean0 = partial0.isMatch(readableInstant0);
      assertTrue(boolean0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Years years0 = Years.ONE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) years0, int0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(1, years0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = 0L;
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      ReadablePeriod readablePeriod0 = null;
      Partial partial1 = partial0.plus(readablePeriod0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(4, partial1.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 223;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int1 = 0;
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-62);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(1, partial1.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = (-870L);
      TimeOfDay timeOfDay0 = new TimeOfDay(long0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = 0;
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(4, partial1.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-62);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldTypeArray0[3].toString());
      assertEquals("weekyearOfCentury", dateTimeFieldTypeArray0[3].getName());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      int[] intArray0 = new int[18];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(8, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, intArray0[0]);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(8, partial0.size());
      assertEquals(8, partial1.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals(3, yearMonthDay0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(3, partial0.size());
      assertEquals(3, partial1.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-62);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) julianChronology0);
      assertNotNull(strictChronology0);
      
      YearMonth yearMonth0 = YearMonth.now((Chronology) strictChronology0);
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 2915;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2915 for era must not be larger than 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 27;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      int int1 = partial0.indexOf(dateTimeFieldType0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, partial0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(int1 == int0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(int0 == int1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = (-700);
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 27;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Chronology chronology0 = null;
      Partial partial1 = partial0.withChronologyRetainFields(chronology0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) islamicChronology0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[1].toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[1].getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[3].toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[3].getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[1];
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[4].toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[4].getName());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[3];
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[5].toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[5].getName());
      assertNotNull(dateTimeFieldTypeArray0[5]);
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[6].getName());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[6].toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[6]);
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[7].toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[7].getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[7]);
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[8].toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[8].getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[8]);
      
      dateTimeFieldTypeArray0[9] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[9].getName());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[9].toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[9]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].toString());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[10];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: yearOfCentury < weekyear
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[3].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[3].toString());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[4].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[4].getName());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[5].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[5].toString());
      assertNotNull(dateTimeFieldTypeArray0[5]);
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[6].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[6].getName());
      assertNotNull(dateTimeFieldTypeArray0[6]);
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[7].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[7].getName());
      assertNotNull(dateTimeFieldTypeArray0[7]);
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[8].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[8].toString());
      assertNotNull(dateTimeFieldTypeArray0[8]);
      
      dateTimeFieldTypeArray0[9] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[9].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[9].toString());
      assertNotNull(dateTimeFieldTypeArray0[9]);
      
      int[] intArray0 = new int[10];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: weekyear and weekyear
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      
      DateTimeField dateTimeField0 = julianChronology0.hourOfDay();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      int int0 = 70;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, int0);
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals(70, offsetDateTimeField0.getOffset());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(93, offsetDateTimeField0.getMaximumValue());
      assertEquals(70, offsetDateTimeField0.getMinimumValue());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType1 = offsetDateTimeField0.getType();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals(70, offsetDateTimeField0.getOffset());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(93, offsetDateTimeField0.getMaximumValue());
      assertEquals(70, offsetDateTimeField0.getMinimumValue());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeFieldType1.toString());
      assertEquals("hourOfDay", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals(70, offsetDateTimeField0.getOffset());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(93, offsetDateTimeField0.getMaximumValue());
      assertEquals(70, offsetDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeFieldType1.toString());
      assertEquals("hourOfDay", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[1].getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[1].toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[2].toString());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[2].getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[3];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: secondOfMinute < hourOfDay
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 223;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(0, partial1.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
      
      Partial partial2 = partial1.with(dateTimeFieldType0, int0);
      assertNotSame(partial1, partial2);
      assertNotSame(partial1, partial0);
      assertNotSame(partial2, partial0);
      assertNotSame(partial2, partial1);
      assertNotSame(partial0, partial2);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial2));
      assertFalse(partial1.equals((Object)partial0));
      assertTrue(partial2.equals((Object)partial0));
      assertFalse(partial2.equals((Object)partial1));
      assertTrue(partial0.equals((Object)partial2));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(0, partial1.size());
      assertEquals(1, partial2.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[1].getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[1].toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[2].toString());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[2].getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[3];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: secondOfMinute and secondOfMinute
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      int[] intArray0 = new int[1];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      int[] intArray0 = new int[3];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = (-62);
      DateTimeFieldType dateTimeFieldType0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = 0L;
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      Months months0 = Months.MIN_VALUE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Partial partial1 = partial0.minus((ReadablePeriod) months0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertEquals(4, partial1.size());
      assertEquals(1, months0.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertEquals(0, partial0.size());
      assertNotNull(dateTimeFieldTypeArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(partial0);
      
      Weeks weeks0 = Weeks.MIN_VALUE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(1, weeks0.size());
      assertNotNull(period0);
      
      Partial partial1 = partial0.plus((ReadablePeriod) period0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertEquals(1, weeks0.size());
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial1.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.addToCopy(int0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = 0L;
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertEquals(4, partial0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(partial0);
      
      int int0 = 585;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(4, partial0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        String string0 = partial_Property0.getAsString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 585
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(3, partial1.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Partial partial0 = null;
      int int0 = (-52);
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.withMaximumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial_Property0);
      
      String string0 = "0@+GR#";
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"0@+GR#\" for year is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.getPartial();
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(3, partial1.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 32;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      int[] intArray0 = new int[18];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(8, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(8, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
      }
  }
}
