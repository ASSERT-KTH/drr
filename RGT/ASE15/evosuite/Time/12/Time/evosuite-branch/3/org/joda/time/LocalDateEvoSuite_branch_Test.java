/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:41:21 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class LocalDateEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "}ja`E";
      long long0 = 0L;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate(long0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      
      try {
        String string1 = localDate0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      LocalDate localDate0 = new LocalDate((Object) string0, (Chronology) copticChronology0);
      assertNotNull(localDate0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      
      String string1 = localDate0.toString(string0);
      assertNotNull(string1);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals("1730-06-07", string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      String string0 = "";
      // Undeclared exception!
      try {
        String string1 = localDate0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
      }
  }

  @Test(timeout = 4000)
  public void test003() {}
//   @Test(timeout = 4000)
//   public void test003()  throws Throwable  {
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localDate0);
//       assertEquals(3, localDate0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
//       assertNotNull(buddhistChronology0);
//       
//       DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
//       assertNotNull(dateTimeField0);
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals("monthOfYear", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       
//       LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
//       assertNotNull(localDate_Property0);
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals("monthOfYear", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertEquals(3, localDate0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("monthOfYear", localDate_Property0.getName());
//       
//       DateTimeFieldType dateTimeFieldType0 = localDate_Property0.getFieldType();
//       assertNotNull(dateTimeFieldType0);
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals("monthOfYear", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertEquals(3, localDate0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("monthOfYear", dateTimeFieldType0.toString());
//       assertEquals("monthOfYear", dateTimeFieldType0.getName());
//       assertEquals("monthOfYear", localDate_Property0.getName());
//       
//       LocalDate.Property localDate_Property1 = localDate0.property(dateTimeFieldType0);
//       assertNotNull(localDate_Property1);
//       assertEquals("monthOfYear", localDate_Property1.getName());
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals("monthOfYear", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertEquals(3, localDate0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("monthOfYear", dateTimeFieldType0.toString());
//       assertEquals("monthOfYear", dateTimeFieldType0.getName());
//       assertEquals("monthOfYear", localDate_Property0.getName());
//       assertTrue(localDate_Property1.equals((Object)localDate_Property0));
//       assertTrue(localDate_Property0.equals((Object)localDate_Property1));
//       assertNotSame(localDate_Property1, localDate_Property0);
//       assertNotSame(localDate_Property0, localDate_Property1);
//   }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(lenientChronology0);
      
      LocalDate localDate0 = new LocalDate((Chronology) lenientChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try {
        LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfHalfday' is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusDays(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 3471;
      LocalDate localDate1 = localDate0.minusDays(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDate localDate0 = new LocalDate(chronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.minusWeeks(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      assertNotNull(localDate_Property0);
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      int int0 = localDate_Property0.get();
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(2014, int0);
      
      LocalDate localDate1 = localDate0.minusWeeks(int0);
      assertNotNull(localDate1);
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.minusMonths(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = (-1889L);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LocalDate localDate0 = new LocalDate(long0, (Chronology) julianChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 2127;
      LocalDate localDate1 = localDate0.minusMonths(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test012() {}
//   @Test(timeout = 4000)
//   public void test012()  throws Throwable  {
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localDate0);
//       assertEquals(3, localDate0.size());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       int int0 = 0;
//       LocalDate localDate1 = localDate0.minusYears(int0);
//       assertNotNull(localDate1);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, localDate1.size());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertSame(localDate0, localDate1);
//       assertSame(localDate1, localDate0);
//   }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getMonthOfYear();
      assertEquals(3, localDate0.size());
      assertEquals(2, int0);
      
      LocalDate localDate1 = localDate0.minusYears(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDate localDate0 = new LocalDate(chronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.plusDays(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test015() {}
//   @Test(timeout = 4000)
//   public void test015()  throws Throwable  {
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localDate0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(3, localDate0.size());
//       
//       int int0 = 0;
//       LocalDate localDate1 = localDate0.plusWeeks(int0);
//       assertNotNull(localDate1);
//       assertEquals(3, localDate1.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(3, localDate0.size());
//       assertSame(localDate1, localDate0);
//       assertSame(localDate0, localDate1);
//   }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.plusMonths(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 6;
      LocalDate localDate0 = new LocalDate(int0, int0, int0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.plusMonths(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.plusYears(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = (-1061);
      LocalDate localDate1 = localDate0.plusYears(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      ReadableInterval readableInterval0 = null;
      Hours hours0 = Hours.hoursIn(readableInterval0);
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      LocalDate localDate1 = localDate0.withPeriodAdded((ReadablePeriod) hours0, int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(1, hours0.size());
      assertEquals(3, localDate1.size());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0, locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      ReadablePeriod readablePeriod0 = null;
      int int0 = 623158436;
      LocalDate localDate1 = localDate0.withPeriodAdded(readablePeriod0, int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3, localDate1.size());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      
      int int0 = 2668;
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(localDate1);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(localDate1);
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals(3, localDate1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = (-2479);
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 3471;
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hours' is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-65);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeField dateTimeField0 = iSOChronology0.minuteOfHour();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) copticChronology0, dateTimeField0, (int) byteArray0[9]);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DateTimeFieldType dateTimeFieldType0 = skipUndoDateTimeField0.getType();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, (int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = (-578);
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 6;
      LocalDate localDate0 = new LocalDate(int0, int0, int0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      ReadablePartial readablePartial0 = null;
      LocalDate localDate1 = localDate0.withFields(readablePartial0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withFields((ReadablePartial) localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      LocalDate localDate0 = new LocalDate((Object) string0, (Chronology) copticChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      LocalTime localTime0 = timeOfDay0.toLocalTime();
      assertNotNull(localTime0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try {
        DateTime dateTime0 = localDate0.toDateTime(localTime0, (DateTimeZone) cachedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalTime localTime0 = null;
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = 1209L;
      LocalDate localDate0 = new LocalDate(long0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalTime localTime0 = new LocalTime((Chronology) gregorianChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalTime localTime0 = null;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The time must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getDayOfMonth();
      assertEquals(3, localDate0.size());
      assertEquals(14, int0);
      
      DateTime dateTime0 = new DateTime((long) int0);
      assertNotNull(dateTime0);
      assertEquals(14L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      
      LocalTime localTime0 = dateTime0.toLocalTime();
      assertNotNull(localTime0);
      assertEquals(14L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(3, localDate0.size());
      
      LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
      assertNotNull(localDateTime0);
      assertEquals(14L, dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localTime0.size());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getYearOfEra();
      assertEquals(3, localDate0.size());
      assertEquals(2014, int0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDate localDate1 = new LocalDate((long) int0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      int int1 = localDate0.compareTo((ReadablePartial) localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(int0 == int1);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getMonthOfYear();
      assertEquals(3, localDate0.size());
      assertEquals(2, int0);
      
      LocalDate localDate1 = localDate0.withLocalMillis(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      boolean boolean0 = localDate1.isEqual((ReadablePartial) localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(boolean0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "";
      MonthDay monthDay0 = MonthDay.parse(string0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      int int0 = 2;
      LocalDate localDate0 = monthDay0.toLocalDate(int0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(2, monthDay0.size());
      
      // Undeclared exception!
      try {
        boolean boolean0 = localDate0.isEqual((ReadablePartial) monthDay0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      //  // Unstable assertion: assertNotNull(gregorianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gregorianChronology0);
      //  // Unstable assertion: assertNotNull(lenientChronology0);
      
      LocalDate localDate0 = new LocalDate((Chronology) lenientChronology0);
      //  // Unstable assertion: assertNotNull(localDate0);
      //  // Unstable assertion: assertEquals(3, localDate0.size());
      
      int int0 = localDate0.hashCode();
      //  // Unstable assertion: assertEquals(3, localDate0.size());
      //  // Unstable assertion: assertEquals(1861258117, int0);
  }

  @Test(timeout = 4000)
  public void test040() {}
//   @Test(timeout = 4000)
//   public void test040()  throws Throwable  {
//       int int0 = 2447;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2447,MONTH=2447,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2447,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2447,HOUR_OF_DAY=2447,MINUTE=2447,SECOND=2447,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localDate0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=21707886467000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2657,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=327,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=27,SECOND=47,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(3, localDate0.size());
//       
//       LocalDate localDate1 = localDate0.plusWeeks(int0);
//       assertNotNull(localDate1);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=21707886467000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2657,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=327,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=27,SECOND=47,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(3, localDate1.size());
//       assertEquals(3, localDate0.size());
//       assertFalse(localDate1.equals((Object)localDate0));
//       assertFalse(localDate0.equals((Object)localDate1));
//       assertNotSame(localDate1, localDate0);
//       assertNotSame(localDate0, localDate1);
//       
//       boolean boolean0 = localDate1.equals((Object) localDate0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=21707886467000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2657,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=327,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=27,SECOND=47,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(3, localDate1.size());
//       assertEquals(3, localDate0.size());
//       assertFalse(boolean0);
//       assertFalse(localDate1.equals((Object)localDate0));
//       assertFalse(localDate0.equals((Object)localDate1));
//       assertNotSame(localDate1, localDate0);
//       assertNotSame(localDate0, localDate1);
//   }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate((Object) string0, (Chronology) copticChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      MockDate mockDate0 = (MockDate)localDate0.toDate();
      assertNotNull(mockDate0);
      assertEquals(3, localDate0.size());
      assertEquals("Wed Jun 07 00:00:00 GMT 1730", mockDate0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.era();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals("era", localDate_Property0.getName());
      
      boolean boolean0 = localDate0.equals((Object) localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals("era", localDate_Property0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DurationFieldType durationFieldType0 = null;
      boolean boolean0 = localDate0.isSupported(durationFieldType0);
      assertEquals(3, localDate0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = (-14L);
      LocalDate localDate0 = new LocalDate(long0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      boolean boolean0 = localDate0.isSupported(dateTimeFieldType0);
      assertEquals(3, localDate0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try {
        int int0 = localDate0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfDay' is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        int int0 = localDate0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getWeekyear();
      assertEquals(3, localDate0.size());
      assertEquals(2014, int0);
      
      // Undeclared exception!
      try {
        int int1 = localDate0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 2014
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = (-14L);
      LocalDate localDate0 = new LocalDate(long0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getYearOfCentury();
      assertEquals(3, localDate0.size());
      assertEquals(70, int0);
      
      Chronology chronology0 = null;
      // Undeclared exception!
      try {
        DateTimeField dateTimeField0 = localDate0.getField(int0, chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 70
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      MockDate mockDate0 = (MockDate)localDate0.toDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.fromDateFields(date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.era();
      assertNotNull(localDate_Property0);
      assertEquals("era", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate_Property0.withMinimumValue();
      assertNotNull(localDate1);
      assertEquals("era", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      MockDate mockDate0 = (MockDate)localDate1.toDate();
      assertNotNull(mockDate0);
      assertEquals("era", localDate_Property0.getName());
      assertEquals("Tue Feb 14 00:00:00 GMT 2015", mockDate0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.now(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      assertNotNull(localDate_Property0);
      assertEquals("weekyear", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals("dayOfMonth", localDate_Property0.getName());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      assertNotNull(localDate_Property0);
      assertEquals("dayOfYear", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) iSOChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 1430;
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withDayOfYear(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1430 for dayOfYear must be in the range [1,365]
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("weekOfWeekyear", localDate_Property0.getName());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getDayOfWeek();
      assertEquals(3, localDate0.size());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      String string0 = null;
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      String string1 = localDate0.toString(string0, locale0);
      assertNotNull(string1);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(3, localDate0.size());
      assertEquals("2014-02-14", string1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertNotNull(dateTime0);
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDate0.getDayOfYear();
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = new LocalDate((Object) localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertTrue(localDate1.equals((Object)localDate0));
      assertTrue(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = (-27);
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withWeekOfWeekyear(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -27 for weekOfWeekyear must be in the range [1,52]
         //
      }
  }

  @Test(timeout = 4000)
  public void test067() {}
//   @Test(timeout = 4000)
//   public void test067()  throws Throwable  {
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localDate0);
//       assertEquals(3, localDate0.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
//       assertNotNull(localDate_Property0);
//       assertEquals(3, localDate0.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("dayOfWeek", localDate_Property0.getName());
//   }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate((Object) iSOChronology0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.ISOChronology
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getEra();
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getWeekOfWeekyear();
      assertEquals(3, localDate0.size());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withYearOfCentury(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test072() {}
//   @Test(timeout = 4000)
//   public void test072()  throws Throwable  {
//       int int0 = 2447;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2447,MONTH=2447,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2447,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2447,HOUR_OF_DAY=2447,MINUTE=2447,SECOND=2447,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localDate0);
//       assertEquals(3, localDate0.size());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=21707886467000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2657,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=327,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=27,SECOND=47,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       LocalDate localDate1 = localDate0.withWeekyear(int0);
//       assertNotNull(localDate1);
//       assertEquals(3, localDate0.size());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=21707886467000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2657,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=327,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=27,SECOND=47,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(3, localDate1.size());
//       assertFalse(localDate0.equals((Object)localDate1));
//       assertFalse(localDate1.equals((Object)localDate0));
//       assertNotSame(localDate0, localDate1);
//       assertNotSame(localDate1, localDate0);
//   }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "The DateTimeFieldType must not be null";
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The DateTimeFieldType must not b...\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getCenturyOfEra();
      assertEquals(3, localDate0.size());
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.year();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals("year", localDate_Property0.getName());
  }

  @Test(timeout = 4000)
  public void test076() {}
//   @Test(timeout = 4000)
//   public void test076()  throws Throwable  {
//       int int0 = 2447;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2447,MONTH=2447,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2447,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2447,HOUR_OF_DAY=2447,MINUTE=2447,SECOND=2447,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localDate0);
//       assertEquals(3, localDate0.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=21707886467000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2657,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=327,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=27,SECOND=47,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       LocalDate localDate1 = localDate0.withCenturyOfEra(int0);
//       assertNotNull(localDate1);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, localDate1.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=21707886467000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2657,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=327,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=27,SECOND=47,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertFalse(localDate0.equals((Object)localDate1));
//       assertFalse(localDate1.equals((Object)localDate0));
//       assertNotSame(localDate0, localDate1);
//       assertNotSame(localDate1, localDate0);
//   }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      assertNotNull(localDate_Property0);
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      int int0 = localDate_Property0.get();
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(2014, int0);
      
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withEra(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2014 for era must be in the range [0,1]
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.withYear(int0);
      assertNotNull(localDate1);
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      assertNotNull(localDate_Property0);
      assertEquals("monthOfYear", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getDayOfMonth();
      assertEquals(3, localDate0.size());
      assertEquals(14, int0);
      
      DateTime dateTime0 = new DateTime((long) int0);
      assertNotNull(dateTime0);
      assertEquals(14L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      
      LocalTime localTime0 = dateTime0.toLocalTime();
      assertNotNull(localTime0);
      assertEquals(14L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(3, localDate0.size());
      
      DateTime dateTime1 = localDate0.toDateTime(localTime0);
      assertNotNull(dateTime1);
      assertEquals(14L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(1392339600014L, dateTime1.getMillis());
      assertEquals(3, localDate0.size());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Years years0 = Years.yearsBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minus((ReadablePeriod) years0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(1, years0.size());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getMonthOfYear();
      assertEquals(3, localDate0.size());
      assertEquals(2, int0);
      
      LocalDate localDate1 = localDate0.withMonthOfYear(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Interval interval0 = localDate0.toInterval();
      assertNotNull(interval0);
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392422400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 192;
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withDayOfMonth(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 192 for dayOfMonth must be in the range [1,28]
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 192;
      LocalDate localDate1 = localDate0.withYearOfEra(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      assertNotNull(dateTime0);
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      
      int int0 = 2668;
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withDayOfWeek(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2668 for dayOfWeek must be in the range [1,7]
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = (-1889L);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LocalDate localDate0 = new LocalDate(long0, (Chronology) julianChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertNotNull(mutablePeriod0);
      
      LocalDate localDate1 = localDate0.plus((ReadablePeriod) mutablePeriod0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test091() {}
//   @Test(timeout = 4000)
//   public void test091()  throws Throwable  {
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localDate0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(3, localDate0.size());
//       
//       BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
//       assertNotNull(buddhistChronology0);
//       
//       DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
//       assertNotNull(dateTimeField0);
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals("monthOfYear", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       
//       LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
//       assertNotNull(localDate_Property0);
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals("monthOfYear", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("monthOfYear", localDate_Property0.getName());
//       assertEquals(3, localDate0.size());
//       
//       LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
//       assertNotNull(localDate1);
//       assertEquals(3, localDate1.size());
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals("monthOfYear", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("monthOfYear", localDate_Property0.getName());
//       assertEquals(3, localDate0.size());
//       assertFalse(localDate1.equals((Object)localDate0));
//       assertFalse(localDate0.equals((Object)localDate1));
//       assertNotSame(localDate1, localDate0);
//       assertNotSame(localDate0, localDate1);
//   }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      assertNotNull(localDate_Property0);
      assertEquals("centuryOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      int int0 = 2275;
      LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(int0);
      assertNotNull(localDate1);
      assertEquals("centuryOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals("yearOfEra", localDate_Property0.getName());
      
      LocalDate localDate1 = localDate_Property0.getLocalDate();
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      DateTimeField dateTimeField0 = iSOChronology0.dayOfWeek();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      LocalDate localDate0 = LocalDate.now((Chronology) iSOChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
      assertNotNull(localDate_Property0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(3, localDate0.size());
      assertEquals("dayOfWeek", localDate_Property0.getName());
      
      LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
      assertNotNull(localDate1);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals("dayOfWeek", localDate_Property0.getName());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      DateTimeField dateTimeField0 = iSOChronology0.dayOfWeek();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      
      LocalDate localDate0 = LocalDate.now((Chronology) iSOChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals("dayOfWeek", localDate_Property0.getName());
      
      ISOChronology iSOChronology1 = (ISOChronology)localDate_Property0.getChronology();
      assertNotNull(iSOChronology1);
      assertEquals(3, localDate0.size());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals("dayOfWeek", localDate_Property0.getName());
      assertSame(iSOChronology0, iSOChronology1);
      assertSame(iSOChronology1, iSOChronology0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals("yearOfCentury", localDate_Property0.getName());
      
      LocalDate localDate1 = localDate_Property0.withMaximumValue();
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals("yearOfCentury", localDate_Property0.getName());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
      assertNotNull(localDate_Property0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("clockhourOfHalfday", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate_Property0.addToCopy(int0);
      assertNotNull(localDate1);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(3, localDate1.size());
      assertEquals("clockhourOfHalfday", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.era();
      assertNotNull(localDate_Property0);
      assertEquals("era", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate_Property0.roundHalfCeilingCopy();
      assertNotNull(localDate1);
      assertEquals("era", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
      assertNotNull(localDate_Property0);
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(3, localDate0.size());
      assertEquals("clockhourOfHalfday", localDate_Property0.getName());
      
      String string0 = "v/^'E#T$*fy</-Uv";
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate_Property0.setCopy(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"v/^'E#T$*fy</-Uv\" for clockhourOfHalfday is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals("centuryOfEra", localDate_Property0.getName());
      
      LocalDate localDate1 = localDate_Property0.roundFloorCopy();
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals("centuryOfEra", localDate_Property0.getName());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      assertNotNull(localDate_Property0);
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
      assertNotNull(localDate1);
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }
}
