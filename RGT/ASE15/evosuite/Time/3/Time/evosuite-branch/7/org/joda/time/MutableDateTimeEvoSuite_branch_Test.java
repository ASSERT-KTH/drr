/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:52:00 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class MutableDateTimeEvoSuite_branch_Test   {

  //@Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
      }
  }

  //@Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("yearOfEra", mutableDateTime_Property0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
  }

  //@Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      mutableDateTime0.setDate((ReadableInstant) mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  //@Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = (-693L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-693L), mutableDateTime0.getMillis());
      
      ReadableInstant readableInstant0 = null;
      mutableDateTime0.setDate(readableInstant0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392339599307L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = mutableDateTime0.getDayOfMonth();
      assertEquals(14, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      mutableDateTime0.addMillis(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281334L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  //@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      mutableDateTime0.addMillis(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertNotNull(mutableDateTime1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      
      int int0 = (-1408);
      mutableDateTime0.addMonths(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2310349118680L), mutableDateTime0.getMillis());
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      
      int int1 = mutableDateTime1.compareTo((ReadableInstant) mutableDateTime0);
      assertEquals(1, int1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2310349118680L), mutableDateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(int1 == int0);
      
      mutableDateTime0.addSeconds(int1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2310349117680L), mutableDateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertNotNull(mutableDateTime0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      mutableDateTime0.addSeconds(int0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 3;
      mutableDateTime0.addMinutes(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409461320L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 0;
      mutableDateTime0.addMinutes(int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 2116;
      mutableDateTime0.addHours(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1400026881320L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 0;
      mutableDateTime0.addHours(int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(object0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 25650002;
      mutableDateTime0.addDays(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2217552578481320L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 0;
      mutableDateTime0.addDays(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = (-693L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals((-693L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = mutableDateTime0.getDayOfMonth();
      assertEquals(1, int0);
      assertEquals((-693L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      mutableDateTime0.addWeeks(int0);
      assertEquals(604799307L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      mutableDateTime0.addWeeks(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int int0 = 0;
      mutableDateTime0.addMonths(int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  //@Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 2116;
      mutableDateTime0.addWeekyears(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(68167167681320L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("monthOfYear", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = mutableDateTime_Property0.compareTo((ReadableInstant) mutableDateTime0);
      assertEquals(0, int0);
      assertEquals("monthOfYear", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      mutableDateTime0.addWeekyears(int0);
      assertEquals("monthOfYear", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 2;
      mutableDateTime0.addYears(int0);
      assertEquals(1455481281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      int int0 = 0;
      mutableDateTime0.addYears(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  //@Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      
      mutableDateTime0.add(durationFieldType0, int0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
      assertNotNull(dateTime0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800000L), dateTime0.getMillis());
      
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals((-12219292800000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DurationFieldType durationFieldType0 = null;
      int int0 = 1072;
      // Undeclared exception!
      try {
        mutableDateTime0.add(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  //@Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 2;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      
      mutableDateTime0.add(durationFieldType0, int0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409283320L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfEra();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("yearOfEra", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      
      int int0 = mutableDateTime_Property0.getMaximumTextLength(locale0);
      assertEquals(9, int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("yearOfEra", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        mutableDateTime0.set(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  //@Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = 0L;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (Chronology) iSOChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      int int0 = 1697;
      mutableDateTime0.set(dateTimeFieldType0, int0);
      assertEquals((-8614767525000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
  }

  //@Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 5;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("+00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      mutableDateTime0.setZoneRetainFields((DateTimeZone) fixedDateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("+00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  //@Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      String string0 = "m]e1wzv}";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("GMT", zoneInfo0.getID());
      
      mutableDateTime0.setZone((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = (-693L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-693L), mutableDateTime0.getMillis());
      
      DateTimeZone dateTimeZone0 = null;
      mutableDateTime0.setZone(dateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-693L), mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 2;
      Weeks weeks0 = Weeks.weeks(int0);
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      mutableDateTime0.add((ReadablePeriod) weeks0, int0);
      assertEquals(1, weeks0.size());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1394828481320L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      ReadableDuration readableDuration0 = null;
      mutableDateTime0.add(readableDuration0, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 5;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.005", fixedDateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.005", fixedDateTimeZone0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) iSOChronology0);
      assertNotNull(lenientChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.dayOfYear();
      assertNotNull(lenientDateTimeField0);
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("dayOfYear", lenientDateTimeField0.getName());
      
      mutableDateTime0.setRounding((DateTimeField) lenientDateTimeField0, int0);
      assertEquals(5, mutableDateTime0.getRoundingMode());
      assertEquals(1392422400000L, mutableDateTime0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("dayOfYear", lenientDateTimeField0.getName());
  }

  //@Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateTimeField dateTimeField0 = iSOChronology0.hourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = 2;
      mutableDateTime0.setRounding(dateTimeField0, int0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(2, mutableDateTime0.getRoundingMode());
      assertEquals(1392411600000L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  //@Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.dayOfWeek();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int0 = 0;
      mutableDateTime0.setRounding(dateTimeField0, int0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = 0L;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (Chronology) iSOChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      int int0 = 1697;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      // Undeclared exception!
      try {
        mutableDateTime0.setRounding(dateTimeField0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal rounding mode: 1697
         //
      }
  }

  //@Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-1373);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTime dateTime0 = new DateTime((long) int0, (Chronology) buddhistChronology0);
      assertNotNull(dateTime0);
      assertEquals((-1373L), dateTime0.getMillis());
      
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals((-1373L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-1373L), dateTime0.getMillis());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateTimeField dateTimeField0 = zonedChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      
      // Undeclared exception!
      try {
        mutableDateTime0.setRounding(dateTimeField0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal rounding mode: -1373
         //
      }
  }

  //@Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      DateTimeField dateTimeField0 = null;
      int int0 = (-3040);
      mutableDateTime0.setRounding(dateTimeField0, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = MutableDateTime.now(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "' is not supported";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertNotNull(mutableDateTime0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", mutableDateTime_Property0.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = 0L;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (Chronology) iSOChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DateTimeField dateTimeField0 = mutableDateTime0.getRoundingField();
      assertNull(dateTimeField0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      mutableDateTime0.setTime(int0, int0, int0, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0L, instant0.getMillis());
      
      String string0 = mutableDateTime0.toString();
      assertNotNull(string0);
      assertEquals("1970-01-01T01:00:00.000+01:00", string0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0L, instant0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("dayOfYear", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = (-693L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals((-693L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("minuteOfDay", mutableDateTime_Property0.getName());
      assertEquals((-693L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      mutableDateTime0.setMillisOfSecond(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281000L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 37;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.037", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.toString());
      
      mutableDateTime0.setDayOfYear(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1391718081320L, mutableDateTime0.getMillis());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.toString());
  }

  //@Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(object0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 25650002;
      // Undeclared exception!
      try {
        mutableDateTime0.setMonthOfYear(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 25650002 for monthOfYear must be in the range [1,12]
         //
      }
  }

  //@Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = (-11);
      // Undeclared exception!
      try {
        mutableDateTime0.setDateTime(int0, int0, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -11 for monthOfYear must be in the range [1,12]
         //
      }
  }

  //@Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = mutableDateTime0.getYearOfCentury();
      assertEquals(14, int0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("+00:00:00.014", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.014", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      mutableDateTime0.setZoneRetainFields((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281306L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("+00:00:00.014", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.014", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  //@Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = 0;
      mutableDateTime0.setSecondOfDay(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000320L, mutableDateTime0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  //@Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(0, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      mutableDateTime0.setHourOfDay(int0);
      assertEquals(1392337281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  //@Test(timeout = 4000)
  public void test52()  throws Throwable  {
      long long0 = 0L;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (Chronology) iSOChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      int int0 = 1697;
      mutableDateTime0.setYear(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-8614940325000L), mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 37;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.037", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("+00:00:00.037", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("hourOfDay", mutableDateTime_Property0.getName());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = mutableDateTime0.getYear();
      assertEquals(2014, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      // Undeclared exception!
      try {
        mutableDateTime0.setMinuteOfHour(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2014 for minuteOfHour must be in the range [0,59]
         //
      }
  }

  //@Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = (-1296);
      // Undeclared exception!
      try {
        mutableDateTime0.setDayOfWeek(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1296 for dayOfWeek must be in the range [1,7]
         //
      }
  }

  //@Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("era", mutableDateTime_Property0.getName());
  }

  //@Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(0, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      mutableDateTime0.setMillisOfDay(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long long0 = (-368L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-368L), mutableDateTime0.getMillis());
      
      int int0 = 1;
      mutableDateTime0.setWeekOfWeekyear(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-368L), mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = (-1408);
      Duration duration0 = Duration.standardDays((long) int0);
      assertNotNull(duration0);
      assertEquals((-121651200000L), duration0.getMillis());
      
      mutableDateTime0.add((ReadableDuration) duration0);
      assertEquals((-121651200000L), duration0.getMillis());
      assertEquals(1270758081320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long long0 = 0L;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (Chronology) iSOChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("weekOfWeekyear", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long long0 = 1011L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1011L, mutableDateTime0.getMillis());
      
      int int0 = (-5);
      // Undeclared exception!
      try {
        mutableDateTime0.setMinuteOfDay(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -5 for minuteOfDay must be in the range [0,1439]
         //
      }
  }

  //@Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.dayOfWeek();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      MutableDateTime.Property mutableDateTime_Property0 = new MutableDateTime.Property(mutableDateTime0, dateTimeField0);
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("dayOfWeek", mutableDateTime_Property0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int0 = mutableDateTime_Property0.getMinimumValue();
      assertEquals(1, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("dayOfWeek", mutableDateTime_Property0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      mutableDateTime0.setDayOfMonth(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1391286081320L, mutableDateTime0.getMillis());
      assertEquals("dayOfWeek", mutableDateTime_Property0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
  }

  //@Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      
      mutableDateTime0.setRounding(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(1388361600000L, mutableDateTime0.getMillis());
      assertEquals(1, mutableDateTime0.getRoundingMode());
  }

  //@Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      mutableDateTime0.setSecondOfMinute(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      mutableDateTime0.setMillis((ReadableInstant) mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long long0 = 1011L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(1011L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1011L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("dayOfWeek", mutableDateTime_Property0.getName());
  }

  //@Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("millisOfDay", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test(timeout = 4000)
  public void test68()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0L, instant0.getMillis());
      
      int int0 = 46;
      mutableDateTime0.setWeekyear(int0);
      assertEquals((-60715263525000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0L, instant0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("dayOfMonth", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0L, instant0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime();
      assertNotNull(mutableDateTime1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
  }

  //@Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 3;
      mutableDateTime0.setDate(int0, int0, int0);
      assertEquals((-62067181043680L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      ReadablePeriod readablePeriod0 = null;
      mutableDateTime0.add(readablePeriod0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      long long0 = 0L;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (Chronology) iSOChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      mutableDateTime0.setTime((ReadableInstant) mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = "Illegal pattern component: ";
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = MutableDateTime.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Illegal pattern component: \"
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      long long0 = (-693L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-693L), mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("minuteOfHour", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-693L), mutableDateTime0.getMillis());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.add(long0);
      assertNotNull(mutableDateTime1);
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals((-41580693L), mutableDateTime1.getMillis());
      assertEquals("minuteOfHour", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-41580693L), mutableDateTime0.getMillis());
      assertSame(mutableDateTime1, mutableDateTime0);
      assertSame(mutableDateTime0, mutableDateTime1);
  }

  //@Test(timeout = 4000)
  public void test76()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertNotNull(mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, instant0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      assertEquals(0L, instant0.getMillis());
      
      int int0 = 46;
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set(int0);
      assertNotNull(mutableDateTime1);
      assertEquals((-60715263525000L), mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals((-60715263525000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      assertEquals(0L, instant0.getMillis());
      assertSame(mutableDateTime1, mutableDateTime0);
      assertSame(mutableDateTime0, mutableDateTime1);
  }

  //@Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("year", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      ISOChronology iSOChronology0 = (ISOChronology)mutableDateTime_Property0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals("year", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 37;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.037", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.getID());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.getID());
      assertEquals("centuryOfEra", mutableDateTime_Property0.getName());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundFloor();
      assertNotNull(mutableDateTime1);
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(946684799963L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(946684799963L, mutableDateTime0.getMillis());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.037", fixedDateTimeZone0.getID());
      assertEquals("centuryOfEra", mutableDateTime_Property0.getName());
      assertSame(mutableDateTime1, mutableDateTime0);
      assertSame(mutableDateTime0, mutableDateTime1);
  }

  //@Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("millisOfSecond", mutableDateTime_Property0.getName());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfFloor();
      assertNotNull(mutableDateTime1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("millisOfSecond", mutableDateTime_Property0.getName());
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
  }

  //@Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      String string0 = ".aAY_BC9F8*";
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("yearOfCentury", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \".aAY_BC9F8*\" for yearOfCentury is not supported
         //
      }
  }

  //@Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 2;
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("monthOfYear", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.addWrapField(int0);
      assertNotNull(mutableDateTime1);
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1397503281320L, mutableDateTime1.getMillis());
      assertEquals("monthOfYear", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1397503281320L, mutableDateTime0.getMillis());
      assertSame(mutableDateTime1, mutableDateTime0);
      assertSame(mutableDateTime0, mutableDateTime1);
  }

  //@Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfEven();
      assertNotNull(mutableDateTime1);
      assertEquals(1388361600000L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1388361600000L, mutableDateTime0.getMillis());
      assertSame(mutableDateTime1, mutableDateTime0);
      assertSame(mutableDateTime0, mutableDateTime1);
  }

  //@Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("millisOfSecond", mutableDateTime_Property0.getName());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundCeiling();
      assertNotNull(mutableDateTime1);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("millisOfSecond", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
  }

  //@Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("year", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
      assertNotNull(mutableDateTime1);
      assertEquals("year", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertSame(mutableDateTime1, mutableDateTime0);
      assertSame(mutableDateTime0, mutableDateTime1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      long long0 = 1011L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(1011L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1011L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("secondOfDay", mutableDateTime_Property0.getName());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfCeiling();
      assertNotNull(mutableDateTime1);
      assertEquals(1000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("secondOfDay", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1000L, mutableDateTime1.getMillis());
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
  }

  //@Test(timeout = 4000)
  public void test86()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertNotNull(mutableDateTime0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 46;
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.add(int0);
      assertNotNull(mutableDateTime1);
      assertEquals(1452128400000L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, instant0.getMillis());
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      assertEquals(1452128400000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertSame(mutableDateTime1, mutableDateTime0);
      assertSame(mutableDateTime0, mutableDateTime1);
  }
}
