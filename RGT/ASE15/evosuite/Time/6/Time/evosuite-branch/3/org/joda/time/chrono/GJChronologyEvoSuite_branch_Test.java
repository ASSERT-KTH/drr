/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:10:53 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

 
public class GJChronologyEvoSuite_branch_Test   {

  //@Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Years years0 = Years.THREE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      int int0 = (-1867);
      long long0 = gJChronology0.add((ReadablePeriod) years0, (long) int0, int0);
      assertEquals(1, years0.size());
      assertEquals((-176752969126867L), long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 11;
      long long0 = (-9223372036854775807L);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Months months0 = Months.EIGHT;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      long long1 = gJChronology0.add((ReadablePeriod) months0, long0, int0);
      assertEquals(1, months0.size());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-9223371805475575807L), long1);
  }

  //@Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      long long0 = (-859L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(gJChronology0);
      
      Years years0 = Years.MAX_VALUE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      long long1 = (-12219292799953L);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, long0, long1);
      assertEquals(1, years0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertArrayEquals(new int[] {(-387)}, intArray0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(dateTime0);
      
      int int0 = (-1949);
      DateTime dateTime1 = dateTime0.plusYears(int0);
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals((-73724169600000L), dateTime1.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = 1919L;
      YearMonth yearMonth0 = new YearMonth(long0, (Chronology) gJChronology0);
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      Years years0 = Years.ZERO;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      DurationFieldType durationFieldType0 = years0.getFieldType();
      assertEquals(1, years0.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = (-1227);
      YearMonth yearMonth1 = yearMonth0.withFieldAdded(durationFieldType0, int0);
      assertEquals(1, years0.size());
      assertEquals(2, yearMonth1.size());
      assertEquals(2, yearMonth0.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertNotNull(yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth0, yearMonth1);
  }

  //@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      long long0 = (-859L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(gJChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(localDateTime0);
      
      int int0 = 10125000;
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(int0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime1.size());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  //@Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = 2524;
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) gJChronology0, dateTimeField0, int0);
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(skipUndoDateTimeField0);
      
      DurationField durationField0 = skipUndoDateTimeField0.getLeapDurationField();
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfMonth", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.roundCeiling((long) int0);
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfMonth", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(82800000L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      long long0 = 1457L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, dateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1457L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = (-473);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1457L, mutableDateTime0.getMillis());
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1457L, mutableDateTime0.getMillis());
      assertNotNull(yearMonthDay0);
      
      // Undeclared exception!
      try {
        YearMonthDay yearMonthDay1 = yearMonthDay0.withMonthOfYear(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -473 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      int int0 = 2524;
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) gJChronology0, dateTimeField0, int0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(skipUndoDateTimeField0);
      
      int int1 = skipUndoDateTimeField0.getLeapAmount((long) int0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
  }

  //@Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = 2524;
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) gJChronology0, dateTimeField0, int0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertNotNull(skipUndoDateTimeField0);
      
      DurationField durationField0 = skipUndoDateTimeField0.getLeapDurationField();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfMonth", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText((long) int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfMonth", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(string0);
      assertEquals("1", string0);
  }

  //@Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[UTC]", string0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      String string1 = gJChronology1.toString();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("GJChronology[Europe/London,cutover=2014-02-14]", string1);
  }

  //@Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      long long0 = 1457L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, dateTimeZone0);
      assertEquals(1457L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertEquals(1457L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals(1457L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(string0);
      assertEquals("GJChronology[Europe/London,cutover=1970-01-01T00:00:01.457Z]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = gJChronology0.equals(object0);
      assertFalse(boolean0);
  }

  //@Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      long long0 = 1000000000000L;
      int int0 = 3;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, long0, int0);
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertFalse(boolean0);
  }

  //@Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      long long0 = (-859L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(gJChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(localDateTime0);
      
      int int0 = 10125000;
      LocalDateTime localDateTime1 = localDateTime0.plusHours(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      
      DateTime dateTime0 = localDateTime1.toDateTime();
      assertEquals(36449999999141L, dateTime0.getMillis());
      assertEquals(4, localDateTime1.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertNotNull(dateTime0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 2;
      int int1 = (-1348);
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1348 for millisOfSecond must be in the range [0,999]
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 39;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 39 for hourOfDay must be in the range [0,23]
         //
      }
  }

  //@Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 2;
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
      assertEquals((-62101461402998L), long0);
  }

  //@Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertNotNull(gJChronology0);
      
      int int0 = 30;
      int int1 = 11;
      long long0 = gJChronology0.getDateTimeMillis(int0, int1, int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-61193491124970L), long0);
  }

  //@Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 3;
      YearMonthDay yearMonthDay0 = new YearMonthDay(int0, int0, int0, (Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtCurrentTime();
      assertEquals((-62067353843680L), dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = (-12219292800000L);
      int int0 = 1729;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("+00:00:01.729", fixedDateTimeZone0.getID());
      assertEquals("+00:00:01.729", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1729
         //
      }
  }

  //@Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 23034375;
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(int0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-13929797663925000L), dateMidnight1.getMillis());
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotNull(dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cutover too early. Must be on or after 0001-01-01.
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = 1919L;
      YearMonth yearMonth0 = new YearMonth(long0, (Chronology) gJChronology0);
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      Interval interval0 = yearMonth0.toInterval((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(2, yearMonth0.size());
      assertEquals(2678400000L, interval0.getEndMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      Period period0 = interval0.toPeriod();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(2, yearMonth0.size());
      assertEquals(2678400000L, interval0.getEndMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertNotNull(period0);
      
      int int0 = (-1227);
      long long1 = gJChronology0.add((ReadablePeriod) period0, long0, int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(2, yearMonth0.size());
      assertEquals(2678400000L, interval0.getEndMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-3226780798081L), long1);
  }

  //@Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      long long0 = (-859L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(gJChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(localDateTime0);
      
      int int0 = 10125000;
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime1.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      int int0 = 3;
      DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(dateTime0);
      
      DateTime dateTime1 = dateTime0.withWeekyear(int0);
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-62048160000000L), dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      //  // Unstable assertion: assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.hashCode();
      //  // Unstable assertion: assertEquals(634970638, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) julianChronology0);
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 3;
      YearMonthDay yearMonthDay0 = new YearMonthDay(int0, int0, int0, (Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.minusDays(int0);
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotNull(yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
  }
}
