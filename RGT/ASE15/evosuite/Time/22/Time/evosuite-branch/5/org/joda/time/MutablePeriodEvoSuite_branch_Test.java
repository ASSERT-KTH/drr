/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:32:02 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class MutablePeriodEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = 0L;
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = mutablePeriod0.getMonths();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, int0);
      
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      
      Period period0 = new Period(long0, (long) int0, periodType0);
      assertNotNull(period0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(5, period0.size());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(5, period0.size());
      
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(5, period0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 10000;
      Months months0 = Months.months(int0);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      
      ReadableDuration readableDuration0 = null;
      mutablePeriod0.add(readableDuration0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
  }

  //@Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1388;
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0, (Chronology) iSOChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      
      ReadableInstant readableInstant0 = null;
      Duration duration0 = Duration.standardSeconds((long) int0);
      assertNotNull(duration0);
      assertEquals(1388000L, duration0.getMillis());
      
      MutableInterval mutableInterval0 = new MutableInterval(readableInstant0, (ReadableDuration) duration0);
      assertNotNull(mutableInterval0);
      assertEquals(1388000L, duration0.getMillis());
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
      assertEquals(1392410669320L, mutableInterval0.getEndMillis());
      
      mutablePeriod0.add((ReadableInterval) mutableInterval0);
      assertEquals(1388000L, duration0.getMillis());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
      assertEquals(1392410669320L, mutableInterval0.getEndMillis());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Days days0 = Days.ONE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, days0.size());
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.add(readableInterval0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, days0.size());
  }

  //@Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 10000;
      Months months0 = Months.months(int0);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      mutablePeriod0.setPeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
  }

  //@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 6;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0, periodType0, (Chronology) ethiopicChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3, mutablePeriod0.size());
      
      Interval interval0 = new Interval((long) int0, (long) int0, (Chronology) ethiopicChronology0);
      assertNotNull(interval0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(6L, interval0.getStartMillis());
      assertEquals(6L, interval0.getEndMillis());
      
      mutablePeriod0.setPeriod((ReadableInterval) interval0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(6L, interval0.getStartMillis());
      assertEquals(6L, interval0.getEndMillis());
      assertEquals(3, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.setPeriod(readableInterval0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = 0;
      mutablePeriod0.setHours(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = PeriodType.HOUR_INDEX;
      assertEquals(4, int0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0, (Chronology) copticChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = (-523);
      mutablePeriod0.addDays(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "org.joda.timL.MutcblePeriod";
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.timL.MutcblePeriod\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = 831L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = mutablePeriod0.getMonths();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, int0);
      
      mutablePeriod0.setValue(int0, int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = PeriodType.HOUR_INDEX;
      assertEquals(4, int0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, periodType0.WEEK_INDEX, int0, int0, int0, int0, int0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 2566;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, PeriodType.WEEK_INDEX, int0, int0, int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setMinutes(PeriodType.WEEK_INDEX);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = (-523);
      mutablePeriod0.setMonths(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "&.I+kmBY2)";
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod((Object) string0, (Chronology) gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"&.I+kmBY2)\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = 831L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = mutablePeriod0.getMonths();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, int0);
      
      mutablePeriod0.setMillis(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Days days0 = Days.ONE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, days0.size());
      
      int int0 = 0;
      mutablePeriod0.addSeconds(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, days0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = 0L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Days days0 = Days.ONE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, days0.size());
      
      int int0 = 0;
      mutablePeriod0.addMinutes(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, days0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = (-523);
      mutablePeriod0.addWeeks(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-1013);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setPeriod((long) int0, (long) int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Months months0 = Months.THREE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Period period0 = months0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, months0.size());
      assertEquals(8, period0.size());
      
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      assertEquals(8, period0.size());
  }

  //@Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ReadableDuration readableDuration0 = null;
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableDuration0, (ReadableInstant) dateMidnight0);
      assertNotNull(mutablePeriod0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = 831L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = mutablePeriod0.getMonths();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, int0);
      
      mutablePeriod0.setWeeks(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  //@Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = 1187L;
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0, (Chronology) gJChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(7, mutablePeriod0.size());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime((Chronology) buddhistChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      
      DateTime dateTime1 = mutableDateTime0.toDateTimeISO();
      assertNotNull(dateTime1);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(1392336000000L, dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime1.withZone((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime2);
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateTime2.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(1392336000000L, dateTime1.getMillis());
      
      mutablePeriod0.setPeriod((ReadableInstant) dateTime2, (ReadableInstant) dateTime0);
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateTime2.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(7, mutablePeriod0.size());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(1392336000000L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
      
      int int0 = (-1);
      // Undeclared exception!
      try {
        mutablePeriod0.addMonths(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = 831L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      mutablePeriod0.add(long0, (Chronology) buddhistChronology0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = 831L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = mutablePeriod0.getMonths();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, int0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      
      mutablePeriod0.set(durationFieldType0, int0);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 10000;
      Months months0 = Months.months(int0);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
      
      int int1 = PeriodType.MILLI_INDEX;
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      mutablePeriod0.addMillis(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      int int0 = 0;
      MutablePeriod mutablePeriod0 = weeks0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.add((long) int0);
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = 0L;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, (Chronology) ethiopicChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  //@Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 6;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0, periodType0, (Chronology) ethiopicChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, mutablePeriod0.size());
      
      Years years0 = Years.ONE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      mutablePeriod0.mergePeriod((ReadablePeriod) years0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(1, years0.size());
      assertEquals(3, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      Hours hours0 = Hours.MAX_VALUE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, hours0.size());
      
      mutablePeriod0.addYears(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, hours0.size());
  }

  //@Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ReadableDuration readableDuration0 = null;
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableDuration0, (ReadableInstant) dateMidnight0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      MutablePeriod mutablePeriod0 = weeks0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
      
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertNotNull(mutablePeriod1);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod1.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 1388;
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0, (Chronology) iSOChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
      
      // Undeclared exception!
      try {
        mutablePeriod0.setDays(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 10000;
      Months months0 = Months.months(int0);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      
      mutablePeriod0.add(durationFieldType0, int0);
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = mutablePeriod0.getMonths();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, int0);
      
      mutablePeriod0.addHours(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = null;
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) string0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = 140;
      mutablePeriod0.setYears(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 10000;
      Months months0 = Months.months(int0);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setSeconds(int0);
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = 0;
      mutablePeriod0.add(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
  }

  //@Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 6;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0, periodType0, (Chronology) ethiopicChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(3, mutablePeriod0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      Duration duration0 = new Duration((long) periodType0.WEEK_INDEX, (long) int0);
      assertNotNull(duration0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(4L, duration0.getMillis());
      
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals(3, mutablePeriod0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(4L, duration0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeriodType periodType0 = null;
      DateTimeZone dateTimeZone0 = null;
      LocalDate localDate0 = new LocalDate((Object) periodType0, dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertNotNull(dateTime0);
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(3, localDate0.size());
      
      Days days0 = Days.FOUR;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      Seconds seconds0 = days0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      
      Duration duration0 = seconds0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(345600000L, duration0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) mutableDateTime0, (ReadableDuration) duration0);
      assertNotNull(mutablePeriod0);
      assertEquals(345600000L, duration0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(1, days0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  //@Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long long0 = 831L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = mutablePeriod0.getMonths();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, int0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      
      DateMidnight dateMidnight0 = new DateMidnight((long) int0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      
      Duration duration0 = period0.toDurationTo((ReadableInstant) dateMidnight0);
      assertNotNull(duration0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, period0.size());
      
      MutablePeriod mutablePeriod1 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableDuration) duration0, periodType0);
      assertNotNull(mutablePeriod1);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertEquals(7, mutablePeriod1.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(8, period0.size());
  }
}
