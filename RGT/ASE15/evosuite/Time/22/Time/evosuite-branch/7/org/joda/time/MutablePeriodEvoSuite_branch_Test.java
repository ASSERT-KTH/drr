/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:17:06 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;

 
public class MutablePeriodEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1734;
      Hours hours0 = Hours.FOUR;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, hours0.size());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = new Duration((long) int0);
      assertEquals(1734L, duration0.getMillis());
      assertNotNull(duration0);
      
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(1734L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, hours0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableDuration readableDuration0 = null;
      mutablePeriod0.add(readableDuration0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 292278993;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Interval interval0 = new Interval((long) PeriodType.HOUR_INDEX, (long) int0);
      assertEquals(292278993L, interval0.getEndMillis());
      assertEquals(4L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      mutablePeriod0.add((ReadableInterval) interval0);
      assertEquals(292278993L, interval0.getEndMillis());
      assertEquals(4L, interval0.getStartMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = (-38L);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, (Chronology) gJChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.add(readableInterval0);
      assertEquals(8, mutablePeriod0.size());
  }

  //@Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Seconds seconds0 = days0.toStandardSeconds();
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-48);
      Integer integer0 = new Integer(int0);
      assertEquals((-48), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) integer0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-48L), mutableDateTime0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(mutableDateTime0);
      assertTrue(integer0.equals((Object)int0));
      
      mutablePeriod0.setPeriod((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-48L), mutableDateTime0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, days0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1, seconds0.size());
      assertTrue(integer0.equals((Object)int0));
  }

  //@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Years years0 = Years.ONE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertEquals(1, years0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Instant instant0 = dateMidnight0.toInstant();
      assertEquals(1392336000000L, instant0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(instant0);
      
      mutablePeriod0.setPeriod((ReadableInstant) instant0, (ReadableInstant) dateMidnight0);
      assertEquals(1, years0.size());
      assertEquals(1392336000000L, instant0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Years years0 = Years.ONE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertEquals(1, years0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      int int0 = years0.size();
      assertEquals(1, years0.size());
      assertEquals(1, int0);
      
      MutableInterval mutableInterval0 = new MutableInterval((long) int0, (long) int0, (Chronology) julianChronology0);
      assertEquals(1, years0.size());
      assertEquals(1L, mutableInterval0.getStartMillis());
      assertEquals(1L, mutableInterval0.getEndMillis());
      assertNotNull(mutableInterval0);
      
      mutablePeriod0.setPeriod((ReadableInterval) mutableInterval0);
      assertEquals(1, years0.size());
      assertEquals(1L, mutableInterval0.getStartMillis());
      assertEquals(1L, mutableInterval0.getEndMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  //@Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.setPeriod(readableInterval0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  //@Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 65;
      mutablePeriod0.setHours(int0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = (-624L);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, (Chronology) julianChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  //@Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(mutablePeriod0);
      
      int int0 = 65;
      mutablePeriod0.addDays(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 63;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.setValue(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 63
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = mutablePeriod0.get(durationFieldType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, int0);
      
      mutablePeriod0.setMinutes(int0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 63;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setMonths(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Years years0 = Years.ONE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, years0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.clear();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = mutablePeriod0.get(durationFieldType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(0, int0);
      
      Hours hours0 = Hours.ONE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Duration duration0 = hours0.toStandardDuration();
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertNotNull(duration0);
      
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Days days0 = seconds0.toStandardDays();
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Duration duration1 = days0.toStandardDuration();
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(0L, duration1.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertNotNull(duration1);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      
      DateTime dateTime0 = new DateTime((long) int0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod((ReadableDuration) duration1, (ReadableInstant) dateTime0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(0L, duration1.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(8, mutablePeriod1.size());
      assertNotNull(mutablePeriod1);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      
      String string0 = mutablePeriod1.toString();
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(0L, duration1.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(8, mutablePeriod1.size());
      assertNotNull(string0);
      assertEquals("PT0S", string0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      
      MutablePeriod mutablePeriod2 = MutablePeriod.parse(string0);
      assertNotSame(mutablePeriod2, mutablePeriod1);
      assertNotSame(mutablePeriod2, mutablePeriod0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(mutablePeriod0, mutablePeriod2);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod1, mutablePeriod2);
      assertEquals(8, mutablePeriod2.size());
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(0L, duration1.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(8, mutablePeriod1.size());
      assertNotNull(mutablePeriod2);
      assertTrue(mutablePeriod2.equals((Object)mutablePeriod1));
      assertFalse(mutablePeriod2.equals((Object)mutablePeriod0));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod2));
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod2));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = mutablePeriod0.get(durationFieldType0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(0, int0);
      
      mutablePeriod0.addSeconds(int0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 65;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Seconds seconds0 = days0.toStandardSeconds();
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-48);
      mutablePeriod0.addMinutes(int0);
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Seconds seconds0 = days0.toStandardSeconds();
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, days0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-48);
      mutablePeriod0.addWeeks(int0);
      assertEquals(1, days0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, seconds0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 19;
      int int1 = mutablePeriod0.getHours();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      mutablePeriod0.setPeriod((long) int0, (long) int1);
      assertEquals(8, mutablePeriod0.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 19;
      mutablePeriod0.addMonths(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = 0L;
      Weeks weeks0 = Weeks.THREE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      MutablePeriod mutablePeriod0 = weeks0.toMutablePeriod();
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Chronology chronology0 = null;
      mutablePeriod0.add(long0, chronology0);
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = (-38L);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, (Chronology) gJChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = 0;
      mutablePeriod0.set(durationFieldType0, int0);
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = mutablePeriod0.get(durationFieldType0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(0, int0);
      
      mutablePeriod0.addMillis(int0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      long long0 = (-2575L);
      mutablePeriod0.add(long0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Seconds seconds0 = days0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.mergePeriod((ReadablePeriod) seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, days0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = 3L;
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-2466);
      mutablePeriod0.addYears(int0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 63;
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period((Object) readableInstant0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Instant instant0 = new Instant((long) int0);
      assertEquals(63L, instant0.getMillis());
      assertNotNull(instant0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(8, period0.size());
      assertNotNull(seconds0);
      
      Duration duration0 = seconds0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(8, period0.size());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.months();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) instant0, periodType0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(63L, instant0.getMillis());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, seconds0.size());
      assertEquals(8, period0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = 3759L;
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0, chronology0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertEquals(1, mutablePeriod1.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod1);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = mutablePeriod0.get(durationFieldType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(0, int0);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod((long) int0, (long) int0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(8, mutablePeriod1.size());
      assertNotNull(mutablePeriod1);
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Years years0 = Years.ONE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, years0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-2524);
      mutablePeriod0.setDays(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      String string0 = mutablePeriod0.toString();
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(string0);
      assertEquals("P0W", string0);
      
      MutablePeriod mutablePeriod1 = MutablePeriod.parse(string0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(8, mutablePeriod1.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod1);
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = mutablePeriod0.get(durationFieldType0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, int0);
      
      mutablePeriod0.add(durationFieldType0, int0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = mutablePeriod0.get(durationFieldType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(0, int0);
      
      mutablePeriod0.addHours(int0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 292278993;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setYears(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = 3759L;
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Chronology chronology0 = null;
      int int0 = PeriodType.YEAR_INDEX;
      assertEquals(0, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, (long) int0, periodType0, chronology0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      long long0 = (-2575L);
      int int0 = 19;
      Chronology chronology0 = null;
      Period period0 = new Period(long0, (long) int0, chronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = period0.getPeriodType();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(8, period0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod((Object) mutablePeriod0, periodType0);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(8, mutablePeriod1.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertNotNull(mutablePeriod1);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 1734;
      Hours hours0 = Hours.FOUR;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertEquals(1, hours0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.add(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(1, hours0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Hours hours0 = Hours.ONE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Duration duration0 = hours0.toStandardDuration();
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertNotNull(duration0);
      
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(3600000L, duration0.getMillis());
      assertEquals(1, hours0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 63;
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period((Object) readableInstant0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Instant instant0 = new Instant((long) int0);
      assertEquals(63L, instant0.getMillis());
      assertNotNull(instant0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(8, period0.size());
      assertNotNull(seconds0);
      
      Duration duration0 = seconds0.toStandardDuration();
      assertEquals(1, seconds0.size());
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) instant0, (ReadableDuration) duration0);
      assertEquals(63L, instant0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(mutablePeriod0);
  }

  //@Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1734;
      Hours hours0 = Hours.FOUR;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, hours0.size());
      assertNotNull(mutablePeriod0);
      
      PeriodType periodType0 = mutablePeriod0.getPeriodType();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, hours0.size());
      assertNotNull(periodType0);
      
      Duration duration0 = new Duration((long) int0);
      assertEquals(1734L, duration0.getMillis());
      assertNotNull(duration0);
      
      DateMidnight dateMidnight0 = new DateMidnight((long) int0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableDuration) duration0, periodType0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, hours0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod1.size());
      assertEquals(1734L, duration0.getMillis());
      assertNotNull(mutablePeriod1);
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
  }
}
