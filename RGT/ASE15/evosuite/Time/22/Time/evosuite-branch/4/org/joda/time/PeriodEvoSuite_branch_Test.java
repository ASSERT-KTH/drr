/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:19:47 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PeriodEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = (-522);
      Period period1 = period0.minusYears(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertEquals(8, period2.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 4395;
      Period period1 = period0.plusYears(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      
      // Undeclared exception!
      try {
        Hours hours0 = period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains years and years vary in length
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = null;
      Period period2 = period0.minus((ReadablePeriod) period1);
      assertSame(period0, period2);
      assertSame(period2, period0);
      assertNotNull(period2);
      assertEquals(8, period0.size());
      assertEquals(8, period2.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minus((ReadablePeriod) period0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-1187);
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int1 = 0;
      Period period1 = period0.minusMillis(int1);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      PeriodType.HOUR_INDEX = int0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusSeconds(PeriodType.HOUR_INDEX);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 0;
      Period period1 = period0.plusMinutes(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = period0.size();
      assertEquals(8, int0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.plusHours(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      PeriodType.SECOND_INDEX = int0;
      Period period1 = period0.minusDays(PeriodType.SECOND_INDEX);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 3095;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int1 = 0;
      Period period1 = period0.minusWeeks(int1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 0;
      Period period1 = period0.plusMonths(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.plusYears(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 3095;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.plus(readablePeriod0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.plus((ReadablePeriod) period0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 0L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 2;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Months months0 = Months.EIGHT;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Period period0 = months0.toPeriod();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(1, months0.size());
      
      DurationFieldType durationFieldType0 = null;
      int int0 = 1359;
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = 0L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
      assertEquals(8, period0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 169L;
      Period period0 = new Period(long0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNull(durationFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      int int0 = 456;
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 4401;
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'centuries'
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = null;
      Period period2 = period0.withFields((ReadablePeriod) period1);
      assertSame(period2, period0);
      assertSame(period0, period2);
      assertNotNull(period2);
      assertEquals(8, period2.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-816);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      PeriodType periodType0 = period0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, period0.size());
      
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 0L;
      LocalTime localTime0 = new LocalTime(long0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) yearMonthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) localTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test23() {}
//   @Test(timeout = 4000)
//   public void test23()  throws Throwable  {
//       LocalTime localTime0 = LocalTime.MIDNIGHT;
//       assertNotNull(localTime0);
//       assertEquals(4, localTime0.size());
//       
//       Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) localTime0);
//       assertNotNull(period0);
//       assertEquals(4, period0.size());
//       assertEquals(4, localTime0.size());
//   }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(8, period0.size());
      assertEquals(1, seconds0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-816);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      PeriodType periodType0 = period0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, period0.size());
      
      Period period1 = new Period(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 3095;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusWeeks(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = 0L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
      assertEquals(8, period0.size());
      
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      
      Period period1 = new Period((long) int0, periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(1, period1.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = 0L;
      DateTime dateTime0 = new DateTime(long0);
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertNotNull(mutableInterval0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, dateTime0.getMillis());
      
      ISOChronology iSOChronology0 = (ISOChronology)mutableInterval0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, dateTime0.getMillis());
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0, (Chronology) iSOChronology0);
      assertNotNull(localTime0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(4, localTime0.size());
      assertEquals(0L, dateTime0.getMillis());
      
      Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertNotNull(period0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(4, localTime0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(8, period0.size());
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(1, weeks0.size());
      assertEquals(4, localTime0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      PeriodType periodType0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Period period1 = new Period((Object) period0, periodType0, (Chronology) gregorianChronology0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-4207);
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      // Undeclared exception!
      try {
        Days days0 = period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 69;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = 0L;
      DateTime dateTime0 = new DateTime(long0);
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertNotNull(mutableInterval0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      
      ISOChronology iSOChronology0 = (ISOChronology)mutableInterval0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0, (Chronology) iSOChronology0);
      assertNotNull(localTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      
      Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertNotNull(period0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(8, period0.size());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      
      int int0 = 232;
      Period period1 = period0.withHours(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(8, period0.size());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(8, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusSeconds(PeriodType.HOUR_INDEX);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = 0L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 2;
      Period period1 = period0.withWeeks(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long long0 = (-1311L);
      PeriodType periodType0 = null;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals((-1311L), instant0.getMillis());
      
      Duration duration0 = new Duration(long0, long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      Period period0 = new Period((ReadableInstant) instant0, (ReadableDuration) duration0, periodType0);
      assertNotNull(period0);
      assertEquals((-1311L), instant0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, period0.size());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Period period1 = new Period((Object) period0, (Chronology) gregorianChronology0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals((-1311L), instant0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = period0.size();
      assertEquals(8, int0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.withSeconds(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusHours(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = (-189L);
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals((-189000L), duration0.getMillis());
      
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) dateMidnight0, periodType0);
      assertNotNull(period0);
      assertEquals(4, period0.size());
      assertEquals((-189000L), duration0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long long0 = 0L;
      Duration duration0 = Duration.standardMinutes(long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      Period period0 = duration0.toPeriod();
      assertNotNull(period0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, period0.size());
      
      int int0 = 0;
      Period period1 = period0.withDays(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-816);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      MutableInterval mutableInterval0 = new MutableInterval();
      assertNotNull(mutableInterval0);
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      
      PeriodType periodType0 = period0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(8, period0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      
      Period period1 = mutableInterval0.toPeriod(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(8, period0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1327;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      
      Period period1 = period0.minusMinutes(periodType0.SECOND_INDEX);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableInstant) dateTime0, periodType0);
      assertNotNull(period0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, period0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusDays(PeriodType.SECOND_INDEX);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-1187);
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusMillis(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTime dateTime0 = instant0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      
      YearMonthDay yearMonthDay0 = dateTime0.toYearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(0L, dateTime0.getMillis());
      
      PeriodType periodType0 = null;
      Period period0 = new Period((ReadablePartial) yearMonthDay0, (ReadablePartial) yearMonthDay0, periodType0);
      assertNotNull(period0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(8, period0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      int int0 = 7;
      DateTime dateTime1 = dateTime0.withDate(int0, int0, int0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-61930064243680L), dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      
      Period period0 = new Period((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(period0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-61930064243680L), dateTime1.getMillis());
      assertEquals(8, period0.size());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      int int1 = 0;
      Period period1 = period0.withYears(int1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(period1, period0);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(8, period1.size());
      assertEquals((-61930064243680L), dateTime1.getMillis());
      assertEquals(8, period0.size());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(period0.equals((Object)period1));
      
      // Undeclared exception!
      try {
        Period period2 = period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      long long0 = (-1311L);
      PeriodType periodType0 = null;
      Period period0 = new Period(long0, long0, periodType0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "`cQ~c]DN";
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"`cQ~c]DN\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = period0.size();
      assertEquals(8, int0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusMonths(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 1327;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.withMinutes(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 4401;
      Period period1 = period0.withMillis(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 1327;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      Period period1 = period0.withPeriodType(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(6, period1.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long long0 = (-4501L);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Period period0 = new Period(long0, (Chronology) gJChronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Hours hours0 = period0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(8, period0.size());
      
      Period period1 = new Period((Object) hours0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(1, period1.size());
      assertEquals(1, hours0.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = 0L;
      DateTime dateTime0 = new DateTime(long0);
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertNotNull(mutableInterval0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      
      ISOChronology iSOChronology0 = (ISOChronology)mutableInterval0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0, (Chronology) iSOChronology0);
      assertNotNull(localTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(4, localTime0.size());
      
      Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(4, localTime0.size());
      
      int int0 = period0.getHours();
      assertEquals(0, int0);
      assertEquals(8, period0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(4, localTime0.size());
      
      Period period1 = Period.millis(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(8, period1.size());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(4, localTime0.size());
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long long0 = (-1311L);
      int int0 = 69;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Period period0 = new Period((long) int0, long0, (Chronology) gregorianChronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long long0 = (-1381L);
      Duration duration0 = Duration.millis(long0);
      assertNotNull(duration0);
      assertEquals((-1381L), duration0.getMillis());
      
      Chronology chronology0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(chronology0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateMidnight0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-1381L), duration0.getMillis());
      
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-1381L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTime dateTime0 = instant0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, instant0.getMillis());
      
      YearMonthDay yearMonthDay0 = dateTime0.toYearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, instant0.getMillis());
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, instant0.getMillis());
      
      int int0 = (-522);
      Duration duration0 = new Duration((long) int0, (long) int0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      Period period0 = new Period((ReadableInstant) dateMidnight0, (ReadableDuration) duration0);
      assertNotNull(period0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = period0.size();
      assertEquals(8, int0);
      assertEquals(8, period0.size());
      
      Period period1 = Period.seconds(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }
}
