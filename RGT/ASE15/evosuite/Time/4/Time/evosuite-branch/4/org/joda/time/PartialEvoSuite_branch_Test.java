/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:19:23 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MutableInterval;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PartialEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      String string0 = "k{ptdo{?$[j)#).L.dz";
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      String string0 = "[@>(:6;QJ{c@<C";
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[0].toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[0].getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(3, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(partial0);
      
      // Undeclared exception!
      try {
        String string0 = partial0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 9;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, partial0.size());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatter0);
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertEquals("-W09", string1);
      assertEquals(1, partial0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[2].toString());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[2].getName());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(3, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(partial0);
      
      // Undeclared exception!
      try {
        String string0 = partial0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      String string0 = null;
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = partial0.toString(string0, locale0);
      assertEquals("[]", string1);
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, partial0.size());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 9;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(1, partial0.size());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(1, partial0.size());
      assertNotNull(dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 449;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) iSOChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) localDate0);
      assertFalse(boolean0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = partial0.isMatch(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertTrue(boolean0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 8;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTime dateTime0 = null;
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime0);
      assertFalse(boolean0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      ReadableInstant readableInstant0 = null;
      boolean boolean0 = partial0.isMatch(readableInstant0);
      assertTrue(boolean0);
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test12() {}
//   @Test(timeout = 4000)
//   public void test12()  throws Throwable  {
//       long long0 = (-2905L);
//       LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
//       assertEquals(4, localTime0.size());
//       assertNotNull(localTime0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localTime0);
//       assertEquals(4, localTime0.size());
//       assertEquals(4, partial0.size());
//       assertNotNull(partial0);
//       
//       Period period0 = new Period(long0);
//       assertNotNull(period0);
//       
//       int int0 = 2975;
//       Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) period0, int0);
//       assertNotSame(partial0, partial1);
//       assertNotSame(partial1, partial0);
//       assertEquals(4, localTime0.size());
//       assertEquals(4, partial0.size());
//       assertEquals(4, partial1.size());
//       assertFalse(partial0.equals((Object)partial1));
//       assertFalse(partial1.equals((Object)partial0));
//       assertNotNull(partial1);
//   }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 0;
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) period0, int0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      ReadablePeriod readablePeriod0 = null;
      int int0 = 0;
      Partial partial1 = partial0.withPeriodAdded(readablePeriod0, int0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test15() {}
//   @Test(timeout = 4000)
//   public void test15()  throws Throwable  {
//       long long0 = (-2905L);
//       LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
//       assertEquals(4, localTime0.size());
//       assertNotNull(localTime0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localTime0);
//       assertEquals(4, partial0.size());
//       assertEquals(4, localTime0.size());
//       assertNotNull(partial0);
//       
//       DurationFieldType durationFieldType0 = DurationFieldType.seconds();
//       assertEquals("seconds", durationFieldType0.toString());
//       assertEquals("seconds", durationFieldType0.getName());
//       assertNotNull(durationFieldType0);
//       
//       int int0 = 0;
//       Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
//       assertSame(partial0, partial1);
//       assertSame(partial1, partial0);
//       assertEquals(4, partial0.size());
//       assertEquals(4, partial1.size());
//       assertEquals("seconds", durationFieldType0.toString());
//       assertEquals("seconds", durationFieldType0.getName());
//       assertEquals(4, localTime0.size());
//       assertNotNull(partial1);
//   }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-630);
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) ethiopicChronology0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Years years0 = Years.ZERO;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      DurationFieldType durationFieldType0 = years0.getFieldType();
      assertEquals(1, years0.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(1, years0.size());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test17() {}
//   @Test(timeout = 4000)
//   public void test17()  throws Throwable  {
//       long long0 = (-2922L);
//       LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
//       assertEquals(4, localTime0.size());
//       assertNotNull(localTime0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localTime0);
//       assertEquals(4, localTime0.size());
//       assertEquals(4, partial0.size());
//       assertNotNull(partial0);
//       
//       MutableInterval mutableInterval0 = new MutableInterval();
//       assertEquals(0L, mutableInterval0.getStartMillis());
//       assertEquals(0L, mutableInterval0.getEndMillis());
//       assertNotNull(mutableInterval0);
//       
//       Seconds seconds0 = Seconds.secondsIn((ReadableInterval) mutableInterval0);
//       assertEquals(1, seconds0.size());
//       assertEquals(0L, mutableInterval0.getStartMillis());
//       assertEquals(0L, mutableInterval0.getEndMillis());
//       assertNotNull(seconds0);
//       
//       int int0 = 0;
//       DurationFieldType durationFieldType0 = seconds0.getFieldType();
//       assertEquals(1, seconds0.size());
//       assertEquals(0L, mutableInterval0.getStartMillis());
//       assertEquals(0L, mutableInterval0.getEndMillis());
//       assertEquals("seconds", durationFieldType0.getName());
//       assertEquals("seconds", durationFieldType0.toString());
//       assertNotNull(durationFieldType0);
//       
//       Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
//       assertSame(partial1, partial0);
//       assertSame(partial0, partial1);
//       assertEquals(1, seconds0.size());
//       assertEquals(4, localTime0.size());
//       assertEquals(0L, mutableInterval0.getStartMillis());
//       assertEquals(0L, mutableInterval0.getEndMillis());
//       assertEquals(4, partial1.size());
//       assertEquals("seconds", durationFieldType0.getName());
//       assertEquals("seconds", durationFieldType0.toString());
//       assertEquals(4, partial0.size());
//       assertNotNull(partial1);
//   }

  @Test(timeout = 4000)
  public void test18() {}
//   @Test(timeout = 4000)
//   public void test18()  throws Throwable  {
//       long long0 = (-2905L);
//       LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
//       assertEquals(4, localTime0.size());
//       assertNotNull(localTime0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localTime0);
//       assertEquals(4, partial0.size());
//       assertEquals(4, localTime0.size());
//       assertNotNull(partial0);
//       
//       MutableInterval mutableInterval0 = new MutableInterval();
//       assertEquals(0L, mutableInterval0.getEndMillis());
//       assertEquals(0L, mutableInterval0.getStartMillis());
//       assertNotNull(mutableInterval0);
//       
//       Seconds seconds0 = Seconds.secondsIn((ReadableInterval) mutableInterval0);
//       assertEquals(0L, mutableInterval0.getEndMillis());
//       assertEquals(0L, mutableInterval0.getStartMillis());
//       assertEquals(1, seconds0.size());
//       assertNotNull(seconds0);
//       
//       int int0 = (-2312);
//       DurationFieldType durationFieldType0 = seconds0.getFieldType();
//       assertEquals(0L, mutableInterval0.getEndMillis());
//       assertEquals(0L, mutableInterval0.getStartMillis());
//       assertEquals("seconds", durationFieldType0.toString());
//       assertEquals("seconds", durationFieldType0.getName());
//       assertEquals(1, seconds0.size());
//       assertNotNull(durationFieldType0);
//       
//       Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
//       assertNotSame(partial1, partial0);
//       assertNotSame(partial0, partial1);
//       assertEquals(0L, mutableInterval0.getEndMillis());
//       assertEquals(0L, mutableInterval0.getStartMillis());
//       assertEquals("seconds", durationFieldType0.toString());
//       assertEquals("seconds", durationFieldType0.getName());
//       assertEquals(1, seconds0.size());
//       assertEquals(4, partial1.size());
//       assertEquals(4, partial0.size());
//       assertEquals(4, localTime0.size());
//       assertFalse(partial1.equals((Object)partial0));
//       assertFalse(partial0.equals((Object)partial1));
//       assertNotNull(partial1);
//   }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 8;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 46;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      int int1 = 0;
      Partial partial1 = partial0.withField(dateTimeFieldType0, int1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(partial0.equals((Object)partial1));
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = (-2905L);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      int int1 = 170;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 170 for weekyearOfCentury must be in the range [0,99]
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = (-2905L);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertEquals(4, partial0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(partial0);
      
      int int0 = (-2312);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2312 for clockhourOfHalfday must not be smaller than 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1673;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1673 for weekyearOfCentury must not be larger than 99
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-630);
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) ethiopicChronology0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = (-2922L);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertEquals(4, partial0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long long0 = 1800000L;
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(long0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      ISOChronology iSOChronology0 = (ISOChronology)timeOfDay0.getChronology();
      assertEquals(4, timeOfDay0.size());
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      assertEquals(0, partial0.size());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) iSOChronology0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) ethiopicChronology0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].toString());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].toString());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldTypeArray0[3].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[3].getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      int[] intArray0 = new int[4];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: weekyear
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = (-2905L);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertEquals(4, partial0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 2975;
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, localTime0.size());
      assertEquals(5, partial1.size());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType1.toString());
      assertEquals("centuryOfEra", dateTimeFieldType1.getName());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].toString());
      assertEquals("centuryOfEra", dateTimeFieldType1.toString());
      assertEquals("centuryOfEra", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[2].getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[2].toString());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[1];
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[3].toString());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[3].getName());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[4].getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[4].toString());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType1;
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[5].toString());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[5].getName());
      assertEquals("centuryOfEra", dateTimeFieldType1.toString());
      assertEquals("centuryOfEra", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[5]);
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldTypeArray0[2];
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[6].toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[6].getName());
      assertNotNull(dateTimeFieldTypeArray0[6]);
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldTypeArray0[5];
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[7].getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[7].toString());
      assertNotNull(dateTimeFieldTypeArray0[7]);
      
      int[] intArray0 = new int[8];
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: millisOfDay < centuryOfEra
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-1105);
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1105 for era must not be smaller than 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[0].toString());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[1].getName());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[1].toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[2].toString());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[2].getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[3];
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: dayOfMonth
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = new int[8];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      int[] intArray0 = new int[3];
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(copticChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Seconds seconds0 = Seconds.THREE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Partial partial1 = partial0.minus((ReadablePeriod) seconds0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(1, seconds0.size());
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 8;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(0, partial1.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 8;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(dateTimeFieldTypeArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = (-2905L);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      Days days0 = Days.FOUR;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Partial partial1 = partial0.plus((ReadablePeriod) days0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(1, days0.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 46;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(0, partial0.size());
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addToCopy(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-630);
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) ethiopicChronology0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(partial_Property0);
      
      String string0 = partial_Property0.getAsString();
      assertEquals("-630", string0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 46;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.withMaximumValue();
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 449;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(partial_Property0);
      
      String string0 = "#a";
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Partial partial0 = null;
      int int0 = 1968;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.getPartial();
      assertNull(partial1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-630);
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) ethiopicChronology0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotNull(partial1);
  }
}
