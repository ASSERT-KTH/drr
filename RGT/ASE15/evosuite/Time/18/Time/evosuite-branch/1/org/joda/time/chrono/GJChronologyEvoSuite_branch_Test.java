/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:47:51 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class GJChronologyEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = (-353);
      int int1 = (-3);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int1, int0, int1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (long) int1, (long) int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-350)}, intArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(intArray0);
  }

  //@Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      assertNotNull(gJChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      Months months0 = Months.NINE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      long long0 = (-4294967296L);
      int int0 = 543;
      long long1 = gJChronology0.add((ReadablePeriod) months0, long0, int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(12846236232704L, long1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, months0.size());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = 1540L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = 1549;
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime2 = localDateTime1.plusMonths(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertNotNull(localDateTime2);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime0.size());
  }

  //@Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-3196);
      DateTimeZone dateTimeZone0 = null;
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0);
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = mutablePeriod0.toDurationFrom(readableInstant0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      Interval interval0 = duration0.toIntervalTo(readableInstant0);
      assertNotNull(interval0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      DateTime dateTime0 = interval0.getStart();
      assertNotNull(dateTime0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      assertNotNull(gJChronology0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      long long0 = 0L;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (long) int0, long0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 3, 196}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = (-3674);
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.plusYears(int0);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotNull(yearMonthDay1);
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      
      YearMonthDay yearMonthDay2 = new YearMonthDay((Object) yearMonthDay1);
      assertNotSame(yearMonthDay2, yearMonthDay0);
      assertNotSame(yearMonthDay2, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay1, yearMonthDay2);
      assertNotSame(yearMonthDay0, yearMonthDay2);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertFalse(yearMonthDay2.equals((Object)yearMonthDay0));
      assertTrue(yearMonthDay2.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertTrue(yearMonthDay1.equals((Object)yearMonthDay2));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay2));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotNull(yearMonthDay2);
      assertEquals(3, yearMonthDay2.size());
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = (-12219292800000L);
      int int0 = 1935;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      // Undeclared exception!
      try {
        long long1 = gJChronology0.set((ReadablePartial) yearMonthDay0, (long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 14 for dayOfMonth is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = (-3674);
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.plus((ReadablePeriod) years0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertNotNull(yearMonthDay1);
      assertEquals(1, years0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
      
      YearMonthDay yearMonthDay2 = yearMonthDay1.plusDays(int0);
      assertNotSame(yearMonthDay0, yearMonthDay2);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay2);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay2, yearMonthDay0);
      assertNotSame(yearMonthDay2, yearMonthDay1);
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay2));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay2));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay2.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay2.equals((Object)yearMonthDay1));
      assertNotNull(yearMonthDay2);
      assertEquals(1, years0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay2.size());
  }

  //@Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = (-12219292800000L);
      long long1 = gJChronology0.set((ReadablePartial) yearMonth0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(1391558325000L, long1);
      assertEquals(2, yearMonth0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 50;
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0);
      assertNotNull(mutablePeriod0);
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.plus((ReadablePeriod) mutablePeriod0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertTrue(yearMonthDay0.equals((Object)yearMonthDay1));
      assertTrue(yearMonthDay1.equals((Object)yearMonthDay0));
      assertNotNull(yearMonthDay1);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
  }

  //@Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight0);
      assertNotNull(gJChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[Europe/London,cutover=2014-02-14]", string0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  //@Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = 1029L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(1029L, instant0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1029L, instant0.getMillis());
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[Europe/London,cutover=1970-01-01T00:00:01.029Z]", string0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1029L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[UTC]", string0);
  }

  //@Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 28;
      LocalDate localDate0 = new LocalDate((long) int0, (Chronology) gJChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(3, localDate0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 28;
      int int1 = gJChronology0.hashCode();
      assertFalse(int1 == int0);
      assertEquals(302621037, int1);
      
      try {
        long long0 = gJChronology0.getDateTimeMillis(int1, int1, int1, int1, int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 302621037 for hourOfDay must be in the range [0,23]
         //
      }
  }

  //@Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 4;
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
      assertEquals((-62033025280996L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 50;
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
  }

  //@Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 4;
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0);
      assertEquals((-62033039924996L), long0);
  }

  //@Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 50;
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtCurrentTime();
      assertNotNull(dateTime0);
      assertEquals(69681320L, dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      long long0 = (-12219292800000L);
      int int0 = (-1462);
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1462
         //
      }
  }

  //@Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = (-967);
      // Undeclared exception!
      try {
        GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (long) int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -967
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = (-1351);
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      long long0 = gJChronology0.add((ReadablePeriod) years0, (long) int0, int0);
      assertEquals(57597780326398649L, long0);
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Years years0 = Years.MIN_VALUE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      long long0 = 0L;
      long long1 = (-12219292800000L);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, long0, long1);
      assertArrayEquals(new int[] {(-387)}, intArray0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertNotNull(intArray0);
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      int int0 = 11;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+11:00", fixedDateTimeZone0.toString());
      assertEquals("+11:00", fixedDateTimeZone0.getID());
      
      ReadableInstant readableInstant0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, readableInstant0);
      assertNotNull(gJChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+11:00", fixedDateTimeZone0.toString());
      assertEquals("+11:00", fixedDateTimeZone0.getID());
      
      boolean boolean0 = gJChronology0.equals((Object) assembledChronology_Fields0);
      assertFalse(boolean0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+11:00", fixedDateTimeZone0.toString());
      assertEquals("+11:00", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 11;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+11:00", fixedDateTimeZone0.toString());
      assertEquals("+11:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      ReadableInstant readableInstant0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, readableInstant0);
      assertNotNull(gJChronology0);
      assertEquals("+11:00", fixedDateTimeZone0.toString());
      assertEquals("+11:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(int0);
      assertEquals((-1209599989L), long0);
      assertEquals("+11:00", fixedDateTimeZone0.toString());
      assertEquals("+11:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  //@Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      int int0 = (-998);
      long long0 = lenientChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
      assertEquals((-96347516003998L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
  }

  //@Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = (-1674);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gJChronology0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      TimeOfDay timeOfDay1 = timeOfDay0.minusSeconds(int0);
      assertNotSame(timeOfDay1, timeOfDay0);
      assertNotSame(timeOfDay0, timeOfDay1);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      assertFalse(timeOfDay0.equals((Object)timeOfDay1));
      assertNotNull(timeOfDay1);
      assertEquals(4, timeOfDay1.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }
}
