/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:29:07 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class BaseSingleFieldPeriodEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 2363;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      Years years1 = years0.minus(int0);
      assertFalse(years0.equals((Object)years1));
      assertFalse(years1.equals((Object)years0));
      assertNotSame(years0, years1);
      assertNotSame(years1, years0);
      assertNotNull(years1);
      assertEquals(1, years0.size());
      assertEquals(1, years1.size());
      
      int int1 = years1.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals((-1), int1);
      assertFalse(years0.equals((Object)years1));
      assertFalse(int1 == int0);
      assertFalse(years1.equals((Object)years0));
      assertFalse(int0 == int1);
      assertNotSame(years0, years1);
      assertNotSame(years1, years0);
      assertEquals(1, years0.size());
      assertEquals(1, years1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 2372;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      Years years1 = Years.ZERO;
      assertFalse(years1.equals((Object)years0));
      assertNotSame(years1, years0);
      assertNotNull(years1);
      assertEquals(1, years1.size());
      
      int int1 = years0.compareTo((BaseSingleFieldPeriod) years1);
      assertEquals(1, int1);
      assertFalse(years0.equals((Object)years1));
      assertFalse(years1.equals((Object)years0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotSame(years0, years1);
      assertNotSame(years1, years0);
      assertEquals(1, years0.size());
      assertEquals(1, years1.size());
  }

  @Test(timeout = 4000)
  public void test02() {}
//   @Test(timeout = 4000)
//   public void test02()  throws Throwable  {
//       int int0 = 5;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=5,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=5,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localDateTime0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61996128900000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=156,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=5,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
//       assertNotNull(weeks0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61996128900000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=156,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=5,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, weeks0.size());
//       
//       Seconds seconds0 = weeks0.toStandardSeconds();
//       assertNotNull(seconds0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61996128900000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=156,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=5,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, weeks0.size());
//       assertEquals(1, seconds0.size());
//       
//       // Undeclared exception!
//       try {
//         int int1 = weeks0.compareTo((BaseSingleFieldPeriod) seconds0);
//         fail("Expecting exception: ClassCastException");
//       
//       } catch(ClassCastException e) {
//          //
//          // class org.joda.time.Weeks cannot be compared to class org.joda.time.Seconds
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 2363;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      int int1 = years0.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 217;
      Hours hours0 = Hours.FIVE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Hours hours1 = hours0.multipliedBy(int0);
      assertFalse(hours1.equals((Object)hours0));
      assertFalse(hours0.equals((Object)hours1));
      assertNotSame(hours1, hours0);
      assertNotSame(hours0, hours1);
      assertNotNull(hours1);
      assertEquals(1, hours1.size());
      assertEquals(1, hours0.size());
      
      boolean boolean0 = hours1.equals((Object) hours0);
      assertFalse(boolean0);
      assertFalse(hours1.equals((Object)hours0));
      assertFalse(hours0.equals((Object)hours1));
      assertNotSame(hours1, hours0);
      assertNotSame(hours0, hours1);
      assertEquals(1, hours1.size());
      assertEquals(1, hours0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2363;
      Chronology chronology0 = null;
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((long) int0, chronology0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      int int1 = timeOfDay0.getSecondOfMinute();
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(4, timeOfDay0.size());
      
      Months months0 = Months.ZERO;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) months0);
      assertNotNull(seconds0);
      assertEquals(1, months0.size());
      assertEquals(1, seconds0.size());
      
      boolean boolean0 = seconds0.equals((Object) int1);
      assertFalse(boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(4, timeOfDay0.size());
      assertEquals(1, months0.size());
      assertEquals(1, seconds0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 1L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(1L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertNotNull(mutableDateTime0);
      assertEquals(1L, instant0.getMillis());
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      assertNotNull(minutes0);
      assertEquals(1L, instant0.getMillis());
      assertEquals(1, minutes0.size());
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      PeriodType periodType0 = minutes0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1L, instant0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, minutes0.size());
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1L, instant0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, minutes0.size());
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      boolean boolean0 = minutes0.equals((Object) mutablePeriod0);
      assertTrue(boolean0);
      assertEquals(1L, instant0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, minutes0.size());
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Days days0 = Days.ZERO;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      Minutes minutes0 = Minutes.ONE;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      boolean boolean0 = days0.equals((Object) minutes0);
      assertFalse(boolean0);
      assertEquals(1, days0.size());
      assertEquals(1, minutes0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Months months0 = Months.ZERO;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertNotNull(durationFieldType0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(1, months0.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 217;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      DurationFieldType durationFieldType0 = null;
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-29);
      Chronology chronology0 = null;
      Interval interval0 = new Interval((long) int0, (long) int0, chronology0);
      assertNotNull(interval0);
      assertEquals((-29L), interval0.getStartMillis());
      assertEquals((-29L), interval0.getEndMillis());
      
      Minutes minutes0 = Minutes.minutesIn((ReadableInterval) interval0);
      assertNotNull(minutes0);
      assertEquals((-29L), interval0.getStartMillis());
      assertEquals((-29L), interval0.getEndMillis());
      assertEquals(1, minutes0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      assertNotNull(durationFieldType0);
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      
      int int1 = minutes0.get(durationFieldType0);
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals((-29L), interval0.getStartMillis());
      assertEquals((-29L), interval0.getEndMillis());
      assertEquals(1, minutes0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      assertNotNull(durationFieldType0);
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      
      Years years0 = Years.THREE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      int int0 = years0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(1, years0.size());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-29);
      Seconds seconds0 = Seconds.ZERO;
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      // Undeclared exception!
      try {
        int int1 = seconds0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -29
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1725;
      Seconds seconds0 = Seconds.seconds(int0);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      // Undeclared exception!
      try {
        DurationFieldType durationFieldType0 = seconds0.getFieldType(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1725
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Months months0 = Months.TWELVE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      // Undeclared exception!
      try {
        Hours hours0 = Hours.standardHoursIn((ReadablePeriod) months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P12M
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReadablePeriod readablePeriod0 = null;
      Hours hours0 = Hours.standardHoursIn(readablePeriod0);
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) minutes0);
      assertNotNull(weeks0);
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 3132L;
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(long0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      MonthDay monthDay0 = MonthDay.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween((ReadablePartial) timeOfDay0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay(int0, int0, (Chronology) ethiopicChronology0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0, (Chronology) julianChronology0);
      assertNotNull(localDateTime0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try {
        Hours hours0 = Hours.hoursBetween((ReadablePartial) timeOfDay0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localTime0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      ReadableInstant readableInstant0 = null;
      // Undeclared exception!
      try {
        Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) mutableDateTime0, readableInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      // Undeclared exception!
      try {
        Weeks weeks0 = Weeks.weeksBetween(readableInstant0, readableInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Years years0 = Years.ZERO;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = 1L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(1L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertNotNull(mutableDateTime0);
      assertEquals(1L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1L, mutableDateTime0.getMillis());
      
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      assertEquals(1L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1L, mutableDateTime0.getMillis());
      
      Period period0 = minutes0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, minutes0.size());
      assertEquals(1L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test25() {}
//   @Test(timeout = 4000)
//   public void test25()  throws Throwable  {
//       Hours hours0 = Hours.FOUR;
//       assertNotNull(hours0);
//       assertEquals(1, hours0.size());
//       
//       int int0 = hours0.hashCode();
//       assertEquals(12502, int0);
//       assertEquals(1, hours0.size());
//   }
}
