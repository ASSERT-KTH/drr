/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:29:05 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationField;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;

 
public class DateTimeParserBucketEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      DurationField durationField0 = julianChronology0.centuries();
      assertNotNull(durationField0);
      assertEquals(true, durationField0.isSupported());
      assertEquals("centuries", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)gregorianChronology0.eras();
      assertNotNull(unsupportedDurationField0);
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      
      int int0 = DateTimeParserBucket.compareReverse(durationField0, unsupportedDurationField0);
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, durationField0.isSupported());
      assertEquals("centuries", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("era", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      byte byte0 = (byte)27;
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField0 = new DateTimeParserBucket.SavedField(dateTimeField0, byte0);
      assertNotNull(dateTimeParserBucket_SavedField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("era", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      int int0 = dateTimeParserBucket_SavedField0.compareTo(dateTimeParserBucket_SavedField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("era", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      DateTimeField dateTimeField0 = copticChronology0.minuteOfHour();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int0 = 26;
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField0 = new DateTimeParserBucket.SavedField(dateTimeField0, int0);
      assertNotNull(dateTimeParserBucket_SavedField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) copticChronology0, locale0, (Integer) int0, int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, int0);
      assertNotNull(dividedDateTimeField0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(26, dividedDateTimeField0.getDivisor());
      assertEquals(true, dividedDateTimeField0.isSupported());
      assertEquals(false, dividedDateTimeField0.isLenient());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      dateTimeParserBucket0.saveField((DateTimeField) dividedDateTimeField0, int0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(26, dividedDateTimeField0.getDivisor());
      assertEquals(true, dividedDateTimeField0.isSupported());
      assertEquals(false, dividedDateTimeField0.isLenient());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0);
      assertNotNull(remainderDateTimeField0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(26, dividedDateTimeField0.getDivisor());
      assertEquals(true, dividedDateTimeField0.isSupported());
      assertEquals(false, dividedDateTimeField0.isLenient());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(26, remainderDateTimeField0.getDivisor());
      assertEquals(true, remainderDateTimeField0.isSupported());
      assertEquals(false, remainderDateTimeField0.isLenient());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(25, remainderDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      int int1 = dateTimeParserBucket_SavedField0.compareTo(dateTimeParserBucket_SavedField0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, int1);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      boolean boolean0 = dateTimeParserBucket0.restoreState((Object) gJChronology0);
      assertFalse(int0 == int1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(boolean0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("weekOfWeekyear", dateTimeFieldType1.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType1.toString());
      
      String string0 = "ZM<\"1K2HlaH 1vn";
      dateTimeParserBucket0.saveField(dateTimeFieldType1, string0, locale0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(int0 == int1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("weekOfWeekyear", dateTimeFieldType1.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType1.toString());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(int0 == int1);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(int0 == int1);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int1);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      dateTimeParserBucket0.saveField((DateTimeField) dividedDateTimeField0, int1);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(26, dividedDateTimeField0.getDivisor());
      assertEquals(true, dividedDateTimeField0.isSupported());
      assertEquals(false, dividedDateTimeField0.isLenient());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      dateTimeParserBucket0.saveField((DateTimeField) remainderDateTimeField0, int1);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(26, dividedDateTimeField0.getDivisor());
      assertEquals(true, dividedDateTimeField0.isSupported());
      assertEquals(false, dividedDateTimeField0.isLenient());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(26, remainderDateTimeField0.getDivisor());
      assertEquals(true, remainderDateTimeField0.isSupported());
      assertEquals(false, remainderDateTimeField0.isLenient());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(25, remainderDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      
      // Undeclared exception!
      try {
        long long0 = dateTimeParserBucket0.computeMillis(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"ZM<\"1K2HlaH 1vn\" for weekOfWeekyear is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      DateTimeField dateTimeField0 = copticChronology0.minuteOfHour();
      assertNotNull(dateTimeField0);
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      
      int int0 = 34;
      String string0 = "%";
      Locale locale0 = new Locale(string0, string0);
      assertNotNull(locale0);
      assertEquals("%_%", locale0.toString());
      assertEquals("%", locale0.getLanguage());
      assertEquals("%", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) copticChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("%_%", locale0.toString());
      assertEquals("%", locale0.getLanguage());
      assertEquals("%", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("%_%", locale0.toString());
      assertEquals("%", locale0.getLanguage());
      assertEquals("%", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("%_%", locale0.toString());
      assertEquals("%", locale0.getLanguage());
      assertEquals("%", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = true;
      long long0 = dateTimeParserBucket0.computeMillis(boolean0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("%_%", locale0.toString());
      assertEquals("%", locale0.getLanguage());
      assertEquals("%", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(2040000L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      int int0 = 26;
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) copticChronology0, locale0, (Integer) int0, int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      boolean boolean0 = dateTimeParserBucket0.restoreState((Object) gJChronology0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(boolean0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      String string0 = "ZM<\"1K2HlaH 1vn";
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        long long0 = dateTimeParserBucket0.computeMillis(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"ZM<\"1K2HlaH 1vn\" for weekOfWeekyear is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = 1000000L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      
      Integer integer0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) julianChronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      
      String string0 = "1hVP0hA5S]l<v";
      int int0 = (-1567);
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket0.new SavedState();
      assertNotNull(dateTimeParserBucket_SavedState0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      
      boolean boolean0 = dateTimeParserBucket_SavedState0.restoreState(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertTrue(boolean0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      assertNotNull(dateTimeField0);
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      // Undeclared exception!
      try {
        long long1 = dateTimeParserBucket0.computeMillis(boolean0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"1hVP0hA5S]l<v\": Value -1567 for millisOfSecond must be in the range [0,999]
         //
      }
  }

  //@Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      int int0 = (-1341);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) gregorianChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket0.new SavedState();
      assertNotNull(dateTimeParserBucket_SavedState0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      DateTimeField dateTimeField0 = gregorianChronology0.dayOfYear();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      boolean boolean0 = dateTimeParserBucket_SavedState0.restoreState(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(boolean0);
      
      long long0 = dateTimeParserBucket0.computeMillis();
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals((-3601341L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      long long0 = 57L;
      byte byte0 = (byte)27;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Integer integer0 = new Integer((int) byte0);
      assertEquals(27, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) buddhistChronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket((long) byte0, (Chronology) buddhistChronology0, locale0);
      assertNotSame(dateTimeParserBucket1, dateTimeParserBucket0);
      assertNotNull(dateTimeParserBucket1);
      assertFalse(dateTimeParserBucket1.equals((Object)dateTimeParserBucket0));
      assertEquals(0, dateTimeParserBucket1.getOffset());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket1.new SavedState();
      assertNotSame(dateTimeParserBucket1, dateTimeParserBucket0);
      assertNotNull(dateTimeParserBucket_SavedState0);
      assertFalse(dateTimeParserBucket1.equals((Object)dateTimeParserBucket0));
      assertEquals(0, dateTimeParserBucket1.getOffset());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      boolean boolean0 = dateTimeParserBucket0.restoreState((Object) dateTimeParserBucket_SavedState0);
      assertNotSame(dateTimeParserBucket1, dateTimeParserBucket0);
      assertNotSame(dateTimeParserBucket0, dateTimeParserBucket1);
      assertFalse(dateTimeParserBucket1.equals((Object)dateTimeParserBucket0));
      assertFalse(dateTimeParserBucket0.equals((Object)dateTimeParserBucket1));
      assertEquals(0, dateTimeParserBucket1.getOffset());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 1000000L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      Integer integer0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) julianChronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      int int0 = (-1567);
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertEquals((-1567), (int)integer1);
      
      dateTimeParserBucket0.setOffset((int) integer1);
      assertTrue(integer1.equals((Object)int0));
      assertEquals(-1567, dateTimeParserBucket0.getOffset());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 1000000L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      
      Integer integer0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) julianChronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      
      Locale locale1 = dateTimeParserBucket0.getLocale();
      assertSame(locale1, locale0);
      assertSame(locale0, locale1);
      assertNotNull(locale1);
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
  }

  //@Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      int int0 = (-1341);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) gregorianChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateTimeParserBucket0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = 1000000L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      
      Integer integer0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) julianChronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      dateTimeParserBucket0.setPivotYear(integer0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "9l|w;";
      // Undeclared exception!
      try {
        Instant instant0 = Instant.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9l|w;\" is malformed at \"l|w;\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      
      int int0 = (-1341);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) gregorianChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      
      Integer integer0 = dateTimeParserBucket0.getPivotYear();
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 1000000L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      
      Integer integer0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) julianChronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int0 = dateTimeParserBucket0.getOffset();
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      long long0 = 57L;
      byte byte0 = (byte)27;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      Integer integer0 = new Integer((int) byte0);
      assertEquals(27, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) buddhistChronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)dateTimeParserBucket0.getChronology();
      assertSame(buddhistChronology1, buddhistChronology0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotNull(buddhistChronology1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
  }
}
