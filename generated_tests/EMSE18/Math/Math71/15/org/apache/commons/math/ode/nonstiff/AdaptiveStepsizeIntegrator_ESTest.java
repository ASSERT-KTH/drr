/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 16:33:20 GMT 2017
 */

package org.apache.commons.math.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math.ode.TestProblem5;
import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class AdaptiveStepsizeIntegrator_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      double double0 = graggBulirschStoerIntegrator0.filterStep(0.0, true, true);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  ////@Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1873.0;
      doubleArray0[1] = 1873.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1873.0, 0.0, doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      try { 
        dormandPrince853Integrator0.integrate(testProblem5_0, 1873.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // minimal step size (1.87E03) reached, integration needs 0.00E00
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-59.4385632), (-59.4385632), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setInitialStepSize((-59.4385632));
      assertEquals(59.4385632, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-627.0), 744.188887, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setInitialStepSize(0.0);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-627.0), dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(7.135819491623616, (-3809.922954039), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setInitialStepSize(100.0);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(7.135819491623616, dormandPrince54Integrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(112847.0, 112847.0, 112847.0, 112847.0);
      StepProblem stepProblem0 = new StepProblem(112847.0, 112847.0, 112847.0);
      double[] doubleArray0 = new double[1];
      highamHall54Integrator0.sanityChecks(stepProblem0, 180.77185759, doubleArray0, 1266.72467613, doubleArray0);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(112847.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-2351.6), (-2351.6), 1042.154607011);
      graggBulirschStoerIntegrator0.resetInternalState();
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2351.6, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1873.0;
      doubleArray0[1] = 1873.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-59.4385632), (-59.4385632), doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      dormandPrince54Integrator0.setSafety(0.0);
      dormandPrince54Integrator0.integrate(testProblem5_0, 1873.0, doubleArray0, 0.0, doubleArray0);
      assertArrayEquals(new double[] {1.7390731800411356E270, 1.7390731800411356E270}, doubleArray0, 0.01);
      assertEquals((-59.4385632), dormandPrince54Integrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1873.0;
      doubleArray0[1] = 1873.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-3809.922954039), doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      dormandPrince54Integrator0.setSafety(0.0);
      dormandPrince54Integrator0.integrate(testProblem5_0, 1873.0, doubleArray0, (-0.9712664989952291), doubleArray0);
      assertArrayEquals(new double[] {3.5222239051335074E57, 3.5222239051335074E57}, doubleArray0, 0.01);
      assertEquals(-0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-1309.777853176779), doubleArray0, doubleArray0);
      double double0 = dormandPrince853Integrator0.getMinStep();
      assertEquals(0.0, double0, 0.01);
      assertEquals(-0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-10.757575757575758), (-10.757575757575758), doubleArray0, doubleArray0);
      double double0 = dormandPrince853Integrator0.getMinStep();
      assertEquals(10.757575757575758, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-10.757575757575758), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3000.0, 0.0, doubleArray0, doubleArray0);
      double double0 = dormandPrince54Integrator0.getMaxStep();
      assertEquals(3000.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1276.80249), (-865.29993), doubleArray0, doubleArray0);
      double double0 = graggBulirschStoerIntegrator0.getMaxStep();
      assertEquals(1051.1028043064225, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals((-865.29993), double0, 0.01);
  }

  ////@Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1026.273149), 0.0, doubleArray0, doubleArray0);
      StepProblem stepProblem0 = new StepProblem(489.8752, (-2093.23), 489.8752);
      try { 
        dormandPrince54Integrator0.sanityChecks(stepProblem0, Double.NaN, doubleArray0, Double.NaN, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: ODE problem has dimension 1, initial state vector has dimension 2
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  ////@Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4256.536, 3048.176844239328, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.sanityChecks((FirstOrderDifferentialEquations) null, 1903.054586142, doubleArray0, 1903.054586142, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  ////@Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 4159.488342567616);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[4];
      try { 
        dormandPrince54Integrator0.integrate(testProblem5_0, 2340.59367, doubleArray0, (-617.051), doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: ODE problem has dimension 2, initial state vector has dimension 4
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  ////@Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1.662337662337662, 2118.1114521173236, (-634.8597317806));
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) null, 0.0, doubleArray0, 939.227, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  ////@Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(330.9473338901, 8.852572959975337E-8, 8.852572959975337E-8, 8.852572959975337E-8);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[6];
      try { 
        dormandPrince54Integrator0.initializeStep((FirstOrderDifferentialEquations) null, false, (-2147464533), doubleArray0, 8.852572959975337E-8, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  ////@Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.570796326794897, (-2196.0), doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray1 = new double[6];
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep(testProblem5_0, false, 615, doubleArray1, 20.0, doubleArray0, doubleArray0, doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1873.0;
      doubleArray0[1] = 1873.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-3809.922954039), doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      dormandPrince54Integrator0.setSafety(0.0);
      dormandPrince54Integrator0.integrate(testProblem5_0, 1873.0, doubleArray0, 0.0, doubleArray0);
      doubleArray0[0] = 0.0;
      double double0 = dormandPrince54Integrator0.initializeStep(testProblem5_0, true, (-545), doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(27, testProblem5_0.getCalls());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1501.04, (-2496.883708673823), 0.0, (-2496.883708673823));
      double double0 = dormandPrince54Integrator0.getMinStep();
      assertEquals(1935.955144642498, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1501.04, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1176.733507), 180.0, 180.0, 0.0);
      double double0 = dormandPrince54Integrator0.getMaxStep();
      assertEquals(460.2304110551583, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(180.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-933.703565571073), 197.0, 0.0, 197.0);
      double double0 = highamHall54Integrator0.filterStep((-0.42268232132379197), false, true);
      assertEquals((-197.0), double0, 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(428.88180471722205, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-38.375753926), (-454.60988319362), (-38.375753926), (-38.375753926));
      double double0 = dormandPrince853Integrator0.filterStep(1.0E-12, true, true);
      assertEquals(38.375753926, double0, 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(132.08329572571228, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  ////@Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(790.0743154355732, 790.0743154355732, 790.0743154355732, 790.0743154355732);
      try { 
        dormandPrince54Integrator0.filterStep(43.53345659, false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // minimal step size (7.90E02) reached, integration needs 4.35E01
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1873.0;
      doubleArray0[1] = 1873.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-3809.922954039), doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      dormandPrince54Integrator0.setSafety(0.0);
      dormandPrince54Integrator0.integrate(testProblem5_0, 1873.0, doubleArray0, 0.0, doubleArray0);
      double double0 = dormandPrince54Integrator0.initializeStep(testProblem5_0, true, (-545), doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3.54640258846316E57), (-3.54640258846316E57)}, doubleArray0, 0.01);
      assertEquals((-3809.922954039), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-3809.922954039), doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep(testProblem5_0, true, (-545), doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 330.9473338901;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(330.9473338901, 8.852572959975337E-8, doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      // Undeclared exception!
      try { 
        highamHall54Integrator0.initializeStep(testProblem5_0, false, 5, doubleArray1, 330.9473338901, doubleArray1, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(112847.0, 112847.0, 112847.0, 112847.0);
      highamHall54Integrator0.setInitialStepSize(112847.0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[0];
      double double0 = highamHall54Integrator0.initializeStep(testProblem5_0, false, (-2146337717), doubleArray0, (-0.2014737481327276), doubleArray1, doubleArray1, doubleArray2, doubleArray1);
      assertEquals(112847.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-112847.0), double0, 0.01);
  }

  ////@Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[1];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(330.9473338901, 8.852572959975337E-8, doubleArray0, doubleArray1);
      StepProblem stepProblem0 = new StepProblem(330.9473338901, 8.852572959975337E-8, (-1005.14322802));
      try { 
        highamHall54Integrator0.integrate(stepProblem0, 2.849026536950249E-7, doubleArray1, 2039.743546799583, doubleArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: state vector has dimension 1, absolute tolerance vector has dimension 6
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1873.0, 1873.0, 1873.0, 1873.0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      dormandPrince54Integrator0.integrate(testProblem5_0, 1873.0, doubleArray0, 0.0, doubleArray0);
      dormandPrince54Integrator0.initializeStep(testProblem5_0, false, (-545), doubleArray0, 1.3513694447993615E20, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1873.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(112847.0, 112847.0, 112847.0, 112847.0);
      highamHall54Integrator0.setInitialStepSize(112847.0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[0];
      double double0 = highamHall54Integrator0.initializeStep(testProblem5_0, true, 2692, doubleArray0, (-0.2014737481327276), doubleArray0, doubleArray1, doubleArray2, doubleArray2);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(112847.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(112847.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1873.0, 1873.0, 1873.0, 1873.0);
      dormandPrince54Integrator0.setInitialStepSize(100.0);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1873.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(112847.0, 112847.0, 112847.0, 112847.0);
      double double0 = highamHall54Integrator0.getCurrentStepStart();
      assertEquals(112847.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(330.9473338901, 8.852572959975337E-8, 8.852572959975337E-8, 8.852572959975337E-8);
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[1];
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 8.852572959975337E-8;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep((FirstOrderDifferentialEquations) null, false, (-2147464533), doubleArray2, 8.852572959975337E-8, doubleArray1, doubleArray1, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
