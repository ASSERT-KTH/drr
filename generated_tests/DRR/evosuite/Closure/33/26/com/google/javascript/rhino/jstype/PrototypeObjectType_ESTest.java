/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 10:03:21 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import java.util.HashMap;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PrototypeObjectType_ESTest extends PrototypeObjectType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NumberType");
      errorFunctionType0.toStringHelper(true);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ": ");
      boolean boolean0 = errorFunctionType0.matchesObjectContext();
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".prototype");
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)errorFunctionType0.getReturnType();
      instanceObjectType0.canBeCalled();
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".prototype");
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      boolean boolean0 = instanceObjectType0.matchesStringContext();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null);
      Node node0 = Node.newNumber((double) 1);
      boolean boolean0 = prototypeObjectType0.defineProperty("Unknown class name", (JSType) null, false, node0);
      assertTrue(boolean0);
      
      int int0 = prototypeObjectType0.getPropertiesCount();
      assertFalse(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
      boolean boolean0 = instanceObjectType0.hasProperty("p-wS~#A`hMOeZ*uF.jM");
      assertTrue(boolean0);
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      JSType[] jSTypeArray0 = new JSType[6];
      StringType stringType0 = new StringType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)stringType0.autoboxesTo();
      assertTrue(instanceObjectType0.hasReferenceName());
      
      jSTypeArray0[5] = (JSType) instanceObjectType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      boolean boolean0 = errorFunctionType0.defineInferredProperty("Not declared as a type name", errorFunctionType0, node0);
      assertTrue(boolean0);
      
      boolean boolean1 = errorFunctionType0.hasProperty("Not declared as a type name");
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null);
      boolean boolean0 = prototypeObjectType0.isPropertyTypeDeclared("{");
      assertFalse(boolean0);
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.hasReferenceName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionType0.setPropertyJSDocInfo("Unknown class name", jSDocInfo0);
      boolean boolean0 = functionType0.defineProperty("Unknown class name", functionType0, false, (Node) null);
      assertTrue(functionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null);
      Set<String> set0 = prototypeObjectType0.getOwnPropertyNames();
      prototypeObjectType0.collectPropertyNames(set0);
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.hasReferenceName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null);
      Set<String> set0 = prototypeObjectType0.getOwnPropertyNames();
      Node node0 = Node.newNumber((double) 1);
      prototypeObjectType0.defineProperty("Unknown class name", (JSType) null, true, node0);
      // Undeclared exception!
      try { 
        prototypeObjectType0.collectPropertyNames(set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      objectType0.setPropertyJSDocInfo("Unknown class name", jSDocInfo0);
      boolean boolean0 = objectType0.isPropertyTypeInferred("Unknown class name");
      assertTrue(objectType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, " jSTJ]%u<,}J~'cJlIi");
      boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(",@7;o^1gqWZ\"F-'8f");
      assertFalse(boolean0);
      assertTrue(errorFunctionType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      boolean boolean0 = recordType0.isPropertyInExterns("\u00A0\u180E\u202F");
      assertFalse(boolean0);
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      objectType0.setPropertyJSDocInfo("Unknown class name", jSDocInfo0);
      objectType0.isPropertyInExterns("Unknown class name");
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null);
      Node node0 = Node.newNumber((double) 1);
      boolean boolean0 = prototypeObjectType0.defineProperty("Unknown class name", (JSType) null, false, node0);
      boolean boolean1 = prototypeObjectType0.defineProperty("Unknown class name", prototypeObjectType0, true, node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null);
      boolean boolean0 = prototypeObjectType0.removeProperty("Unknown class name");
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(boolean0);
      assertFalse(prototypeObjectType0.hasReferenceName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null);
      Node node0 = Node.newNumber((double) 1);
      boolean boolean0 = prototypeObjectType0.defineProperty("Unknown class name", (JSType) null, false, node0);
      assertTrue(boolean0);
      
      boolean boolean1 = prototypeObjectType0.removeProperty("Unknown class name");
      assertFalse(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".prototype");
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)errorFunctionType0.getReturnType();
      instanceObjectType0.getPropertyNode("DATE_TYPE");
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null);
      Node node0 = Node.newNumber((double) 1);
      boolean boolean0 = prototypeObjectType0.defineProperty("Unknown class name", (JSType) null, false, node0);
      assertTrue(boolean0);
      
      Node node1 = prototypeObjectType0.getPropertyNode("Unknown class name");
      assertNotNull(node1);
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.hasReferenceName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NumberType");
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, true);
      instanceObjectType0.getOwnPropertyJSDocInfo("Not declared as a type name");
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.hasReferenceName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      objectType0.setPropertyJSDocInfo("Unknown class name", jSDocInfo0);
      objectType0.getOwnPropertyJSDocInfo("Unknown class name");
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      errorFunctionType0.setPropertyJSDocInfo("", (JSDocInfo) null);
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      objectType0.setPropertyJSDocInfo("Unknown class name", jSDocInfo0);
      objectType0.setPropertyJSDocInfo("Unknown class name", jSDocInfo0);
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      recordType0.setPropertyJSDocInfo("P}aZfX=,(~[,swM", jSDocInfo0);
      assertTrue(recordType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      boolean boolean0 = jSType0.matchesNumberContext();
      assertTrue(boolean0);
      assertTrue(jSType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "s");
      boolean boolean0 = errorFunctionType0.matchesNumberContext();
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(2);
      boolean boolean0 = functionType0.matchesStringContext();
      assertFalse(boolean0);
      assertTrue(errorFunctionType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSType jSType0 = ((PrototypeObjectType) objectType0).unboxesTo();
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null);
      String string0 = prototypeObjectType0.toStringHelper(true);
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.hasReferenceName());
      assertNotNull(string0);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", noResolvedType0);
      String string0 = prototypeObjectType0.toAnnotationString();
      assertEquals("", string0);
      assertFalse(prototypeObjectType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".");
      ObjectType objectType0 = errorFunctionType0.getInstanceType();
      Node node0 = Node.newString("lSY/gW'i[~1S", 0, (-1908874352));
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(objectType0, node0);
      hashMap0.put(".", recordTypeBuilder_RecordProperty0);
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      String string0 = recordType0.toStringHelper(true);
      assertNotNull(string0);
      assertEquals("{.: .}", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, (Node) null);
      hashMap0.put("n_48P_/7[v:jLnWwg.", recordTypeBuilder_RecordProperty0);
      hashMap0.put(", ...", recordTypeBuilder_RecordProperty0);
      hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
      hashMap0.put("(lT_<++_gr2TG", recordTypeBuilder_RecordProperty0);
      RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
      String string0 = recordType1.toStringHelper(false);
      assertNotNull(string0);
      assertEquals("{(lT_<++_gr2TG: {}, , ...: {}, Not declared as a constructor: {}, n_48P_/7[v:jLnWwg.: {}, ...}", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null);
      String string0 = prototypeObjectType0.toStringHelper(false);
      assertFalse(prototypeObjectType0.hasReferenceName());
      assertNotNull(string0);
      assertEquals("{...}", string0);
      assertFalse(prototypeObjectType0.isNativeObjectType());
  }

////  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", noResolvedType0);
      prototypeObjectType0.getTypesUnderShallowEquality(noResolvedType0);
      // Undeclared exception!
      try { 
        noResolvedType0.setImplicitPrototype((ObjectType) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
      functionType0.setOwnerFunction(functionType0);
      // Undeclared exception!
      try { 
        instanceObjectType0.matchesStringContext();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      functionType0.setOwnerFunction(functionType0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      // Undeclared exception!
      try { 
        functionType0.setPropertyJSDocInfo("Unknown class name", jSDocInfo0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(errorFunctionType0, errorFunctionType0);
      boolean boolean0 = errorFunctionType0.isSubtype(functionType0);
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "O{J[2r#Xg@J.T>in$");
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(stringType0);
      boolean boolean0 = errorFunctionType0.isSubtype(jSType0);
      assertFalse(boolean0);
      assertTrue(errorFunctionType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[1] = (JSType) recordType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, jSTypeArray0);
      RecordType recordType1 = (RecordType)functionType0.getLeastSupertype(jSTypeArray0[1]);
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType1.hasReferenceName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(prototypeObjectType0, prototypeObjectType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      boolean boolean0 = errorFunctionType0.canTestForEqualityWith(parameterizedType0);
      assertFalse(parameterizedType0.hasReferenceName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0, true);
      boolean boolean0 = instanceObjectType0.isSubtype(noType0);
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(boolean0);
      assertFalse(instanceObjectType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.resolveInternal(simpleErrorReporter0, objectType0);
      errorFunctionType1.setPrototypeBasedOn(errorFunctionType0);
      assertTrue(errorFunctionType1.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      Node node0 = Node.newString("Not declared as a constructor", 1, 0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, node0);
      functionType0.setOwnerFunction(functionType0);
      // Undeclared exception!
      try { 
        functionType0.setOwnerFunction(functionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      recordType0.getCtorImplementedInterfaces();
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.hasReferenceName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NumberType");
      errorFunctionType0.setOwnerFunction(errorFunctionType0);
      errorFunctionType0.getCtorImplementedInterfaces();
      assertTrue(errorFunctionType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null);
      Node node0 = Node.newNumber((double) 1);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, " jSTJ]%u<,}J~'cJlIi");
      boolean boolean0 = prototypeObjectType0.defineProperty("Unknown class name", (JSType) null, false, node0);
      assertTrue(boolean0);
      
      PrototypeObjectType prototypeObjectType1 = (PrototypeObjectType)prototypeObjectType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertFalse(prototypeObjectType1.isNativeObjectType());
      assertFalse(prototypeObjectType1.hasReferenceName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      ObjectType objectType0 = errorFunctionType0.getInstanceType();
      ((PrototypeObjectType) objectType0).matchConstraint(recordType0);
      assertFalse(recordType0.hasReferenceName());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)numberType0.autoboxesTo();
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[4] = (JSType) instanceObjectType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) instanceObjectType0, jSTypeArray0);
      functionType0.matchConstraint(functionType0);
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      Node node0 = Node.newString((-3001), "{", 110, (-1932735281));
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, node0);
      hashMap0.put("[", recordTypeBuilder_RecordProperty0);
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      recordType0.matchConstraint(recordType0);
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.hasCachedValues());
  }
}
