/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 00:18:06 GMT 2019
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.TimeZone;
import javax.swing.JEditorPane;
import javax.swing.JScrollPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.xy.DefaultWindDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;


public class Axis_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("$(nLOIH`*><C", categoryAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        categoryAxis0.draw(graphics2D0, 10, rectangle0, rectangle0, (RectangleEdge) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      extendedCategoryAxis0.setLabelURL(".");
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)cyclicNumberAxis0.clone();
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertNotSame(cyclicNumberAxis1, cyclicNumberAxis0);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      subCategoryAxis0.setLabelAngle((-201.89));
      assertEquals((-201.89), subCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Gideon Krause");
      categoryAxis3D0.getLabelURL();
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      cyclicNumberAxis0.getLabelToolTip();
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("org.jfree.chart.axis.Axis");
      categoryAxis3D0.setTickMarkInsideLength(756.446F);
      assertEquals(756.446F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.isVisible());
      
      numberAxis3D0.setVisible(true);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      cyclicNumberAxis0.setLabel("Null 'font' argument.");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'font' argument.", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(585, 2515, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation((-1));
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 0.0, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
      assertEquals(49.1328125, axisState0.getCursor(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "w\"/+]Yn;2zJ3b_.");
      cyclicNumberAxis0.setLabel("org.jfree.chart.event.AxisChangeListener");
      assertEquals("org.jfree.chart.event.AxisChangeListener", cyclicNumberAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "w\"/+]Yn;2zJ3b_.");
      cyclicNumberAxis0.setLabel("w\"/+]Yn;2zJ3b_.");
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      periodAxis0.setLabel((String) null);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("SeriesRenderingOrder.FORWARD");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateAxis dateAxis0 = new DateAxis("|9S7KWgF}|tg/a", timeZone0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      dateAxis0.setLabelInsets(logarithmicAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      // Undeclared exception!
      try { 
        symbolAxis0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setLabelInsets(extendedCategoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertFalse(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(boolean0);
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("$5=$R63.t0EmO3XR");
      // Undeclared exception!
      try { 
        categoryAxis3D0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("S1\"?T{/Lv^ZW)b>v#WF");
      extendedCategoryAxis0.setAxisLineStroke(categoryAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      assertTrue(dateAxis0.isTickLabelsVisible());
      
      dateAxis0.setTickLabelsVisible(true);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("$5=$R63.t0EmO3XR");
      // Undeclared exception!
      try { 
        categoryAxis3D0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CategoryAxis categoryAxis0 = new CategoryAxis();
      cyclicNumberAxis0.setTickLabelFont(categoryAxis0.DEFAULT_TICK_LABEL_FONT);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("aX 0h");
      // Undeclared exception!
      try { 
        categoryAxis3D0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.setTickLabelInsets(symbolAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertTrue(symbolAxis0.isVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      // Undeclared exception!
      try { 
        numberAxis0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      
      logarithmicAxis0.setTickMarksVisible(true);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CategoryAxis categoryAxis0 = new CategoryAxis();
      cyclicNumberAxis0.setTickMarkStroke(categoryAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, 3.0, "Null 'font' argument.");
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_GRIDLINE_STROKE;
      cyclicNumberAxis0.setTickMarkStroke(basicStroke0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      // Undeclared exception!
      try { 
        logarithmicAxis0.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      combinedDomainCategoryPlot0.setDomainAxis(categoryAxis0);
      assertTrue(categoryAxis0.isVisible());
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(500, 3600);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer((Integer) null, (Integer) cyclicNumberAxis0.MAXIMUM_TICK_COUNT);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      cyclicNumberAxis0.removeChangeListener(waferMapPlot0);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      boolean boolean0 = categoryAxis0.hasListener(defaultWindDataset0);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertFalse(boolean0);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "&WJ]vd-(=8M");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      boolean boolean0 = cyclicNumberAxis0.hasListener(combinedDomainXYPlot0);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(boolean0);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      jFreeChart0.createBufferedImage(500, 244, (double) 1.0F, 0.2, (ChartRenderingInfo) null);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("F");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 2.0F, 2.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(500);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AxisSpace axisSpace0 = periodAxis0.reserveSpace(graphics2D0, combinedDomainXYPlot0, rectangle2D_Float0, rectangleEdge0, (AxisSpace) null);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(56.1328125, axisSpace0.getRight(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(764.484, "org.jfree.chart.event.AxisChangeListener");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.05);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'subtitle' argument.", compassPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(12, 12, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)cyclicNumberAxis0.getLabelEnclosure(sunGraphics2D0, rectangleEdge0);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("ZOOM_DOMAIN_BOTH", zoneInfo0);
      dateAxis0.draw(sunGraphics2D0, 800, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, (PlotRenderingInfo) null);
      assertEquals((-16777216), sunGraphics2D0.pixel);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Q{~99", combinedDomainCategoryPlot0);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedDomainCategoryPlot0.setDomainAxisLocation(axisLocation0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(12, 10, 1.5707963267948966, 2885.104281, chartRenderingInfo0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      Day day0 = new Day();
      PeriodAxis periodAxis0 = new PeriodAxis("", day0, day0);
      AffineTransform affineTransform0 = new AffineTransform();
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      Rectangle2D rectangle2D0 = numberAxis0.DEFAULT_TICK_LABEL_FONT.getStringBounds("", fontRenderContext0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultWindDataset0, periodAxis0, defaultPolarItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend(0);
      RectangleEdge rectangleEdge0 = legendTitle0.getLegendItemGraphicEdge();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("6_2TEa7H");
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, 2.0, rectangle2D0, rectangle2D0, rectangleEdge0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1364, 49, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Fast_Scatter_Plot");
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 2894.15757463987, (Rectangle2D) null, (Rectangle2D) null, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setFixedDimension(200.0);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertEquals(200.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertTrue(boolean0);
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis1.isVisible());
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setVisible(false);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(extendedCategoryAxis0.isVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("");
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis1.isVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      assertTrue(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      
      extendedCategoryAxis1.setLabelFont(extendedCategoryAxis0.DEFAULT_TICK_LABEL_FONT);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      assertFalse(boolean0);
  }

////  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      JEditorPane jEditorPane0 = new JEditorPane("b", "b");
      Color color0 = jEditorPane0.getCaretColor();
      extendedCategoryAxis0.setLabelPaint(color0);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      assertFalse(boolean0);
      assertFalse(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isVisible());
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      subCategoryAxis0.setLabelToolTip("X");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis((String) null);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
      assertTrue(subCategoryAxis1.isVisible());
      assertFalse(subCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis1.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.needle.LineNeedle", fixedMillisecond0, fixedMillisecond0, fixedMillisecond0.DEFAULT_TIME_ZONE);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setAxisLinePaint(periodAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertTrue(periodAxis0.isTickMarksVisible());
      
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      assertFalse(boolean0);
      assertTrue(extendedCategoryAxis1.isVisible());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis1.setTickLabelsVisible(false);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(extendedCategoryAxis1.isTickLabelsVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      assertTrue(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      
      extendedCategoryAxis1.setTickLabelFont(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_FONT);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      assertTrue(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      
      extendedCategoryAxis1.setTickLabelPaint(extendedCategoryAxis0.DEFAULT_TICK_MARK_PAINT);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      assertTrue(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      
      extendedCategoryAxis1.setTickLabelInsets(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      
      extendedCategoryAxis1.setTickMarksVisible(true);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis1.setTickMarkOutsideLength(0.0F);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(boolean0);
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      Color color0 = (Color)XYPlot.DEFAULT_CROSSHAIR_PAINT;
      extendedCategoryAxis0.setTickMarkPaint(color0);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis((String) null);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
      assertFalse(boolean0);
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis1.isVisible());
  }
}
