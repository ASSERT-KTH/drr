/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 12:56:32 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.geom.Arc2D;
import java.awt.geom.Area;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.sql.Connection;
import java.text.AttributedCharacterIterator;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Collection;
import java.util.List;
import java.util.TimeZone;
import javax.swing.TransferHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTick;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickType;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Hour;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;


public class CategoryPlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      combinedDomainCategoryPlot1.clearRangeMarkers();
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      categoryPlot0.getIndexOf(lineAndShapeRenderer0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getColumnRenderingOrder();
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.8);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      combinedRangeCategoryPlot0.getDatasetCount();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setDrawSharedDomainAxis(true);
      assertTrue(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Point2D.Float point2D_Float0 = new Point2D.Float((short)0, 0.0F);
      combinedDomainCategoryPlot0.zoomDomainAxes((-1690.6875263346365), (PlotRenderingInfo) null, (Point2D) point2D_Float0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setDomainAxisLocation((-4371), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.8);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      Area area0 = new Area(combinedRangeCategoryPlot0.DEFAULT_LEGEND_ITEM_BOX);
      Rectangle2D rectangle2D0 = area0.getBounds2D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      List list0 = combinedRangeCategoryPlot0.getCategoriesForAxis(categoryAxis3D0);
      combinedDomainCategoryPlot0.drawRangeGridlines((Graphics2D) null, rectangle2D0, list0);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getRangeCrosshairStroke();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ValueMarker valueMarker0 = new ValueMarker((-923.1));
      combinedDomainCategoryPlot0.addRangeMarker((Marker) valueMarker0);
      combinedDomainCategoryPlot0.clearRangeMarkers();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      combinedDomainCategoryPlot0.getRangeAxisCount();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      double double0 = categoryPlot0.getAnchorValue();
      assertEquals(0.0, double0, 0.01);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation();
      combinedRangeCategoryPlot0.setRangeAxisLocation(axisLocation0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RectangleInsets rectangleInsets0 = categoryPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeCategoryPlot0.getDomainMarkers(layer0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      boolean boolean0 = combinedRangeCategoryPlot0.getDrawSharedDomainAxis();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("YEnR&O]_'");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      combinedRangeCategoryPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation();
      combinedRangeCategoryPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.zoomRangeAxes((-4.0), (PlotRenderingInfo) null, (Point2D) null);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.8);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      combinedRangeCategoryPlot0.setAnchorValue((double) 0.0F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      categoryPlot0.addDomainMarker(categoryMarker0);
      Layer layer0 = Layer.FOREGROUND;
      categoryPlot0.addDomainMarker(categoryMarker0, layer0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Layer layer0 = Layer.BACKGROUND;
      Collection collection0 = categoryPlot0.getRangeMarkers(layer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getDomainAxisCount();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(189, 189, 21.1818, (-1907.0), chartRenderingInfo0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      int int0 = combinedDomainCategoryPlot0.getWeight();
      assertEquals(0, int0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      categoryPlot0.setRenderer(0, (CategoryItemRenderer) stackedAreaRenderer0);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      SortOrder sortOrder0 = combinedDomainCategoryPlot0.getRowRenderingOrder();
      combinedDomainCategoryPlot0.setRowRenderingOrder(sortOrder0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.setRenderer((CategoryItemRenderer) null);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true, true, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      categoryPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, (Point2D) point2D_Float0, false);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      double double0 = combinedRangeCategoryPlot0.getRangeCrosshairValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.8);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      LegendItemCollection legendItemCollection0 = combinedDomainCategoryPlot0.getLegendItems();
      combinedRangeCategoryPlot0.setFixedLegendItems(legendItemCollection0);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'orientation' argument.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      double[][] doubleArray0 = new double[3][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      combinedDomainCategoryPlot0.setDataset((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Color color0 = (Color)combinedDomainCategoryPlot0.getRangeCrosshairPaint();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ItemLabelAnchor.OUTSIDE8");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      combinedDomainCategoryPlot0.setRangeCrosshairValue(0.01);
      assertEquals(0.01, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getPlotType();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2104.10182005), (-2104.10182005), "Null 'position' argument.");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      Color color0 = (Color)combinedRangeCategoryPlot0.getDomainGridlinePaint();
      assertEquals((-1), color0.getRGB());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      combinedDomainCategoryPlot0.setDomainAxis((CategoryAxis) categoryAxis3D0);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.chart.plot.LocalizationBundle");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.plot.LocalizationBundle", subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      combinedDomainCategoryPlot0.zoomDomainAxes(2262.8852098, (double) 2.0F, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(chartPanel0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      boolean boolean0 = combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      List list0 = combinedRangeCategoryPlot0.getCategories();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.clearAnnotations();
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis(">W@S!=Pe?H");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedRangeAxisSpace();
      assertNull(axisSpace0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAnchor categoryAnchor0 = combinedDomainCategoryPlot0.getDomainGridlinePosition();
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getDomainGridlineStroke();
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setAxisOffset(combinedDomainCategoryPlot0.DEFAULT_INSETS);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = new CombinedRangeCategoryPlot(numberAxis0);
      combinedRangeCategoryPlot0.add((CategoryPlot) combinedRangeCategoryPlot1);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.initialise((Graphics2D) null, rectangle0, combinedRangeCategoryPlot1, 4, plotRenderingInfo0);
      assertEquals(1, combinedRangeCategoryPlot1.getWeight());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setDomainAxis(0, (CategoryAxis) null, true);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis[] categoryAxisArray0 = new CategoryAxis[1];
      categoryPlot0.setDomainAxes(categoryAxisArray0);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("&7+H^o\b");
      combinedRangeCategoryPlot0.getDomainAxisIndex(subCategoryAxis0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.getDomainAxisIndex((CategoryAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = categoryPlot0.getDomainAxisLocation(10);
      assertNotNull(axisLocation0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setDomainAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.clearDomainAxes();
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.clearDomainAxes();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("w{f~i:!cWBj2~qt|");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      ValueAxis valueAxis0 = combinedRangeCategoryPlot0.getRangeAxis(78);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, symbolAxis0, waterfallBarRenderer0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      categoryPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(1, categoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.getRangeAxisIndex((ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.chart.entity.StandardEntityCollection");
      DateAxis dateAxis0 = new DateAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, subCategoryAxis0, dateAxis0, (CategoryItemRenderer) null);
      int int0 = categoryPlot0.getRangeAxisIndex(dateAxis0);
      assertEquals(0, int0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = new CombinedRangeCategoryPlot(numberAxis0);
      combinedRangeCategoryPlot0.add((CategoryPlot) combinedRangeCategoryPlot1);
      int int0 = combinedRangeCategoryPlot1.getRangeAxisIndex(numberAxis0);
      assertEquals(1, combinedRangeCategoryPlot1.getWeight());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRangeAxisLocation((AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.clearRangeAxes();
      assertEquals(0, combinedRangeCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.clearRangeAxes();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Y\"ypS+x+m[");
      DateAxis dateAxis0 = new DateAxis();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, extendedCategoryAxis0, dateAxis0, minMaxCategoryRenderer0);
      categoryPlot0.setDataset(0, (CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setDataset(500, (CategoryDataset) null);
      assertEquals(501, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      categoryPlot0.setDataset(67, (CategoryDataset) defaultMultiValueCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(760, 1211, chartRenderingInfo0);
      assertEquals(1, bufferedImage0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Y\"ypS+x+m[");
      DateAxis dateAxis0 = new DateAxis();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, extendedCategoryAxis0, dateAxis0, minMaxCategoryRenderer0);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      categoryPlot0.setRenderer((CategoryItemRenderer) barRenderer3D0, true);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[2];
      combinedDomainCategoryPlot0.setRenderers(categoryItemRendererArray0);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      combinedRangeCategoryPlot0.getRendererForDataset(jDBCCategoryDataset0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      combinedRangeCategoryPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      categoryPlot0.setColumnRenderingOrder(sortOrder0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setColumnRenderingOrder((SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("0.000");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis0, valueAxis0, layeredBarRenderer0);
      // Undeclared exception!
      try { 
        categoryPlot0.setRowRenderingOrder((SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Y\"ypS+x+m[");
      DateAxis dateAxis0 = new DateAxis();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, extendedCategoryAxis0, dateAxis0, minMaxCategoryRenderer0);
      categoryPlot0.setDomainGridlinesVisible(false);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setDomainGridlinesVisible(true);
      assertTrue(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAnchor categoryAnchor0 = CategoryAnchor.END;
      combinedDomainCategoryPlot0.setDomainGridlinePosition(categoryAnchor0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setDomainGridlinePosition((CategoryAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'position' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      combinedDomainCategoryPlot0.setDomainGridlineStroke(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.plot.CategoryPlot");
      categoryPlot0.setDomainGridlinePaint(dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.8);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      combinedRangeCategoryPlot0.setRangeGridlinesVisible(true);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, symbolAxis0, waterfallBarRenderer0);
      categoryPlot0.setRangeGridlinesVisible(false);
      assertFalse(categoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setRangeGridlineStroke(combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("&Oa");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("&Oa");
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.05, 0.2, false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis3D0, numberAxis3D0, stackedBarRenderer3D0);
      defaultKeyedValues2DDataset0.addValue((Number) 1.0E-8, (Comparable) 12.0, (Comparable) 1.0F);
      JFreeChart jFreeChart0 = new JFreeChart("&Oa", numberAxis3D0.DEFAULT_AXIS_LABEL_FONT, categoryPlot0, true);
      jFreeChart0.createBufferedImage(2334, 500);
      assertEquals(1.05E-8, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true, true, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      categoryPlot0.handleClick(0, 65, plotRenderingInfo0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1343.8, 10000.0, "org.jfree.chart.labels.SymbolicXYItemLabelGenerator");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      combinedRangeCategoryPlot0.zoom((-2104.10182005));
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, symbolAxis0, waterfallBarRenderer0);
      categoryPlot0.zoom(1343.8);
      assertEquals(1343.8, symbolAxis0.getUpperBound(), 0.01);
      assertEquals((-1343.8), symbolAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = new CombinedRangeCategoryPlot(numberAxis0);
      combinedRangeCategoryPlot0.add((CategoryPlot) combinedRangeCategoryPlot1);
      combinedRangeCategoryPlot1.datasetChanged((DatasetChangeEvent) null);
      assertEquals(1, combinedRangeCategoryPlot1.getWeight());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = new CombinedRangeCategoryPlot(numberAxis0);
      combinedRangeCategoryPlot0.add((CategoryPlot) combinedRangeCategoryPlot1);
      TickType tickType0 = TickType.MAJOR;
      TextAnchor textAnchor0 = TextAnchor.TOP_RIGHT;
      NumberTick numberTick0 = new NumberTick(tickType0, 3911.02268865, "7~LVh4DajA1|+{Y2gQI", textAnchor0, textAnchor0, 3777.13055);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(numberTick0);
      combinedRangeCategoryPlot1.rendererChanged(rendererChangeEvent0);
      assertEquals(1, combinedRangeCategoryPlot1.getWeight());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.addDomainMarker((CategoryMarker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, (CategoryAxis) null, (ValueAxis) null, levelRenderer0);
      Hour hour0 = new Hour();
      CategoryMarker categoryMarker0 = new CategoryMarker(hour0, levelRenderer0.DEFAULT_PAINT, levelRenderer0.DEFAULT_OUTLINE_STROKE);
      // Undeclared exception!
      try { 
        categoryPlot0.addDomainMarker((-685), categoryMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      categoryPlot0.addDomainMarker(categoryMarker0, layer0);
      categoryPlot0.clearDomainMarkers();
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      categoryPlot0.addDomainMarker(categoryMarker0);
      categoryPlot0.clearDomainMarkers();
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(">&J.Q09K");
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, subCategoryAxis0, dateAxis0, areaRenderer0);
      categoryPlot0.getDomainMarkers(3, (Layer) null);
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Color color0 = Color.GREEN;
      ValueMarker valueMarker0 = new ValueMarker(10, color0, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      combinedDomainCategoryPlot0.addRangeMarker(10, (Marker) valueMarker0, (Layer) null);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.addRangeMarker((Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getRangeMarkers((-1951366419), (Layer) null);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      combinedDomainCategoryPlot0.setRangeCrosshairVisible(false);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("YEnR&O]_'");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      
      combinedRangeCategoryPlot0.setRangeCrosshairVisible(true);
      combinedRangeCategoryPlot0.setRangeCrosshairValue(2136.0, true);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setRangeCrosshairLockedOnData(true);
      assertEquals(1, categoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, extendedCategoryAxis0, logarithmicAxis0, lineRenderer3D0);
      categoryPlot0.setRangeCrosshairLockedOnData(false);
      assertFalse(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("org.jfree.chart.axis.DateAxis$DefaultTimeline");
      categoryPlot0.setRangeCrosshairStroke(categoryAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Color color0 = Color.magenta;
      combinedRangeCategoryPlot0.setRangeCrosshairPaint(color0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("TextBlockAnchor.CENTER_RIGHT", false, 10);
      combinedRangeCategoryPlot0.addAnnotation(categoryTextAnnotation0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(12.0, 0.0, 12.0, (-347.389), stackedBarRenderer3D0.DEFAULT_OUTLINE_PAINT, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      boolean boolean0 = combinedDomainCategoryPlot0.removeAnnotation(categoryLineAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.removeAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, valueAxis0, intervalBarRenderer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      // Undeclared exception!
      try { 
        categoryPlot0.calculateDomainAxisSpace((Graphics2D) null, rectangle2D0, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.calculateRangeAxisSpace((Graphics2D) null, rectangle0, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, symbolAxis0, waterfallBarRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.05, (double) 10, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = (Rectangle)polygon0.getBounds2D();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      categoryPlot0.drawRangeCrosshair(sunGraphics2D0, rectangle0, plotOrientation0, 1.0E-6, symbolAxis0, waterfallBarRenderer0.DEFAULT_OUTLINE_STROKE, symbolAxis0.DEFAULT_GRID_BAND_PAINT);
      assertEquals(1, sunGraphics2D0.compositeState);
      assertEquals((-2132219160), sunGraphics2D0.pixel);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis3D0, numberAxis3D0, stackedBarRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(363, 10, chartRenderingInfo0);
      assertEquals(0, bufferedImage0.getMinTileY());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 680, "SAVE");
      categoryPlot0.setRangeAxis(234, (ValueAxis) cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      jFreeChart0.createBufferedImage(680, 2121);
      assertEquals(235, categoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Paint paint0 = areaRenderer0.getBaseFillPaint();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.drawRangeLine((Graphics2D) null, rectangle0, 2.0F, (Stroke) null, paint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 680, "SAVE");
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(680, 2121);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      float[] floatArray0 = new float[9];
      Kernel kernel0 = new Kernel(500, 0, floatArray0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0, 29, (RenderingHints) null);
      Rectangle2D rectangle2D0 = convolveOp0.getBounds2D(bufferedImage0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      categoryPlot0.drawRangeCrosshair(graphics2D0, rectangle2D0, plotOrientation0, 1212.80078125, cyclicNumberAxis0, ((SunGraphics2D) graphics2D0).stroke, lineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 15);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("SansSerif");
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.drawRangeCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 0.5F, logarithmicAxis0, (Stroke) null, (Paint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      combinedRangeCategoryPlot0.setDataset(3156, (CategoryDataset) defaultStatisticalCategoryDataset0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      combinedRangeCategoryPlot0.getCategoriesForAxis(categoryAxis3D0);
      assertEquals(3157, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("j'NR_NT/dYY]K2");
      Number[][] numberArray0 = new Number[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      MockDate mockDate0 = new MockDate(2443);
      Week week0 = new Week(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("j'NR_NT/dYY]K2", week0, week0);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, periodAxis0, groupedStackedBarRenderer0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      categoryPlot0.getCategoriesForAxis(subCategoryAxis0);
      assertEquals(0.0, periodAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Y\"ypS+x+m[");
      DateAxis dateAxis0 = new DateAxis();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, extendedCategoryAxis0, dateAxis0, minMaxCategoryRenderer0);
      categoryPlot0.setDataset(130, (CategoryDataset) defaultKeyedValues2DDataset0);
      defaultKeyedValues2DDataset0.addValue((-1212.08773464), (Comparable) false, (Comparable) 1.0E-8);
      categoryPlot0.getCategoriesForAxis(extendedCategoryAxis0);
      assertEquals(131, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Y\"ypS+x+m[");
      DateAxis dateAxis0 = new DateAxis();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, extendedCategoryAxis0, dateAxis0, minMaxCategoryRenderer0);
      categoryPlot0.mapDatasetToRangeAxis(500, 10);
      categoryPlot0.setDataset(500, (CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(categoryPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Y\"ypS+x+m[");
      DateAxis dateAxis0 = new DateAxis();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, extendedCategoryAxis0, dateAxis0, minMaxCategoryRenderer0);
      List list0 = categoryPlot0.getCategories();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true, true, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 680, "SAVE");
      categoryPlot0.setRangeAxis(234, (ValueAxis) cyclicNumberAxis0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      categoryPlot0.zoomRangeAxes(1.0E-4, plotRenderingInfo0, (Point2D) point2D_Float0, false);
      assertEquals(235, categoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.chart.entity.StandardEntityCollection");
      DateAxis dateAxis0 = new DateAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, subCategoryAxis0, dateAxis0, (CategoryItemRenderer) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      Point2D point2D0 = arc2D_Double0.getEndPoint();
      categoryPlot0.zoomRangeAxes(0.05, plotRenderingInfo0, point2D0, true);
      assertEquals((-0.025), dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      categoryPlot0.zoomRangeAxes((-622.20071), (double) 0, plotRenderingInfo0, (Point2D) point2D_Float0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      TransferHandler transferHandler0 = new TransferHandler("EW_9FEf$QF.}Qh 6");
      Point point0 = transferHandler0.getDragImageOffset();
      combinedRangeCategoryPlot0.zoomRangeAxes((-422.523743633078), (-422.523743633078), plotRenderingInfo0, (Point2D) point0);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setAnchorValue(2827.04395311, false);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, symbolAxis0, waterfallBarRenderer0);
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      boolean boolean0 = categoryPlot0.equals(attributedCharacterIterator_Attribute0);
      assertFalse(boolean0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      
      combinedDomainCategoryPlot0.setForegroundAlpha(399.42F);
      combinedDomainCategoryPlot1.clearRangeMarkers();
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      boolean boolean0 = combinedDomainCategoryPlot0.equals(combinedDomainCategoryPlot1);
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot1.getDomainAxisLocation();
      assertTrue(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      
      combinedDomainCategoryPlot0.setRangeAxisLocation(10, axisLocation0);
      combinedDomainCategoryPlot1.clearRangeMarkers();
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      combinedDomainCategoryPlot0.mapDatasetToRangeAxis(19, 500);
      combinedDomainCategoryPlot1.clearRangeMarkers();
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      
      Color color0 = Color.MAGENTA;
      combinedDomainCategoryPlot0.setRangeGridlinePaint(color0);
      combinedDomainCategoryPlot1.clearRangeMarkers();
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      assertEquals(1, combinedRangeCategoryPlot1.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
      assertTrue(combinedRangeCategoryPlot1.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      categoryPlot0.setDataset(67, (CategoryDataset) defaultMultiValueCategoryDataset0);
      categoryPlot0.clone();
      assertEquals(68, categoryPlot0.getDatasetCount());
  }
}
