/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 25 10:10:16 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.SimpleTimeZone;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;


public class CategoryPlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = categoryPlot0.getRangeAxisLocation((-718));
      // Undeclared exception!
      try { 
        categoryPlot0.setRangeAxisLocation((-718), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      ValueMarker valueMarker0 = new ValueMarker(10, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      boolean boolean0 = combinedRangeCategoryPlot0.removeRangeMarker((Marker) valueMarker0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      combinedDomainCategoryPlot1.add((CategoryPlot) combinedDomainCategoryPlot0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      combinedDomainCategoryPlot0.setDataset(908, (CategoryDataset) taskSeriesCollection0);
      assertEquals(909, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getIndexOf((CategoryItemRenderer) null);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      SortOrder sortOrder0 = combinedDomainCategoryPlot0.getColumnRenderingOrder();
      combinedDomainCategoryPlot0.setColumnRenderingOrder(sortOrder0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setRangeCrosshairValue(916.48);
      assertEquals(916.48, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("n}");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      int int0 = combinedDomainCategoryPlot0.getDatasetCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1205, 1437);
      assertEquals(0, bufferedImage0.getMinTileY());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("VedI_ge4aS65zR@]2", simpleTimeZone0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      combinedRangeCategoryPlot0.setDrawSharedDomainAxis(true);
      assertTrue(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      combinedDomainCategoryPlot0.zoomDomainAxes(1.0E-8, (PlotRenderingInfo) null, (Point2D) point0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation();
      combinedDomainCategoryPlot0.setDomainAxisLocation(211, axisLocation0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("VedI_ge4aS65zR@]2", simpleTimeZone0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeCategoryPlot0.getRangeCrosshairStroke();
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getRangeAxisCount();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      CategoryMarker categoryMarker0 = new CategoryMarker(2.0F, moduloAxis0.DEFAULT_TICK_LABEL_PAINT, categoryAxis0.DEFAULT_TICK_MARK_STROKE, moduloAxis0.DEFAULT_TICK_MARK_PAINT, categoryAxis0.DEFAULT_TICK_MARK_STROKE, 1.0F);
      boolean boolean0 = combinedRangeCategoryPlot0.removeDomainMarker((Marker) categoryMarker0);
      assertFalse(boolean0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("n}");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      double double0 = combinedDomainCategoryPlot0.getAnchorValue();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("n}");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      NumberAxis numberAxis0 = new NumberAxis("a[c(");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, numberAxis0);
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      combinedDomainCategoryPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RectangleInsets rectangleInsets0 = combinedDomainCategoryPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      boolean boolean0 = categoryPlot0.getDrawSharedDomainAxis();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("919m 2H(!J>WG");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 0.0, "X ");
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, cyclicNumberAxis0, lineRenderer3D0);
      JFreeChart jFreeChart0 = new JFreeChart("X ", categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      AxisSpace axisSpace0 = categoryPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      categoryPlot0.setFixedDomainAxisSpace(axisSpace0);
      AxisSpace axisSpace1 = categoryPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, axisSpace0);
      assertEquals(43.1328125, axisSpace1.getLeft(), 0.01);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(24.1328125, axisSpace1.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      combinedRangeCategoryPlot0.setFixedRangeAxisSpace(axisSpace0);
      assertEquals(14.0, axisSpace0.getLeft(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      categoryPlot0.setDomainAxisLocation(axisLocation0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true, false, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = new Point(300, 3);
      combinedRangeCategoryPlot0.zoomRangeAxes(2.0, plotRenderingInfo0, (Point2D) point0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.setAnchorValue((-446.96827));
      assertEquals((-446.96827), combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeCategoryPlot0.addDomainMarker(categoryMarker0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Layer layer0 = Layer.BACKGROUND;
      Collection collection0 = combinedDomainCategoryPlot0.getRangeMarkers(layer0);
      assertNotNull(collection0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setRangeAxis((ValueAxis) null);
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      int int0 = combinedRangeCategoryPlot0.getDomainAxisCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      int int0 = combinedRangeCategoryPlot0.getWeight();
      assertEquals(0, int0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      combinedRangeCategoryPlot0.setRenderer(1175, (CategoryItemRenderer) boxAndWhiskerRenderer0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      SortOrder sortOrder0 = combinedDomainCategoryPlot0.getRowRenderingOrder();
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("r0XL8B+");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(316.7628785935963, 0.0, true);
      combinedRangeCategoryPlot0.setRenderer((CategoryItemRenderer) stackedBarRenderer3D0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 400, (double) 10, 0.05, chartRenderingInfo0);
      assertEquals(400, bufferedImage0.getHeight());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.zoomDomainAxes(0.0, (PlotRenderingInfo) null, (Point2D) null, false);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      double double0 = combinedDomainCategoryPlot0.getRangeCrosshairValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      combinedRangeCategoryPlot0.setDataset((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Paint paint0 = categoryPlot0.getRangeCrosshairPaint();
      assertEquals(1, paint0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getPlotType();
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Color color0 = (Color)combinedDomainCategoryPlot0.getDomainGridlinePaint();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals((-1), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float(827, 0.0F);
      combinedDomainCategoryPlot0.zoomDomainAxes(0.2, (double) levelRenderer0.ZERO, plotRenderingInfo0, (Point2D) point2D_Float0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("n}");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      boolean boolean0 = combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData();
      assertTrue(boolean0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.removeAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearAnnotations();
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("|=G@g1=Y");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      combinedDomainCategoryPlot0.setRenderer((CategoryItemRenderer) scatterRenderer0, true);
      combinedDomainCategoryPlot0.setRenderer((CategoryItemRenderer) scatterRenderer0, true);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAnchor categoryAnchor0 = combinedRangeCategoryPlot0.getDomainGridlinePosition();
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeCategoryPlot0.getDomainGridlineStroke();
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, extendedCategoryAxis0, valueAxis0, scatterRenderer0);
      // Undeclared exception!
      try { 
        categoryPlot0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setAxisOffset(combinedDomainCategoryPlot0.DEFAULT_INSETS);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxis(912);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis[] categoryAxisArray0 = new CategoryAxis[6];
      combinedRangeCategoryPlot0.setDomainAxes(categoryAxisArray0);
      assertEquals(6, combinedRangeCategoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(";V6G*QE!j}");
      categoryPlot0.getDomainAxisIndex(categoryAxis3D0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.getDomainAxisIndex((CategoryAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0, "F_kofk+.1h?");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, cyclicNumberAxis0, categoryStepRenderer0);
      // Undeclared exception!
      try { 
        categoryPlot0.setDomainAxisLocation((AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearDomainAxes();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      combinedDomainCategoryPlot0.clearDomainAxes();
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "");
      combinedRangeCategoryPlot0.setRangeAxis(0, (ValueAxis) cyclicNumberAxis0, true);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      categoryPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(4, categoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(196.8);
      int int0 = categoryPlot0.getRangeAxisIndex(cyclicNumberAxis0);
      assertEquals((-1), int0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.getRangeAxisIndex((ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("-c0,ox*vu4wdn91'T~");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      int int0 = combinedRangeCategoryPlot0.getRangeAxisIndex(numberAxis3D0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, int0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getRangeAxisLocation(15);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setRangeAxisLocation((AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearRangeAxes();
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.clearRangeAxes();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("919m 2H(!J>WG");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 0.0, "X ");
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, cyclicNumberAxis0, lineRenderer3D0);
      JFreeChart jFreeChart0 = new JFreeChart("X ", categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      boolean boolean0 = categoryPlot0.render(graphics2D0, rectangle0, 59, plotRenderingInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setDataset(1453, (CategoryDataset) null);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setRenderer(2345, (CategoryItemRenderer) null, true);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[4];
      combinedDomainCategoryPlot0.setRenderers(categoryItemRendererArray0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryItemRenderer categoryItemRenderer0 = combinedDomainCategoryPlot0.getRendererForDataset(defaultStatisticalCategoryDataset0);
      assertNull(categoryItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainCategoryPlot0.getDatasetRenderingOrder();
      combinedDomainCategoryPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setColumnRenderingOrder((SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      categoryPlot0.setRowRenderingOrder(sortOrder0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRowRenderingOrder((SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setDomainGridlinesVisible(false);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setDomainGridlinesVisible(true);
      assertTrue(categoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      CategoryAnchor categoryAnchor0 = CategoryAnchor.MIDDLE;
      combinedDomainCategoryPlot0.setDomainGridlinePosition(categoryAnchor0);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setDomainGridlinePosition((CategoryAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'position' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      PiePlot piePlot0 = new PiePlot();
      Stroke stroke0 = piePlot0.getBaseSectionOutlineStroke();
      combinedRangeCategoryPlot0.setDomainGridlineStroke(stroke0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      combinedRangeCategoryPlot0.setRangeGridlinesVisible(true);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setRangeGridlinesVisible(false);
      assertFalse(categoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BasicStroke basicStroke0 = (BasicStroke)categoryPlot0.getRangeGridlineStroke();
      categoryPlot0.setRangeGridlineStroke(basicStroke0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Color color0 = (Color)areaRenderer0.lookupSeriesPaint(10);
      categoryPlot0.setRangeGridlinePaint(color0);
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 3196.1, "g3O(7QY C,R9$`");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      categoryPlot0.setFixedLegendItems(legendItemCollection0);
      LegendItemCollection legendItemCollection1 = categoryPlot0.getLegendItems();
      assertSame(legendItemCollection1, legendItemCollection0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(39.0, "z");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, cyclicNumberAxis0, (CategoryItemRenderer) null);
      LegendItemCollection legendItemCollection0 = categoryPlot0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      categoryPlot0.handleClick((short)1206, 26, plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("$ci[AtIqyC}{D^");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      combinedRangeCategoryPlot0.zoom((-266.642569));
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.zoom(4.8559545714);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "");
      ValueMarker valueMarker0 = new ValueMarker(10, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE, 0.5F);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(valueMarker0);
      combinedRangeCategoryPlot0.rendererChanged(rendererChangeEvent0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.addDomainMarker((CategoryMarker) null, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0E7);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(jDBCCategoryDataset0, categoryAxis0, cyclicNumberAxis0, statisticalBarRenderer0);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT, statisticalBarRenderer0.DEFAULT_OUTLINE_STROKE);
      // Undeclared exception!
      try { 
        categoryPlot0.addDomainMarker(101, categoryMarker0, (Layer) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("r0XL8B+");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(316.7628785935963, 0.0, true);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getItemStroke(1, 1);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0E-8, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, stackedBarRenderer3D0.DEFAULT_OUTLINE_STROKE, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, stroke0, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeCategoryPlot0.addDomainMarker(1, categoryMarker0, layer0);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainCategoryPlot0.addDomainMarker(3470, categoryMarker0, layer0, false);
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("-c0,ox*vu4wdn91'T~");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeCategoryPlot0.addDomainMarker((-1883), categoryMarker0, layer0, true);
      combinedRangeCategoryPlot0.clearDomainMarkers();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      MockDate mockDate0 = new MockDate(2443L);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'annotation' argument.", millisecond0, millisecond0, millisecond0.DEFAULT_TIME_ZONE);
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, subCategoryAxis0, periodAxis0, intervalBarRenderer0);
      Collection collection0 = categoryPlot0.getDomainMarkers((Layer) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeCategoryPlot0.addDomainMarker(500, categoryMarker0, layer0, true);
      Collection collection0 = combinedRangeCategoryPlot0.getDomainMarkers(500, layer0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, extendedCategoryAxis0, valueAxis0, scatterRenderer0);
      categoryPlot0.clearDomainMarkers(0);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ValueMarker valueMarker0 = new ValueMarker(0.0, categoryPlot0.DEFAULT_GRIDLINE_PAINT, categoryPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      categoryPlot0.removeDomainMarker(39, (Marker) valueMarker0, layer0, false);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ValueAxis valueAxis0 = categoryPlot0.getRangeAxisForDataset((-2209));
      ValueMarker valueMarker0 = new ValueMarker(3677.8229566078417, categoryPlot0.DEFAULT_OUTLINE_PAINT, valueAxis0.DEFAULT_TICK_MARK_STROKE);
      categoryPlot0.addRangeMarker((Marker) valueMarker0);
      categoryPlot0.addRangeMarker((Marker) valueMarker0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0E7);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(jDBCCategoryDataset0, categoryAxis0, cyclicNumberAxis0, statisticalBarRenderer0);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT, statisticalBarRenderer0.DEFAULT_OUTLINE_STROKE);
      categoryPlot0.addRangeMarker(2, (Marker) categoryMarker0, (Layer) null);
      assertTrue(categoryPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeCategoryPlot0.addRangeMarker(0, (Marker) categoryMarker0, layer0, true);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F, categoryAxis3D0.DEFAULT_TICK_MARK_PAINT, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainCategoryPlot0.addRangeMarker(0, (Marker) valueMarker0, layer0, false);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.clearRangeMarkers();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      boolean boolean0 = combinedDomainCategoryPlot0.equals(combinedDomainCategoryPlot1);
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("project.copyright");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      Collection collection0 = combinedRangeCategoryPlot0.getRangeMarkers(128, (Layer) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearRangeMarkers(500);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.removeRangeMarker(0, (Marker) null, layer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(categoryPlot0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_OUTLINE_PAINT);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Stroke stroke0 = thermometerPlot0.getThermometerStroke();
      ValueMarker valueMarker0 = new ValueMarker(2723.070169216575, categoryPlot0.DEFAULT_CROSSHAIR_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_STROKE, waterfallBarRenderer0.DEFAULT_VALUE_LABEL_PAINT, stroke0, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      categoryPlot0.removeRangeMarker(10, (Marker) valueMarker0, layer0);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(")yn>EJGqAN%trSCd");
      PeriodAxis periodAxis0 = new PeriodAxis(")yn>EJGqAN%trSCd");
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, periodAxis0, statisticalLineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, 0.05, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ValueMarker valueMarker0 = new ValueMarker(25000.0, ((SunGraphics2D) graphics2D0).backgroundColor, statisticalLineAndShapeRenderer0.DEFAULT_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      categoryPlot0.removeRangeMarker(0, (Marker) valueMarker0, layer0, false);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setRangeCrosshairVisible(false);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("o^Rl'o");
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, (CategoryAxis) null, logAxis0, stackedBarRenderer3D0);
      categoryPlot0.setRangeCrosshairLockedOnData(true);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      combinedDomainCategoryPlot0.setRangeCrosshairLockedOnData(false);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("/v\"T");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setRangeCrosshairStroke(categoryAxis3D0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      MockDate mockDate0 = new MockDate(0, 10, 0, 1122, 2212, 2701);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Day day0 = new Day(mockDate0, zoneInfo0);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", day0, 1122, 0.0);
      combinedDomainCategoryPlot0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, false);
      assertEquals(10.0, CategoryPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("eh4*\"^p}j?|m+jn}`Z", 0.0F, 10, (-2153.40691568713));
      combinedDomainCategoryPlot0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, true);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", 10, 2066.5249, (-468.36943966225334));
      boolean boolean0 = combinedDomainCategoryPlot0.removeAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("-lY !k", combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(888, 500, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeCategoryPlot0.calculateDomainAxisSpace(graphics2D0, (Rectangle2D) null, (AxisSpace) null);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("-lY !k", combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(888, 500, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.calculateRangeAxisSpace(graphics2D0, (Rectangle2D) null, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.LogAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1205, 10);
      assertEquals(2, bufferedImage0.getType());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      ArrayDeque<CategoryPointerAnnotation> arrayDeque0 = new ArrayDeque<CategoryPointerAnnotation>();
      LinkedList<CategoryTextAnnotation> linkedList0 = new LinkedList<CategoryTextAnnotation>(arrayDeque0);
      combinedDomainCategoryPlot0.drawRangeGridlines((Graphics2D) null, rectangle0, linkedList0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("9A}LzDY)kS");
      LogAxis logAxis0 = new LogAxis();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, extendedCategoryAxis0, logAxis0, barRenderer3D0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'location' for index 0 not permitted.", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.createBufferedImage(500, 500, chartRenderingInfo0);
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(categoryPlot0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("t");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("-lY !k", combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(883, 500, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<LogarithmicAxis> vector0 = new Vector<LogarithmicAxis>();
      vector0.add((LogarithmicAxis) null);
      combinedRangeCategoryPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, vector0);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(")yn>EJGqAN%trSCd");
      PeriodAxis periodAxis0 = new PeriodAxis(")yn>EJGqAN%trSCd");
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, periodAxis0, statisticalLineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, 0.05, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      categoryPlot0.drawRangeLine(graphics2D0, rectangle2D_Float0, 0.05, statisticalLineAndShapeRenderer0.DEFAULT_STROKE, extendedCategoryAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 404.0, 10, (-1.0));
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      NumberAxis numberAxis0 = new NumberAxis();
      // Undeclared exception!
      try { 
        categoryPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D_Double0, plotOrientation0, 0.65, numberAxis0, polarPlot0.DEFAULT_OUTLINE_STROKE, polarPlot0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(")yn>EJGqAN%trSCd");
      PeriodAxis periodAxis0 = new PeriodAxis(")yn>EJGqAN%trSCd");
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, periodAxis0, statisticalLineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, 0.05, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      categoryPlot0.drawRangeCrosshair(graphics2D0, rectangle2D_Float0, plotOrientation0, 431.22084333, periodAxis0, statisticalLineAndShapeRenderer0.DEFAULT_OUTLINE_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ExtendedCategoryAxis extendedCategoryAxis1 = (ExtendedCategoryAxis)extendedCategoryAxis0.clone();
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, extendedCategoryAxis0, numberAxis0, scatterRenderer0);
      categoryPlot0.getCategoriesForAxis(extendedCategoryAxis1);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("`lxKp [rw");
      PeriodAxis periodAxis0 = new PeriodAxis("`lxKp [rw");
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, periodAxis0, statisticalLineAndShapeRenderer0);
      categoryPlot0.setDataset(2, (CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DateAxis dateAxis0 = new DateAxis();
      combinedDomainCategoryPlot0.setRangeAxis(10, (ValueAxis) dateAxis0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      combinedDomainCategoryPlot0.setDataset(908, (CategoryDataset) taskSeriesCollection0);
      assertEquals(11, combinedDomainCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("919m 2H(!J>WG");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 0.0, "X ");
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, cyclicNumberAxis0, lineRenderer3D0);
      JFreeChart jFreeChart0 = new JFreeChart("X ", categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      AxisSpace axisSpace0 = categoryPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      categoryPlot0.setFixedDomainAxisSpace(axisSpace0, false);
      assertEquals(24.1328125, axisSpace0.getBottom(), 0.01);
      assertEquals(43.1328125, axisSpace0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getCategories();
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("919m 2H(!J>WG");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 0.0, "X ");
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, cyclicNumberAxis0, lineRenderer3D0);
      List list0 = categoryPlot0.getCategories();
      assertNotNull(list0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(")yn>EJGqAN%trSCd");
      PeriodAxis periodAxis0 = new PeriodAxis(")yn>EJGqAN%trSCd");
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, periodAxis0, statisticalLineAndShapeRenderer0);
      List list0 = categoryPlot0.getCategoriesForAxis(extendedCategoryAxis0);
      assertEquals(4, list0.size());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      combinedDomainCategoryPlot0.zoomRangeAxes((double) 0, plotRenderingInfo0, (Point2D) point0, false);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("919m 2H(!J>WG");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 0.0, "X ");
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, cyclicNumberAxis0, lineRenderer3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point(10, 10);
      categoryPlot0.zoomRangeAxes((double) 0.0F, plotRenderingInfo0, (Point2D) point0, true);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      combinedRangeCategoryPlot0.zoomRangeAxes((-2549.71448642273), (double) 888, (PlotRenderingInfo) null, (Point2D) null);
      assertEquals(Double.POSITIVE_INFINITY, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.zoomRangeAxes((double) 200, 4175.436818, plotRenderingInfo0, (Point2D) null);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setAnchorValue(0.05, false);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(")yn>EJGqAN%trSCd");
      PeriodAxis periodAxis0 = new PeriodAxis(")yn>EJGqAN%trSCd");
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, periodAxis0, statisticalLineAndShapeRenderer0);
      categoryPlot0.equals(defaultIntervalCategoryDataset0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearRangeMarkers(0);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      boolean boolean0 = combinedDomainCategoryPlot0.equals(combinedDomainCategoryPlot1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Object object0 = combinedDomainCategoryPlot0.clone();
      assertTrue(object0.equals((Object)combinedDomainCategoryPlot0));
      
      combinedDomainCategoryPlot0.setBackgroundImageAlignment(10);
      boolean boolean0 = combinedDomainCategoryPlot0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Object object0 = combinedDomainCategoryPlot0.clone();
      assertTrue(object0.equals((Object)combinedDomainCategoryPlot0));
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("0(i");
      combinedDomainCategoryPlot0.setDomainAxis((CategoryAxis) extendedCategoryAxis0);
      boolean boolean0 = combinedDomainCategoryPlot0.equals(object0);
      assertFalse(object0.equals((Object)combinedDomainCategoryPlot0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot1.getDomainAxisLocation(626);
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      
      combinedDomainCategoryPlot0.setRangeAxisLocation(axisLocation0, true);
      combinedDomainCategoryPlot0.equals(combinedDomainCategoryPlot1);
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      combinedDomainCategoryPlot1.setRenderer((CategoryItemRenderer) stackedBarRenderer3D0, false);
      boolean boolean0 = combinedDomainCategoryPlot0.equals(combinedDomainCategoryPlot1);
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      combinedDomainCategoryPlot0.setColumnRenderingOrder(sortOrder0);
      combinedDomainCategoryPlot0.equals(combinedDomainCategoryPlot1);
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setDomainGridlinePaint(combinedDomainCategoryPlot0.DEFAULT_OUTLINE_PAINT);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      boolean boolean0 = combinedDomainCategoryPlot0.equals(combinedDomainCategoryPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      combinedDomainCategoryPlot1.setRangeCrosshairVisible(true);
      boolean boolean0 = combinedDomainCategoryPlot0.equals(combinedDomainCategoryPlot1);
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Object object0 = combinedDomainCategoryPlot0.clone();
      combinedDomainCategoryPlot0.setRangeCrosshairValue((double) 10, false);
      combinedDomainCategoryPlot0.equals(object0);
      assertEquals(10.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      
      combinedDomainCategoryPlot0.setRangeCrosshairPaint(combinedDomainCategoryPlot1.DEFAULT_OUTLINE_PAINT);
      combinedDomainCategoryPlot0.equals(combinedDomainCategoryPlot1);
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("-c0,ox*vu4wdn91'T~");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      assertEquals(1, combinedRangeCategoryPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeCategoryPlot1.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("919m 2H(!J>WG");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 0.0, "X ");
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, cyclicNumberAxis0, lineRenderer3D0);
      JFreeChart jFreeChart0 = new JFreeChart("X ", categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      AxisSpace axisSpace0 = categoryPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      categoryPlot0.setFixedDomainAxisSpace(axisSpace0);
      assertEquals(24.1328125, axisSpace0.getBottom(), 0.01);
      assertEquals(43.1328125, axisSpace0.getLeft(), 0.01);
      
      CategoryPlot categoryPlot1 = (CategoryPlot)categoryPlot0.clone();
      assertEquals(1, categoryPlot1.getRangeAxisCount());
      assertEquals(1, categoryPlot1.getDomainAxisCount());
  }
}
