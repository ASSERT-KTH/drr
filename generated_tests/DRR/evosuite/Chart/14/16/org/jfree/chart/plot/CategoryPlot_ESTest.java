/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 25 10:45:46 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.AttributedCharacterIterator;
import java.util.Collection;
import java.util.List;
import java.util.Vector;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;


public class CategoryPlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      categoryPlot0.setRangeAxisLocation(10, axisLocation0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("8F#3mDf=-g");
      LogAxis logAxis0 = new LogAxis();
      DateAxis dateAxis0 = new DateAxis();
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_AXIS_LINE_STROKE;
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, logarithmicAxis0.DEFAULT_AXIS_LABEL_PAINT, basicStroke0, logAxis0.DEFAULT_TICK_MARK_PAINT, dateAxis0.DEFAULT_AXIS_LINE_STROKE, 0.0F);
      combinedDomainCategoryPlot0.removeRangeMarker((Marker) categoryMarker0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = combinedDomainCategoryPlot0.getIndexOf(minMaxCategoryRenderer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("'TH[df", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, combinedRangeCategoryPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      categoryPlot0.drawBackground(graphics2D0, rectangle2D_Double0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      SortOrder sortOrder0 = combinedDomainCategoryPlot0.getColumnRenderingOrder();
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      int int0 = categoryPlot0.getDatasetCount();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setDrawSharedDomainAxis(true);
      assertTrue(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.restoreAutoDomainBounds();
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      BufferedImage bufferedImage0 = new BufferedImage(781, 781, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle((-327), 0);
      Vector<AttributedCharacterIterator.Attribute> vector0 = new Vector<AttributedCharacterIterator.Attribute>();
      combinedDomainCategoryPlot0.drawRangeGridlines(graphics2D0, rectangle0, vector0);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getRangeCrosshairStroke();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.05, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, logAxis0.DEFAULT_TICK_MARK_STROKE, logAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE, 0.0F);
      combinedRangeCategoryPlot0.addRangeMarker((Marker) intervalMarker0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("JK$2");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logarithmicAxis0);
      int int0 = combinedRangeCategoryPlot0.getRangeAxisCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      double double0 = combinedDomainCategoryPlot0.getAnchorValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation((-575));
      combinedDomainCategoryPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RectangleInsets rectangleInsets0 = combinedDomainCategoryPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Layer layer0 = Layer.BACKGROUND;
      categoryPlot0.getDomainMarkers(layer0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis0, symbolAxis0, minMaxCategoryRenderer0);
      boolean boolean0 = categoryPlot0.getDrawSharedDomainAxis();
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("17\"zHzttaun<");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      combinedRangeCategoryPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisSpace axisSpace0 = new AxisSpace();
      categoryPlot0.setFixedRangeAxisSpace(axisSpace0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation(10);
      assertNotNull(axisLocation0);
      
      combinedRangeCategoryPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double(0.4, 10);
      categoryPlot0.zoomRangeAxes(0.0, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setAnchorValue(0.0);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Layer layer0 = Layer.FOREGROUND;
      Collection collection0 = combinedRangeCategoryPlot0.getRangeMarkers(layer0);
      assertNull(collection0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      NumberAxis numberAxis0 = new NumberAxis("/gfW%lrU");
      combinedDomainCategoryPlot0.setRangeAxis((ValueAxis) numberAxis0);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      
      BufferedImage bufferedImage0 = new BufferedImage(781, 781, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle((-327), 5);
      Vector<AttributedCharacterIterator.Attribute> vector0 = new Vector<AttributedCharacterIterator.Attribute>();
      combinedDomainCategoryPlot0.drawRangeGridlines(graphics2D0, rectangle0, vector0);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("17\"zHzttaun<");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      int int0 = combinedRangeCategoryPlot0.getDomainAxisCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedDomainAxisSpace();
      assertNull(axisSpace0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      int int0 = combinedRangeCategoryPlot0.getWeight();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("$L5N*|=405L");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setRenderer((-421), (CategoryItemRenderer) waterfallBarRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      categoryPlot0.setRenderer((CategoryItemRenderer) stackedBarRenderer3D0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.data.Range");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getDomainAxisEdge();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = new Point();
      categoryPlot0.zoomDomainAxes((-1.0), plotRenderingInfo0, (Point2D) point0, false);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      double double0 = combinedDomainCategoryPlot0.getRangeCrosshairValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      LogAxis logAxis0 = new LogAxis("2:'U|2MpD+");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      LegendItemCollection legendItemCollection0 = combinedRangeCategoryPlot0.getLegendItems();
      combinedDomainCategoryPlot0.setFixedLegendItems(legendItemCollection0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getRangeCrosshairPaint();
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.data.Range");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      combinedDomainCategoryPlot0.setRangeCrosshairValue(390.738207);
      assertEquals(390.738207, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis0, symbolAxis0, minMaxCategoryRenderer0);
      categoryPlot0.getPlotType();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Color color0 = (Color)categoryPlot0.getDomainGridlinePaint();
      assertEquals(255, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("=o9:H");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      boolean boolean0 = combinedDomainCategoryPlot0.removeDomainMarker((Marker) null);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedDomainCategoryPlot0.add((CategoryPlot) combinedRangeCategoryPlot0, 263);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      Point2D point2D0 = combinedDomainXYPlot0.getQuadrantOrigin();
      combinedRangeCategoryPlot0.zoomDomainAxes((-1081.4), 0.0, plotRenderingInfo0, point2D0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("JK$2");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logarithmicAxis0);
      boolean boolean0 = combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData();
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("kA", true, 3077.0244488503863);
      combinedDomainCategoryPlot0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, false);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.drawAnnotations(graphics2D0, rectangle2D0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("Y;Q", 1.0F, 1.0F);
      boolean boolean0 = combinedRangeCategoryPlot0.removeAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("$L5N*|=405L");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.clearAnnotations();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      combinedRangeCategoryPlot0.setRenderer((CategoryItemRenderer) stackedAreaRenderer0, true);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAnchor categoryAnchor0 = combinedDomainCategoryPlot0.getDomainGridlinePosition();
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getDomainGridlineStroke();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", true, 1395.639152545, 1.0F);
      combinedRangeCategoryPlot0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DateAxis dateAxis0 = new DateAxis((String) null);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis0, dateAxis0, categoryStepRenderer0);
      CategoryPlot categoryPlot1 = (CategoryPlot)categoryPlot0.clone();
      assertEquals(1, categoryPlot1.getRangeAxisCount());
      assertEquals(1, categoryPlot1.getDomainAxisCount());
      assertTrue(categoryPlot1.equals((Object)categoryPlot0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setAxisOffset(combinedDomainCategoryPlot0.DEFAULT_INSETS);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getDomainAxis(270);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.data.Range");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      CategoryAxis[] categoryAxisArray0 = new CategoryAxis[1];
      combinedDomainCategoryPlot0.setDomainAxes(categoryAxisArray0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("}5Co@15^bY6fd");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Category 2");
      combinedDomainCategoryPlot0.getDomainAxisIndex(extendedCategoryAxis0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.getDomainAxisIndex((CategoryAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation(1800);
      combinedDomainCategoryPlot0.setDomainAxisLocation(10, axisLocation0);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("$L5N*|=405L");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setDomainAxisLocation((AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.clearDomainAxes();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearDomainAxes();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      combinedRangeCategoryPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      NumberAxis numberAxis0 = new NumberAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, subCategoryAxis0, numberAxis0, (CategoryItemRenderer) null);
      categoryPlot0.getRangeAxisIndex(numberAxis0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.getRangeAxisIndex((ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-100, (-1.5707963267948966));
      int int0 = categoryPlot0.getRangeAxisIndex(cyclicNumberAxis0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getRangeAxisLocation(2234);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("}5Co@15^bY6fd");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      combinedDomainCategoryPlot0.clearRangeAxes();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.clearRangeAxes();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.mapDatasetToDomainAxis(3, 3);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setDataset((CategoryDataset) null);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("c=QxbVv<MV}");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxisForDataset(359);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertNotNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[6];
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      categoryItemRendererArray0[5] = (CategoryItemRenderer) lineAndShapeRenderer0;
      combinedDomainCategoryPlot0.setRenderers(categoryItemRendererArray0);
      BufferedImage bufferedImage0 = new BufferedImage(781, 781, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle((-327), 5);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainCategoryPlot0.drawRangeMarkers(graphics2D0, rectangle0, 5, layer0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Layer layer0 = Layer.FOREGROUND;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedDomainCategoryPlot0.drawDomainMarkers(graphics2D0, rectangle2D0, 2003, layer0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      combinedRangeCategoryPlot0.setRenderer(919, (CategoryItemRenderer) layeredBarRenderer0, true);
      combinedRangeCategoryPlot0.setRenderer(919, (CategoryItemRenderer) layeredBarRenderer0, true);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("U*<Ox0+j)~(#-;c");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      double[][] doubleArray0 = new double[4][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryItemRenderer categoryItemRenderer0 = combinedDomainCategoryPlot0.getRendererForDataset(defaultIntervalCategoryDataset0);
      assertNull(categoryItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeCategoryPlot0.getDatasetRenderingOrder();
      combinedDomainCategoryPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("}5Co@15^bY6fd");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      SortOrder sortOrder0 = combinedDomainCategoryPlot0.getRowRenderingOrder();
      combinedRangeCategoryPlot0.setColumnRenderingOrder(sortOrder0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setColumnRenderingOrder((SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setRowRenderingOrder((SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setDomainGridlinesVisible(false);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setDomainGridlinesVisible(true);
      assertTrue(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAnchor categoryAnchor0 = CategoryAnchor.MIDDLE;
      categoryPlot0.setDomainGridlinePosition(categoryAnchor0);
      assertNull(categoryPlot0.getNoDataMessage());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setDomainGridlinePosition((CategoryAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'position' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_AXIS_LINE_STROKE;
      combinedRangeCategoryPlot0.setDomainGridlineStroke(basicStroke0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      combinedRangeCategoryPlot0.setDomainGridlinePaint(layeredBarRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setRangeGridlinesVisible(true);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setRangeGridlinesVisible(false);
      assertFalse(categoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      combinedDomainCategoryPlot0.setRangeGridlineStroke(categoryAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      categoryPlot0.setRangeGridlinePaint(color0);
      assertEquals(51, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0, "");
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis0, cyclicNumberAxis0, waterfallBarRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis3D0, (ValueAxis) null, (CategoryItemRenderer) null);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, categoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(496, 10, chartRenderingInfo0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      categoryPlot0.handleClick(1055, 1, plotRenderingInfo0);
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(categoryPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoom((-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("eZoMe%C|z'I@_txrn");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoom(2.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(categoryPlot0);
      categoryPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.addDomainMarker((CategoryMarker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, categoryPlot0.DEFAULT_BACKGROUND_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_STROKE, categoryPlot0.DEFAULT_CROSSHAIR_PAINT, categoryPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      // Undeclared exception!
      try { 
        categoryPlot0.addDomainMarker(categoryMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeCategoryPlot0.addDomainMarker(10, categoryMarker0, layer0);
      combinedRangeCategoryPlot0.addDomainMarker(10, categoryMarker0, layer0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      MockDate mockDate0 = new MockDate(40, 40, 10, 10, 10);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Week week0 = new Week(mockDate0, zoneInfo0);
      CategoryMarker categoryMarker0 = new CategoryMarker(week0, categoryAxis3D0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainCategoryPlot0.addDomainMarker(40, categoryMarker0, layer0, false);
      combinedDomainCategoryPlot0.clearDomainMarkers();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("+vFV-y^i#?C$:#Qn");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logarithmicAxis0);
      Layer layer0 = Layer.FOREGROUND;
      Collection collection0 = combinedRangeCategoryPlot0.getDomainMarkers(layer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'stroke' argument.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      combinedDomainCategoryPlot0.getDomainMarkers(2039, (Layer) null);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_AXIS_LINE_STROKE;
      CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, basicStroke0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeCategoryPlot0.removeDomainMarker(919, (Marker) categoryMarker0, layer0, true);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(720);
      categoryPlot0.addRangeMarker((-673), (Marker) categoryMarker0, (Layer) null, false);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearRangeMarkers();
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[12];
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      categoryItemRendererArray0[0] = (CategoryItemRenderer) groupedStackedBarRenderer0;
      combinedDomainCategoryPlot0.setRenderers(categoryItemRendererArray0);
      BufferedImage bufferedImage0 = new BufferedImage(781, 781, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle((-327), 0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainCategoryPlot0.drawRangeMarkers(sunGraphics2D0, rectangle0, 0, layer0);
      assertEquals(0, sunGraphics2D0.strokeState);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.clearRangeMarkers(40);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        categoryPlot0.removeRangeMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, lineAndShapeRenderer0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0, 3077.0244488503863);
      Layer layer0 = Layer.BACKGROUND;
      boolean boolean0 = categoryPlot0.removeRangeMarker((-1), (Marker) intervalMarker0, layer0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer0 = Layer.BACKGROUND;
      categoryPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, lineAndShapeRenderer0);
      categoryPlot0.setRangeCrosshairVisible(false);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setRangeCrosshairVisible(true);
      combinedRangeCategoryPlot0.setRangeCrosshairValue((-1.0), true);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setRangeCrosshairLockedOnData(true);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis0, symbolAxis0, minMaxCategoryRenderer0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      
      categoryPlot0.setRangeCrosshairLockedOnData(false);
      assertFalse(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setRangeCrosshairVisible(true);
      combinedRangeCategoryPlot0.setRangeCrosshairValue((-1.0), false);
      assertEquals((-1.0), combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      Stroke stroke0 = candlestickRenderer0.getBaseStroke();
      combinedDomainCategoryPlot0.setRangeCrosshairStroke(stroke0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      categoryPlot0.setRangeCrosshairPaint(stackedAreaRenderer0.DEFAULT_PAINT);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.addAnnotation((CategoryAnnotation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.removeAnnotation((CategoryAnnotation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("JK$2");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logarithmicAxis0);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Null 'offset' argument.", false, 10, 1.0E-100);
      combinedRangeCategoryPlot0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, true);
      combinedRangeCategoryPlot0.removeAnnotation((CategoryAnnotation) categoryPointerAnnotation0, true);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Dimension dimension0 = new Dimension(2249, 720);
      Rectangle rectangle0 = new Rectangle(dimension0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.plot.CategoryPlot", categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2249, 428);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AxisSpace axisSpace0 = categoryPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, (AxisSpace) null);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.calculateDomainAxisSpace((Graphics2D) null, rectangle2D_Float0, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D0, (AxisSpace) null);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(axisSpace0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("l5^%gV*2~taw*d\nrT");
      combinedRangeCategoryPlot0.setDomainAxis(384, (CategoryAxis) categoryAxis3D0, true);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.drawAxes((Graphics2D) null, rectangle0, rectangle0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      BufferedImage bufferedImage0 = new BufferedImage(781, 781, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle((-327), 5);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainCategoryPlot0.drawAxes(sunGraphics2D0, rectangle0, rectangle0, plotRenderingInfo0);
      assertEquals((-8355712), sunGraphics2D0.eargb);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.drawAxes((Graphics2D) null, rectangle0, rectangle0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[6];
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      categoryItemRendererArray0[0] = (CategoryItemRenderer) groupedStackedBarRenderer0;
      NumberAxis numberAxis0 = new NumberAxis("/gfW%lrU");
      combinedDomainCategoryPlot0.setRangeAxis((ValueAxis) numberAxis0);
      combinedDomainCategoryPlot0.setRenderers(categoryItemRendererArray0);
      BufferedImage bufferedImage0 = new BufferedImage(781, 781, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainCategoryPlot0.drawRangeMarkers(sunGraphics2D0, defaultCaret0, 0, layer0);
      assertEquals((-2134061876), sunGraphics2D0.eargb);
      assertEquals(204, sunGraphics2D0.pixel);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.drawRangeLine((Graphics2D) null, rectangle0, (-452), combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Week week0 = new Week(mockDate0, zoneInfo0);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("kA", true, 3077.0244488503863);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartRenderingInfo0.getChartArea();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(week0.DEFAULT_TIME_ZONE);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-550.8195679));
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      combinedDomainCategoryPlot0.drawRangeCrosshair(sunGraphics2D0, rectangle2D_Double0, plotOrientation0, 1.0, cyclicNumberAxis0, categoryAxis3D0.DEFAULT_AXIS_LINE_STROKE, categoryTextAnnotation0.DEFAULT_PAINT);
      assertEquals((-16777216), sunGraphics2D0.eargb);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      NumberAxis numberAxis0 = new NumberAxis("/gfW%lrU");
      BufferedImage bufferedImage0 = new BufferedImage(781, 781, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle((-327), 5);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-3.0));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      combinedDomainCategoryPlot0.drawRangeCrosshair(sunGraphics2D0, rectangle0, plotOrientation0, 37.049979442793955, numberAxis0, thermometerPlot0.DEFAULT_OUTLINE_STROKE, minMaxCategoryRenderer0.DEFAULT_OUTLINE_PAINT);
      assertEquals(255, sunGraphics2D0.pixel);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      NumberAxis numberAxis0 = new NumberAxis("/gfW%lrU");
      BufferedImage bufferedImage0 = new BufferedImage(781, 781, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle((-327), 5);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-3.0));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      combinedDomainCategoryPlot0.drawRangeCrosshair(sunGraphics2D0, rectangle0, plotOrientation0, 1.0, numberAxis0, thermometerPlot0.DEFAULT_OUTLINE_STROKE, minMaxCategoryRenderer0.DEFAULT_OUTLINE_PAINT);
      assertEquals((-8355712), sunGraphics2D0.eargb);
      assertEquals(128, sunGraphics2D0.pixel);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("8F#3mDf=-g");
      valueAxisArray0[0] = (ValueAxis) logarithmicAxis0;
      valueAxisArray0[2] = (ValueAxis) logarithmicAxis0;
      combinedDomainCategoryPlot0.setRangeAxes(valueAxisArray0);
      combinedDomainCategoryPlot0.clone();
      assertEquals(6, combinedDomainCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getCategoriesForAxis((CategoryAxis) null);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, lineAndShapeRenderer0);
      categoryPlot0.setDataset(128, (CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(129, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("[({0U");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      combinedRangeCategoryPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("JqUpmBRP");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      combinedRangeCategoryPlot0.getCategories();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis numberAxis0 = new NumberAxis("]-\"=nz=[1'eOoAu");
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-871.0886484324), 2.0F);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis0, numberAxis0, stackedBarRenderer3D0);
      List list0 = categoryPlot0.getCategories();
      assertNotNull(list0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, lineAndShapeRenderer0);
      categoryPlot0.getCategoriesForAxis(categoryAxis3D0);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      NumberAxis numberAxis0 = new NumberAxis("/gfW%lrU");
      combinedDomainCategoryPlot0.setRangeAxis((ValueAxis) numberAxis0);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      Point point0 = chartPanel0.getLocation();
      combinedDomainCategoryPlot0.zoomRangeAxes(1.0E-100, plotRenderingInfo0, (Point2D) point0, true);
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'layer' not permitted.");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("l_LHu)4fe9_VYx8xI", periodAxis0.DEFAULT_AXIS_LABEL_FONT, ringPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Point point0 = new Point(10, 10);
      Point2D point2D0 = chartPanel0.translateScreenToJava2D(point0);
      combinedRangeCategoryPlot0.zoomRangeAxes(0.05, plotRenderingInfo0, point2D0, false);
      assertEquals(0.525, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Category 3", combinedRangeCategoryPlot0.DEFAULT_VALUE_LABEL_FONT, combinedRangeCategoryPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = new Point();
      combinedRangeCategoryPlot0.zoomRangeAxes((-481.1983600160001), (double) 0, plotRenderingInfo0, (Point2D) point0);
      assertTrue(chartPanel0.getRefreshBuffer());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      combinedRangeCategoryPlot0.setAnchorValue(0.05, false);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      SortOrder sortOrder0 = categoryPlot0.getRowRenderingOrder();
      boolean boolean0 = categoryPlot0.equals(sortOrder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      CategoryMarker categoryMarker0 = new CategoryMarker(true, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeCategoryPlot0.addDomainMarker(384, categoryMarker0, layer0);
      combinedRangeCategoryPlot1.clearDomainMarkers();
      assertTrue(combinedRangeCategoryPlot0.equals((Object)combinedRangeCategoryPlot1));
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      CategoryMarker categoryMarker0 = new CategoryMarker(true, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("l5^%gV*2~taw*d\nrT");
      combinedRangeCategoryPlot0.setDomainAxis(384, (CategoryAxis) categoryAxis3D0, true);
      combinedRangeCategoryPlot0.addDomainMarker(384, categoryMarker0, layer0);
      combinedRangeCategoryPlot1.clearDomainMarkers();
      assertEquals(385, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeCategoryPlot1.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      combinedRangeCategoryPlot0.setRowRenderingOrder(sortOrder0);
      CategoryMarker categoryMarker0 = new CategoryMarker(true, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeCategoryPlot0.addDomainMarker(384, categoryMarker0, layer0);
      combinedRangeCategoryPlot1.clearDomainMarkers();
      assertEquals(1, combinedRangeCategoryPlot1.getRangeAxisCount());
  }
}
