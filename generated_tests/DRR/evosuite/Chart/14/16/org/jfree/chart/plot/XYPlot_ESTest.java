/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 25 10:39:54 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.JInternalFrame;
import javax.swing.JTable;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYPolygonAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer;
import org.jfree.chart.urls.StandardXYZURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;


public class XYPlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      double double0 = combinedRangeXYPlot0.getDomainCrosshairValue();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("1e#a+g/2l*-");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setRangeAxis(0, valueAxis0);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("CategoryLabelWidthType.RANGE", stringArray0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, symbolAxis0, symbolAxis0, xYSplineAndShapeRenderer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'location' for index 0 not permitted.", symbolAxis0.DEFAULT_TICK_LABEL_FONT, categoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 193);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<StackedXYAreaRenderer> vector0 = new Vector<StackedXYAreaRenderer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 10);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      Rectangle rectangle0 = jTable0.getCellRect((-115), 2179, false);
      xYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(101.93389635244, 101.93389635244);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedRangeXYPlot0.setRangeAxisLocation(0, axisLocation0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("'{!S?~7wY=teTVWGCb");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(dateAxis0.DEFAULT_ANCHOR_DATE);
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0F, 10, 10, 1167.5586301146773, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0);
      assertFalse(boolean0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("t1KdZ6s.R4!LGul");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      Color color0 = (Color)combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeZeroBaselineVisible(false);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1678, 0.0, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      combinedDomainXYPlot0.drawDomainTickBands(graphics2D0, rectangle2D_Double0, (List) null);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeZeroBaselineStroke();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      SeriesRenderingOrder seriesRenderingOrder0 = combinedRangeXYPlot0.getSeriesRenderingOrder();
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setDomainCrosshairValue(3003.267292617);
      assertEquals(3003.267292617, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      xYPlot0.isRangeCrosshairLockedOnData();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation();
      xYPlot0.setDomainAxisLocation(4, axisLocation0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation();
      xYPlot0.setRangeAxisLocation(axisLocation0, true);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("SL_\"");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.getRangeAxisCount();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeMarkers((Layer) null);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker((Marker) categoryMarker0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(boolean0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("a%lEY{0o}# ;(");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "a%lEY{0o}# ;(");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
      XYPlot xYPlot0 = new XYPlot(vectorSeriesCollection0, logarithmicAxis0, cyclicNumberAxis0, xYAreaRenderer0);
      xYPlot0.getAnnotations();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainGridlineStroke();
      assertEquals(2, basicStroke0.getLineJoin());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainZeroBaselineVisible(false);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(889.101302);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      Color color0 = (Color)combinedRangeXYPlot0.getRangeZeroBaselinePaint();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      xYPlot0.setDataset((XYDataset) defaultXYZDataset0);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 2);
      assertEquals(2.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("'{!S?~7wY=teTVWGCb");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.clearAnnotations();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = (Color)combinedRangeXYPlot0.getRangeCrosshairPaint();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals((-16776961), color0.getRGB());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setWeight(1033);
      assertEquals(1033, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getDomainZeroBaselineStroke();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      LegendItemCollection legendItemCollection0 = xYLineAndShapeRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      LegendItemCollection legendItemCollection0 = areaRenderer0.getLegendItems();
      xYPlot0.setFixedLegendItems(legendItemCollection0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation(500);
      assertNotNull(axisLocation0);
      
      xYPlot0.setDomainAxisLocation(axisLocation0, true);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainAxisCount();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(500, standardXYToolTipGenerator0, (XYURLGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, logAxis0, logAxis0, standardXYItemRenderer0);
      Color color0 = (Color)xYPlot0.getDomainGridlinePaint();
      assertEquals(255, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(569.0032272, "");
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      xYPlot0.getRangeCrosshairValue();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = (Color)combinedRangeXYPlot0.getDomainCrosshairPaint();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, color0.getRed());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getRangeCrosshairStroke();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(2, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      boolean boolean0 = combinedRangeXYPlot0.isDomainGridlinesVisible();
      assertTrue(boolean0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle0, rectangleAnchor0);
      xYPlot0.zoomDomainAxes((double) 1.0F, plotRenderingInfo0, point2D0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedDomainXYPlot0.getQuadrantOrigin();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(569.0032272, "");
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      String string0 = xYPlot0.getPlotType();
      assertEquals("XY Plot", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      Rectangle2D rectangle2D0 = xYPlot0.DEFAULT_INSETS.createInsetRectangle((Rectangle2D) rectangle0);
      xYPlot0.drawZeroRangeBaseline((Graphics2D) null, rectangle2D0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0, (-86.19475), "AreaRendererEndType.TRUNCATE");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.removeDomainMarker((Marker) null);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      MockDate mockDate0 = new MockDate((-1), (-1085), (-703), (-703), (-1827));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      PeriodAxis periodAxis0 = new PeriodAxis("Index ", fixedMillisecond0, fixedMillisecond0, zoneInfo0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, periodAxis0, periodAxis0, xYSplineAndShapeRenderer0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      ArrayList<DeviationRenderer> arrayList0 = new ArrayList<DeviationRenderer>(2095);
      xYPlot0.drawRangeGridlines((Graphics2D) null, rectangle0, arrayList0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2818, 371, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.setFixedRangeAxisSpace(axisSpace0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      int int0 = combinedRangeXYPlot0.getWeight();
      assertEquals(1, int0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      combinedDomainXYPlot0.setRangeTickBandPaint(logarithmicAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2570.8054668), (-1926.642));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(10);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(569.0032272, "");
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      double[] doubleArray0 = new double[2];
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0);
      xYPlot0.addAnnotation((XYAnnotation) xYPolygonAnnotation0);
      xYPlot0.removeAnnotation((XYAnnotation) xYPolygonAnnotation0, false);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("a%lEY{0o}# ;(");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "a%lEY{0o}# ;(");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
      XYPlot xYPlot0 = new XYPlot(vectorSeriesCollection0, logarithmicAxis0, cyclicNumberAxis0, xYAreaRenderer0);
      xYPlot0.setDomainAxis((ValueAxis) logarithmicAxis0);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.zoomRangeAxes((double) 2.0F, plotRenderingInfo0, (Point2D) null);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      Paint paint0 = xYLine3DRenderer0.getWallPaint();
      combinedRangeXYPlot0.setDomainTickBandPaint(paint0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      BufferedImage bufferedImage0 = new BufferedImage(500, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      xYPlot0.drawRangeTickBands(graphics2D0, rectangle2D_Float0, (List) null);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getDomainCrosshairStroke();
      xYPlot0.setRangeCrosshairStroke(basicStroke0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("a%lEY{0o}# ;(");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "a%lEY{0o}# ;(");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
      XYPlot xYPlot0 = new XYPlot(vectorSeriesCollection0, logarithmicAxis0, cyclicNumberAxis0, xYAreaRenderer0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      xYPlot0.setOrientation(plotOrientation0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Spider Web Plot");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      DateAxis dateAxis0 = new DateAxis();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", dateFormat0, dateFormat0);
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(84, standardXYToolTipGenerator0, standardXYZURLGenerator0);
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, dateAxis0, dateAxis0, cyclicXYItemRenderer0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      xYPlot0.setOrientation(plotOrientation0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setAxisOffset(combinedRangeXYPlot0.DEFAULT_INSETS);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("a%lEY{0o}# ;(");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "a%lEY{0o}# ;(");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
      XYPlot xYPlot0 = new XYPlot(vectorSeriesCollection0, logarithmicAxis0, cyclicNumberAxis0, xYAreaRenderer0);
      xYPlot0.clearDomainAxes();
      xYPlot0.setDomainAxis((ValueAxis) logarithmicAxis0);
      assertEquals(1, xYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[10];
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      assertEquals(10, combinedRangeXYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("'{!S?~7wY=teTVWGCb");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.clearDomainAxes();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      BufferedImage bufferedImage0 = new BufferedImage(500, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      xYPlot0.drawAxes(graphics2D0, rectangle2D_Float0, rectangle2D_Float0, (PlotRenderingInfo) null);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation(35);
      xYPlot0.setDomainAxisLocation(35, axisLocation0, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      xYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
      assertTrue(numberAxis3D0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      xYPlot0.clearRangeAxes();
      xYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearRangeAxes();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      xYPlot0.setRangeAxisLocation(1771, axisLocation0, false);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("a%lEY{0o}# ;(");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "a%lEY{0o}# ;(");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
      XYPlot xYPlot0 = new XYPlot(vectorSeriesCollection0, logarithmicAxis0, cyclicNumberAxis0, xYAreaRenderer0);
      xYPlot0.setDataset(5, (XYDataset) vectorSeriesCollection0);
      assertEquals(6, xYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDataset(15, (XYDataset) null);
      assertEquals(16, xYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      int int0 = combinedDomainXYPlot0.indexOf(defaultXYZDataset0);
      assertEquals((-1), int0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("a%lEY{0o}# ;(");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "a%lEY{0o}# ;(");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
      XYPlot xYPlot0 = new XYPlot(vectorSeriesCollection0, logarithmicAxis0, cyclicNumberAxis0, xYAreaRenderer0);
      int int0 = xYPlot0.indexOf(vectorSeriesCollection0);
      assertEquals(0, int0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("CategoryLabelWidthType.RANGE", stringArray0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, symbolAxis0, symbolAxis0, xYSplineAndShapeRenderer0);
      xYPlot0.setRenderer(0, (XYItemRenderer) xYSplineAndShapeRenderer0, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) null);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("a%lEY{0o}# ;(");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "a%lEY{0o}# ;(");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
      XYPlot xYPlot0 = new XYPlot(vectorSeriesCollection0, logarithmicAxis0, cyclicNumberAxis0, xYAreaRenderer0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      combinedRangeXYPlot0.getRendererForDataset(matrixSeriesCollection0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      LogAxis logAxis0 = new LogAxis("org.jfree.chart.axis.AxisState");
      XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, logAxis0, logAxis0, (XYItemRenderer) null);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.setDomainGridlinesVisible(true);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainGridlinesVisible(false);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(569.0032272, "");
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      xYPlot0.setDomainGridlineStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("a%lEY{0o}# ;(");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "a%lEY{0o}# ;(");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
      XYPlot xYPlot0 = new XYPlot(vectorSeriesCollection0, logarithmicAxis0, cyclicNumberAxis0, xYAreaRenderer0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      xYPlot0.setDomainGridlinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeGridlinesVisible(true);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(606.16, ".gJ");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setRangeGridlinesVisible(false);
      assertFalse(combinedRangeXYPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("a%lEY{0o}# ;(");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "a%lEY{0o}# ;(");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
      XYPlot xYPlot0 = new XYPlot(vectorSeriesCollection0, logarithmicAxis0, cyclicNumberAxis0, xYAreaRenderer0);
      Stroke stroke0 = xYPlot0.getOutlineStroke();
      xYPlot0.setRangeGridlineStroke(stroke0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("org.jfree.data.UnknownKeyException", 10, 1771, 0.0);
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      xYPlot0.setRangeGridlinePaint(paint0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis("88@Lcg(D");
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis("88@Lcg(D");
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("4I@_>");
      xYPlot0.setRangeZeroBaselineStroke(logarithmicAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-192.458), (-192.458), ",94OV6S|SLeEXnkp");
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer2_0);
      // Undeclared exception!
      try { 
        xYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(color0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle0, rectangleAnchor0);
      xYPlot0.setQuadrantOrigin(point2D0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint((-893));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-893) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(69);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (69) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getQuadrantPaint(0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(569.0032272, "");
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      // Undeclared exception!
      try { 
        xYPlot0.setQuadrantPaint((-1), cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-1) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.setQuadrantPaint(0, numberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      // Undeclared exception!
      try { 
        xYPlot0.setQuadrantPaint((byte)94, logarithmicAxis0.DEFAULT_TICK_LABEL_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (94) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(true, numberAxis0.DEFAULT_TICK_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      combinedRangeXYPlot0.addDomainMarker((Marker) categoryMarker0);
      combinedRangeXYPlot0.clearDomainMarkers();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("R]DV-8i");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, (-5.0));
      // Undeclared exception!
      try { 
        xYPlot0.addDomainMarker((Marker) intervalMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(15.0, "\"dMpt*=");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ValueMarker valueMarker0 = new ValueMarker(2851);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(2851, (Marker) valueMarker0, layer0);
      combinedDomainXYPlot0.addDomainMarker(2851, (Marker) valueMarker0, layer0, true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker((-743.165926), xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-1009), (Marker) valueMarker0, layer0, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("a%lEY{0o}# ;(");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "a%lEY{0o}# ;(");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
      XYPlot xYPlot0 = new XYPlot(vectorSeriesCollection0, logarithmicAxis0, cyclicNumberAxis0, xYAreaRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(2.0F, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT, xYAreaRenderer0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.removeDomainMarker(3, (Marker) valueMarker0, layer0, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(371.0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
      combinedRangeXYPlot0.clearRangeMarkers();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      combinedRangeXYPlot0.addRangeMarker(0, (Marker) valueMarker0, (Layer) null, true);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(true, numberAxis0.DEFAULT_TICK_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addRangeMarker(500, (Marker) categoryMarker0, layer0, false);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearRangeMarkers(2);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker(0, (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(1.0, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      boolean boolean0 = xYPlot0.removeRangeMarker(368, (Marker) valueMarker0, layer0, true);
      assertFalse(boolean0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE, xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addRangeMarker(368, (Marker) categoryMarker0, layer0, true);
      ValueMarker valueMarker0 = new ValueMarker(1.0, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeRangeMarker(368, (Marker) valueMarker0, layer0, true);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(500.0, 0, 1343.8280000802063, 1.0F, xYPlot0.DEFAULT_OUTLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0, false);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(569.0032272, "");
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      double[] doubleArray0 = new double[2];
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0);
      xYPlot0.addAnnotation((XYAnnotation) xYPolygonAnnotation0);
      xYPlot0.removeAnnotation((XYAnnotation) xYPolygonAnnotation0, true);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("CategoryLabelWidthType.RANGE", stringArray0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, symbolAxis0, symbolAxis0, xYSplineAndShapeRenderer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'location' for index 0 not permitted.", symbolAxis0.DEFAULT_TICK_LABEL_FONT, categoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 193);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<StackedXYAreaRenderer> vector0 = new Vector<StackedXYAreaRenderer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 10);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      Rectangle rectangle0 = jTable0.getCellRect((-115), 2179, false);
      AxisSpace axisSpace0 = xYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, (AxisSpace) null);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(35.91015625, axisSpace0.getBottom(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("CategoryLabelWidthType.RANGE", stringArray0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, symbolAxis0, symbolAxis0, xYSplineAndShapeRenderer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'location' for index 0 not permitted.", symbolAxis0.DEFAULT_TICK_LABEL_FONT, categoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 193);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<StackedXYAreaRenderer> vector0 = new Vector<StackedXYAreaRenderer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 10);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      Rectangle rectangle0 = jTable0.getCellRect((-115), 2179, false);
      AxisSpace axisSpace0 = xYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle0, (AxisSpace) null);
      assertEquals(28.1328125, axisSpace0.getLeft(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.createBufferedImage(10, 400, chartRenderingInfo0);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(".pE\"'$wVlUwA'", (Font) null, xYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(75, 35);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((byte)37, Double.NaN, (byte)37, 0.9);
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      // Undeclared exception!
      try { 
        xYPlot0.drawHorizontalLine(graphics2D0, rectangle2D_Double0, 0.5F, basicStroke0, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(47, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      Rectangle rectangle0 = chartPanel0.getBounds();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.drawAxes((Graphics2D) null, rectangle0, rectangle0, plotRenderingInfo0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CrosshairState crosshairState0 = new CrosshairState();
      boolean boolean0 = combinedDomainXYPlot0.render((Graphics2D) null, (Rectangle2D) null, 6, plotRenderingInfo0, crosshairState0);
      assertFalse(boolean0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset((-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -4 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("CategoryLabelWidthType.RANGE", stringArray0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, symbolAxis0, symbolAxis0, xYSplineAndShapeRenderer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'location' for index 0 not permitted.", symbolAxis0.DEFAULT_TICK_LABEL_FONT, categoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 193);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<StackedXYAreaRenderer> vector0 = new Vector<StackedXYAreaRenderer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 10);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      Rectangle rectangle0 = jTable0.getCellRect((-115), 2179, false);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.drawDomainMarkers(graphics2D0, rectangle0, 0, layer0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.getDomainAxisForDataset(1570);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1570 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset((-2004));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -2004 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("CategoryLabelWidthType.RANGE", stringArray0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, symbolAxis0, symbolAxis0, xYSplineAndShapeRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.getRangeAxisForDataset(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 10 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("XP'S\"@S(>Y;VXQR");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Vector<DefaultKeyedValuesDataset> vector0 = new Vector<DefaultKeyedValuesDataset>();
      combinedRangeXYPlot0.drawDomainGridlines((Graphics2D) null, rectangle0, vector0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("XP'S\"@S(>Y;VXQR");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Vector<DefaultKeyedValuesDataset> vector0 = new Vector<DefaultKeyedValuesDataset>();
      combinedRangeXYPlot0.drawRangeGridlines((Graphics2D) null, rectangle0, vector0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      MockDate mockDate0 = new MockDate((-1), (-1085), (-703), (-703), (-1827));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      PeriodAxis periodAxis0 = new PeriodAxis("Index ", fixedMillisecond0, fixedMillisecond0, zoneInfo0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, periodAxis0, periodAxis0, xYSplineAndShapeRenderer0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      ArrayList<DeviationRenderer> arrayList0 = new ArrayList<DeviationRenderer>(2095);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      arrayList0.add(deviationRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.drawRangeGridlines((Graphics2D) null, rectangle0, arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.renderer.xy.DeviationRenderer cannot be cast to org.jfree.chart.axis.ValueTick
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("CategoryLabelWidthType.RANGE", stringArray0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, symbolAxis0, symbolAxis0, xYSplineAndShapeRenderer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'location' for index 0 not permitted.", symbolAxis0.DEFAULT_TICK_LABEL_FONT, categoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 193);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<StackedXYAreaRenderer> vector0 = new Vector<StackedXYAreaRenderer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 10);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      Rectangle rectangle0 = jTable0.getCellRect((-115), 2179, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.drawAnnotations(graphics2D0, rectangle0, plotRenderingInfo0);
      assertFalse(xYPlot0.isSubplot());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(500.0, 0, 1343.8280000802063, 1.0F, xYPlot0.DEFAULT_OUTLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0, true);
      // Undeclared exception!
      try { 
        xYPlot0.drawAnnotations((Graphics2D) null, rectangle0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(889.101302);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 5055, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.drawDomainMarkers(graphics2D0, rectangle2D_Float0, 1, layer0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("CategoryLabelWidthType.RANGE", stringArray0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, symbolAxis0, symbolAxis0, xYSplineAndShapeRenderer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'location' for index 0 not permitted.", symbolAxis0.DEFAULT_TICK_LABEL_FONT, categoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 193);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<StackedXYAreaRenderer> vector0 = new Vector<StackedXYAreaRenderer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 10);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      Rectangle rectangle0 = jTable0.getCellRect((-115), 2179, false);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.drawRangeMarkers(graphics2D0, rectangle0, 0, layer0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      Rectangle2D rectangle2D0 = xYPlot0.DEFAULT_INSETS.createInsetRectangle((Rectangle2D) rectangle0);
      xYPlot0.drawRangeMarkers((Graphics2D) null, rectangle2D0, 0, layer0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("d$s(fbBTj`");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.getDomainMarkers(500, (Layer) null);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      ValueMarker valueMarker0 = new ValueMarker(0.05);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker(500, (Marker) valueMarker0, layer0, true);
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(500, layer0);
      assertNotNull(collection0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getRangeMarkers(82, layer0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("CategoryLabelWidthType.RANGE", stringArray0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, symbolAxis0, symbolAxis0, xYSplineAndShapeRenderer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'location' for index 0 not permitted.", symbolAxis0.DEFAULT_TICK_LABEL_FONT, categoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 193);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Vector<StackedXYAreaRenderer> vector0 = new Vector<StackedXYAreaRenderer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 10);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      Rectangle rectangle0 = jTable0.getCellRect((-115), 2179, false);
      xYPlot0.drawHorizontalLine(sunGraphics2D0, rectangle0, Double.POSITIVE_INFINITY, xYSplineAndShapeRenderer0.DEFAULT_OUTLINE_STROKE, symbolAxis0.DEFAULT_GRID_BAND_PAINT);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      BufferedImage bufferedImage0 = new BufferedImage(500, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      DateAxis dateAxis0 = new DateAxis("k,V&`LZ|WUK");
      xYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D_Float0, plotOrientation0, (-1918.79666315), dateAxis0, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE, (Paint) null);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 4, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      JTable jTable0 = new JTable(906, 2);
      Rectangle rectangle0 = jTable0.getCellRect(2, 1227, true);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateAxis dateAxis0 = new DateAxis((String) null, zoneInfo0);
      combinedRangeXYPlot0.drawDomainCrosshair(sunGraphics2D0, rectangle0, plotOrientation0, 1, dateAxis0, dateAxis0.DEFAULT_TICK_MARK_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      BufferedImage bufferedImage0 = new BufferedImage(500, 10, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      xYPlot0.drawVerticalLine(sunGraphics2D0, rectangle2D_Float0, (-826.08580833), numberAxis3D0.DEFAULT_TICK_MARK_STROKE, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(255, sunGraphics2D0.pixel);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      BufferedImage bufferedImage0 = new BufferedImage(500, 10, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      xYPlot0.drawVerticalLine(sunGraphics2D0, rectangle2D_Float0, 0.05, numberAxis3D0.DEFAULT_TICK_MARK_STROKE, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals((-16777216), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.pixel);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("CategoryLabelWidthType.RANGE", stringArray0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, symbolAxis0, symbolAxis0, xYSplineAndShapeRenderer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'location' for index 0 not permitted.", symbolAxis0.DEFAULT_TICK_LABEL_FONT, categoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 193);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Vector<StackedXYAreaRenderer> vector0 = new Vector<StackedXYAreaRenderer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 10);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      Rectangle rectangle0 = jTable0.getCellRect((-115), 2179, false);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      xYPlot0.drawRangeCrosshair(sunGraphics2D0, rectangle0, plotOrientation0, 400.0, symbolAxis0, symbolAxis0.DEFAULT_AXIS_LINE_STROKE, xYSplineAndShapeRenderer0.DEFAULT_PAINT);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals((-1), sunGraphics2D0.pixel);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("CategoryLabelWidthType.RANGE", stringArray0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, symbolAxis0, symbolAxis0, xYSplineAndShapeRenderer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'location' for index 0 not permitted.", symbolAxis0.DEFAULT_TICK_LABEL_FONT, categoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 193);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Vector<StackedXYAreaRenderer> vector0 = new Vector<StackedXYAreaRenderer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 10);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      Rectangle rectangle0 = jTable0.getCellRect((-115), 2179, false);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      ModuloAxis moduloAxis0 = new ModuloAxis("}Zk", symbolAxis0.DEFAULT_RANGE);
      xYPlot0.drawRangeCrosshair(sunGraphics2D0, rectangle0, plotOrientation0, 0, moduloAxis0, moduloAxis0.DEFAULT_TICK_MARK_STROKE, categoryPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertEquals((-16776961), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.handleClick(10, 15, plotRenderingInfo0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("4I@_>");
      xYPlot0.setDomainAxis(46, (ValueAxis) logarithmicAxis0, false);
      assertEquals(47, xYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[7];
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 20.0, "");
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      xYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(7, xYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("zXP'S\"/@S(>Y;VX7QR");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setDomainCrosshairVisible(false);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("XP'S\"@S(>Y;VXQR");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setDomainCrosshairVisible(true);
      combinedRangeXYPlot0.setDomainCrosshairValue(4289.96723, true);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(false);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(569.0032272, "");
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      xYPlot0.setDomainCrosshairStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = DebugGraphics.flashColor();
      xYPlot0.setDomainCrosshairPaint(color0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairVisible(false);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairVisible(true);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairPaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle0, rectangleAnchor0);
      combinedDomainXYPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, point2D0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Size2D size2D0 = new Size2D();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 3283.0, 400.0, rectangleAnchor0);
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D0, rectangleAnchor0);
      combinedDomainXYPlot0.zoomDomainAxes(0.025, plotRenderingInfo0, point2D0, true);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1, 3325, 1, 211, 10, 3325, false, true, true, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float(10.0F, (-789.6F));
      combinedDomainXYPlot0.zoomDomainAxes(361.94, 361.94, plotRenderingInfo0, (Point2D) point2D_Float0);
      assertTrue(chartPanel0.getRefreshBuffer());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(569.0032272, "");
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      Point point0 = chartPanel0.getLocation((Point) null);
      xYPlot0.zoomRangeAxes((-1665.8973056675), plotRenderingInfo0, (Point2D) point0, true);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(569.0032272, "");
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, true);
      Point point0 = chartPanel0.getLocation((Point) null);
      xYPlot0.zoomRangeAxes((-1665.8973056675), plotRenderingInfo0, (Point2D) point0, false);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle0, rectangleAnchor0);
      xYPlot0.zoomRangeAxes(0.0, (double) 10, plotRenderingInfo0, point2D0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.zoomRangeAxes((double) 0, (double) 500, plotRenderingInfo0, (Point2D) null);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      int int0 = xYPlot0.getSeriesCount();
      assertEquals(0, int0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      NumberAxis numberAxis0 = new NumberAxis("");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0);
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, numberAxis0, numberAxis0, cyclicXYItemRenderer0);
      int int0 = xYPlot0.getSeriesCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      xYPlot0.getLegendItems();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      boolean boolean0 = xYPlot0.equals(xYSeriesCollection0);
      assertFalse(boolean0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker((-743.165926), xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-1009), (Marker) valueMarker0, layer0, true);
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertTrue(xYPlot1.equals((Object)xYPlot0));
      
      xYPlot1.clearDomainMarkers();
      assertFalse(xYPlot1.equals((Object)xYPlot0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker((-743.165926), xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-1009), (Marker) valueMarker0, layer0, true);
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      xYPlot1.setRangeCrosshairLockedOnData(false);
      xYPlot1.clearDomainMarkers();
      assertFalse(xYPlot1.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("CategoryLabelWidthType.RANGE", stringArray0);
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, symbolAxis0, symbolAxis0, xYSplineAndShapeRenderer0);
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
  }
}
