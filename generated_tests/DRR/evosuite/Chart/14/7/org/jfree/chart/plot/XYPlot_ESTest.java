/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 25 09:35:28 GMT 2019
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.font.FontRenderContext;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JInternalFrame;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;


public class XYPlot_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      double double0 = combinedRangeXYPlot0.getDomainCrosshairValue();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, double0, 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(0.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0, layer0);
      assertFalse(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("CIR>;5[:{{\u0007");
      xYPlot0.setRangeAxis(485, (ValueAxis) periodAxis0);
      assertEquals(486, xYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation();
      assertNotNull(axisLocation0);
      
      xYPlot0.setRangeAxisLocation(500, axisLocation0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Stroke stroke0 = statisticalBarRenderer0.getErrorIndicatorStroke();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, stroke0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addRangeMarker(4, (Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.clearRangeMarkers();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0E-8);
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.clearDomainAxes();
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("/(M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("/(M", 10, (-2365.0116));
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYTextAnnotation0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(boolean0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset((byte)13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 13 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = (Color)combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      assertEquals(0, color0.getRed());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(true);
      assertTrue(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(basicStroke0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.getSeriesRenderingOrder();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("/(M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainCrosshairValue((-1010.12548));
      assertEquals((-1010.12548), xYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      boolean boolean0 = xYPlot0.isRangeCrosshairLockedOnData();
      assertTrue(boolean0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      // Undeclared exception!
      try { 
        xYPlot0.setDomainAxisLocation((-5210), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 9, 3);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Year year0 = new Year();
      PeriodAxis periodAxis0 = new PeriodAxis("", year0, year0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, periodAxis0, periodAxis0, yIntervalRenderer0);
      xYPlot0.getRangeAxisCount();
      assertEquals(8.0, periodAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(800);
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker((Marker) valueMarker0);
      assertFalse(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getAnnotations();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainGridlineStroke();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(basicStroke0);
      assertEquals(0, basicStroke0.getEndCap());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(true);
      assertTrue(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      combinedDomainXYPlot0.setDataset((XYDataset) defaultTableXYDataset0);
      int int0 = combinedDomainXYPlot0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3, 3);
      String[] stringArray0 = new String[9];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(2, 2);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("Null 'annotation' argument.", numberFormat0, dateFormat0);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(500, standardXYToolTipGenerator0, standardXYURLGenerator0);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, symbolAxis0, symbolAxis0, standardXYItemRenderer0);
      xYPlot0.setRangeCrosshairValue(4.0);
      assertEquals(4.0, xYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearAnnotations();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = (Color)combinedRangeXYPlot0.getRangeCrosshairPaint();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, true, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      xYPlot0.drawQuadrants((Graphics2D) null, rectangle0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getDomainZeroBaselineStroke();
      assertEquals(0, basicStroke0.getLineJoin());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      xYPlot0.getIndexOf(xYLine3DRenderer0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      candlestickRenderer0.removeAnnotations();
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRenderer((XYItemRenderer) null);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.setFixedLegendItems(legendItemCollection0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = (Color)combinedRangeXYPlot0.getRangeGridlinePaint();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(255, color0.getGreen());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisCount();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, true, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      Vector<LogarithmicAxis> vector0 = new Vector<LogarithmicAxis>();
      xYPlot0.drawDomainGridlines((Graphics2D) null, rectangle0, vector0);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.getRangeCrosshairValue();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainMarkers((Layer) null);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      Color color0 = (Color)combinedDomainXYPlot0.getDomainCrosshairPaint();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals((-16776961), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getRangeCrosshairStroke();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedDomainXYPlot0.getQuadrantOrigin();
      combinedDomainXYPlot0.zoomDomainAxes(106.0, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = combinedDomainXYPlot0.getSeriesCount();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getPlotType();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      boolean boolean0 = xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(boolean0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(" !&scp|0b`PD");
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3583, 10, (-325.7046127572293), 0.0, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisSpace axisSpace0 = subCategoryAxis0.reserveSpace(graphics2D0, combinedDomainXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = combinedDomainXYPlot0.getWeight();
      assertEquals(1, int0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      boolean boolean0 = xYPlot0.isRangeGridlinesVisible();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = (Color)XYLine3DRenderer.DEFAULT_WALL_PAINT;
      combinedRangeXYPlot0.setRangeTickBandPaint(color0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("j>k[W]G");
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, false);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, logarithmicAxis0, logarithmicAxis0, xYLineAndShapeRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.addAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      boolean boolean0 = combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
      assertTrue(boolean0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomRangeAxes(1546.133228232123, plotRenderingInfo0, (Point2D) null);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("o");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setDomainTickBandPaint(periodAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("dsDie%88:.Ad13", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(360, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(logAxis0.DEFAULT_TICK_LABEL_PAINT, jFreeChart0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement((HorizontalAlignment) null, verticalAlignment0, 2.0F, 0.5F);
      FlowArrangement flowArrangement0 = new FlowArrangement();
      LegendTitle legendTitle0 = new LegendTitle(waterfallBarRenderer0, columnArrangement0, flowArrangement0);
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      ArrayList<CandlestickRenderer> arrayList0 = new ArrayList<CandlestickRenderer>();
      combinedRangeXYPlot0.drawRangeTickBands(graphics2D0, rectangle2D0, arrayList0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, (ValueAxis) null, (ValueAxis) null, (XYItemRenderer) null);
      // Undeclared exception!
      try { 
        xYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E-7, "Null 'subplot' argument.");
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(500);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, stackedXYAreaRenderer0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      xYPlot0.setOrientation(plotOrientation0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setAxisOffset(combinedDomainXYPlot0.DEFAULT_INSETS);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.data.gantt.TaskSeriesCollection");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      assertEquals(2, combinedRangeXYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearDomainAxes();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, (ValueAxis) null, (ValueAxis) null, (XYItemRenderer) null);
      xYPlot0.getDomainAxisEdge(54);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogAxis logAxis0 = new LogAxis();
      xYPlot0.setDomainAxis((ValueAxis) logAxis0);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart("", periodAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(834, 4, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      RescaleOp rescaleOp0 = new RescaleOp(0.3F, 5.188128F, (RenderingHints) null);
      Rectangle rectangle0 = (Rectangle)rescaleOp0.getBounds2D(bufferedImage0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.drawAxes(sunGraphics2D0, rectangle0, rectangle0, plotRenderingInfo0);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertEquals(1, xYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setDomainAxisLocation(0, (AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

////  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("pO@/S'9e5.E7dy9hK");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      // Undeclared exception!
      combinedRangeXYPlot0.add((XYPlot) combinedRangeXYPlot0, 10);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis();
      assertNotNull(valueAxis0);
      
      combinedDomainXYPlot0.setRangeAxis(valueAxis0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis("");
      combinedRangeXYPlot0.setRangeAxis(0, (ValueAxis) dateAxis0, true);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeAxes();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeAxes();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

////  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      xYPlot0.setRangeAxis(834, (ValueAxis) periodAxis0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart("", periodAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(834, 4, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RescaleOp rescaleOp0 = new RescaleOp(0.3F, 5.188128F, (RenderingHints) null);
      Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        xYPlot0.drawAxes(graphics2D0, rectangle2D0, rectangle2D0, plotRenderingInfo0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      xYPlot0.setDataset(0, (XYDataset) timeSeriesCollection0);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDataset(0, (XYDataset) null);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      int int0 = combinedDomainXYPlot0.indexOf(defaultXYDataset0);
      assertEquals((-1), int0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 9, 3);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Year year0 = new Year();
      PeriodAxis periodAxis0 = new PeriodAxis("", year0, year0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, periodAxis0, periodAxis0, yIntervalRenderer0);
      int int0 = xYPlot0.indexOf(matrixSeriesCollection0);
      assertEquals(8.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      xYPlot0.setRenderer(0, (XYItemRenderer) candlestickRenderer0, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[7];
      xYPlot0.setRenderers(xYItemRendererArray0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = xYPlot0.getDatasetRenderingOrder();
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MatrixSeries matrixSeries0 = new MatrixSeries("S", 9, 3);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      combinedDomainXYPlot0.getRendererForDataset(matrixSeriesCollection0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, numberAxis0, numberAxis0, (XYItemRenderer) null);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainGridlinesVisible(true);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      xYPlot0.setDomainGridlinesVisible(false);
      assertFalse(xYPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      combinedRangeXYPlot0.setDomainGridlineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.setDomainGridlinePaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeGridlinesVisible(true);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.setRangeGridlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("6XYDDOz.P+v%X&fsxx", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      Paint paint0 = grayPaintScale0.getPaint(10);
      combinedDomainXYPlot0.setRangeGridlinePaint(paint0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getValuePaint();
      xYPlot0.setDomainZeroBaselinePaint(paint0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = Color.blue;
      xYPlot0.setRangeZeroBaselinePaint(color0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point point0 = new Point(10, 556);
      combinedDomainXYPlot0.setQuadrantOrigin(point0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3, 3);
      String[] stringArray0 = new String[9];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(2, 2);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("Null 'annotation' argument.", numberFormat0, dateFormat0);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(500, standardXYToolTipGenerator0, standardXYURLGenerator0);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, symbolAxis0, symbolAxis0, standardXYItemRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.getQuadrantPaint((-1398));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-1398) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getQuadrantPaint(0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("EX");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getQuadrantPaint(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (500) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      SystemColor systemColor0 = SystemColor.activeCaption;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantPaint((-1501), systemColor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-1501) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)Axis.DEFAULT_AXIS_LABEL_PAINT;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint(18, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (18) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1770.2069793, 1298.6015625, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setQuadrantPaint(0, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      ValueMarker valueMarker0 = new ValueMarker((-2966.33));
      combinedDomainXYPlot0.addDomainMarker(2695, (Marker) valueMarker0, layer0, false);
      combinedDomainXYPlot0.clearDomainMarkers();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearDomainMarkers(2724);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        xYPlot0.addDomainMarker((-1), (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
      combinedRangeXYPlot0.clearRangeMarkers();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("pB");
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, dateAxis0, dateAxis0, xYSplineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F, dateAxis0.DEFAULT_TICK_LABEL_PAINT, xYSplineAndShapeRenderer0.DEFAULT_OUTLINE_STROKE, xYPlot0.DEFAULT_BACKGROUND_PAINT, dateAxis0.DEFAULT_AXIS_LINE_STROKE, 1.0F);
      xYPlot0.addRangeMarker((Marker) valueMarker0, (Layer) null);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("/(M");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      ValueMarker valueMarker0 = new ValueMarker(20000.0, numberAxis0.DEFAULT_AXIS_LABEL_PAINT, numberAxis0.DEFAULT_AXIS_LINE_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, 0.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addRangeMarker(500, (Marker) valueMarker0, layer0, false);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("pO@/S'9e5.E7dy9hK");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      IntervalMarker intervalMarker0 = new IntervalMarker(0, (-2594.92));
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker(420, (Marker) intervalMarker0, layer0);
      assertFalse(boolean0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 0.0, 3.141592653589793, 0.5F, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("qTYoZM", (-1671.647), 2.0F);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0, true);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(806.0, "/5VXBJPd*jWIsznF;-");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null, false, false, false, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      combinedRangeXYPlot0.calculateDomainAxisSpace((Graphics2D) null, rectangle0, (AxisSpace) null);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DateAxis dateAxis0 = new DateAxis();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, dateAxis0, dateAxis0, xYBubbleRenderer0);
      Rectangle rectangle0 = new Rectangle();
      Rectangle2D rectangle2D0 = dateAxis0.DEFAULT_TICK_LABEL_INSETS.createInsetRectangle((Rectangle2D) rectangle0);
      // Undeclared exception!
      try { 
        xYPlot0.calculateAxisSpace((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1770.2069793, 1298.6015625, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (-2460.5496217), (double) 1.0F, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, (Rectangle2D) null, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Eric Thomas", xYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1343, 312);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, true, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      Vector<LogarithmicAxis> vector0 = new Vector<LogarithmicAxis>();
      xYPlot0.drawDomainTickBands((Graphics2D) null, rectangle0, vector0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, false, true, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      CrosshairState crosshairState0 = new CrosshairState(false);
      boolean boolean0 = combinedDomainXYPlot0.render((Graphics2D) null, rectangle0, (-1), (PlotRenderingInfo) null, crosshairState0);
      assertFalse(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.getDomainAxisForDataset((-2128));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -2128 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, true, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.drawDomainMarkers((Graphics2D) null, rectangle0, 0, layer0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.getRangeAxisForDataset((-1808));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -1808 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisForDataset(0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset(360);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 360 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(10, (OHLCDataItem[]) null);
      combinedDomainXYPlot0.setDataset(3, (XYDataset) defaultOHLCDataset0);
      combinedDomainXYPlot0.getRangeAxisForDataset(3);
      assertEquals(4, combinedDomainXYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LinkedList<XYStepRenderer> linkedList0 = new LinkedList<XYStepRenderer>();
      xYPlot0.drawDomainGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1770.2069793, 1298.6015625, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 834, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JTableHeader jTableHeader0 = new JTableHeader((TableColumnModel) null);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(10);
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      combinedRangeXYPlot0.drawRangeGridlines(graphics2D0, rectangle0, linkedList0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      combinedDomainXYPlot0.drawZeroDomainBaseline((Graphics2D) null, rectangle0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, (ValueAxis) null, (ValueAxis) null, (XYItemRenderer) null);
      Font font0 = MeterPlot.DEFAULT_VALUE_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("tIDMpU]')0!ao", font0, xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(54, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      xYPlot0.drawZeroRangeBaseline(graphics2D0, (Rectangle2D) null);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, false, true, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      combinedDomainXYPlot0.drawAnnotations((Graphics2D) null, rectangle0, (PlotRenderingInfo) null);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, true, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.drawDomainMarkers((Graphics2D) null, rectangle0, 248, layer0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, true, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.drawRangeMarkers((Graphics2D) null, rectangle0, 825, layer0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(32, layer0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.data.gantt.TaskSeriesCollection");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeMarkers((Layer) null);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawHorizontalLine((Graphics2D) null, (Rectangle2D) null, 2176, categoryPlot0.DEFAULT_CROSSHAIR_STROKE, clusteredXYBarRenderer0.DEFAULT_OUTLINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, true, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      xYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 1990.0, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, true, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      // Undeclared exception!
      try { 
        xYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 0.05, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, thermometerPlot0.DEFAULT_OUTLINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1770.2069793, 1298.6015625, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 834, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      JTableHeader jTableHeader0 = new JTableHeader((TableColumnModel) null);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(10);
      BasicStroke basicStroke0 = (BasicStroke)PolarPlot.DEFAULT_GRIDLINE_STROKE;
      combinedRangeXYPlot0.drawDomainCrosshair(sunGraphics2D0, rectangle0, (PlotOrientation) null, 0, cyclicNumberAxis0, basicStroke0, sunGraphics2D0.foregroundColor);
      assertEquals(1, sunGraphics2D0.strokeState);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(997, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      FontRenderContext fontRenderContext0 = new FontRenderContext(((SunGraphics2D) graphics2D0).transform, false, false);
      Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getStringBounds("Null 'offset' argument.", fontRenderContext0);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Stroke stroke0 = statisticalBarRenderer0.getErrorIndicatorStroke();
      // Undeclared exception!
      try { 
        xYPlot0.drawVerticalLine(graphics2D0, rectangle2D0, 997, stroke0, statisticalBarRenderer0.DEFAULT_VALUE_LABEL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, false, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      xYPlot0.drawVerticalLine((Graphics2D) null, rectangle0, (-3692.716067), cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, candlestickRenderer0.DEFAULT_OUTLINE_PAINT);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, false, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle0, 1.0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int[] intArray0 = new int[4];
      Polygon polygon0 = new Polygon(intArray0, intArray0, 0);
      Rectangle rectangle0 = polygon0.getBounds();
      BufferedImage bufferedImage0 = new BufferedImage(1624, 32, 1);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 2500000.0);
      combinedDomainXYPlot0.drawRangeCrosshair(sunGraphics2D0, rectangle0, plotOrientation0, (-19), cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals((-1), sunGraphics2D0.eargb);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int[] intArray0 = new int[4];
      Polygon polygon0 = new Polygon(intArray0, intArray0, 0);
      Rectangle rectangle0 = polygon0.getBounds();
      BufferedImage bufferedImage0 = new BufferedImage(1624, 32, 1);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 2500000.0);
      combinedDomainXYPlot0.drawRangeCrosshair(sunGraphics2D0, rectangle0, plotOrientation0, 0, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals((-16777216), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int[] intArray0 = new int[4];
      Polygon polygon0 = new Polygon(intArray0, intArray0, 0);
      Rectangle rectangle0 = polygon0.getBounds();
      BufferedImage bufferedImage0 = new BufferedImage(1624, 32, 1);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1);
      combinedDomainXYPlot0.drawRangeCrosshair(sunGraphics2D0, rectangle0, plotOrientation0, 0, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals((-16777216), sunGraphics2D0.eargb);
      assertEquals((-16777216), sunGraphics2D0.pixel);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Eric Thomas", xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.handleClick((-1), (-2351), chartRenderingInfo0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Null 'offset' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.setDomainCrosshairVisible(false);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairVisible(true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      combinedDomainXYPlot0.setDomainCrosshairStroke(statisticalBarRenderer0.DEFAULT_STROKE);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("CIR>;5[:{{\u0007");
      xYPlot0.setDomainCrosshairPaint(periodAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairVisible(false);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis("l#g{rmk+AVAv#|Wzc", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      combinedDomainXYPlot0.setRangeCrosshairVisible(true);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("^-!$*E^x>G6Pce@}");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(true);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(false);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeCrosshairStroke(candlestickRenderer0.DEFAULT_STROKE);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1770.2069793, 1298.6015625, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      Color color0 = (Color)WaferMapPlot.DEFAULT_GRIDLINE_PAINT;
      combinedRangeXYPlot0.setRangeCrosshairPaint(color0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      xYPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, (Point2D) point2D_Float0, true);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = chartPanel0.getLocation();
      combinedDomainXYPlot0.zoomDomainAxes((double) 680, plotRenderingInfo0, (Point2D) point0, true);
      assertTrue(chartPanel0.getRefreshBuffer());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      combinedDomainXYPlot0.zoomDomainAxes(1.25, (double) 10, plotRenderingInfo0, (Point2D) null);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      xYPlot0.zoomDomainAxes(1.25, (double) 10, plotRenderingInfo0, (Point2D) null);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.zoomRangeAxes(624.643221298491, plotRenderingInfo0, (Point2D) null, true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(chartPanel0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      xYPlot0.zoomRangeAxes(1.0E-8, plotRenderingInfo0, (Point2D) point2D_Float0, true);
      assertTrue(chartPanel0.getRefreshBuffer());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1770.2069793, 1298.6015625, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomRangeAxes((-2842.628), 4.0, plotRenderingInfo0, (Point2D) null);
      assertEquals(5311.6209379, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.zoomRangeAxes((-1566.5985924), 10.0, (PlotRenderingInfo) null, (Point2D) null);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Eric Thomas", xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      xYPlot0.setDataset(8, (XYDataset) defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(106, 1343, 1, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer(0);
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, symbolAxis0, symbolAxis0, xYBubbleRenderer0);
      xYPlot0.getLegendItems();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Week week0 = new Week(3, 0);
      PeriodAxis periodAxis0 = new PeriodAxis("i}_Q", week0, week0, week0.DEFAULT_TIME_ZONE);
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, periodAxis0, periodAxis0, xYStepAreaRenderer0);
      boolean boolean0 = periodAxis0.hasListener(xYPlot0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      
      combinedDomainXYPlot0.clearDomainAxes();
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, candlestickRenderer0);
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.equals((Object)xYPlot0));
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
  }
}
