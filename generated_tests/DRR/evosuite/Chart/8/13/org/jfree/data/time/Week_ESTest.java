/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 19:12:25 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;


public class Week_ESTest {

//  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 76, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("8`-WlnykAA(O\"e");
      Week week0 = new Week(mockDate0, timeZone0);
      week0.hashCode();
      assertEquals((-2009404800001L), week0.getLastMillisecond());
      assertEquals(101036L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2550), (-2550), 0, 0, 0, 0);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getLastMillisecond();
      assertEquals(27, week0.getWeek());
      assertEquals((-89385984000001L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 7, 2014");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

//  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Week week0 = new Week(mockDate0);
      int int0 = week0.getYearValue();
      assertEquals(0L, week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, int0);
  }

//  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      String string0 = week0.toString();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("Week 7, 2014", string0);
  }

//  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 76, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("8`-WlnykAA(O\"e");
      Week week0 = new Week(mockDate0, timeZone0);
      long long0 = week0.getSerialIndex();
      assertEquals(101036L, long0);
      assertEquals((-2009404800001L), week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week();
      long long0 = week0.getFirstMillisecond();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, long0);
      assertEquals(106749L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week(0, 0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.previous();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1L, regularTimePeriod0.getSerialIndex());
      assertNull(regularTimePeriod1);
      assertEquals(0L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Year year0 = new Year(2684);
      Week week0 = new Week(2684, year0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNotNull(regularTimePeriod0);
      
      boolean boolean0 = ((Week) regularTimePeriod0).equals(week0);
      assertEquals(142306L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(142376L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(0, year0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(931, 931, 931);
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, timeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

//  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2012), "'RBVplMU");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(104409L, regularTimePeriod0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
  }

//  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(106748L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week(52, 52);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2809L, regularTimePeriod0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week(366, 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
      assertEquals(530057L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Week week0 = new Week();
      Calendar calendar0 = MockCalendar.getInstance();
      boolean boolean0 = week0.equals(calendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(106749L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Year year0 = new Year(2684);
      Week week0 = new Week(2684, year0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      MockDate mockDate0 = new MockDate(2684);
      Week week1 = new Week(mockDate0);
      ((Week) regularTimePeriod0).equals(week1);
      assertEquals(142306L, regularTimePeriod0.getSerialIndex());
      assertEquals(124, week0.getWeek());
      assertEquals(104411L, week1.getSerialIndex());
      assertEquals(2683L, week1.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 12, (-2674));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Week week0 = new Week(date0);
      Week week1 = new Week(date0);
      boolean boolean0 = week0.equals(week1);
      assertTrue(boolean0);
      assertEquals(83886L, week1.getSerialIndex());
      assertEquals((-12219292800001L), week1.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2012), "'RBVplMU");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      int int0 = week0.compareTo(fixedMillisecond0);
      assertEquals(0L, week0.getLastMillisecond());
      assertEquals(0, int0);
      assertEquals(104411L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Week week0 = new Week();
      int int0 = week0.compareTo(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(0, int0);
  }

//  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week();
      MockDate mockDate0 = new MockDate(1, 53, 565, 565, 53);
      Year year0 = new Year(mockDate0);
      Week week1 = new Week(7, year0);
      int int0 = week0.compareTo(week1);
      assertEquals(7, week0.getWeek());
      assertEquals(107, int0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(101078L, week1.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      Week week0 = new Week(mockDate0);
      int int0 = week0.compareTo(instant0);
      assertEquals(1, int0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("'RBVplMU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Can't evaluate the year.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("34nye#@k`--vy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }
}
