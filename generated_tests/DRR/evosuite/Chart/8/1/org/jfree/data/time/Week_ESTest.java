/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 18:46:32 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class Week_ESTest {

//  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = new Week(mockDate0, zoneInfo0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
  }

//  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week();
      week0.hashCode();
      assertEquals(106749L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Week week0 = new Week();
      int int0 = week0.compareTo(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
      assertEquals(106749L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2440), (-2440), (-2440));
      Week week0 = new Week(mockDate0);
      long long0 = week0.getMiddleMillisecond();
      assertEquals((-85836067200001L), week0.getLastMillisecond());
      assertEquals(52, week0.getWeek());
      assertEquals((-85836067200000L), long0);
  }

//  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week();
      week0.getYearValue();
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week();
      String string0 = week0.toString();
      assertEquals("Week 7, 2014", string0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week();
      long long0 = week0.getSerialIndex();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, long0);
  }

//  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week(479, 61);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(3201L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0, timeZone0);
      Week week0 = new Week(1950, year0);
      assertEquals((-98), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(0, year0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53L);
      Locale locale0 = Locale.GERMAN;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 947);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, zoneInfo0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

//  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(104409L, regularTimePeriod0.getSerialIndex());
      assertNotNull(regularTimePeriod0);
  }

//  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-338L));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALIAN;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-339L), week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(24, 24, 0, 24, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.UK;
      Week week0 = new Week(mockDate0, zoneInfo0, locale0);
      assertEquals((-1388534400001L), week0.getLastMillisecond());
      assertEquals(53, week0.getWeek());
  }

//  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week(3663, 835);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNotNull(regularTimePeriod0);
      
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.previous();
      assertEquals(44309L, regularTimePeriod0.getSerialIndex());
      assertNull(regularTimePeriod1);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2440), (-2440), (-2440));
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(39909L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Week week0 = new Week(10040, 10040);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
      assertEquals(532176L, week0.getSerialIndex());
  }

//  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Week week0 = new Week();
      boolean boolean0 = week0.equals(locale0);
      assertFalse(boolean0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Week week0 = new Week(3663, 835);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      boolean boolean0 = ((Week) regularTimePeriod0).equals(week0);
      assertEquals(44333L, regularTimePeriod0.getSerialIndex());
      assertFalse(boolean0);
      assertEquals(44334L, week0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Week week0 = new Week(3663, 835);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      RegularTimePeriod regularTimePeriod1 = week0.next();
      boolean boolean0 = ((Week) regularTimePeriod1).equals(regularTimePeriod0);
      assertEquals(44309L, regularTimePeriod1.getSerialIndex());
      assertTrue(boolean0);
      assertEquals(1392409281319L, regularTimePeriod1.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week(3636, 3636);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNotNull(regularTimePeriod0);
      
      Week week1 = new Week(1, 3636);
      boolean boolean0 = week1.equals(regularTimePeriod0);
      assertFalse(boolean0);
      assertEquals(192762L, regularTimePeriod0.getSerialIndex());
      assertFalse(regularTimePeriod0.equals((Object)week1));
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }

//  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Week week0 = new Week();
      int int0 = week0.compareTo(locale0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, int0);
      assertEquals(7, week0.getWeek());
  }

//  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Week week0 = new Week(479, 61);
      MockDate mockDate0 = new MockDate(0L);
      Week week1 = new Week(mockDate0);
      int int0 = week0.compareTo(week1);
      assertEquals(3200L, week0.getSerialIndex());
      assertEquals((-1L), week1.getLastMillisecond());
      assertEquals((-1909), int0);
      assertEquals(1, week1.getWeek());
  }

//  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      int int0 = week0.compareTo(fixedMillisecond0);
      assertEquals(7, week0.getWeek());
      assertEquals(0, int0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 7, 2014");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("YGtH9K|3!Oh>W$[-W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }
}
