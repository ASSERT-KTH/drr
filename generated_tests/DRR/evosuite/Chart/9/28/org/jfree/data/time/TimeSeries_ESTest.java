/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 03:25:26 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;


public class TimeSeries_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(27, 27, 27);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      Long long0 = Long.getLong("Requires start >= 0.", (long) 3037);
      // Undeclared exception!
      try { 
        timeSeries0.update(3037, (Number) long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3037, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), (-2423.72268495));
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      timeSeries0.getItems();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(63, 63, 0, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "Null 'end' argument.");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'item' argument.");
      Second second0 = new Second(date0, timeZone0);
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "", class0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 2419, 2812, 2812, 2812);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(2419, minute0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "gl", "cq/QX!.W{%Uve&'R+ #", class0);
      Day day0 = new Day(mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 564.04, 589.6415561, 266.238660828996, 0.0, (-73.26));
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (-73.26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(27, 27, 27);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.setMaximumItemCount(1);
      TimeSeries timeSeries1 = new TimeSeries(day0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
      assertEquals(1, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-851));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "XDx+1GIaUvr\"C=9", "XDx+1GIaUvr\"C=9", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, 2620.41831707);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-3463L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(407, 407, 0, (-3037), 23, 407);
      Week week0 = new Week(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.getDataItem((RegularTimePeriod) week0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(63, 63, (-2), (-2), 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "Null 'end' argument.");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      timeSeries0.getDataItem((RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 2419, 2812, 2812, 2812);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(2419, minute0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "gl", "cq/QX!.W{%Uve&'R+ #", class0);
      timeSeries0.getTimePeriods();
      assertEquals("cq/QX!.W{%Uve&'R+ #", timeSeries0.getRangeDescription());
      assertEquals("gl", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(391, 391, 0, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "Null 'end' argument.");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 391);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate(391, 391, 0, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "Null 'end' argument.");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 391);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("China");
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 312.9145615831251);
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "(F", "(F", class0);
      Second second0 = new Second();
      timeSeries0.getValue((RegularTimePeriod) second0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("(F", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("(F", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(391, 391, 0, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "Null 'end' argument.");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(63, 63, 0, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "Null 'end' argument.");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 63);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 31-March-1968 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(98, 98, 98, 98, 98, 98);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(98, minute0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "gl", "gl", class0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      Day day0 = new Day();
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 98);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 2419, 2812, 2812, 2812);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(2419, minute0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "gl", "cq/QX!.W{%Uve&'R+ #", class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) minute0, (Number) 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(63, 63, (-2), (-2), 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "Null 'end' argument.");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) day0, (Number) null);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(63, 63, 0, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "Null 'end' argument.");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      assertNull(timeSeriesDataItem0);
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate(407, 407, 0, (-3037), 23, 407);
      Week week0 = new Week(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "XDx+1GIaUvr\"C=9", "XDx+1GIaUvr\"C=9", class0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate(98, 98, 98, 98, 98, 98);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(98, minute0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "gl", "gl", class0);
      Day day0 = new Day();
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
      timeSeries0.setMaximumItemAge(59);
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance(class0, mockDate0, second0.DEFAULT_TIME_ZONE);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 98);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 2419, 2812, 2812, 2812);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(2419, minute0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "gl", "cq/QX!.W{%Uve&'R+ #", class0);
      timeSeries0.removeAgedItems((-1035L), false);
      timeSeries0.removeAgedItems((long) 0, false);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("gl", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("cq/QX!.W{%Uve&'R+ #", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(98, 98, 98, 98, 98, 98);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(98, minute0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "gl", "gl", class0);
      Day day0 = new Day();
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
      timeSeries0.removeAgedItems((long) 0, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.clear();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockDate mockDate0 = new MockDate(27, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
      timeSeries0.delete(0, 0);
      assertEquals(0, timeSeries0.getItemCount());
      
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 2419, 2812, 2812, 2812);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(2419, minute0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "gl", "gl", class0);
      Day day0 = new Day(mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
      Month month0 = new Month(mockDate0);
      timeSeries0.delete((RegularTimePeriod) month0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, (Class) null);
      // Undeclared exception!
      try { 
        timeSeries0.delete(59, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Second second0 = new Second();
      Class<Locale.Category> class0 = Locale.Category.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-2056), 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(335, (-2451));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, ")kheLn", (String) null, class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(205, 3320);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(")kheLn", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) minute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'item' argument.");
      Second second0 = new Second(date0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = second0.previous();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) second0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) integer0);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 2419, 2812, 2812, 2812);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(2419, minute0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "gl", "cq/QX!.W{%Uve&'R+ #", class0);
      Instant instant0 = MockInstant.now();
      Day day0 = new Day(mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
      Date date0 = Date.from(instant0);
      Day day1 = new Day(date0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day1, (RegularTimePeriod) day1);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("cq/QX!.W{%Uve&'R+ #", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("gl", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(27, 27, 27);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 27);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), (-2423.72268495));
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries1.setDomainDescription("");
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("", timeSeries1.getDomainDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries1.setRangeDescription("qjRj4dML{DQ");
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("qjRj4dML{DQ", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      timeSeries1.setMaximumItemAge(1L);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate(27, 27, 27);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 27);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, (String) null, (String) null, class0);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, (Class) null);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 2419, 2812, 2812, 2812);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(2419, minute0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "gl", "cq/QX!.W{%Uve&'R+ #", class0);
      Day day0 = new Day(mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
      timeSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("cq/QX!.W{%Uve&'R+ #", timeSeries0.getRangeDescription());
      assertEquals("gl", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 2419, 2812, 2812, 2812);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(2419, minute0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "gl", "cq/QX!.W{%Uve&'R+ #", class0);
      Instant instant0 = MockInstant.now();
      Day day0 = new Day(mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
      Date date0 = Date.from(instant0);
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance(class0, date0, second0.DEFAULT_TIME_ZONE);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, 1288.38093692);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.hashCode();
      assertEquals(2, timeSeries0.getItemCount());
  }
}
